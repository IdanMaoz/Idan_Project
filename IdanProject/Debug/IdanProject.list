
IdanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b160  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800b2f0  0800b2f0  0001b2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f8  0800b8f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f8  0800b8f8  0001b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b900  0800b900  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b900  0800b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b904  0800b904  0001b904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  200001e0  0800bae4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  0800bae4  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6e1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003886  00000000  00000000  0003a8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b5e5  00000000  00000000  00040af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f2e  00000000  00000000  0006c0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010960c  00000000  00000000  0008600b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  0018f668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2d8 	.word	0x0800b2d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b2d8 	.word	0x0800b2d8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <Button_init>:
extern  TIM_HandleTypeDef htim3;



void Button_init(Button* button, ButtonName name, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	72fb      	strb	r3, [r7, #11]
 8000edc:	4613      	mov	r3, r2
 8000ede:	813b      	strh	r3, [r7, #8]
	button->name = name;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	7afa      	ldrb	r2, [r7, #11]
 8000ee4:	701a      	strb	r2, [r3, #0]
	button->gpioPort = gpioPort;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	605a      	str	r2, [r3, #4]
	button->gpioPin = gpioPin;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	893a      	ldrh	r2, [r7, #8]
 8000ef0:	811a      	strh	r2, [r3, #8]
	button->pressTime = 0;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
	button->btState=BUTTON_STATE_NONE;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	741a      	strb	r2, [r3, #16]
	button->waitToSecondPress=0;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
	button->counter=0;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <Button_getState>:


ButtonState  Button_getState(Button* bt)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return bt->btState;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7c1b      	ldrb	r3, [r3, #16]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <Button_changeStateToNone>:

void Button_changeStateToNone(Button *bt)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	bt->btState=BUTTON_STATE_NONE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	741a      	strb	r2, [r3, #16]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <Button_onInterrupt>:

void Button_onInterrupt(Button* button, uint16_t pin)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
	if (pin == button->gpioPin) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	891b      	ldrh	r3, [r3, #8]
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d134      	bne.n	8000fc8 <Button_onInterrupt+0x80>
		if (HAL_GPIO_ReadPin(button->gpioPort, button->gpioPin) == 0) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	891b      	ldrh	r3, [r3, #8]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4610      	mov	r0, r2
 8000f6a:	f003 fb47 	bl	80045fc <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <Button_onInterrupt+0x36>
			button->pressTime = myClock.tickCount;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <Button_onInterrupt+0x88>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60da      	str	r2, [r3, #12]
			}

		}

	}
}
 8000f7c:	e024      	b.n	8000fc8 <Button_onInterrupt+0x80>
			button->counter=0;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
			if (myClock.tickCount - button->pressTime > LONG_PRESS_MS) {
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <Button_onInterrupt+0x88>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f92:	d903      	bls.n	8000f9c <Button_onInterrupt+0x54>
				button->btState=BUTTON_STATE_LONG_PRESS;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	741a      	strb	r2, [r3, #16]
}
 8000f9a:	e015      	b.n	8000fc8 <Button_onInterrupt+0x80>
			else if (button->waitToSecondPress) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00a      	beq.n	8000fba <Button_onInterrupt+0x72>
				MainTimer_unRegister(Button_timerInterrupt, button);
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <Button_onInterrupt+0x8c>)
 8000fa8:	f000 fd80 	bl	8001aac <MainTimer_unRegister>
				button->btState=BUTTON_STATE_DOUBLE_PRESS;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	741a      	strb	r2, [r3, #16]
				button->waitToSecondPress=0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
}
 8000fb8:	e006      	b.n	8000fc8 <Button_onInterrupt+0x80>
				MainTimer_registerCallback(Button_timerInterrupt, button);
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <Button_onInterrupt+0x8c>)
 8000fbe:	f000 fd39 	bl	8001a34 <MainTimer_registerCallback>
				button->waitToSecondPress = 1;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	619a      	str	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000204 	.word	0x20000204
 8000fd4:	08000fd9 	.word	0x08000fd9

08000fd8 <Button_timerInterrupt>:

void Button_timerInterrupt(void* obj)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	Button* button=(Button*)obj;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
	if(button->waitToSecondPress){
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <Button_timerInterrupt+0x3c>
		button->counter++;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	615a      	str	r2, [r3, #20]
		if(button->counter>300){
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ffe:	dd09      	ble.n	8001014 <Button_timerInterrupt+0x3c>
			MainTimer_unRegister(Button_timerInterrupt, button);
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <Button_timerInterrupt+0x44>)
 8001004:	f000 fd52 	bl	8001aac <MainTimer_unRegister>
			button->btState=BUTTON_STATE_PRESS;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	741a      	strb	r2, [r3, #16]
			button->waitToSecondPress=0;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
		}
	}
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08000fd9 	.word	0x08000fd9

08001020 <Buzzer_init>:
		NOTE_1_F, NOTE_1_G, NOTE_1_G, NOTE_1_G};
static const int _lengths[] = {LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_2};
static const int _len=sizeof(_notes)/sizeof(_notes[_index]);

void Buzzer_init(Buzzer * buzzer)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	buzzer->counter=0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	buzzer->maxCounter=1000/_lengths[0];
 800102e:	2304      	movs	r3, #4
 8001030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001034:	fb92 f2f3 	sdiv	r2, r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	605a      	str	r2, [r3, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	721a      	strb	r2, [r3, #8]

}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <Buzzer_interrupt>:


void Buzzer_interrupt(void* obj)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	Buzzer* buzzer=(Buzzer*)obj;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60fb      	str	r3, [r7, #12]
	if(buzzer->bzState !=BUZZER_STATE_ON){
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	7a1b      	ldrb	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d14a      	bne.n	80010fa <Buzzer_interrupt+0xaa>
		return;
	}

	buzzer->counter++;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	601a      	str	r2, [r3, #0]
	if (buzzer->counter < buzzer->maxCounter) {
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	429a      	cmp	r2, r3
 8001078:	db41      	blt.n	80010fe <Buzzer_interrupt+0xae>
		return;
	}
	_reload=(100000/_notes[_index])-1;
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <Buzzer_interrupt+0xbc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a24      	ldr	r2, [pc, #144]	; (8001110 <Buzzer_interrupt+0xc0>)
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	4a23      	ldr	r2, [pc, #140]	; (8001114 <Buzzer_interrupt+0xc4>)
 8001086:	fb92 f3f3 	sdiv	r3, r2, r3
 800108a:	3b01      	subs	r3, #1
 800108c:	4a22      	ldr	r2, [pc, #136]	; (8001118 <Buzzer_interrupt+0xc8>)
 800108e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <Buzzer_interrupt+0xcc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, _reload);
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <Buzzer_interrupt+0xc8>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <Buzzer_interrupt+0xcc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <Buzzer_interrupt+0xc8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <Buzzer_interrupt+0xcc>)
 80010aa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, _reload/2);
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <Buzzer_interrupt+0xc8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <Buzzer_interrupt+0xcc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34

	if(_index==(_len-1)){
 80010be:	230d      	movs	r3, #13
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <Buzzer_interrupt+0xbc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d103      	bne.n	80010d2 <Buzzer_interrupt+0x82>
		_index=0;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <Buzzer_interrupt+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e004      	b.n	80010dc <Buzzer_interrupt+0x8c>
	}
	else{
		_index++;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <Buzzer_interrupt+0xbc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <Buzzer_interrupt+0xbc>)
 80010da:	6013      	str	r3, [r2, #0]
	}

	buzzer->maxCounter=1000/_lengths[_index];
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <Buzzer_interrupt+0xbc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <Buzzer_interrupt+0xd0>)
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ea:	fb92 f2f3 	sdiv	r2, r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	605a      	str	r2, [r3, #4]
	buzzer->counter=0;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e002      	b.n	8001100 <Buzzer_interrupt+0xb0>
		return;
 80010fa:	bf00      	nop
 80010fc:	e000      	b.n	8001100 <Buzzer_interrupt+0xb0>
		return;
 80010fe:	bf00      	nop

}
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200001fc 	.word	0x200001fc
 8001110:	0800b450 	.word	0x0800b450
 8001114:	000186a0 	.word	0x000186a0
 8001118:	20000200 	.word	0x20000200
 800111c:	2000062c 	.word	0x2000062c
 8001120:	0800b484 	.word	0x0800b484

08001124 <Buzzer_changeToOn>:

void Buzzer_changeToOn(Buzzer * buzzer)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_ON;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	721a      	strb	r2, [r3, #8]

}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <Buzzer_changeToOff>:

void Buzzer_changeToOff(Buzzer * buzzer)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	721a      	strb	r2, [r3, #8]

}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <Buzzer_reset>:


void Buzzer_reset()
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	_index=0;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <Buzzer_reset+0x14>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	200001fc 	.word	0x200001fc

08001170 <Buzzer_stop>:

void Buzzer_stop(Buzzer* buzzer)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	Buzzer_changeToOff(buzzer);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffe0 	bl	800113e <Buzzer_changeToOff>
	MainTimer_unRegister(Buzzer_interrupt, buzzer);
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <Buzzer_stop+0x2c>)
 8001182:	f000 fc93 	bl	8001aac <MainTimer_unRegister>
	HAL_TIM_Base_Stop(&htim3);
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <Buzzer_stop+0x30>)
 8001188:	f004 fe7a 	bl	8005e80 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <Buzzer_stop+0x30>)
 8001190:	f005 f86c 	bl	800626c <HAL_TIM_PWM_Stop>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08001051 	.word	0x08001051
 80011a0:	2000062c 	.word	0x2000062c

080011a4 <Buzzer_start>:

void Buzzer_start(Buzzer* buzzer)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	Buzzer_changeToOn(buzzer);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffb9 	bl	8001124 <Buzzer_changeToOn>
	MainTimer_registerCallback(Buzzer_interrupt,buzzer);
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4806      	ldr	r0, [pc, #24]	; (80011d0 <Buzzer_start+0x2c>)
 80011b6:	f000 fc3d 	bl	8001a34 <MainTimer_registerCallback>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <Buzzer_start+0x30>)
 80011be:	f004 ff4f 	bl	8006060 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <Buzzer_start+0x30>)
 80011c4:	f004 fdf4 	bl	8005db0 <HAL_TIM_Base_Start>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08001051 	.word	0x08001051
 80011d4:	2000062c 	.word	0x2000062c

080011d8 <cmdLedOn>:
#include "Buzzer.h"

#include <stdlib.h>

static void cmdLedOn(void* obj, char* params)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	(void)params;
	Led* led = (Led*)obj;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
	Led_On(led);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 fb34 	bl	8001854 <Led_On>

}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <cmdLedOff>:
static void cmdLedOff(void* obj, char* params)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	(void)params;
	Led* led = (Led*)obj;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	60fb      	str	r3, [r7, #12]
	Led_Off(led);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 fb40 	bl	8001888 <Led_Off>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <cmdLedBlink>:

static void cmdLedBlink(void* obj, char* params)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	Led* led = (Led*)obj;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]
	Led_Blink(led, atoi(params));
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f006 fd6d 	bl	8007cfe <atoi>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 fb47 	bl	80018bc <Led_Blink>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <cmdLedBrightness>:
static void cmdLedBrightness(void* obj, char* params)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
	Led* led = (Led*)obj;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60fb      	str	r3, [r7, #12]
	Led_Brightness(led, atoi(params));
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f006 fd5a 	bl	8007cfe <atoi>
 800124a:	4603      	mov	r3, r0
 800124c:	4619      	mov	r1, r3
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 fb54 	bl	80018fc <Led_Brightness>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <cmdBuzzerStart>:

static void cmdBuzzerStart(void* obj, char* params)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	Buzzer* buzzer=(Buzzer*)obj;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]
	Buzzer_start(buzzer);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff ff9a 	bl	80011a4 <Buzzer_start>

}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <cmdBuzzerStop>:
static void cmdBuzzerStop(void* obj, char* params)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	Buzzer* buzzer=(Buzzer*)obj;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]
	Buzzer_stop(buzzer);
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff ff72 	bl	8001170 <Buzzer_stop>
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <Cli_init>:


void Cli_init(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	Communication_register("blueOn", &cmdLedOn, &ledB);
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <Cli_init+0x6c>)
 800129a:	491a      	ldr	r1, [pc, #104]	; (8001304 <Cli_init+0x70>)
 800129c:	481a      	ldr	r0, [pc, #104]	; (8001308 <Cli_init+0x74>)
 800129e:	f000 f94f 	bl	8001540 <Communication_register>
	Communication_register("blueOff", &cmdLedOff, &ledB);
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <Cli_init+0x6c>)
 80012a4:	4919      	ldr	r1, [pc, #100]	; (800130c <Cli_init+0x78>)
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <Cli_init+0x7c>)
 80012a8:	f000 f94a 	bl	8001540 <Communication_register>
	Communication_register("blueBlink", &cmdLedBlink, &ledB);
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <Cli_init+0x6c>)
 80012ae:	4919      	ldr	r1, [pc, #100]	; (8001314 <Cli_init+0x80>)
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <Cli_init+0x84>)
 80012b2:	f000 f945 	bl	8001540 <Communication_register>
	Communication_register("blueBrightness", &cmdLedBrightness, &ledB);
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <Cli_init+0x6c>)
 80012b8:	4918      	ldr	r1, [pc, #96]	; (800131c <Cli_init+0x88>)
 80012ba:	4819      	ldr	r0, [pc, #100]	; (8001320 <Cli_init+0x8c>)
 80012bc:	f000 f940 	bl	8001540 <Communication_register>

	Communication_register("redOn", &cmdLedOn, &ledR);
 80012c0:	4a18      	ldr	r2, [pc, #96]	; (8001324 <Cli_init+0x90>)
 80012c2:	4910      	ldr	r1, [pc, #64]	; (8001304 <Cli_init+0x70>)
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <Cli_init+0x94>)
 80012c6:	f000 f93b 	bl	8001540 <Communication_register>
	Communication_register("redOff", &cmdLedOff, &ledR);
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <Cli_init+0x90>)
 80012cc:	490f      	ldr	r1, [pc, #60]	; (800130c <Cli_init+0x78>)
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <Cli_init+0x98>)
 80012d0:	f000 f936 	bl	8001540 <Communication_register>
	Communication_register("redBlink", &cmdLedBlink, &ledR);
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <Cli_init+0x90>)
 80012d6:	490f      	ldr	r1, [pc, #60]	; (8001314 <Cli_init+0x80>)
 80012d8:	4815      	ldr	r0, [pc, #84]	; (8001330 <Cli_init+0x9c>)
 80012da:	f000 f931 	bl	8001540 <Communication_register>
	Communication_register("redBrightness", &cmdLedBrightness, &ledR);
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <Cli_init+0x90>)
 80012e0:	490e      	ldr	r1, [pc, #56]	; (800131c <Cli_init+0x88>)
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <Cli_init+0xa0>)
 80012e4:	f000 f92c 	bl	8001540 <Communication_register>

	Communication_register("buzzerStart", &cmdBuzzerStart, &bz1);
 80012e8:	4a13      	ldr	r2, [pc, #76]	; (8001338 <Cli_init+0xa4>)
 80012ea:	4914      	ldr	r1, [pc, #80]	; (800133c <Cli_init+0xa8>)
 80012ec:	4814      	ldr	r0, [pc, #80]	; (8001340 <Cli_init+0xac>)
 80012ee:	f000 f927 	bl	8001540 <Communication_register>
	Communication_register("buzzerStop", &cmdBuzzerStop, &bz1);
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <Cli_init+0xa4>)
 80012f4:	4913      	ldr	r1, [pc, #76]	; (8001344 <Cli_init+0xb0>)
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <Cli_init+0xb4>)
 80012f8:	f000 f922 	bl	8001540 <Communication_register>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000528 	.word	0x20000528
 8001304:	080011d9 	.word	0x080011d9
 8001308:	0800b2f0 	.word	0x0800b2f0
 800130c:	080011f5 	.word	0x080011f5
 8001310:	0800b2f8 	.word	0x0800b2f8
 8001314:	08001211 	.word	0x08001211
 8001318:	0800b300 	.word	0x0800b300
 800131c:	08001237 	.word	0x08001237
 8001320:	0800b30c 	.word	0x0800b30c
 8001324:	2000053c 	.word	0x2000053c
 8001328:	0800b31c 	.word	0x0800b31c
 800132c:	0800b324 	.word	0x0800b324
 8001330:	0800b32c 	.word	0x0800b32c
 8001334:	0800b338 	.word	0x0800b338
 8001338:	20000588 	.word	0x20000588
 800133c:	0800125d 	.word	0x0800125d
 8001340:	0800b348 	.word	0x0800b348
 8001344:	08001279 	.word	0x08001279
 8001348:	0800b354 	.word	0x0800b354

0800134c <Clock_init>:
#include "Clock.h"

Clock myClock;

void Clock_init()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	myClock.tickCount=0;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <Clock_init+0x14>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]

}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000204 	.word	0x20000204

08001364 <Communication_task>:
static int _CommandArrLen=0;



 int Communication_task()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 800136a:	1db9      	adds	r1, r7, #6
 800136c:	230a      	movs	r3, #10
 800136e:	2201      	movs	r2, #1
 8001370:	4844      	ldr	r0, [pc, #272]	; (8001484 <Communication_task+0x120>)
 8001372:	f005 ff8b 	bl	800728c <HAL_UART_Receive>
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Communication_task+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001380:	4b40      	ldr	r3, [pc, #256]	; (8001484 <Communication_task+0x120>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d011      	beq.n	80013b2 <Communication_task+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <Communication_task+0x120>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2208      	movs	r2, #8
 8001394:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 8001396:	e00c      	b.n	80013b2 <Communication_task+0x4e>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <Communication_task+0x124>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	493a      	ldr	r1, [pc, #232]	; (8001488 <Communication_task+0x124>)
 80013a0:	600a      	str	r2, [r1, #0]
 80013a2:	4a3a      	ldr	r2, [pc, #232]	; (800148c <Communication_task+0x128>)
 80013a4:	1899      	adds	r1, r3, r2
 80013a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013aa:	2201      	movs	r2, #1
 80013ac:	4835      	ldr	r0, [pc, #212]	; (8001484 <Communication_task+0x120>)
 80013ae:	f005 fed9 	bl	8007164 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <Communication_task+0x124>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <Communication_task+0x12c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbec      	blt.n	8001398 <Communication_task+0x34>
		}

		return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e05c      	b.n	800147c <Communication_task+0x118>
	}

	if (ch == '\r' || ch == '\n')
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	2b0d      	cmp	r3, #13
 80013c6:	d010      	beq.n	80013ea <Communication_task+0x86>
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	d127      	bne.n	800141e <Communication_task+0xba>
	{
		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 80013ce:	e00c      	b.n	80013ea <Communication_task+0x86>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <Communication_task+0x124>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	492c      	ldr	r1, [pc, #176]	; (8001488 <Communication_task+0x124>)
 80013d8:	600a      	str	r2, [r1, #0]
 80013da:	4a2c      	ldr	r2, [pc, #176]	; (800148c <Communication_task+0x128>)
 80013dc:	1899      	adds	r1, r3, r2
 80013de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e2:	2201      	movs	r2, #1
 80013e4:	4827      	ldr	r0, [pc, #156]	; (8001484 <Communication_task+0x120>)
 80013e6:	f005 febd 	bl	8007164 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <Communication_task+0x124>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <Communication_task+0x12c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dbec      	blt.n	80013d0 <Communication_task+0x6c>
		}

		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	2202      	movs	r2, #2
 80013fc:	4925      	ldr	r1, [pc, #148]	; (8001494 <Communication_task+0x130>)
 80013fe:	4821      	ldr	r0, [pc, #132]	; (8001484 <Communication_task+0x120>)
 8001400:	f005 feb0 	bl	8007164 <HAL_UART_Transmit>

		_cmdbuffer[_cmdcount] = 0;
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <Communication_task+0x12c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a20      	ldr	r2, [pc, #128]	; (800148c <Communication_task+0x128>)
 800140a:	2100      	movs	r1, #0
 800140c:	54d1      	strb	r1, [r2, r3]
		_cmdcount = 0;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <Communication_task+0x12c>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
		_cmdprint = 0;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <Communication_task+0x124>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

		// command is ready
		return 1;
 800141a:	2301      	movs	r3, #1
 800141c:	e02e      	b.n	800147c <Communication_task+0x118>
	}
	else if (ch == '\b')
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	2b08      	cmp	r3, #8
 8001422:	d118      	bne.n	8001456 <Communication_task+0xf2>
	{
		char bs[] = "\b \b";
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <Communication_task+0x134>)
 8001426:	603b      	str	r3, [r7, #0]
		_cmdcount--;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <Communication_task+0x12c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <Communication_task+0x12c>)
 8001430:	6013      	str	r3, [r2, #0]
		_cmdprint--;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <Communication_task+0x124>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3b01      	subs	r3, #1
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <Communication_task+0x124>)
 800143a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)bs, strlen(bs), 0xFFFF);
 800143c:	463b      	mov	r3, r7
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fed0 	bl	80001e4 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	4639      	mov	r1, r7
 800144a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <Communication_task+0x120>)
 8001450:	f005 fe88 	bl	8007164 <HAL_UART_Transmit>
 8001454:	e011      	b.n	800147a <Communication_task+0x116>
	}
	else
	{
		if (_cmdcount >= MAX_BUFFER_LENGTH)
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <Communication_task+0x12c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b63      	cmp	r3, #99	; 0x63
 800145c:	dd05      	ble.n	800146a <Communication_task+0x106>
		{
			_cmdcount = 0;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <Communication_task+0x12c>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
			_cmdprint = 0;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <Communication_task+0x124>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
		}

		_cmdbuffer[_cmdcount++] = ch;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <Communication_task+0x12c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <Communication_task+0x12c>)
 8001472:	600a      	str	r2, [r1, #0]
 8001474:	79b9      	ldrb	r1, [r7, #6]
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <Communication_task+0x128>)
 8001478:	54d1      	strb	r1, [r2, r3]
	}

	return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000710 	.word	0x20000710
 8001488:	20000270 	.word	0x20000270
 800148c:	20000208 	.word	0x20000208
 8001490:	2000026c 	.word	0x2000026c
 8001494:	0800b360 	.word	0x0800b360
 8001498:	00082008 	.word	0x00082008

0800149c <Communication_handle>:

 void Communication_handle()
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b08d      	sub	sp, #52	; 0x34
 80014a0:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[20];

	int params = sscanf((const char*)_cmdbuffer, "%s %s", cmd, param);
 80014a2:	463b      	mov	r3, r7
 80014a4:	f107 0214 	add.w	r2, r7, #20
 80014a8:	4920      	ldr	r1, [pc, #128]	; (800152c <Communication_handle+0x90>)
 80014aa:	4821      	ldr	r0, [pc, #132]	; (8001530 <Communication_handle+0x94>)
 80014ac:	f007 f956 	bl	800875c <siscanf>
 80014b0:	62b8      	str	r0, [r7, #40]	; 0x28

	if (params == 0)
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d035      	beq.n	8001524 <Communication_handle+0x88>
	{
		return;
	}
	for(int i=0;i<_CommandArrLen;i++){
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014bc:	e029      	b.n	8001512 <Communication_handle+0x76>
		if(strcmp(cmd,_commandsArr[i].commandName) == 0){
 80014be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <Communication_handle+0x98>)
 80014ca:	441a      	add	r2, r3
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe7c 	bl	80001d0 <strcmp>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <Communication_handle+0x70>
			_commandsArr[i].func(_commandsArr[i].object, param);
 80014de:	4915      	ldr	r1, [pc, #84]	; (8001534 <Communication_handle+0x98>)
 80014e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3314      	adds	r3, #20
 80014ee:	681c      	ldr	r4, [r3, #0]
 80014f0:	4910      	ldr	r1, [pc, #64]	; (8001534 <Communication_handle+0x98>)
 80014f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3318      	adds	r3, #24
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	463a      	mov	r2, r7
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	47a0      	blx	r4
			return;
 800150a:	e00c      	b.n	8001526 <Communication_handle+0x8a>
	for(int i=0;i<_CommandArrLen;i++){
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	3301      	adds	r3, #1
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <Communication_handle+0x9c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001518:	429a      	cmp	r2, r3
 800151a:	dbd0      	blt.n	80014be <Communication_handle+0x22>
		}

	}
	printf("Invalid command\r\n");
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <Communication_handle+0xa0>)
 800151e:	f007 f915 	bl	800874c <puts>
 8001522:	e000      	b.n	8001526 <Communication_handle+0x8a>
		return;
 8001524:	bf00      	nop

}
 8001526:	3734      	adds	r7, #52	; 0x34
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	0800b364 	.word	0x0800b364
 8001530:	20000208 	.word	0x20000208
 8001534:	20000274 	.word	0x20000274
 8001538:	2000038c 	.word	0x2000038c
 800153c:	0800b36c 	.word	0x0800b36c

08001540 <Communication_register>:

void Communication_register(char* commandName, HandlerFunc func,void* object)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	strncpy(_commandsArr[_CommandArrLen].commandName, commandName, 20);
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <Communication_register+0x64>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <Communication_register+0x68>)
 800155a:	4413      	add	r3, r2
 800155c:	2214      	movs	r2, #20
 800155e:	68f9      	ldr	r1, [r7, #12]
 8001560:	4618      	mov	r0, r3
 8001562:	f007 f96c 	bl	800883e <strncpy>
	_commandsArr[_CommandArrLen].func=func;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <Communication_register+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	490f      	ldr	r1, [pc, #60]	; (80015a8 <Communication_register+0x68>)
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3314      	adds	r3, #20
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	601a      	str	r2, [r3, #0]
	_commandsArr[_CommandArrLen].object=object;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <Communication_register+0x64>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4909      	ldr	r1, [pc, #36]	; (80015a8 <Communication_register+0x68>)
 8001582:	4613      	mov	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	3318      	adds	r3, #24
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]
	_CommandArrLen++;
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <Communication_register+0x64>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a02      	ldr	r2, [pc, #8]	; (80015a4 <Communication_register+0x64>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000038c 	.word	0x2000038c
 80015a8:	20000274 	.word	0x20000274

080015ac <Dht_init>:

#define MAX_TIME_COUNTER 19

void* memset(void* s, int c, int n);
static int _startCount=0;
void Dht_init(Dht* dht,GPIO_TypeDef* gpioPort,  uint32_t gpioPin){
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	dht->gpioPort=gpioPort;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	601a      	str	r2, [r3, #0]
	dht->gpioPin=gpioPin;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	605a      	str	r2, [r3, #4]
	dht->timeCounter=0;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23


}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <insertValue>:


static void insertValue(Dht* dht){
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	dht->humidity=(double)dht->bytesArr[0]+((double)dht->bytesArr[1])/10;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7f5b      	ldrb	r3, [r3, #29]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff9d 	bl	8000524 <__aeabi_ui2d>
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7f9b      	ldrb	r3, [r3, #30]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff96 	bl	8000524 <__aeabi_ui2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <insertValue+0x90>)
 80015fe:	f7ff f935 	bl	800086c <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4620      	mov	r0, r4
 8001608:	4629      	mov	r1, r5
 800160a:	f7fe fe4f 	bl	80002ac <__adddf3>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dht->temperature=(double)dht->bytesArr[2]+((double)dht->bytesArr[3])/10;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7fdb      	ldrb	r3, [r3, #31]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_ui2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff79 	bl	8000524 <__aeabi_ui2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <insertValue+0x90>)
 8001638:	f7ff f918 	bl	800086c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe fe32 	bl	80002ac <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dht->sum=(int)dht->bytesArr[4];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bdb0      	pop	{r4, r5, r7, pc}
 8001666:	bf00      	nop
 8001668:	40240000 	.word	0x40240000

0800166c <Dht_onGpioInterrupt>:


void Dht_onGpioInterrupt(Dht* dht,uint32_t pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	if(pin != dht->gpioPin)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d179      	bne.n	8001774 <Dht_onGpioInterrupt+0x108>
	{
		return;
	}
	DhtState dhtState=dht->dhtState;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7f1b      	ldrb	r3, [r3, #28]
 8001684:	73fb      	strb	r3, [r7, #15]
	switch(dhtState){
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d876      	bhi.n	800177a <Dht_onGpioInterrupt+0x10e>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <Dht_onGpioInterrupt+0x28>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016ad 	.word	0x080016ad
 800169c:	080016d3 	.word	0x080016d3
 80016a0:	0800176d 	.word	0x0800176d
	case DHT_STATE_AWAITING_RESPONSE_START:
		dht->dhtState=DHT_STATE_AWAITING_RESPONSE_END;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	771a      	strb	r2, [r3, #28]
		break;
 80016aa:	e066      	b.n	800177a <Dht_onGpioInterrupt+0x10e>
	case DHT_STATE_AWAITING_RESPONSE_END:
		__HAL_TIM_SET_COUNTER(&htim16,0);
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <Dht_onGpioInterrupt+0x114>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
		dht->dhtState=DHT_STATE_RECEIVING_BITS;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	771a      	strb	r2, [r3, #28]
		memset(dht->bytesArr,0,sizeof(dht->bytesArr));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	331d      	adds	r3, #29
 80016be:	2205      	movs	r2, #5
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f006 fb4a 	bl	8007d5c <memset>
		dht->bitCounter=0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 80016d0:	e053      	b.n	800177a <Dht_onGpioInterrupt+0x10e>
	case DHT_STATE_RECEIVING_BITS:
		dht->bytesArr[dht->bitCounter/8] <<= 1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4611      	mov	r1, r2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	440b      	add	r3, r1
 80016e2:	7f5b      	ldrb	r3, [r3, #29]
 80016e4:	4611      	mov	r1, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	440b      	add	r3, r1
 80016ee:	775a      	strb	r2, [r3, #29]
		if(__HAL_TIM_GET_COUNTER(&htim16)>=100){
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <Dht_onGpioInterrupt+0x114>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2b63      	cmp	r3, #99	; 0x63
 80016f8:	d90f      	bls.n	800171a <Dht_onGpioInterrupt+0xae>
			dht->bytesArr[dht->bitCounter/8] |= 1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4611      	mov	r1, r2
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	440b      	add	r3, r1
 800170a:	7f5b      	ldrb	r3, [r3, #29]
 800170c:	4611      	mov	r1, r2
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	440b      	add	r3, r1
 8001718:	775a      	strb	r2, [r3, #29]
		}
		dht->bitCounter++;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001720:	3301      	adds	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		__HAL_TIM_SET_COUNTER(&htim16,0);
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <Dht_onGpioInterrupt+0x114>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
		if(dht->bitCounter==40){
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001738:	2b28      	cmp	r3, #40	; 0x28
 800173a:	d11d      	bne.n	8001778 <Dht_onGpioInterrupt+0x10c>
			dht->humidity=0;
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c1 2304 	strd	r2, r3, [r1, #16]
			dht->temperature=0;
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9c1 2302 	strd	r2, r3, [r1, #8]
			dht->sum=0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
			insertValue(dht);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff3a 	bl	80015d8 <insertValue>
			dht->dhtState=DHT_STATE_DATA_RECIVED;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2203      	movs	r2, #3
 8001768:	771a      	strb	r2, [r3, #28]
		}
		break;
 800176a:	e005      	b.n	8001778 <Dht_onGpioInterrupt+0x10c>
	case DHT_STATE_DATA_RECIVED:
		HAL_TIM_Base_Stop(&htim16);
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <Dht_onGpioInterrupt+0x114>)
 800176e:	f004 fb87 	bl	8005e80 <HAL_TIM_Base_Stop>
		break;
 8001772:	e002      	b.n	800177a <Dht_onGpioInterrupt+0x10e>
		return;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <Dht_onGpioInterrupt+0x10e>
		break;
 8001778:	bf00      	nop
	}

}
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200006c4 	.word	0x200006c4

08001784 <Dht_readAsync>:
		dht->dhtState = DHT_STATE_AWAITING_RESPONSE_START;
	}
}

void Dht_readAsync(Dht* dht)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	//MainTimer_registerCallback(Dht_onTimerInterrupt, dht);
	GPIO_InitTypeDef gpioInitStruct;

	gpioInitStruct.Pin = dht->gpioPin;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	60fb      	str	r3, [r7, #12]
	gpioInitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	613b      	str	r3, [r7, #16]
	gpioInitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
	gpioInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(dht->gpioPort, &gpioInitStruct);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f107 020c 	add.w	r2, r7, #12
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fd7d 	bl	80042a8 <HAL_GPIO_Init>

	HAL_TIM_Base_Start(&htim16);
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <Dht_readAsync+0x60>)
 80017b0:	f004 fafe 	bl	8005db0 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(dht->gpioPort, dht->gpioPin, 0);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	f002 ff33 	bl	800462c <HAL_GPIO_WritePin>
	dht->timeCounter=0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	_startCount=1;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <Dht_readAsync+0x64>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim16,0);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <Dht_readAsync+0x60>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	; 0x24

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200006c4 	.word	0x200006c4
 80017e8:	20000390 	.word	0x20000390

080017ec <Dht_hasData>:

int Dht_hasData(Dht* dht){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	if(dht->dhtState==DHT_STATE_DATA_RECIVED){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7f1b      	ldrb	r3, [r3, #28]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d101      	bne.n	8001800 <Dht_hasData+0x14>
		return 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <Dht_hasData+0x16>
	}
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <Dht_changeStateToResStart>:

void Dht_changeStateToResStart(Dht* dht){
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	dht->dhtState=DHT_STATE_AWAITING_RESPONSE_START;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	771a      	strb	r2, [r3, #28]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <Led_init>:
#include "Led.h"
#include "MainTimer.h"
#define MAX_BRIGHNESS_LEVEL 10

void Led_init(Led* led, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
	led->gpioPort = gpioPort;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
	led->gpioPin = gpioPin;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	821a      	strh	r2, [r3, #16]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <Led_On>:

void Led_On(Led* led)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	MainTimer_unRegister(Led_OnTimerInterrupt, led);
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <Led_On+0x30>)
 8001860:	f000 f924 	bl	8001aac <MainTimer_unRegister>
	led->state = STATE_FULL;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68d8      	ldr	r0, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8a1b      	ldrh	r3, [r3, #16]
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	f002 fed9 	bl	800462c <HAL_GPIO_WritePin>


}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	08001935 	.word	0x08001935

08001888 <Led_Off>:

void Led_Off(Led* led)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	MainTimer_unRegister(Led_OnTimerInterrupt, led);
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <Led_Off+0x30>)
 8001894:	f000 f90a 	bl	8001aac <MainTimer_unRegister>
	led->state = STATE_OFF;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68d8      	ldr	r0, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8a1b      	ldrh	r3, [r3, #16]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	f002 febf 	bl	800462c <HAL_GPIO_WritePin>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08001935 	.word	0x08001935

080018bc <Led_Blink>:

void Led_Blink(Led* led, int period)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	MainTimer_registerCallback(Led_OnTimerInterrupt, led);
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	480b      	ldr	r0, [pc, #44]	; (80018f8 <Led_Blink+0x3c>)
 80018ca:	f000 f8b3 	bl	8001a34 <MainTimer_registerCallback>
	led->state = STATE_BLINK;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	701a      	strb	r2, [r3, #0]
	led->counter = 0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
	led->maxCounter = period;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68d8      	ldr	r0, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	8a1b      	ldrh	r3, [r3, #16]
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	f002 fe9e 	bl	800462c <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	08001935 	.word	0x08001935

080018fc <Led_Brightness>:

void Led_Brightness(Led* led ,int level)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	if (level < 0 || level > 10) {
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0c      	blt.n	8001926 <Led_Brightness+0x2a>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b0a      	cmp	r3, #10
 8001910:	dc09      	bgt.n	8001926 <Led_Brightness+0x2a>
		return;
	}
	led->state = STATE_BRIGHTNESS;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	701a      	strb	r2, [r3, #0]
	led->counter=0;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
	led->maxCounter=level;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	e000      	b.n	8001928 <Led_Brightness+0x2c>
		return;
 8001926:	bf00      	nop
}
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <Led_OnTimerInterrupt>:

void Led_OnTimerInterrupt(void* obj)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	Led* led=(Led*)obj;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60fb      	str	r3, [r7, #12]
	if (led->state == STATE_BLINK) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d115      	bne.n	8001974 <Led_OnTimerInterrupt+0x40>
		led->counter++;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	605a      	str	r2, [r3, #4]
		if (led->counter == led->maxCounter) {
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d10a      	bne.n	8001974 <Led_OnTimerInterrupt+0x40>
			HAL_GPIO_TogglePin(led->gpioPort, led->gpioPin);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8a1b      	ldrh	r3, [r3, #16]
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f002 fe77 	bl	800465c <HAL_GPIO_TogglePin>
			led->counter = 0;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
		}
	}

	if(led->state==STATE_BRIGHTNESS){
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d12a      	bne.n	80019d2 <Led_OnTimerInterrupt+0x9e>
		if(led->counter==0){
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d108      	bne.n	8001996 <Led_OnTimerInterrupt+0x62>
			HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 1);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68d8      	ldr	r0, [r3, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8a1b      	ldrh	r3, [r3, #16]
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	f002 fe4c 	bl	800462c <HAL_GPIO_WritePin>
 8001994:	e00d      	b.n	80019b2 <Led_OnTimerInterrupt+0x7e>
		}
		else if(led->counter==led->maxCounter){
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d107      	bne.n	80019b2 <Led_OnTimerInterrupt+0x7e>
			HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68d8      	ldr	r0, [r3, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8a1b      	ldrh	r3, [r3, #16]
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	f002 fe3d 	bl	800462c <HAL_GPIO_WritePin>
		}
		led->counter=(led->counter+1)%MAX_BRIGHNESS_LEVEL;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <Led_OnTimerInterrupt+0xa8>)
 80019ba:	fb83 2301 	smull	r2, r3, r3, r1
 80019be:	109a      	asrs	r2, r3, #2
 80019c0:	17cb      	asrs	r3, r1, #31
 80019c2:	1ad2      	subs	r2, r2, r3
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	1aca      	subs	r2, r1, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	605a      	str	r2, [r3, #4]
	}
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	66666667 	.word	0x66666667

080019e0 <LightSensor_init>:
 */

#include "LightSensor.h"

void LightSensor_init(LightSensor *ltsensor,ADC_HandleTypeDef* hadc,uint32_t max)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	ltsensor->hadc=hadc;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	601a      	str	r2, [r3, #0]
	ltsensor->max=max;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	605a      	str	r2, [r3, #4]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LightSensor_adcInterrupt>:


void LightSensor_adcInterrupt(LightSensor *ltsensor)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint32_t lt=HAL_ADC_GetValue(ltsensor->hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fc53 	bl	80032bc <HAL_ADC_GetValue>
 8001a16:	60f8      	str	r0, [r7, #12]
	ltsensor->val=((ltsensor->max) * lt + (4096/2) ) /4096;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a26:	0b1a      	lsrs	r2, r3, #12
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]

}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <MainTimer_registerCallback>:
}Command;
static int _lenArr=0;
static Command _commandsArr[MAX_COMMANDS];

 void MainTimer_registerCallback(MainTimerFunc func,void* object)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	 for(int i=0;i<_lenArr;i++){
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e011      	b.n	8001a68 <MainTimer_registerCallback+0x34>
		 if(_commandsArr[i].func==func && _commandsArr[i].object==object){
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <MainTimer_registerCallback+0x70>)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d107      	bne.n	8001a62 <MainTimer_registerCallback+0x2e>
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <MainTimer_registerCallback+0x70>)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d01a      	beq.n	8001a98 <MainTimer_registerCallback+0x64>
	 for(int i=0;i<_lenArr;i++){
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MainTimer_registerCallback+0x74>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbe8      	blt.n	8001a44 <MainTimer_registerCallback+0x10>
			 return;
		 }
	 }
	_commandsArr[_lenArr].func=func;
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <MainTimer_registerCallback+0x74>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	490b      	ldr	r1, [pc, #44]	; (8001aa4 <MainTimer_registerCallback+0x70>)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	_commandsArr[_lenArr].object=object;
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <MainTimer_registerCallback+0x74>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <MainTimer_registerCallback+0x70>)
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
	_lenArr++;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MainTimer_registerCallback+0x74>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <MainTimer_registerCallback+0x74>)
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e000      	b.n	8001a9a <MainTimer_registerCallback+0x66>
			 return;
 8001a98:	bf00      	nop
}
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000398 	.word	0x20000398
 8001aa8:	20000394 	.word	0x20000394

08001aac <MainTimer_unRegister>:
 void MainTimer_unRegister(MainTimerFunc func,void* object)
 {
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	 for(int i=0;i<_lenArr;i++){
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e02d      	b.n	8001b18 <MainTimer_unRegister+0x6c>
	 	if(_commandsArr[i].func==func && _commandsArr[i].object==object){
 8001abc:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <MainTimer_unRegister+0x80>)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d123      	bne.n	8001b12 <MainTimer_unRegister+0x66>
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <MainTimer_unRegister+0x80>)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11b      	bne.n	8001b12 <MainTimer_unRegister+0x66>
	 		_commandsArr[i].func=_commandsArr[_lenArr-1].func;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MainTimer_unRegister+0x84>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <MainTimer_unRegister+0x80>)
 8001ae2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001ae6:	4911      	ldr	r1, [pc, #68]	; (8001b2c <MainTimer_unRegister+0x80>)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	 		_commandsArr[i].object=_commandsArr[_lenArr-1].object;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MainTimer_unRegister+0x84>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <MainTimer_unRegister+0x80>)
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	490b      	ldr	r1, [pc, #44]	; (8001b2c <MainTimer_unRegister+0x80>)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	605a      	str	r2, [r3, #4]
	 		_lenArr--;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <MainTimer_unRegister+0x84>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <MainTimer_unRegister+0x84>)
 8001b0e:	6013      	str	r3, [r2, #0]
	 		return;
 8001b10:	e007      	b.n	8001b22 <MainTimer_unRegister+0x76>
	 for(int i=0;i<_lenArr;i++){
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <MainTimer_unRegister+0x84>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbcc      	blt.n	8001abc <MainTimer_unRegister+0x10>
	 	}

	 }
 }
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	20000398 	.word	0x20000398
 8001b30:	20000394 	.word	0x20000394

08001b34 <HAL_TIM_PeriodElapsedCallback>:

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 	if(htim==&htim6){
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d11a      	bne.n	8001b7a <HAL_TIM_PeriodElapsedCallback+0x46>
 		myClock.tickCount++;
 		Button_timerInterrupt(&buttonSw1);
 		Button_timerInterrupt(&buttonSw2);
 		Dht_onTimerInterrupt(&dht);*/

 		for(int i=0;i<_lenArr;i++){
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e00d      	b.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x32>
 			_commandsArr[i].func(_commandsArr[i].object);
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4790      	blx	r2
 		for(int i=0;i<_lenArr;i++){
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbec      	blt.n	8001b4a <HAL_TIM_PeriodElapsedCallback+0x16>
 		}
 		myClock.tickCount++;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b78:	6013      	str	r3, [r2, #0]
 	}
 }
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000678 	.word	0x20000678
 8001b88:	20000398 	.word	0x20000398
 8001b8c:	20000394 	.word	0x20000394
 8001b90:	20000204 	.word	0x20000204

08001b94 <MyMain>:

Dht dht;



void MyMain(){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	Led_init(&ledB, LED1_GPIO_Port, LED1_Pin);
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001ba0:	486b      	ldr	r0, [pc, #428]	; (8001d50 <MyMain+0x1bc>)
 8001ba2:	f7ff fe41 	bl	8001828 <Led_init>
	Led_init(&ledR, LED2_GPIO_Port, LED2_Pin);
 8001ba6:	2240      	movs	r2, #64	; 0x40
 8001ba8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001bac:	4869      	ldr	r0, [pc, #420]	; (8001d54 <MyMain+0x1c0>)
 8001bae:	f7ff fe3b 	bl	8001828 <Led_init>

	Button_init(&buttonSw1, BTN_SW1, SW1_GPIO_Port,  SW1_Pin);
 8001bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4866      	ldr	r0, [pc, #408]	; (8001d58 <MyMain+0x1c4>)
 8001bbe:	f7ff f985 	bl	8000ecc <Button_init>
	Button_init(&buttonSw2, BTN_SW2, SW2_GPIO_Port, SW2_Pin);
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <MyMain+0x1c8>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	4865      	ldr	r0, [pc, #404]	; (8001d60 <MyMain+0x1cc>)
 8001bca:	f7ff f97f 	bl	8000ecc <Button_init>

	LightSensor_init(&lts1, &hadc2, 10);
 8001bce:	220a      	movs	r2, #10
 8001bd0:	4964      	ldr	r1, [pc, #400]	; (8001d64 <MyMain+0x1d0>)
 8001bd2:	4865      	ldr	r0, [pc, #404]	; (8001d68 <MyMain+0x1d4>)
 8001bd4:	f7ff ff04 	bl	80019e0 <LightSensor_init>


	Clock_init();
 8001bd8:	f7ff fbb8 	bl	800134c <Clock_init>

	Buzzer_init(&bz1);
 8001bdc:	4863      	ldr	r0, [pc, #396]	; (8001d6c <MyMain+0x1d8>)
 8001bde:	f7ff fa1f 	bl	8001020 <Buzzer_init>

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001be2:	2036      	movs	r0, #54	; 0x36
 8001be4:	f002 fb45 	bl	8004272 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 8001be8:	4861      	ldr	r0, [pc, #388]	; (8001d70 <MyMain+0x1dc>)
 8001bea:	f004 f971 	bl	8005ed0 <HAL_TIM_Base_Start_IT>


	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bee:	2012      	movs	r0, #18
 8001bf0:	f002 fb3f 	bl	8004272 <HAL_NVIC_EnableIRQ>
	HAL_ADC_Start_IT(&hadc2);
 8001bf4:	485b      	ldr	r0, [pc, #364]	; (8001d64 <MyMain+0x1d0>)
 8001bf6:	f001 fa2f 	bl	8003058 <HAL_ADC_Start_IT>
	//ledBlink(&ledB, 500);
	//ledOn(&ledB);

	ButtonState SW1State;
	ButtonState SW2State;
	Cli_init();
 8001bfa:	f7ff fb4b 	bl	8001294 <Cli_init>
	Dht_init(&dht, DHT11_GPIO_Port,  DHT11_Pin);
 8001bfe:	2220      	movs	r2, #32
 8001c00:	4956      	ldr	r1, [pc, #344]	; (8001d5c <MyMain+0x1c8>)
 8001c02:	485c      	ldr	r0, [pc, #368]	; (8001d74 <MyMain+0x1e0>)
 8001c04:	f7ff fcd2 	bl	80015ac <Dht_init>
	Dht_readAsync(&dht);
 8001c08:	485a      	ldr	r0, [pc, #360]	; (8001d74 <MyMain+0x1e0>)
 8001c0a:	f7ff fdbb 	bl	8001784 <Dht_readAsync>

	while(1){
		if(Dht_hasData(&dht)){
 8001c0e:	4859      	ldr	r0, [pc, #356]	; (8001d74 <MyMain+0x1e0>)
 8001c10:	f7ff fdec 	bl	80017ec <Dht_hasData>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d014      	beq.n	8001c44 <MyMain+0xb0>
			printf("The humidity is: %.2lf\r\n",dht.humidity);
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <MyMain+0x1e0>)
 8001c1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c20:	4855      	ldr	r0, [pc, #340]	; (8001d78 <MyMain+0x1e4>)
 8001c22:	f006 fd0d 	bl	8008640 <iprintf>
			printf("The temperature is: %.2lf\r\n",dht.temperature);
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <MyMain+0x1e0>)
 8001c28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c2c:	4853      	ldr	r0, [pc, #332]	; (8001d7c <MyMain+0x1e8>)
 8001c2e:	f006 fd07 	bl	8008640 <iprintf>
			printf("The sum is: %d\r\n",dht.sum);
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <MyMain+0x1e0>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4619      	mov	r1, r3
 8001c38:	4851      	ldr	r0, [pc, #324]	; (8001d80 <MyMain+0x1ec>)
 8001c3a:	f006 fd01 	bl	8008640 <iprintf>
			Dht_changeStateToResStart(&dht);
 8001c3e:	484d      	ldr	r0, [pc, #308]	; (8001d74 <MyMain+0x1e0>)
 8001c40:	f7ff fde5 	bl	800180e <Dht_changeStateToResStart>

		}
		if (Communication_task())
 8001c44:	f7ff fb8e 	bl	8001364 <Communication_task>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MyMain+0xbe>
		{
			Communication_handle();
 8001c4e:	f7ff fc25 	bl	800149c <Communication_handle>
		}

		SW1State=Button_getState(&buttonSw1);
 8001c52:	4841      	ldr	r0, [pc, #260]	; (8001d58 <MyMain+0x1c4>)
 8001c54:	f7ff f95f 	bl	8000f16 <Button_getState>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]


		if(SW1State!=BUTTON_STATE_NONE){
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <MyMain+0x134>
			switch(SW1State){
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d830      	bhi.n	8001cca <MyMain+0x136>
 8001c68:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <MyMain+0xdc>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001ccb 	.word	0x08001ccb
 8001c74:	08001c81 	.word	0x08001c81
 8001c78:	08001c9b 	.word	0x08001c9b
 8001c7c:	08001ca9 	.word	0x08001ca9
			case BUTTON_STATE_PRESS:
				//HAL_TIM_Base_Stop_IT(&htim6);
				Buzzer_stop(&bz1);
 8001c80:	483a      	ldr	r0, [pc, #232]	; (8001d6c <MyMain+0x1d8>)
 8001c82:	f7ff fa75 	bl	8001170 <Buzzer_stop>
				printf("SW1 short press\n\r");
 8001c86:	483f      	ldr	r0, [pc, #252]	; (8001d84 <MyMain+0x1f0>)
 8001c88:	f006 fcda 	bl	8008640 <iprintf>
				Button_changeStateToNone(&buttonSw1);
 8001c8c:	4832      	ldr	r0, [pc, #200]	; (8001d58 <MyMain+0x1c4>)
 8001c8e:	f7ff f94e 	bl	8000f2e <Button_changeStateToNone>
				Buzzer_changeToOff(&bz1);
 8001c92:	4836      	ldr	r0, [pc, #216]	; (8001d6c <MyMain+0x1d8>)
 8001c94:	f7ff fa53 	bl	800113e <Buzzer_changeToOff>
				break;
 8001c98:	e017      	b.n	8001cca <MyMain+0x136>

			case BUTTON_STATE_LONG_PRESS:

				//HAL_TIM_Base_Start_IT(&htim6);
				//Buzzer_start(&bz1);
				printf("SW1 long press\n\r");
 8001c9a:	483b      	ldr	r0, [pc, #236]	; (8001d88 <MyMain+0x1f4>)
 8001c9c:	f006 fcd0 	bl	8008640 <iprintf>
				Button_changeStateToNone(&buttonSw1);
 8001ca0:	482d      	ldr	r0, [pc, #180]	; (8001d58 <MyMain+0x1c4>)
 8001ca2:	f7ff f944 	bl	8000f2e <Button_changeStateToNone>
				//Buzzer_changeToOn(&bz1);
				break;
 8001ca6:	e010      	b.n	8001cca <MyMain+0x136>

			case BUTTON_STATE_DOUBLE_PRESS:
				printf("SW1 double press\n\r");
 8001ca8:	4838      	ldr	r0, [pc, #224]	; (8001d8c <MyMain+0x1f8>)
 8001caa:	f006 fcc9 	bl	8008640 <iprintf>
				Led_Blink(&ledB, 100);
 8001cae:	2164      	movs	r1, #100	; 0x64
 8001cb0:	4827      	ldr	r0, [pc, #156]	; (8001d50 <MyMain+0x1bc>)
 8001cb2:	f7ff fe03 	bl	80018bc <Led_Blink>
				Led_Blink(&ledR, 500);
 8001cb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cba:	4826      	ldr	r0, [pc, #152]	; (8001d54 <MyMain+0x1c0>)
 8001cbc:	f7ff fdfe 	bl	80018bc <Led_Blink>
				Button_changeStateToNone(&buttonSw1);
 8001cc0:	4825      	ldr	r0, [pc, #148]	; (8001d58 <MyMain+0x1c4>)
 8001cc2:	f7ff f934 	bl	8000f2e <Button_changeStateToNone>
			case BUTTON_STATE_NONE:
				break;
 8001cc6:	e000      	b.n	8001cca <MyMain+0x136>

			}
		}
 8001cc8:	bf00      	nop

		SW2State=Button_getState(&buttonSw2);
 8001cca:	4825      	ldr	r0, [pc, #148]	; (8001d60 <MyMain+0x1cc>)
 8001ccc:	f7ff f923 	bl	8000f16 <Button_getState>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71bb      	strb	r3, [r7, #6]
		if(SW2State!=BUTTON_STATE_NONE){
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d037      	beq.n	8001d4a <MyMain+0x1b6>
			switch(SW2State){
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d896      	bhi.n	8001c0e <MyMain+0x7a>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <MyMain+0x154>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001c0f 	.word	0x08001c0f
 8001cec:	08001cf9 	.word	0x08001cf9
 8001cf0:	08001d13 	.word	0x08001d13
 8001cf4:	08001d2d 	.word	0x08001d2d
			case BUTTON_STATE_PRESS:
				Led_On(&ledR);
 8001cf8:	4816      	ldr	r0, [pc, #88]	; (8001d54 <MyMain+0x1c0>)
 8001cfa:	f7ff fdab 	bl	8001854 <Led_On>
				Led_On(&ledB);
 8001cfe:	4814      	ldr	r0, [pc, #80]	; (8001d50 <MyMain+0x1bc>)
 8001d00:	f7ff fda8 	bl	8001854 <Led_On>
				printf("SW2 short press\n\r");
 8001d04:	4822      	ldr	r0, [pc, #136]	; (8001d90 <MyMain+0x1fc>)
 8001d06:	f006 fc9b 	bl	8008640 <iprintf>
				Button_changeStateToNone(&buttonSw2);
 8001d0a:	4815      	ldr	r0, [pc, #84]	; (8001d60 <MyMain+0x1cc>)
 8001d0c:	f7ff f90f 	bl	8000f2e <Button_changeStateToNone>
				break;
 8001d10:	e01c      	b.n	8001d4c <MyMain+0x1b8>
			case BUTTON_STATE_LONG_PRESS:

				Led_Off(&ledR);
 8001d12:	4810      	ldr	r0, [pc, #64]	; (8001d54 <MyMain+0x1c0>)
 8001d14:	f7ff fdb8 	bl	8001888 <Led_Off>
				Led_Off(&ledB);
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MyMain+0x1bc>)
 8001d1a:	f7ff fdb5 	bl	8001888 <Led_Off>
				printf("SW2 long press\n\r");
 8001d1e:	481d      	ldr	r0, [pc, #116]	; (8001d94 <MyMain+0x200>)
 8001d20:	f006 fc8e 	bl	8008640 <iprintf>
				Button_changeStateToNone(&buttonSw2);
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <MyMain+0x1cc>)
 8001d26:	f7ff f902 	bl	8000f2e <Button_changeStateToNone>
				break;
 8001d2a:	e00f      	b.n	8001d4c <MyMain+0x1b8>

			case BUTTON_STATE_DOUBLE_PRESS:
				Led_Brightness(&ledR, 2);
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	4809      	ldr	r0, [pc, #36]	; (8001d54 <MyMain+0x1c0>)
 8001d30:	f7ff fde4 	bl	80018fc <Led_Brightness>
				Led_Brightness(&ledB, 5);
 8001d34:	2105      	movs	r1, #5
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <MyMain+0x1bc>)
 8001d38:	f7ff fde0 	bl	80018fc <Led_Brightness>
				printf("SW2 double press\n\r");
 8001d3c:	4816      	ldr	r0, [pc, #88]	; (8001d98 <MyMain+0x204>)
 8001d3e:	f006 fc7f 	bl	8008640 <iprintf>
				Button_changeStateToNone(&buttonSw2);
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <MyMain+0x1cc>)
 8001d44:	f7ff f8f3 	bl	8000f2e <Button_changeStateToNone>
				break;
 8001d48:	e000      	b.n	8001d4c <MyMain+0x1b8>
			case BUTTON_STATE_NONE:
				break;
			}
		}
 8001d4a:	bf00      	nop
		if(Dht_hasData(&dht)){
 8001d4c:	e75f      	b.n	8001c0e <MyMain+0x7a>
 8001d4e:	bf00      	nop
 8001d50:	20000528 	.word	0x20000528
 8001d54:	2000053c 	.word	0x2000053c
 8001d58:	20000550 	.word	0x20000550
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	2000056c 	.word	0x2000056c
 8001d64:	200005c8 	.word	0x200005c8
 8001d68:	20000594 	.word	0x20000594
 8001d6c:	20000588 	.word	0x20000588
 8001d70:	20000678 	.word	0x20000678
 8001d74:	200005a0 	.word	0x200005a0
 8001d78:	0800b380 	.word	0x0800b380
 8001d7c:	0800b39c 	.word	0x0800b39c
 8001d80:	0800b3b8 	.word	0x0800b3b8
 8001d84:	0800b3cc 	.word	0x0800b3cc
 8001d88:	0800b3e0 	.word	0x0800b3e0
 8001d8c:	0800b3f4 	.word	0x0800b3f4
 8001d90:	0800b408 	.word	0x0800b408
 8001d94:	0800b41c 	.word	0x0800b41c
 8001d98:	0800b430 	.word	0x0800b430

08001d9c <HAL_GPIO_EXTI_Callback>:
	}

}

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
	Button_onInterrupt(&buttonSw1, pin);
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4619      	mov	r1, r3
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001dac:	f7ff f8cc 	bl	8000f48 <Button_onInterrupt>
	Button_onInterrupt(&buttonSw2, pin);
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	4619      	mov	r1, r3
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x38>)
 8001db6:	f7ff f8c7 	bl	8000f48 <Button_onInterrupt>
	Buzzer_reset();
 8001dba:	f7ff f9cd 	bl	8001158 <Buzzer_reset>
	Dht_onGpioInterrupt(&dht,pin);
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001dc4:	f7ff fc52 	bl	800166c <Dht_onGpioInterrupt>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000550 	.word	0x20000550
 8001dd4:	2000056c 	.word	0x2000056c
 8001dd8:	200005a0 	.word	0x200005a0

08001ddc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	LightSensor_adcInterrupt(&lts1);
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001de6:	f7ff fe0d 	bl	8001a04 <LightSensor_adcInterrupt>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000594 	.word	0x20000594

08001df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dfc:	f000 fd64 	bl	80028c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e00:	f000 f80f 	bl	8001e22 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e04:	f000 f9aa 	bl	800215c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e08:	f000 f978 	bl	80020fc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001e0c:	f000 f8be 	bl	8001f8c <MX_TIM3_Init>
  MX_TIM6_Init();
 8001e10:	f000 f918 	bl	8002044 <MX_TIM6_Init>
  MX_ADC2_Init();
 8001e14:	f000 f856 	bl	8001ec4 <MX_ADC2_Init>
  MX_TIM16_Init();
 8001e18:	f000 f94a 	bl	80020b0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MyMain();
 8001e1c:	f7ff feba 	bl	8001b94 <MyMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <main+0x28>

08001e22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b096      	sub	sp, #88	; 0x58
 8001e26:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2244      	movs	r2, #68	; 0x44
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 ff93 	bl	8007d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e36:	463b      	mov	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e48:	f002 fc48 	bl	80046dc <HAL_PWREx_ControlVoltageScaling>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e52:	f000 fa3f 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e56:	2302      	movs	r3, #2
 8001e58:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e60:	2310      	movs	r3, #16
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e64:	2302      	movs	r3, #2
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e70:	230a      	movs	r3, #10
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e74:	2307      	movs	r3, #7
 8001e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fc7f 	bl	8004788 <HAL_RCC_OscConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001e90:	f000 fa20 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e94:	230f      	movs	r3, #15
 8001e96:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2104      	movs	r1, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 f847 	bl	8004f40 <HAL_RCC_ClockConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001eb8:	f000 fa0c 	bl	80022d4 <Error_Handler>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3758      	adds	r7, #88	; 0x58
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001edc:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <MX_ADC2_Init+0xc0>)
 8001ede:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001ee2:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8001ee6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001efc:	2204      	movs	r2, #4
 8001efe:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f3c:	4810      	ldr	r0, [pc, #64]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f3e:	f000 ff35 	bl	8002dac <HAL_ADC_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001f48:	f000 f9c4 	bl	80022d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_ADC2_Init+0xc4>)
 8001f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f50:	2306      	movs	r3, #6
 8001f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f58:	237f      	movs	r3, #127	; 0x7f
 8001f5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_ADC2_Init+0xbc>)
 8001f6a:	f001 fbe3 	bl	8003734 <HAL_ADC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001f74:	f000 f9ae 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200005c8 	.word	0x200005c8
 8001f84:	50040100 	.word	0x50040100
 8001f88:	19200040 	.word	0x19200040

08001f8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <MX_TIM3_Init+0xb0>)
 8001fb2:	4a23      	ldr	r2, [pc, #140]	; (8002040 <MX_TIM3_Init+0xb4>)
 8001fb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <MX_TIM3_Init+0xb0>)
 8001fb8:	f240 321f 	movw	r2, #799	; 0x31f
 8001fbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <MX_TIM3_Init+0xb0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 382;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_TIM3_Init+0xb0>)
 8001fc6:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8001fca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <MX_TIM3_Init+0xb0>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_TIM3_Init+0xb0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fd8:	4818      	ldr	r0, [pc, #96]	; (800203c <MX_TIM3_Init+0xb0>)
 8001fda:	f003 ffe9 	bl	8005fb0 <HAL_TIM_PWM_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001fe4:	f000 f976 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4811      	ldr	r0, [pc, #68]	; (800203c <MX_TIM3_Init+0xb0>)
 8001ff8:	f004 ffc0 	bl	8006f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002002:	f000 f967 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002006:	2360      	movs	r3, #96	; 0x60
 8002008:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 191;
 800200a:	23bf      	movs	r3, #191	; 0xbf
 800200c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	4807      	ldr	r0, [pc, #28]	; (800203c <MX_TIM3_Init+0xb0>)
 800201e:	f004 fadb 	bl	80065d8 <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002028:	f000 f954 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800202c:	4803      	ldr	r0, [pc, #12]	; (800203c <MX_TIM3_Init+0xb0>)
 800202e:	f000 fa4b 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000062c 	.word	0x2000062c
 8002040:	40000400 	.word	0x40000400

08002044 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_TIM6_Init+0x64>)
 8002056:	4a15      	ldr	r2, [pc, #84]	; (80020ac <MX_TIM6_Init+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <MX_TIM6_Init+0x64>)
 800205c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002060:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_TIM6_Init+0x64>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_TIM6_Init+0x64>)
 800206a:	220a      	movs	r2, #10
 800206c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_TIM6_Init+0x64>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <MX_TIM6_Init+0x64>)
 8002076:	f003 fe43 	bl	8005d00 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002080:	f000 f928 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_TIM6_Init+0x64>)
 8002092:	f004 ff73 	bl	8006f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800209c:	f000 f91a 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000678 	.word	0x20000678
 80020ac:	40001000 	.word	0x40001000

080020b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <MX_TIM16_Init+0x48>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020bc:	224f      	movs	r2, #79	; 0x4f
 80020be:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <MX_TIM16_Init+0x44>)
 80020e2:	f003 fe0d 	bl	8005d00 <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80020ec:	f000 f8f2 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200006c4 	.word	0x200006c4
 80020f8:	40014400 	.word	0x40014400

080020fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <MX_USART2_UART_Init+0x5c>)
 8002104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800210c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_USART2_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002122:	220c      	movs	r2, #12
 8002124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_USART2_UART_Init+0x58>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_USART2_UART_Init+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_USART2_UART_Init+0x58>)
 8002140:	f004 ffc2 	bl	80070c8 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800214a:	f000 f8c3 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000710 	.word	0x20000710
 8002158:	40004400 	.word	0x40004400

0800215c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002172:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <MX_GPIO_Init+0x148>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4a4b      	ldr	r2, [pc, #300]	; (80022a4 <MX_GPIO_Init+0x148>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217e:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <MX_GPIO_Init+0x148>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800218a:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <MX_GPIO_Init+0x148>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4a45      	ldr	r2, [pc, #276]	; (80022a4 <MX_GPIO_Init+0x148>)
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002196:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <MX_GPIO_Init+0x148>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <MX_GPIO_Init+0x148>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a3f      	ldr	r2, [pc, #252]	; (80022a4 <MX_GPIO_Init+0x148>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <MX_GPIO_Init+0x148>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <MX_GPIO_Init+0x148>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <MX_GPIO_Init+0x148>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <MX_GPIO_Init+0x148>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2160      	movs	r1, #96	; 0x60
 80021d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021da:	f002 fa27 	bl	800462c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	482c      	ldr	r0, [pc, #176]	; (80022a8 <MX_GPIO_Init+0x14c>)
 80021f6:	f002 f857 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80021fa:	2360      	movs	r3, #96	; 0x60
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002214:	f002 f848 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800221e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002232:	f002 f839 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8002236:	2308      	movs	r3, #8
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800223a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800223e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4818      	ldr	r0, [pc, #96]	; (80022ac <MX_GPIO_Init+0x150>)
 800224c:	f002 f82c 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002250:	2320      	movs	r3, #32
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002254:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <MX_GPIO_Init+0x150>)
 8002266:	f002 f81f 	bl	80042a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2009      	movs	r0, #9
 8002270:	f001 ffe3 	bl	800423a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002274:	2009      	movs	r0, #9
 8002276:	f001 fffc 	bl	8004272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2017      	movs	r0, #23
 8002280:	f001 ffdb 	bl	800423a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002284:	2017      	movs	r0, #23
 8002286:	f001 fff4 	bl	8004272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2028      	movs	r0, #40	; 0x28
 8002290:	f001 ffd3 	bl	800423a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002294:	2028      	movs	r0, #40	; 0x28
 8002296:	f001 ffec 	bl	8004272 <HAL_NVIC_EnableIRQ>

}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	; 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	48000800 	.word	0x48000800
 80022ac:	48000400 	.word	0x48000400

080022b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80022b8:	1d39      	adds	r1, r7, #4
 80022ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022be:	2201      	movs	r2, #1
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <__io_putchar+0x20>)
 80022c2:	f004 ff4f 	bl	8007164 <HAL_UART_Transmit>

  return ch;
 80022c6:	687b      	ldr	r3, [r7, #4]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000710 	.word	0x20000710

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022dc:	e7fe      	b.n	80022dc <Error_Handler+0x8>
	...

080022e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_MspInit+0x44>)
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_MspInit+0x44>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6613      	str	r3, [r2, #96]	; 0x60
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_MspInit+0x44>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_MspInit+0x44>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_MspInit+0x44>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_MspInit+0x44>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ac      	sub	sp, #176	; 0xb0
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2288      	movs	r2, #136	; 0x88
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f005 fd07 	bl	8007d5c <memset>
  if(hadc->Instance==ADC2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_ADC_MspInit+0xd8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d14f      	bne.n	80023f8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800235c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800235e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800236e:	2308      	movs	r3, #8
 8002370:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002372:	2307      	movs	r3, #7
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002376:	2302      	movs	r3, #2
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800237a:	2302      	movs	r3, #2
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800237e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fffd 	bl	8005388 <HAL_RCCEx_PeriphCLKConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002394:	f7ff ff9e 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_ADC_MspInit+0xdc>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_ADC_MspInit+0xdc>)
 800239e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_ADC_MspInit+0xdc>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_ADC_MspInit+0xdc>)
 80023b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b4:	4a13      	ldr	r2, [pc, #76]	; (8002404 <HAL_ADC_MspInit+0xdc>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_ADC_MspInit+0xdc>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023ce:	230b      	movs	r3, #11
 80023d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e4:	f001 ff60 	bl	80042a8 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2012      	movs	r0, #18
 80023ee:	f001 ff24 	bl	800423a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80023f2:	2012      	movs	r0, #18
 80023f4:	f001 ff3d 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	37b0      	adds	r7, #176	; 0xb0
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	50040100 	.word	0x50040100
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_TIM_PWM_MspInit+0x44>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d113      	bne.n	8002442 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_TIM_PWM_MspInit+0x48>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <HAL_TIM_PWM_MspInit+0x48>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6593      	str	r3, [r2, #88]	; 0x58
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_TIM_PWM_MspInit+0x48>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	201d      	movs	r0, #29
 8002438:	f001 feff 	bl	800423a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800243c:	201d      	movs	r0, #29
 800243e:	f001 ff18 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40000400 	.word	0x40000400
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a16      	ldr	r2, [pc, #88]	; (80024bc <HAL_TIM_Base_MspInit+0x68>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d114      	bne.n	8002490 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_TIM_Base_MspInit+0x6c>)
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2036      	movs	r0, #54	; 0x36
 8002484:	f001 fed9 	bl	800423a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002488:	2036      	movs	r0, #54	; 0x36
 800248a:	f001 fef2 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800248e:	e010      	b.n	80024b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <HAL_TIM_Base_MspInit+0x70>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10b      	bne.n	80024b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_TIM_Base_MspInit+0x6c>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_TIM_Base_MspInit+0x6c>)
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	6613      	str	r3, [r2, #96]	; 0x60
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_TIM_Base_MspInit+0x6c>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40001000 	.word	0x40001000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40014400 	.word	0x40014400

080024c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_TIM_MspPostInit+0x64>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d11b      	bne.n	8002522 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_TIM_MspPostInit+0x68>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <HAL_TIM_MspPostInit+0x68>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_TIM_MspPostInit+0x68>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002502:	2310      	movs	r3, #16
 8002504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002512:	2302      	movs	r3, #2
 8002514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	4619      	mov	r1, r3
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <HAL_TIM_MspPostInit+0x6c>)
 800251e:	f001 fec3 	bl	80042a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40000400 	.word	0x40000400
 8002530:	40021000 	.word	0x40021000
 8002534:	48000400 	.word	0x48000400

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0ac      	sub	sp, #176	; 0xb0
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2288      	movs	r2, #136	; 0x88
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f005 fbff 	bl	8007d5c <memset>
  if(huart->Instance==USART2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <HAL_UART_MspInit+0xb0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d13b      	bne.n	80025e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002568:	2302      	movs	r3, #2
 800256a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800256c:	2300      	movs	r3, #0
 800256e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4618      	mov	r0, r3
 8002576:	f002 ff07 	bl	8005388 <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002580:	f7ff fea8 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_UART_MspInit+0xb4>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_UART_MspInit+0xb4>)
 800258a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258e:	6593      	str	r3, [r2, #88]	; 0x58
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_UART_MspInit+0xb4>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_UART_MspInit+0xb4>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	4a12      	ldr	r2, [pc, #72]	; (80025ec <HAL_UART_MspInit+0xb4>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_UART_MspInit+0xb4>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025b4:	230c      	movs	r3, #12
 80025b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025cc:	2307      	movs	r3, #7
 80025ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f001 fe64 	bl	80042a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	37b0      	adds	r7, #176	; 0xb0
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40004400 	.word	0x40004400
 80025ec:	40021000 	.word	0x40021000

080025f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <NMI_Handler+0x4>

080025f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <HardFault_Handler+0x4>

080025fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <MemManage_Handler+0x4>

08002602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <BusFault_Handler+0x4>

08002608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <UsageFault_Handler+0x4>

0800260e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800263c:	f000 f9a0 	bl	8002980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8002648:	2008      	movs	r0, #8
 800264a:	f002 f821 	bl	8004690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <ADC1_2_IRQHandler+0x10>)
 800265a:	f000 fe3d 	bl	80032d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200005c8 	.word	0x200005c8

08002668 <EXTI9_5_IRQHandler>:
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
int xxx = 0;
void EXTI9_5_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	xxx++;
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <EXTI9_5_IRQHandler+0x18>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a03      	ldr	r2, [pc, #12]	; (8002680 <EXTI9_5_IRQHandler+0x18>)
 8002674:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DHT11_Pin);
 8002676:	2020      	movs	r0, #32
 8002678:	f002 f80a 	bl	8004690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000794 	.word	0x20000794

08002684 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <TIM3_IRQHandler+0x10>)
 800268a:	f003 fe85 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000062c 	.word	0x2000062c

08002698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800269c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026a0:	f001 fff6 	bl	8004690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026a8:	f001 fff2 	bl	8004690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <TIM6_DAC_IRQHandler+0x10>)
 80026b6:	f003 fe6f 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000678 	.word	0x20000678

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_kill>:

int _kill(int pid, int sig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026de:	f005 fb13 	bl	8007d08 <__errno>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2216      	movs	r2, #22
 80026e6:	601a      	str	r2, [r3, #0]
	return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_exit>:

void _exit (int status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe7 	bl	80026d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002706:	e7fe      	b.n	8002706 <_exit+0x12>

08002708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e00a      	b.n	8002730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800271a:	f3af 8000 	nop.w
 800271e:	4601      	mov	r1, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbf0      	blt.n	800271a <_read+0x12>
	}

return len;
 8002738:	687b      	ldr	r3, [r7, #4]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e009      	b.n	8002768 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	60ba      	str	r2, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fda7 	bl	80022b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	dbf1      	blt.n	8002754 <_write+0x12>
	}
	return len;
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <_close>:

int _close(int file)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
	return -1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a2:	605a      	str	r2, [r3, #4]
	return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_isatty>:

int _isatty(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	return 1;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f005 fa78 	bl	8007d08 <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20018000 	.word	0x20018000
 8002844:	00000400 	.word	0x00000400
 8002848:	20000798 	.word	0x20000798
 800284c:	200007b0 	.word	0x200007b0

08002850 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif


}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002878:	f7ff ffea 	bl	8002850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800287e:	490d      	ldr	r1, [pc, #52]	; (80028b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <LoopForever+0xe>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1

  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002894:	4c0a      	ldr	r4, [pc, #40]	; (80028c0 <LoopForever+0x16>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a2:	f005 fa37 	bl	8007d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028a6:	f7ff faa7 	bl	8001df8 <main>

080028aa <LoopForever>:

LoopForever:
    b LoopForever
 80028aa:	e7fe      	b.n	80028aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80028b8:	0800b908 	.word	0x0800b908
  ldr r2, =_sbss
 80028bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028c0:	200007b0 	.word	0x200007b0

080028c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC3_IRQHandler>
	...

080028c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_Init+0x3c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_Init+0x3c>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028de:	2003      	movs	r0, #3
 80028e0:	f001 fca0 	bl	8004224 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 f80f 	bl	8002908 <HAL_InitTick>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	71fb      	strb	r3, [r7, #7]
 80028f4:	e001      	b.n	80028fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f6:	f7ff fcf3 	bl	80022e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028fa:	79fb      	ldrb	r3, [r7, #7]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40022000 	.word	0x40022000

08002908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_InitTick+0x6c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800291c:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_InitTick+0x70>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_InitTick+0x6c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4619      	mov	r1, r3
 8002926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292a:	fbb3 f3f1 	udiv	r3, r3, r1
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	4618      	mov	r0, r3
 8002934:	f001 fcab 	bl	800428e <HAL_SYSTICK_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d809      	bhi.n	8002958 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f001 fc75 	bl	800423a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <HAL_InitTick+0x74>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e007      	b.n	8002968 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e004      	b.n	8002968 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e001      	b.n	8002968 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000008 	.word	0x20000008
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004

08002980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_IncTick+0x20>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x24>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4413      	add	r3, r2
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_IncTick+0x24>)
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000008 	.word	0x20000008
 80029a4:	2000079c 	.word	0x2000079c

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	2000079c 	.word	0x2000079c

080029c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3360      	adds	r3, #96	; 0x60
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <LL_ADC_SetOffset+0x44>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	03fff000 	.word	0x03fff000

08002a70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3360      	adds	r3, #96	; 0x60
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3360      	adds	r3, #96	; 0x60
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3330      	adds	r3, #48	; 0x30
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	4413      	add	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	211f      	movs	r1, #31
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0e9b      	lsrs	r3, r3, #26
 8002b30:	f003 011f 	and.w	r1, r3, #31
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3314      	adds	r3, #20
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	0e5b      	lsrs	r3, r3, #25
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0d1b      	lsrs	r3, r3, #20
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2107      	movs	r1, #7
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0d1b      	lsrs	r3, r3, #20
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	43db      	mvns	r3, r3
 8002be6:	401a      	ands	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0318 	and.w	r3, r3, #24
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bf0:	40d9      	lsrs	r1, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	0007ffff 	.word	0x0007ffff

08002c14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 031f 	and.w	r3, r3, #31
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6093      	str	r3, [r2, #8]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c84:	d101      	bne.n	8002c8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ca8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e136      	b.n	8003034 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff faa7 	bl	8002328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff3f 	bl	8002c70 <LL_ADC_IsDeepPowerDownEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff25 	bl	8002c4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff5a 	bl	8002cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d115      	bne.n	8002e3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff3e 	bl	8002c98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e1c:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_ADC_Init+0x290>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	4a87      	ldr	r2, [pc, #540]	; (8003040 <HAL_ADC_Init+0x294>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e30:	e002      	b.n	8002e38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f9      	bne.n	8002e32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff3c 	bl	8002cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff75 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002e74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 80cf 	bne.w	8003022 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80cb 	bne.w	8003022 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff35 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eac:	4865      	ldr	r0, [pc, #404]	; (8003044 <HAL_ADC_Init+0x298>)
 8002eae:	f7ff ff2f 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4864      	ldr	r0, [pc, #400]	; (8003048 <HAL_ADC_Init+0x29c>)
 8002eb6:	f7ff ff2b 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	431c      	orrs	r4, r3
 8002ebe:	4863      	ldr	r0, [pc, #396]	; (800304c <HAL_ADC_Init+0x2a0>)
 8002ec0:	f7ff ff26 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4323      	orrs	r3, r4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	485f      	ldr	r0, [pc, #380]	; (8003050 <HAL_ADC_Init+0x2a4>)
 8002ed4:	f7ff fd74 	bl	80029c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e5b      	ldrb	r3, [r3, #25]
 8002edc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ee2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ee8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	045b      	lsls	r3, r3, #17
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_ADC_Init+0x2a8>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff08 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff15 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 8002f5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13d      	bne.n	8002fde <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13a      	bne.n	8002fde <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f6c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f84:	f023 0302 	bic.w	r3, r3, #2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d118      	bne.n	8002fce <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	611a      	str	r2, [r3, #16]
 8002fcc:	e007      	b.n	8002fde <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10c      	bne.n	8003000 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f023 010f 	bic.w	r1, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ffe:	e007      	b.n	8003010 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 020f 	bic.w	r2, r2, #15
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f023 0303 	bic.w	r3, r3, #3
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
 8003020:	e007      	b.n	8003032 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f043 0210 	orr.w	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003032:	7ffb      	ldrb	r3, [r7, #31]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3724      	adds	r7, #36	; 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}
 800303c:	20000000 	.word	0x20000000
 8003040:	053e2d63 	.word	0x053e2d63
 8003044:	50040000 	.word	0x50040000
 8003048:	50040100 	.word	0x50040100
 800304c:	50040200 	.word	0x50040200
 8003050:	50040300 	.word	0x50040300
 8003054:	fff0c007 	.word	0xfff0c007

08003058 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003060:	4893      	ldr	r0, [pc, #588]	; (80032b0 <HAL_ADC_Start_IT+0x258>)
 8003062:	f7ff fdd7 	bl	8002c14 <LL_ADC_GetMultimode>
 8003066:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fe76 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 8111 	bne.w	800329c <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_ADC_Start_IT+0x30>
 8003084:	2302      	movs	r3, #2
 8003086:	e10e      	b.n	80032a6 <HAL_ADC_Start_IT+0x24e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 ff3f 	bl	8003f14 <ADC_Enable>
 8003096:	4603      	mov	r3, r0
 8003098:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 80f8 	bne.w	8003292 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a7e      	ldr	r2, [pc, #504]	; (80032b4 <HAL_ADC_Start_IT+0x25c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d002      	beq.n	80030c6 <HAL_ADC_Start_IT+0x6e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_Start_IT+0x70>
 80030c6:	4b7c      	ldr	r3, [pc, #496]	; (80032b8 <HAL_ADC_Start_IT+0x260>)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d002      	beq.n	80030d6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	f023 0206 	bic.w	r2, r3, #6
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58
 80030fa:	e002      	b.n	8003102 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	221c      	movs	r2, #28
 8003108:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 021c 	bic.w	r2, r2, #28
 8003120:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d108      	bne.n	800313c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0208 	orr.w	r2, r2, #8
 8003138:	605a      	str	r2, [r3, #4]
          break;
 800313a:	e008      	b.n	800314e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0204 	orr.w	r2, r2, #4
 800314a:	605a      	str	r2, [r3, #4]
          break;
 800314c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0210 	orr.w	r2, r2, #16
 8003164:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_ADC_Start_IT+0x25c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d002      	beq.n	8003176 <HAL_ADC_Start_IT+0x11e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	e000      	b.n	8003178 <HAL_ADC_Start_IT+0x120>
 8003176:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <HAL_ADC_Start_IT+0x260>)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	4293      	cmp	r3, r2
 800317e:	d008      	beq.n	8003192 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d002      	beq.n	8003192 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b09      	cmp	r3, #9
 8003190:	d13b      	bne.n	800320a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02d      	beq.n	80031fc <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d110      	bne.n	80031da <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0220 	bic.w	r2, r2, #32
 80031c6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d6:	605a      	str	r2, [r3, #4]
              break;
 80031d8:	e011      	b.n	80031fe <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0220 	orr.w	r2, r2, #32
 80031f8:	605a      	str	r2, [r3, #4]
              break;
 80031fa:	e000      	b.n	80031fe <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80031fc:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fd97 	bl	8002d36 <LL_ADC_REG_StartConversion>
 8003208:	e04c      	b.n	80032a4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_ADC_Start_IT+0x25c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d002      	beq.n	8003226 <HAL_ADC_Start_IT+0x1ce>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	e000      	b.n	8003228 <HAL_ADC_Start_IT+0x1d0>
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_ADC_Start_IT+0x260>)
 8003228:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d035      	beq.n	80032a2 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800323e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d110      	bne.n	8003270 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0220 	bic.w	r2, r2, #32
 800325c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800326c:	605a      	str	r2, [r3, #4]
              break;
 800326e:	e019      	b.n	80032a4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	605a      	str	r2, [r3, #4]
              break;
 8003290:	e008      	b.n	80032a4 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800329a:	e003      	b.n	80032a4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800329c:	2302      	movs	r3, #2
 800329e:	75fb      	strb	r3, [r7, #23]
 80032a0:	e000      	b.n	80032a4 <HAL_ADC_Start_IT+0x24c>
        }
 80032a2:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	50040300 	.word	0x50040300
 80032b4:	50040100 	.word	0x50040100
 80032b8:	50040000 	.word	0x50040000

080032bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032f4:	4882      	ldr	r0, [pc, #520]	; (8003500 <HAL_ADC_IRQHandler+0x228>)
 80032f6:	f7ff fc8d 	bl	8002c14 <LL_ADC_GetMultimode>
 80032fa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_ADC_IRQHandler+0x5e>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d012      	beq.n	8003336 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fea1 	bl	8004070 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2202      	movs	r2, #2
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d004      	beq.n	800334a <HAL_ADC_IRQHandler+0x72>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8083 	beq.w	800345c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d07d      	beq.n	800345c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fba8 	bl	8002ad2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d062      	beq.n	800344e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <HAL_ADC_IRQHandler+0x22c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d002      	beq.n	8003398 <HAL_ADC_IRQHandler+0xc0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e000      	b.n	800339a <HAL_ADC_IRQHandler+0xc2>
 8003398:	4b5b      	ldr	r3, [pc, #364]	; (8003508 <HAL_ADC_IRQHandler+0x230>)
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	4293      	cmp	r3, r2
 80033a0:	d008      	beq.n	80033b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d002      	beq.n	80033b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b09      	cmp	r3, #9
 80033b2:	d104      	bne.n	80033be <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	e00c      	b.n	80033d8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a50      	ldr	r2, [pc, #320]	; (8003504 <HAL_ADC_IRQHandler+0x22c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d002      	beq.n	80033ce <HAL_ADC_IRQHandler+0xf6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	e000      	b.n	80033d0 <HAL_ADC_IRQHandler+0xf8>
 80033ce:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <HAL_ADC_IRQHandler+0x230>)
 80033d0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d135      	bne.n	800344e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d12e      	bne.n	800344e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fcb2 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11a      	bne.n	8003436 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 020c 	bic.w	r2, r2, #12
 800340e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d112      	bne.n	800344e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
 8003434:	e00b      	b.n	800344e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f043 0210 	orr.w	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fcc4 	bl	8001ddc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	220c      	movs	r2, #12
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <HAL_ADC_IRQHandler+0x198>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 809f 	beq.w	80035ba <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8099 	beq.w	80035ba <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fb53 	bl	8002b50 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034aa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fb0e 	bl	8002ad2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034b6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_ADC_IRQHandler+0x22c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d002      	beq.n	80034c8 <HAL_ADC_IRQHandler+0x1f0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	e000      	b.n	80034ca <HAL_ADC_IRQHandler+0x1f2>
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_ADC_IRQHandler+0x230>)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d008      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d002      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d104      	bne.n	80034ee <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	e013      	b.n	8003516 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_ADC_IRQHandler+0x22c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_ADC_IRQHandler+0x234>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	e007      	b.n	800350e <HAL_ADC_IRQHandler+0x236>
 80034fe:	bf00      	nop
 8003500:	50040300 	.word	0x50040300
 8003504:	50040100 	.word	0x50040100
 8003508:	50040000 	.word	0x50040000
 800350c:	4b7d      	ldr	r3, [pc, #500]	; (8003704 <HAL_ADC_IRQHandler+0x42c>)
 800350e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d047      	beq.n	80035ac <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_ADC_IRQHandler+0x25e>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03f      	beq.n	80035ac <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003532:	2b00      	cmp	r3, #0
 8003534:	d13a      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d133      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12e      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fc16 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11a      	bne.n	8003594 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800356c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d112      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
 8003592:	e00b      	b.n	80035ac <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0210 	orr.w	r2, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fd37 	bl	8004020 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2260      	movs	r2, #96	; 0x60
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d011      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x310>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f896 	bl	800370c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <HAL_ADC_IRQHandler+0x340>
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fd1d 	bl	8004048 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <HAL_ADC_IRQHandler+0x370>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fd0f 	bl	800405c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003646:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d036      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x3e8>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d031      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003664:	2301      	movs	r3, #1
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
 8003668:	e014      	b.n	8003694 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003670:	4825      	ldr	r0, [pc, #148]	; (8003708 <HAL_ADC_IRQHandler+0x430>)
 8003672:	f7ff fadd 	bl	8002c30 <LL_ADC_GetMultiDMATransfer>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800367c:	2301      	movs	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	e008      	b.n	8003694 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10e      	bne.n	80036b8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f834 	bl	8003720 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2210      	movs	r2, #16
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d018      	beq.n	80036fc <HAL_ADC_IRQHandler+0x424>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f043 0208 	orr.w	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fc9c 	bl	8004034 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80036fc:	bf00      	nop
 80036fe:	3728      	adds	r7, #40	; 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	50040000 	.word	0x50040000
 8003708:	50040300 	.word	0x50040300

0800370c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b0b6      	sub	sp, #216	; 0xd8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x22>
 8003752:	2302      	movs	r3, #2
 8003754:	e3c7      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x7b2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fafb 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 83a8 	bne.w	8003ec0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b05      	cmp	r3, #5
 8003776:	d824      	bhi.n	80037c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	3b02      	subs	r3, #2
 800377e:	2b03      	cmp	r3, #3
 8003780:	d81b      	bhi.n	80037ba <HAL_ADC_ConfigChannel+0x86>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_ADC_ConfigChannel+0x54>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037a9 	.word	0x080037a9
 8003794:	080037b1 	.word	0x080037b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	220c      	movs	r2, #12
 800379c:	605a      	str	r2, [r3, #4]
          break;
 800379e:	e011      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2212      	movs	r2, #18
 80037a4:	605a      	str	r2, [r3, #4]
          break;
 80037a6:	e00d      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2218      	movs	r2, #24
 80037ac:	605a      	str	r2, [r3, #4]
          break;
 80037ae:	e009      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b6:	605a      	str	r2, [r3, #4]
          break;
 80037b8:	e004      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2206      	movs	r2, #6
 80037be:	605a      	str	r2, [r3, #4]
          break;
 80037c0:	e000      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80037c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	f7ff f991 	bl	8002af8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fabf 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 80037e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff facb 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 80037ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 81a6 	bne.w	8003b48 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 81a1 	bne.w	8003b48 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	461a      	mov	r2, r3
 8003814:	f7ff f9af 	bl	8002b76 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	08db      	lsrs	r3, r3, #3
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d00a      	beq.n	8003850 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6919      	ldr	r1, [r3, #16]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800384a:	f7ff f8ed 	bl	8002a28 <LL_ADC_SetOffset>
 800384e:	e17b      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff f90a 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800385c:	4603      	mov	r3, r0
 800385e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <HAL_ADC_ConfigChannel+0x148>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff f8ff 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003872:	4603      	mov	r3, r0
 8003874:	0e9b      	lsrs	r3, r3, #26
 8003876:	f003 021f 	and.w	r2, r3, #31
 800387a:	e01e      	b.n	80038ba <HAL_ADC_ConfigChannel+0x186>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f8f4 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800389a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800389e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80038aa:	2320      	movs	r3, #32
 80038ac:	e004      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80038ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x19e>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0e9b      	lsrs	r3, r3, #26
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	e018      	b.n	8003904 <HAL_ADC_ConfigChannel+0x1d0>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80038e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80038ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e004      	b.n	8003904 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80038fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003904:	429a      	cmp	r2, r3
 8003906:	d106      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f8c3 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f8a7 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003922:	4603      	mov	r3, r0
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x20e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f89c 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003938:	4603      	mov	r3, r0
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	e01e      	b.n	8003980 <HAL_ADC_ConfigChannel+0x24c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f891 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003960:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e004      	b.n	800397e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x264>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0e9b      	lsrs	r3, r3, #26
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	e018      	b.n	80039ca <HAL_ADC_ConfigChannel+0x296>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80039bc:	2320      	movs	r3, #32
 80039be:	e004      	b.n	80039ca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80039c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d106      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff f860 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff f844 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x2d4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff f839 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80039fe:	4603      	mov	r3, r0
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	f003 021f 	and.w	r2, r3, #31
 8003a06:	e01e      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x312>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff f82e 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a36:	2320      	movs	r3, #32
 8003a38:	e004      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x32a>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0e9b      	lsrs	r3, r3, #26
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	e016      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x358>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	e004      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d106      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2102      	movs	r1, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe ffff 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe ffe3 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x396>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2103      	movs	r1, #3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe ffd8 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	0e9b      	lsrs	r3, r3, #26
 8003ac4:	f003 021f 	and.w	r2, r3, #31
 8003ac8:	e017      	b.n	8003afa <HAL_ADC_ConfigChannel+0x3c6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2103      	movs	r1, #3
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe ffcd 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003adc:	fa93 f3a3 	rbit	r3, r3
 8003ae0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003aec:	2320      	movs	r3, #32
 8003aee:	e003      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x3de>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	e011      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x402>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	e003      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d106      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2103      	movs	r1, #3
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe ffaa 	bl	8002a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff f8df 	bl	8002d10 <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 813f 	bne.w	8003dd8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7ff f830 	bl	8002bcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a8e      	ldr	r2, [pc, #568]	; (8003dac <HAL_ADC_ConfigChannel+0x678>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	f040 8130 	bne.w	8003dd8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x46c>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	bf94      	ite	ls
 8003b98:	2301      	movls	r3, #1
 8003b9a:	2300      	movhi	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e019      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x4a0>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e003      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	bf94      	ite	ls
 8003bce:	2301      	movls	r3, #1
 8003bd0:	2300      	movhi	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d079      	beq.n	8003ccc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x4c0>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	3301      	adds	r3, #1
 8003bec:	069b      	lsls	r3, r3, #26
 8003bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bf2:	e015      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x4ec>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	e003      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	069b      	lsls	r3, r3, #26
 8003c1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x50c>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	3301      	adds	r3, #1
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	e017      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x53c>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e003      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	ea42 0103 	orr.w	r1, r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x562>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	3301      	adds	r3, #1
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	051b      	lsls	r3, r3, #20
 8003c94:	e018      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x594>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	e003      	b.n	8003cba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	e080      	b.n	8003dce <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d107      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x5b4>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0e9b      	lsrs	r3, r3, #26
 8003cde:	3301      	adds	r3, #1
 8003ce0:	069b      	lsls	r3, r3, #26
 8003ce2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce6:	e015      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x5e0>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	e003      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	069b      	lsls	r3, r3, #26
 8003d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x600>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	0e9b      	lsrs	r3, r3, #26
 8003d26:	3301      	adds	r3, #1
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	e017      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x630>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	61fb      	str	r3, [r7, #28]
  return result;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	e003      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2101      	movs	r1, #1
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	ea42 0103 	orr.w	r1, r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x65c>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f003 021f 	and.w	r2, r3, #31
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	3b1e      	subs	r3, #30
 8003d88:	051b      	lsls	r3, r3, #20
 8003d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	e01d      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x698>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	613b      	str	r3, [r7, #16]
  return result;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e005      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x684>
 8003dac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 021f 	and.w	r2, r3, #31
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b1e      	subs	r3, #30
 8003dc6:	051b      	lsls	r3, r3, #20
 8003dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f7fe fecf 	bl	8002b76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d07a      	beq.n	8003eda <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de4:	4843      	ldr	r0, [pc, #268]	; (8003ef4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003de6:	f7fe fe11 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 8003dea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d12c      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d126      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a3c      	ldr	r2, [pc, #240]	; (8003efc <HAL_ADC_ConfigChannel+0x7c8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x6e4>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d15d      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e20:	4619      	mov	r1, r3
 8003e22:	4834      	ldr	r0, [pc, #208]	; (8003ef4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e24:	f7fe fddf 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <HAL_ADC_ConfigChannel+0x7d0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	4a36      	ldr	r2, [pc, #216]	; (8003f08 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	099b      	lsrs	r3, r3, #6
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e42:	e002      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f9      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e50:	e040      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <HAL_ADC_ConfigChannel+0x7d8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d118      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x75a>
 8003e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d112      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	; (8003efc <HAL_ADC_ConfigChannel+0x7c8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x748>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d12d      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e84:	4619      	mov	r1, r3
 8003e86:	481b      	ldr	r0, [pc, #108]	; (8003ef4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e88:	f7fe fdad 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e8c:	e024      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d120      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d11a      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <HAL_ADC_ConfigChannel+0x7c8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d115      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	480e      	ldr	r0, [pc, #56]	; (8003ef4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003eba:	f7fe fd94 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
 8003ebe:	e00c      	b.n	8003eda <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ed2:	e002      	b.n	8003eda <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ee2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	37d8      	adds	r7, #216	; 0xd8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	80080000 	.word	0x80080000
 8003ef4:	50040300 	.word	0x50040300
 8003ef8:	c7520000 	.word	0xc7520000
 8003efc:	50040000 	.word	0x50040000
 8003f00:	50040200 	.word	0x50040200
 8003f04:	20000000 	.word	0x20000000
 8003f08:	053e2d63 	.word	0x053e2d63
 8003f0c:	cb840000 	.word	0xcb840000
 8003f10:	80000001 	.word	0x80000001

08003f14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fef3 	bl	8002d10 <LL_ADC_IsEnabled>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d169      	bne.n	8004004 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <ADC_Enable+0xfc>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f043 0210 	orr.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e055      	b.n	8004006 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fec2 	bl	8002ce8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f64:	482b      	ldr	r0, [pc, #172]	; (8004014 <ADC_Enable+0x100>)
 8003f66:	f7fe fd51 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f74:	4b28      	ldr	r3, [pc, #160]	; (8004018 <ADC_Enable+0x104>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	4a28      	ldr	r2, [pc, #160]	; (800401c <ADC_Enable+0x108>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	099b      	lsrs	r3, r3, #6
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f8e:	e002      	b.n	8003f96 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f9      	bne.n	8003f90 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f9c:	f7fe fd04 	bl	80029a8 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fa2:	e028      	b.n	8003ff6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe feb1 	bl	8002d10 <LL_ADC_IsEnabled>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fe95 	bl	8002ce8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fbe:	f7fe fcf3 	bl	80029a8 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d914      	bls.n	8003ff6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d00d      	beq.n	8003ff6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	f043 0210 	orr.w	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e007      	b.n	8004006 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d1cf      	bne.n	8003fa4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	8000003f 	.word	0x8000003f
 8004014:	50040300 	.word	0x50040300
 8004018:	20000000 	.word	0x20000000
 800401c:	053e2d63 	.word	0x053e2d63

08004020 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a0:	4013      	ands	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040b6:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <__NVIC_SetPriorityGrouping+0x44>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	60d3      	str	r3, [r2, #12]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <__NVIC_GetPriorityGrouping+0x18>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	f003 0307 	and.w	r3, r3, #7
}
 80040da:	4618      	mov	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000ed00 	.word	0xe000ed00

080040e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	db0b      	blt.n	8004112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	4907      	ldr	r1, [pc, #28]	; (8004120 <__NVIC_EnableIRQ+0x38>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2001      	movs	r0, #1
 800410a:	fa00 f202 	lsl.w	r2, r0, r2
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000e100 	.word	0xe000e100

08004124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	2b00      	cmp	r3, #0
 8004136:	db0a      	blt.n	800414e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	490c      	ldr	r1, [pc, #48]	; (8004170 <__NVIC_SetPriority+0x4c>)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	0112      	lsls	r2, r2, #4
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	440b      	add	r3, r1
 8004148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800414c:	e00a      	b.n	8004164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4908      	ldr	r1, [pc, #32]	; (8004174 <__NVIC_SetPriority+0x50>)
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	3b04      	subs	r3, #4
 800415c:	0112      	lsls	r2, r2, #4
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	440b      	add	r3, r1
 8004162:	761a      	strb	r2, [r3, #24]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000e100 	.word	0xe000e100
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	; 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f1c3 0307 	rsb	r3, r3, #7
 8004192:	2b04      	cmp	r3, #4
 8004194:	bf28      	it	cs
 8004196:	2304      	movcs	r3, #4
 8004198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3304      	adds	r3, #4
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d902      	bls.n	80041a8 <NVIC_EncodePriority+0x30>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3b03      	subs	r3, #3
 80041a6:	e000      	b.n	80041aa <NVIC_EncodePriority+0x32>
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	401a      	ands	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c0:	f04f 31ff 	mov.w	r1, #4294967295
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43d9      	mvns	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	4313      	orrs	r3, r2
         );
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	; 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f0:	d301      	bcc.n	80041f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041f2:	2301      	movs	r3, #1
 80041f4:	e00f      	b.n	8004216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <SysTick_Config+0x40>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041fe:	210f      	movs	r1, #15
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	f7ff ff8e 	bl	8004124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <SysTick_Config+0x40>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <SysTick_Config+0x40>)
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	e000e010 	.word	0xe000e010

08004224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff29 	bl	8004084 <__NVIC_SetPriorityGrouping>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	4603      	mov	r3, r0
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800424c:	f7ff ff3e 	bl	80040cc <__NVIC_GetPriorityGrouping>
 8004250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	6978      	ldr	r0, [r7, #20]
 8004258:	f7ff ff8e 	bl	8004178 <NVIC_EncodePriority>
 800425c:	4602      	mov	r2, r0
 800425e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff5d 	bl	8004124 <__NVIC_SetPriority>
}
 800426a:	bf00      	nop
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	4603      	mov	r3, r0
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff31 	bl	80040e8 <__NVIC_EnableIRQ>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ffa2 	bl	80041e0 <SysTick_Config>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b6:	e17f      	b.n	80045b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8171 	beq.w	80045b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d005      	beq.n	80042e8 <HAL_GPIO_Init+0x40>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d130      	bne.n	800434a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800431e:	2201      	movs	r2, #1
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0201 	and.w	r2, r3, #1
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b03      	cmp	r3, #3
 8004354:	d118      	bne.n	8004388 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800435c:	2201      	movs	r2, #1
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	08db      	lsrs	r3, r3, #3
 8004372:	f003 0201 	and.w	r2, r3, #1
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b03      	cmp	r3, #3
 8004392:	d017      	beq.n	80043c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d123      	bne.n	8004418 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4013      	ands	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	08da      	lsrs	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3208      	adds	r2, #8
 8004412:	6939      	ldr	r1, [r7, #16]
 8004414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0203 	and.w	r2, r3, #3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80ac 	beq.w	80045b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HAL_GPIO_Init+0x330>)
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	4a5e      	ldr	r2, [pc, #376]	; (80045d8 <HAL_GPIO_Init+0x330>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6613      	str	r3, [r2, #96]	; 0x60
 8004466:	4b5c      	ldr	r3, [pc, #368]	; (80045d8 <HAL_GPIO_Init+0x330>)
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004472:	4a5a      	ldr	r2, [pc, #360]	; (80045dc <HAL_GPIO_Init+0x334>)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	3302      	adds	r3, #2
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	220f      	movs	r2, #15
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800449c:	d025      	beq.n	80044ea <HAL_GPIO_Init+0x242>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4f      	ldr	r2, [pc, #316]	; (80045e0 <HAL_GPIO_Init+0x338>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <HAL_GPIO_Init+0x23e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4e      	ldr	r2, [pc, #312]	; (80045e4 <HAL_GPIO_Init+0x33c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_Init+0x23a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4d      	ldr	r2, [pc, #308]	; (80045e8 <HAL_GPIO_Init+0x340>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x236>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_GPIO_Init+0x344>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x232>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4b      	ldr	r2, [pc, #300]	; (80045f0 <HAL_GPIO_Init+0x348>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x22e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <HAL_GPIO_Init+0x34c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x22a>
 80044ce:	2306      	movs	r3, #6
 80044d0:	e00c      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00a      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044d6:	2305      	movs	r3, #5
 80044d8:	e008      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044da:	2304      	movs	r3, #4
 80044dc:	e006      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044de:	2303      	movs	r3, #3
 80044e0:	e004      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_GPIO_Init+0x244>
 80044ea:	2300      	movs	r3, #0
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	f002 0203 	and.w	r2, r2, #3
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4093      	lsls	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044fc:	4937      	ldr	r1, [pc, #220]	; (80045dc <HAL_GPIO_Init+0x334>)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	3302      	adds	r3, #2
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_GPIO_Init+0x350>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	43db      	mvns	r3, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004534:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	43db      	mvns	r3, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <HAL_GPIO_Init+0x350>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004582:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <HAL_GPIO_Init+0x350>)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004588:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_GPIO_Init+0x350>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43db      	mvns	r3, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ac:	4a12      	ldr	r2, [pc, #72]	; (80045f8 <HAL_GPIO_Init+0x350>)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	3301      	adds	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f47f ae78 	bne.w	80042b8 <HAL_GPIO_Init+0x10>
  }
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40010000 	.word	0x40010000
 80045e0:	48000400 	.word	0x48000400
 80045e4:	48000800 	.word	0x48000800
 80045e8:	48000c00 	.word	0x48000c00
 80045ec:	48001000 	.word	0x48001000
 80045f0:	48001400 	.word	0x48001400
 80045f4:	48001800 	.word	0x48001800
 80045f8:	40010400 	.word	0x40010400

080045fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	887b      	ldrh	r3, [r7, #2]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
 8004618:	e001      	b.n	800461e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	807b      	strh	r3, [r7, #2]
 8004638:	4613      	mov	r3, r2
 800463a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800463c:	787b      	ldrb	r3, [r7, #1]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004648:	e002      	b.n	8004650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4013      	ands	r3, r2
 8004674:	041a      	lsls	r2, r3, #16
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	43d9      	mvns	r1, r3
 800467a:	887b      	ldrh	r3, [r7, #2]
 800467c:	400b      	ands	r3, r1
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	619a      	str	r2, [r3, #24]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d006      	beq.n	80046b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046a6:	4a05      	ldr	r2, [pc, #20]	; (80046bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd fb74 	bl	8001d9c <HAL_GPIO_EXTI_Callback>
  }
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40010400 	.word	0x40010400

080046c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40007000 	.word	0x40007000

080046dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ea:	d130      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d038      	beq.n	800476c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004702:	4a1e      	ldr	r2, [pc, #120]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2232      	movs	r2, #50	; 0x32
 8004710:	fb02 f303 	mul.w	r3, r2, r3
 8004714:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0c9b      	lsrs	r3, r3, #18
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004720:	e002      	b.n	8004728 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b01      	subs	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d102      	bne.n	800473c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f2      	bne.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004748:	d110      	bne.n	800476c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e00f      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d007      	beq.n	800476c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004764:	4a05      	ldr	r2, [pc, #20]	; (800477c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800476a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40007000 	.word	0x40007000
 8004780:	20000000 	.word	0x20000000
 8004784:	431bde83 	.word	0x431bde83

08004788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e3ca      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479a:	4b97      	ldr	r3, [pc, #604]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a4:	4b94      	ldr	r3, [pc, #592]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80e4 	beq.w	8004984 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_RCC_OscConfig+0x4a>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	f040 808b 	bne.w	80048e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 8087 	bne.w	80048e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047d2:	4b89      	ldr	r3, [pc, #548]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x62>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e3a2      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	4b82      	ldr	r3, [pc, #520]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <HAL_RCC_OscConfig+0x7c>
 80047fa:	4b7f      	ldr	r3, [pc, #508]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004802:	e005      	b.n	8004810 <HAL_RCC_OscConfig+0x88>
 8004804:	4b7c      	ldr	r3, [pc, #496]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004810:	4293      	cmp	r3, r2
 8004812:	d223      	bcs.n	800485c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fd55 	bl	80052c8 <RCC_SetFlashLatencyFromMSIRange>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e383      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004828:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a72      	ldr	r2, [pc, #456]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800482e:	f043 0308 	orr.w	r3, r3, #8
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b70      	ldr	r3, [pc, #448]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	496d      	ldr	r1, [pc, #436]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004846:	4b6c      	ldr	r3, [pc, #432]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	4968      	ldr	r1, [pc, #416]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
 800485a:	e025      	b.n	80048a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800485c:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004862:	f043 0308 	orr.w	r3, r3, #8
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4b63      	ldr	r3, [pc, #396]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	4960      	ldr	r1, [pc, #384]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800487a:	4b5f      	ldr	r3, [pc, #380]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	495b      	ldr	r1, [pc, #364]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fd15 	bl	80052c8 <RCC_SetFlashLatencyFromMSIRange>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e343      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048a8:	f000 fc4a 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b52      	ldr	r3, [pc, #328]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	4950      	ldr	r1, [pc, #320]	; (80049fc <HAL_RCC_OscConfig+0x274>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
 80048c4:	4a4e      	ldr	r2, [pc, #312]	; (8004a00 <HAL_RCC_OscConfig+0x278>)
 80048c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048c8:	4b4e      	ldr	r3, [pc, #312]	; (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe f81b 	bl	8002908 <HAL_InitTick>
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d052      	beq.n	8004982 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	e327      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d032      	beq.n	800494e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048e8:	4b43      	ldr	r3, [pc, #268]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a42      	ldr	r2, [pc, #264]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048f4:	f7fe f858 	bl	80029a8 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048fc:	f7fe f854 	bl	80029a8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e310      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800490e:	4b3a      	ldr	r3, [pc, #232]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800491a:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a36      	ldr	r2, [pc, #216]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	4931      	ldr	r1, [pc, #196]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	492c      	ldr	r1, [pc, #176]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
 800494c:	e01a      	b.n	8004984 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800495a:	f7fe f825 	bl	80029a8 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004962:	f7fe f821 	bl	80029a8 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e2dd      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004974:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f0      	bne.n	8004962 <HAL_RCC_OscConfig+0x1da>
 8004980:	e000      	b.n	8004984 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004982:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d074      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d005      	beq.n	80049a2 <HAL_RCC_OscConfig+0x21a>
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d10e      	bne.n	80049ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d10b      	bne.n	80049ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d064      	beq.n	8004a78 <HAL_RCC_OscConfig+0x2f0>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d160      	bne.n	8004a78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e2ba      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d106      	bne.n	80049d2 <HAL_RCC_OscConfig+0x24a>
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80049ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e026      	b.n	8004a20 <HAL_RCC_OscConfig+0x298>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049da:	d115      	bne.n	8004a08 <HAL_RCC_OscConfig+0x280>
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a05      	ldr	r2, [pc, #20]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80049e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a02      	ldr	r2, [pc, #8]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e014      	b.n	8004a20 <HAL_RCC_OscConfig+0x298>
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	0800b4b8 	.word	0x0800b4b8
 8004a00:	20000000 	.word	0x20000000
 8004a04:	20000004 	.word	0x20000004
 8004a08:	4ba0      	ldr	r3, [pc, #640]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a9f      	ldr	r2, [pc, #636]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4b9d      	ldr	r3, [pc, #628]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a9c      	ldr	r2, [pc, #624]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fd ffbe 	bl	80029a8 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fd ffba 	bl	80029a8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e276      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a42:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x2a8>
 8004a4e:	e014      	b.n	8004a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd ffaa 	bl	80029a8 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fd ffa6 	bl	80029a8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	; 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e262      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a6a:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2d0>
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d060      	beq.n	8004b48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_OscConfig+0x310>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d119      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d116      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a98:	4b7c      	ldr	r3, [pc, #496]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x328>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e23f      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b76      	ldr	r3, [pc, #472]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	4973      	ldr	r1, [pc, #460]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ac4:	e040      	b.n	8004b48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d023      	beq.n	8004b16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ace:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6e      	ldr	r2, [pc, #440]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ada:	f7fd ff65 	bl	80029a8 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae2:	f7fd ff61 	bl	80029a8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e21d      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af4:	4b65      	ldr	r3, [pc, #404]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b00:	4b62      	ldr	r3, [pc, #392]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	495f      	ldr	r1, [pc, #380]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
 8004b14:	e018      	b.n	8004b48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b16:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5c      	ldr	r2, [pc, #368]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd ff41 	bl	80029a8 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fd ff3d 	bl	80029a8 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1f9      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d03c      	beq.n	8004bce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01c      	beq.n	8004b96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5c:	4b4b      	ldr	r3, [pc, #300]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b62:	4a4a      	ldr	r2, [pc, #296]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd ff1c 	bl	80029a8 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fd ff18 	bl	80029a8 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e1d4      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b86:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ef      	beq.n	8004b74 <HAL_RCC_OscConfig+0x3ec>
 8004b94:	e01b      	b.n	8004bce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b96:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9c:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba6:	f7fd feff 	bl	80029a8 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bae:	f7fd fefb 	bl	80029a8 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e1b7      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ef      	bne.n	8004bae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80a6 	beq.w	8004d28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bec:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf8:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c04:	2301      	movs	r3, #1
 8004c06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c08:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_RCC_OscConfig+0x508>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d118      	bne.n	8004c46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c14:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <HAL_RCC_OscConfig+0x508>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <HAL_RCC_OscConfig+0x508>)
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c20:	f7fd fec2 	bl	80029a8 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c28:	f7fd febe 	bl	80029a8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e17a      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_RCC_OscConfig+0x508>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d108      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4d8>
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	4a0d      	ldr	r2, [pc, #52]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c5e:	e029      	b.n	8004cb4 <HAL_RCC_OscConfig+0x52c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b05      	cmp	r3, #5
 8004c66:	d115      	bne.n	8004c94 <HAL_RCC_OscConfig+0x50c>
 8004c68:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	4a03      	ldr	r2, [pc, #12]	; (8004c8c <HAL_RCC_OscConfig+0x504>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c88:	e014      	b.n	8004cb4 <HAL_RCC_OscConfig+0x52c>
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40007000 	.word	0x40007000
 8004c94:	4b9c      	ldr	r3, [pc, #624]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	4a9b      	ldr	r2, [pc, #620]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ca4:	4b98      	ldr	r3, [pc, #608]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	4a97      	ldr	r2, [pc, #604]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d016      	beq.n	8004cea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fd fe74 	bl	80029a8 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc4:	f7fd fe70 	bl	80029a8 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e12a      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cda:	4b8b      	ldr	r3, [pc, #556]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0ed      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x53c>
 8004ce8:	e015      	b.n	8004d16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cea:	f7fd fe5d 	bl	80029a8 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7fd fe59 	bl	80029a8 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e113      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d08:	4b7f      	ldr	r3, [pc, #508]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ed      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d16:	7ffb      	ldrb	r3, [r7, #31]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1c:	4b7a      	ldr	r3, [pc, #488]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	4a79      	ldr	r2, [pc, #484]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80fe 	beq.w	8004f2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	f040 80d0 	bne.w	8004edc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d3c:	4b72      	ldr	r3, [pc, #456]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f003 0203 	and.w	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d130      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d127      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d11f      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d7c:	2a07      	cmp	r2, #7
 8004d7e:	bf14      	ite	ne
 8004d80:	2201      	movne	r2, #1
 8004d82:	2200      	moveq	r2, #0
 8004d84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d113      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	3b01      	subs	r3, #1
 8004d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d06e      	beq.n	8004e90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d069      	beq.n	8004e8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004db8:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004dc4:	4b50      	ldr	r3, [pc, #320]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0ad      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dd4:	4b4c      	ldr	r3, [pc, #304]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a4b      	ldr	r2, [pc, #300]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004de0:	f7fd fde2 	bl	80029a8 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fd fdde 	bl	80029a8 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e09a      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dfa:	4b43      	ldr	r3, [pc, #268]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e06:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	4b40      	ldr	r3, [pc, #256]	; (8004f0c <HAL_RCC_OscConfig+0x784>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e16:	3a01      	subs	r2, #1
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	4311      	orrs	r1, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e20:	0212      	lsls	r2, r2, #8
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e28:	0852      	lsrs	r2, r2, #1
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	0552      	lsls	r2, r2, #21
 8004e2e:	4311      	orrs	r1, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e34:	0852      	lsrs	r2, r2, #1
 8004e36:	3a01      	subs	r2, #1
 8004e38:	0652      	lsls	r2, r2, #25
 8004e3a:	4311      	orrs	r1, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e40:	0912      	lsrs	r2, r2, #4
 8004e42:	0452      	lsls	r2, r2, #17
 8004e44:	430a      	orrs	r2, r1
 8004e46:	4930      	ldr	r1, [pc, #192]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b2e      	ldr	r3, [pc, #184]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2d      	ldr	r2, [pc, #180]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e64:	f7fd fda0 	bl	80029a8 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fd fd9c 	bl	80029a8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e058      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7e:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e8a:	e050      	b.n	8004f2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e04f      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e90:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d148      	bne.n	8004f2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ea8:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eb4:	f7fd fd78 	bl	80029a8 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fd fd74 	bl	80029a8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e030      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x734>
 8004eda:	e028      	b.n	8004f2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d023      	beq.n	8004f2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <HAL_RCC_OscConfig+0x780>)
 8004ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eee:	f7fd fd5b 	bl	80029a8 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fd fd57 	bl	80029a8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d905      	bls.n	8004f10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e013      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_RCC_OscConfig+0x7b0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ec      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_RCC_OscConfig+0x7b0>)
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	4905      	ldr	r1, [pc, #20]	; (8004f38 <HAL_RCC_OscConfig+0x7b0>)
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCC_OscConfig+0x7b4>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	60cb      	str	r3, [r1, #12]
 8004f28:	e001      	b.n	8004f2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	feeefffc 	.word	0xfeeefffc

08004f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0e7      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f54:	4b75      	ldr	r3, [pc, #468]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d910      	bls.n	8004f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b72      	ldr	r3, [pc, #456]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 0207 	bic.w	r2, r3, #7
 8004f6a:	4970      	ldr	r1, [pc, #448]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b6e      	ldr	r3, [pc, #440]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0cf      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	4b66      	ldr	r3, [pc, #408]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d908      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b63      	ldr	r3, [pc, #396]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4960      	ldr	r1, [pc, #384]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d04c      	beq.n	8005058 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc6:	4b5a      	ldr	r3, [pc, #360]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d121      	bne.n	8005016 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e0a6      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fde:	4b54      	ldr	r3, [pc, #336]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d115      	bne.n	8005016 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e09a      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ff6:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e08e      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005006:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e086      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005016:	4b46      	ldr	r3, [pc, #280]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 0203 	bic.w	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4943      	ldr	r1, [pc, #268]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005028:	f7fd fcbe 	bl	80029a8 <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	e00a      	b.n	8005046 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005030:	f7fd fcba 	bl	80029a8 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e06e      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	4b3a      	ldr	r3, [pc, #232]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 020c 	and.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	429a      	cmp	r2, r3
 8005056:	d1eb      	bne.n	8005030 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005070:	429a      	cmp	r2, r3
 8005072:	d208      	bcs.n	8005086 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b2e      	ldr	r3, [pc, #184]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	492b      	ldr	r1, [pc, #172]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d210      	bcs.n	80050b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005094:	4b25      	ldr	r3, [pc, #148]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f023 0207 	bic.w	r2, r3, #7
 800509c:	4923      	ldr	r1, [pc, #140]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <HAL_RCC_ClockConfig+0x1ec>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d001      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e036      	b.n	8005124 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c2:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	4918      	ldr	r1, [pc, #96]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4910      	ldr	r1, [pc, #64]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050f4:	f000 f824 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <HAL_RCC_ClockConfig+0x1f0>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	490b      	ldr	r1, [pc, #44]	; (8005134 <HAL_RCC_ClockConfig+0x1f4>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
 8005110:	4a09      	ldr	r2, [pc, #36]	; (8005138 <HAL_RCC_ClockConfig+0x1f8>)
 8005112:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCC_ClockConfig+0x1fc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fd fbf5 	bl	8002908 <HAL_InitTick>
 800511e:	4603      	mov	r3, r0
 8005120:	72fb      	strb	r3, [r7, #11]

  return status;
 8005122:	7afb      	ldrb	r3, [r7, #11]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40022000 	.word	0x40022000
 8005130:	40021000 	.word	0x40021000
 8005134:	0800b4b8 	.word	0x0800b4b8
 8005138:	20000000 	.word	0x20000000
 800513c:	20000004 	.word	0x20000004

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800514e:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005158:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x34>
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d121      	bne.n	80051b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d11e      	bne.n	80051b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005174:	4b34      	ldr	r3, [pc, #208]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d107      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e005      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005190:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800519c:	4a2b      	ldr	r2, [pc, #172]	; (800524c <HAL_RCC_GetSysClockFreq+0x10c>)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10d      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d102      	bne.n	80051be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_RCC_GetSysClockFreq+0x110>)
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e004      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_RCC_GetSysClockFreq+0x114>)
 80051c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d134      	bne.n	8005238 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d003      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d003      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0xac>
 80051e4:	e005      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_RCC_GetSysClockFreq+0x110>)
 80051e8:	617b      	str	r3, [r7, #20]
      break;
 80051ea:	e005      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_RCC_GetSysClockFreq+0x114>)
 80051ee:	617b      	str	r3, [r7, #20]
      break;
 80051f0:	e002      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	617b      	str	r3, [r7, #20]
      break;
 80051f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	3301      	adds	r3, #1
 8005204:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	fb03 f202 	mul.w	r2, r3, r2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_GetSysClockFreq+0x108>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	0e5b      	lsrs	r3, r3, #25
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	3301      	adds	r3, #1
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005238:	69bb      	ldr	r3, [r7, #24]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3724      	adds	r7, #36	; 0x24
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
 800524c:	0800b4d0 	.word	0x0800b4d0
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000000 	.word	0x20000000

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4904      	ldr	r1, [pc, #16]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000
 8005298:	0800b4c8 	.word	0x0800b4c8

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052a0:	f7ff ffda 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0adb      	lsrs	r3, r3, #11
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4904      	ldr	r1, [pc, #16]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	0800b4c8 	.word	0x0800b4c8

080052c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052d4:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052e0:	f7ff f9ee 	bl	80046c0 <HAL_PWREx_GetVoltageRange>
 80052e4:	6178      	str	r0, [r7, #20]
 80052e6:	e014      	b.n	8005312 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052e8:	4b25      	ldr	r3, [pc, #148]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	4a24      	ldr	r2, [pc, #144]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6593      	str	r3, [r2, #88]	; 0x58
 80052f4:	4b22      	ldr	r3, [pc, #136]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005300:	f7ff f9de 	bl	80046c0 <HAL_PWREx_GetVoltageRange>
 8005304:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005306:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005318:	d10b      	bne.n	8005332 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b80      	cmp	r3, #128	; 0x80
 800531e:	d919      	bls.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2ba0      	cmp	r3, #160	; 0xa0
 8005324:	d902      	bls.n	800532c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005326:	2302      	movs	r3, #2
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e013      	b.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800532c:	2301      	movs	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	e010      	b.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d902      	bls.n	800533e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005338:	2303      	movs	r3, #3
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e00a      	b.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d102      	bne.n	800534a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005344:	2302      	movs	r3, #2
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e004      	b.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d101      	bne.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005350:	2301      	movs	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f023 0207 	bic.w	r2, r3, #7
 800535c:	4909      	ldr	r1, [pc, #36]	; (8005384 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d001      	beq.n	8005376 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	40022000 	.word	0x40022000

08005388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005390:	2300      	movs	r3, #0
 8005392:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005394:	2300      	movs	r3, #0
 8005396:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d041      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053ac:	d02a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053b2:	d824      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053b8:	d008      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053be:	d81e      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c8:	d010      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053ca:	e018      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053cc:	4b86      	ldr	r3, [pc, #536]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a85      	ldr	r2, [pc, #532]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053d8:	e015      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fabb 	bl	800595c <RCCEx_PLLSAI1_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053ea:	e00c      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3320      	adds	r3, #32
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fba6 	bl	8005b44 <RCCEx_PLLSAI2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053fc:	e003      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	74fb      	strb	r3, [r7, #19]
      break;
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800540c:	4b76      	ldr	r3, [pc, #472]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541a:	4973      	ldr	r1, [pc, #460]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005422:	e001      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d041      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005438:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800543c:	d02a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800543e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005442:	d824      	bhi.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800544a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800544e:	d81e      	bhi.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005458:	d010      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800545a:	e018      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800545c:	4b62      	ldr	r3, [pc, #392]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a61      	ldr	r2, [pc, #388]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005466:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005468:	e015      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f000 fa73 	bl	800595c <RCCEx_PLLSAI1_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800547a:	e00c      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3320      	adds	r3, #32
 8005480:	2100      	movs	r1, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fb5e 	bl	8005b44 <RCCEx_PLLSAI2_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800548c:	e003      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	74fb      	strb	r3, [r7, #19]
      break;
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005496:	7cfb      	ldrb	r3, [r7, #19]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10b      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800549c:	4b52      	ldr	r3, [pc, #328]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054aa:	494f      	ldr	r1, [pc, #316]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054b2:	e001      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80a0 	beq.w	8005606 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c6:	2300      	movs	r3, #0
 80054c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054ca:	4b47      	ldr	r3, [pc, #284]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e0:	4b41      	ldr	r3, [pc, #260]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	4a40      	ldr	r2, [pc, #256]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ea:	6593      	str	r3, [r2, #88]	; 0x58
 80054ec:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f8:	2301      	movs	r3, #1
 80054fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054fc:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3a      	ldr	r2, [pc, #232]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005506:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005508:	f7fd fa4e 	bl	80029a8 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800550e:	e009      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005510:	f7fd fa4a 	bl	80029a8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d902      	bls.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	74fb      	strb	r3, [r7, #19]
        break;
 8005522:	e005      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005524:	4b31      	ldr	r3, [pc, #196]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ef      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d15c      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005536:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005540:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01f      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	429a      	cmp	r2, r3
 8005552:	d019      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005554:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fd fa09 	bl	80029a8 <HAL_GetTick>
 8005596:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005598:	e00b      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fd fa05 	bl	80029a8 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d902      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	74fb      	strb	r3, [r7, #19]
            break;
 80055b0:	e006      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ec      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80055c0:	7cfb      	ldrb	r3, [r7, #19]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d6:	4904      	ldr	r1, [pc, #16]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055de:	e009      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055e0:	7cfb      	ldrb	r3, [r7, #19]
 80055e2:	74bb      	strb	r3, [r7, #18]
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055f4:	7c7b      	ldrb	r3, [r7, #17]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d105      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055fa:	4b9e      	ldr	r3, [pc, #632]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fe:	4a9d      	ldr	r2, [pc, #628]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005604:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005612:	4b98      	ldr	r3, [pc, #608]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f023 0203 	bic.w	r2, r3, #3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	4994      	ldr	r1, [pc, #592]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005634:	4b8f      	ldr	r3, [pc, #572]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f023 020c 	bic.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	498c      	ldr	r1, [pc, #560]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005656:	4b87      	ldr	r3, [pc, #540]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	4983      	ldr	r1, [pc, #524]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005678:	4b7e      	ldr	r3, [pc, #504]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	497b      	ldr	r1, [pc, #492]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800569a:	4b76      	ldr	r3, [pc, #472]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a8:	4972      	ldr	r1, [pc, #456]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056bc:	4b6d      	ldr	r3, [pc, #436]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ca:	496a      	ldr	r1, [pc, #424]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056de:	4b65      	ldr	r3, [pc, #404]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	4961      	ldr	r1, [pc, #388]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005700:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570e:	4959      	ldr	r1, [pc, #356]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005722:	4b54      	ldr	r3, [pc, #336]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005728:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005730:	4950      	ldr	r1, [pc, #320]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005744:	4b4b      	ldr	r3, [pc, #300]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	4948      	ldr	r1, [pc, #288]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005766:	4b43      	ldr	r3, [pc, #268]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	493f      	ldr	r1, [pc, #252]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d028      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005788:	4b3a      	ldr	r3, [pc, #232]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005796:	4937      	ldr	r1, [pc, #220]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a6:	d106      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a8:	4b32      	ldr	r3, [pc, #200]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a31      	ldr	r2, [pc, #196]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b2:	60d3      	str	r3, [r2, #12]
 80057b4:	e011      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057be:	d10c      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	2101      	movs	r1, #1
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f8c8 	bl	800595c <RCCEx_PLLSAI1_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d028      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057e6:	4b23      	ldr	r3, [pc, #140]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	491f      	ldr	r1, [pc, #124]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005804:	d106      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005806:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005810:	60d3      	str	r3, [r2, #12]
 8005812:	e011      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800581c:	d10c      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	2101      	movs	r1, #1
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f899 	bl	800595c <RCCEx_PLLSAI1_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800582e:	7cfb      	ldrb	r3, [r7, #19]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d02b      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005852:	4908      	ldr	r1, [pc, #32]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800585e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005862:	d109      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a02      	ldr	r2, [pc, #8]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586e:	60d3      	str	r3, [r2, #12]
 8005870:	e014      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005872:	bf00      	nop
 8005874:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005880:	d10c      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3304      	adds	r3, #4
 8005886:	2101      	movs	r1, #1
 8005888:	4618      	mov	r0, r3
 800588a:	f000 f867 	bl	800595c <RCCEx_PLLSAI1_Config>
 800588e:	4603      	mov	r3, r0
 8005890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005898:	7cfb      	ldrb	r3, [r7, #19]
 800589a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02f      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b6:	4928      	ldr	r1, [pc, #160]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058c6:	d10d      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	2102      	movs	r1, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f844 	bl	800595c <RCCEx_PLLSAI1_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d014      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80058de:	7cfb      	ldrb	r3, [r7, #19]
 80058e0:	74bb      	strb	r3, [r7, #18]
 80058e2:	e011      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ec:	d10c      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3320      	adds	r3, #32
 80058f2:	2102      	movs	r1, #2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f925 	bl	8005b44 <RCCEx_PLLSAI2_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005922:	490d      	ldr	r1, [pc, #52]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005946:	4904      	ldr	r1, [pc, #16]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800594e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40021000 	.word	0x40021000

0800595c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800596a:	4b75      	ldr	r3, [pc, #468]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d018      	beq.n	80059a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005976:	4b72      	ldr	r3, [pc, #456]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0203 	and.w	r2, r3, #3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d10d      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
       ||
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800598e:	4b6c      	ldr	r3, [pc, #432]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
       ||
 800599e:	429a      	cmp	r2, r3
 80059a0:	d047      	beq.n	8005a32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
 80059a6:	e044      	b.n	8005a32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d018      	beq.n	80059e2 <RCCEx_PLLSAI1_Config+0x86>
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d825      	bhi.n	8005a00 <RCCEx_PLLSAI1_Config+0xa4>
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d002      	beq.n	80059be <RCCEx_PLLSAI1_Config+0x62>
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d009      	beq.n	80059d0 <RCCEx_PLLSAI1_Config+0x74>
 80059bc:	e020      	b.n	8005a00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059be:	4b60      	ldr	r3, [pc, #384]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11d      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ce:	e01a      	b.n	8005a06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059d0:	4b5b      	ldr	r3, [pc, #364]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d116      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e0:	e013      	b.n	8005a0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059e2:	4b57      	ldr	r3, [pc, #348]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10f      	bne.n	8005a0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059ee:	4b54      	ldr	r3, [pc, #336]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059fe:	e006      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e004      	b.n	8005a10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a06:	bf00      	nop
 8005a08:	e002      	b.n	8005a10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a16:	4b4a      	ldr	r3, [pc, #296]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6819      	ldr	r1, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	4944      	ldr	r1, [pc, #272]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d17d      	bne.n	8005b34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a38:	4b41      	ldr	r3, [pc, #260]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a40      	ldr	r2, [pc, #256]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a44:	f7fc ffb0 	bl	80029a8 <HAL_GetTick>
 8005a48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a4a:	e009      	b.n	8005a60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a4c:	f7fc ffac 	bl	80029a8 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d902      	bls.n	8005a60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a5e:	e005      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a60:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ef      	bne.n	8005a4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d160      	bne.n	8005b34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d111      	bne.n	8005a9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a78:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6892      	ldr	r2, [r2, #8]
 8005a88:	0211      	lsls	r1, r2, #8
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68d2      	ldr	r2, [r2, #12]
 8005a8e:	0912      	lsrs	r2, r2, #4
 8005a90:	0452      	lsls	r2, r2, #17
 8005a92:	430a      	orrs	r2, r1
 8005a94:	492a      	ldr	r1, [pc, #168]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	610b      	str	r3, [r1, #16]
 8005a9a:	e027      	b.n	8005aec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d112      	bne.n	8005ac8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aa2:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005aaa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6892      	ldr	r2, [r2, #8]
 8005ab2:	0211      	lsls	r1, r2, #8
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6912      	ldr	r2, [r2, #16]
 8005ab8:	0852      	lsrs	r2, r2, #1
 8005aba:	3a01      	subs	r2, #1
 8005abc:	0552      	lsls	r2, r2, #21
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	491f      	ldr	r1, [pc, #124]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	610b      	str	r3, [r1, #16]
 8005ac6:	e011      	b.n	8005aec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ad0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6892      	ldr	r2, [r2, #8]
 8005ad8:	0211      	lsls	r1, r2, #8
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6952      	ldr	r2, [r2, #20]
 8005ade:	0852      	lsrs	r2, r2, #1
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	0652      	lsls	r2, r2, #25
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	4916      	ldr	r1, [pc, #88]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005aec:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005af6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fc ff56 	bl	80029a8 <HAL_GetTick>
 8005afc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005afe:	e009      	b.n	8005b14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b00:	f7fc ff52 	bl	80029a8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d902      	bls.n	8005b14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	73fb      	strb	r3, [r7, #15]
          break;
 8005b12:	e005      	b.n	8005b20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ef      	beq.n	8005b00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	4904      	ldr	r1, [pc, #16]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000

08005b44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b52:	4b6a      	ldr	r3, [pc, #424]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d018      	beq.n	8005b90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b5e:	4b67      	ldr	r3, [pc, #412]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0203 	and.w	r2, r3, #3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10d      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
       ||
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b76:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
       ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d047      	beq.n	8005c1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
 8005b8e:	e044      	b.n	8005c1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d018      	beq.n	8005bca <RCCEx_PLLSAI2_Config+0x86>
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d825      	bhi.n	8005be8 <RCCEx_PLLSAI2_Config+0xa4>
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d002      	beq.n	8005ba6 <RCCEx_PLLSAI2_Config+0x62>
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d009      	beq.n	8005bb8 <RCCEx_PLLSAI2_Config+0x74>
 8005ba4:	e020      	b.n	8005be8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ba6:	4b55      	ldr	r3, [pc, #340]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d11d      	bne.n	8005bee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb6:	e01a      	b.n	8005bee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bb8:	4b50      	ldr	r3, [pc, #320]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d116      	bne.n	8005bf2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc8:	e013      	b.n	8005bf2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bca:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10f      	bne.n	8005bf6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bd6:	4b49      	ldr	r3, [pc, #292]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005be6:	e006      	b.n	8005bf6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
      break;
 8005bec:	e004      	b.n	8005bf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e002      	b.n	8005bf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10d      	bne.n	8005c1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bfe:	4b3f      	ldr	r3, [pc, #252]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	430b      	orrs	r3, r1
 8005c14:	4939      	ldr	r1, [pc, #228]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d167      	bne.n	8005cf0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c20:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2c:	f7fc febc 	bl	80029a8 <HAL_GetTick>
 8005c30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c32:	e009      	b.n	8005c48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c34:	f7fc feb8 	bl	80029a8 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d902      	bls.n	8005c48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	73fb      	strb	r3, [r7, #15]
        break;
 8005c46:	e005      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c48:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1ef      	bne.n	8005c34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d14a      	bne.n	8005cf0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d111      	bne.n	8005c84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c60:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6892      	ldr	r2, [r2, #8]
 8005c70:	0211      	lsls	r1, r2, #8
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68d2      	ldr	r2, [r2, #12]
 8005c76:	0912      	lsrs	r2, r2, #4
 8005c78:	0452      	lsls	r2, r2, #17
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	491f      	ldr	r1, [pc, #124]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	614b      	str	r3, [r1, #20]
 8005c82:	e011      	b.n	8005ca8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c84:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6892      	ldr	r2, [r2, #8]
 8005c94:	0211      	lsls	r1, r2, #8
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6912      	ldr	r2, [r2, #16]
 8005c9a:	0852      	lsrs	r2, r2, #1
 8005c9c:	3a01      	subs	r2, #1
 8005c9e:	0652      	lsls	r2, r2, #25
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	4916      	ldr	r1, [pc, #88]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ca8:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fc fe78 	bl	80029a8 <HAL_GetTick>
 8005cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cba:	e009      	b.n	8005cd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cbc:	f7fc fe74 	bl	80029a8 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d902      	bls.n	8005cd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8005cce:	e005      	b.n	8005cdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ef      	beq.n	8005cbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	4904      	ldr	r1, [pc, #16]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000

08005d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e049      	b.n	8005da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fc fb94 	bl	8002454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 fd86 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d001      	beq.n	8005dc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e047      	b.n	8005e58 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	; (8005e64 <HAL_TIM_Base_Start+0xb4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01d      	beq.n	8005e16 <HAL_TIM_Base_Start+0x66>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d018      	beq.n	8005e16 <HAL_TIM_Base_Start+0x66>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_TIM_Base_Start+0xb8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_TIM_Base_Start+0x66>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <HAL_TIM_Base_Start+0xbc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_TIM_Base_Start+0x66>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_TIM_Base_Start+0xc0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_TIM_Base_Start+0x66>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <HAL_TIM_Base_Start+0xc4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_TIM_Base_Start+0x66>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <HAL_TIM_Base_Start+0xc8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d115      	bne.n	8005e42 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <HAL_TIM_Base_Start+0xcc>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b06      	cmp	r3, #6
 8005e26:	d015      	beq.n	8005e54 <HAL_TIM_Base_Start+0xa4>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2e:	d011      	beq.n	8005e54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	e008      	b.n	8005e54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e000      	b.n	8005e56 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	00010007 	.word	0x00010007

08005e80 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1a      	ldr	r2, [r3, #32]
 8005e8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10f      	bne.n	8005eb8 <HAL_TIM_Base_Stop+0x38>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	f240 4344 	movw	r3, #1092	; 0x444
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d107      	bne.n	8005eb8 <HAL_TIM_Base_Stop+0x38>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d001      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e04f      	b.n	8005f88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a23      	ldr	r2, [pc, #140]	; (8005f94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01d      	beq.n	8005f46 <HAL_TIM_Base_Start_IT+0x76>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f12:	d018      	beq.n	8005f46 <HAL_TIM_Base_Start_IT+0x76>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d013      	beq.n	8005f46 <HAL_TIM_Base_Start_IT+0x76>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00e      	beq.n	8005f46 <HAL_TIM_Base_Start_IT+0x76>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d009      	beq.n	8005f46 <HAL_TIM_Base_Start_IT+0x76>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIM_Base_Start_IT+0x76>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d115      	bne.n	8005f72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	4b17      	ldr	r3, [pc, #92]	; (8005fac <HAL_TIM_Base_Start_IT+0xdc>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b06      	cmp	r3, #6
 8005f56:	d015      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0xb4>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5e:	d011      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f70:	e008      	b.n	8005f84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0201 	orr.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e000      	b.n	8005f86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	00010007 	.word	0x00010007

08005fb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e049      	b.n	8006056 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fc fa16 	bl	8002408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f000 fc2e 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <HAL_TIM_PWM_Start+0x24>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e03c      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b04      	cmp	r3, #4
 8006088:	d109      	bne.n	800609e <HAL_TIM_PWM_Start+0x3e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	e02f      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d109      	bne.n	80060b8 <HAL_TIM_PWM_Start+0x58>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e022      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d109      	bne.n	80060d2 <HAL_TIM_PWM_Start+0x72>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	e015      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d109      	bne.n	80060ec <HAL_TIM_PWM_Start+0x8c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e008      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e09c      	b.n	8006240 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_TIM_PWM_Start+0xb6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006114:	e023      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b04      	cmp	r3, #4
 800611a:	d104      	bne.n	8006126 <HAL_TIM_PWM_Start+0xc6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	e01b      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b08      	cmp	r3, #8
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0xd6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006134:	e013      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0xe6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006144:	e00b      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b10      	cmp	r3, #16
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xf6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006154:	e003      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fee2 	bl	8006f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a35      	ldr	r2, [pc, #212]	; (8006248 <HAL_TIM_PWM_Start+0x1e8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a34      	ldr	r2, [pc, #208]	; (800624c <HAL_TIM_PWM_Start+0x1ec>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a32      	ldr	r2, [pc, #200]	; (8006250 <HAL_TIM_PWM_Start+0x1f0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a31      	ldr	r2, [pc, #196]	; (8006254 <HAL_TIM_PWM_Start+0x1f4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <HAL_TIM_PWM_Start+0x1f8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_Start+0x142>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_TIM_PWM_Start+0x144>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a22      	ldr	r2, [pc, #136]	; (8006248 <HAL_TIM_PWM_Start+0x1e8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01d      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ca:	d018      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a22      	ldr	r2, [pc, #136]	; (800625c <HAL_TIM_PWM_Start+0x1fc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a21      	ldr	r2, [pc, #132]	; (8006260 <HAL_TIM_PWM_Start+0x200>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <HAL_TIM_PWM_Start+0x204>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a17      	ldr	r2, [pc, #92]	; (800624c <HAL_TIM_PWM_Start+0x1ec>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a15      	ldr	r2, [pc, #84]	; (8006250 <HAL_TIM_PWM_Start+0x1f0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d115      	bne.n	800622a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	4b18      	ldr	r3, [pc, #96]	; (8006268 <HAL_TIM_PWM_Start+0x208>)
 8006206:	4013      	ands	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d015      	beq.n	800623c <HAL_TIM_PWM_Start+0x1dc>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006216:	d011      	beq.n	800623c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	e008      	b.n	800623c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e000      	b.n	800623e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40013400 	.word	0x40013400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	00010007 	.word	0x00010007

0800626c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fe56 	bl	8006f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a3e      	ldr	r2, [pc, #248]	; (8006384 <HAL_TIM_PWM_Stop+0x118>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a3d      	ldr	r2, [pc, #244]	; (8006388 <HAL_TIM_PWM_Stop+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3b      	ldr	r2, [pc, #236]	; (800638c <HAL_TIM_PWM_Stop+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <HAL_TIM_PWM_Stop+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a38      	ldr	r2, [pc, #224]	; (8006394 <HAL_TIM_PWM_Stop+0x128>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_PWM_Stop+0x4e>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_TIM_PWM_Stop+0x50>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10f      	bne.n	80062f0 <HAL_TIM_PWM_Stop+0x84>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	f240 4344 	movw	r3, #1092	; 0x444
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <HAL_TIM_PWM_Stop+0x84>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <HAL_TIM_PWM_Stop+0xb4>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	f240 4344 	movw	r3, #1092	; 0x444
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d107      	bne.n	8006320 <HAL_TIM_PWM_Stop+0xb4>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_TIM_PWM_Stop+0xc4>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800632e:	e023      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b04      	cmp	r3, #4
 8006334:	d104      	bne.n	8006340 <HAL_TIM_PWM_Stop+0xd4>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800633e:	e01b      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b08      	cmp	r3, #8
 8006344:	d104      	bne.n	8006350 <HAL_TIM_PWM_Stop+0xe4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800634e:	e013      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d104      	bne.n	8006360 <HAL_TIM_PWM_Stop+0xf4>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800635e:	e00b      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b10      	cmp	r3, #16
 8006364:	d104      	bne.n	8006370 <HAL_TIM_PWM_Stop+0x104>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800636e:	e003      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40012c00 	.word	0x40012c00
 8006388:	40013400 	.word	0x40013400
 800638c:	40014000 	.word	0x40014000
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800

08006398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0202 	mvn.w	r2, #2
 80063c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa1a 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa0c 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa1d 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0204 	mvn.w	r2, #4
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9f0 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9e2 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f9f3 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0208 	mvn.w	r2, #8
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9c6 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9b8 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9c9 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2208      	movs	r2, #8
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f99c 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f98e 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f99f 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0201 	mvn.w	r2, #1
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fb fb0c 	bl	8001b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fdac 	bl	80070a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006556:	d10e      	bne.n	8006576 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d107      	bne.n	8006576 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800656e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fd9f 	bl	80070b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d10e      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d107      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800659a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f94d 	bl	800683c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d10e      	bne.n	80065ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d107      	bne.n	80065ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f06f 0220 	mvn.w	r2, #32
 80065c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fd5f 	bl	800708c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e0ff      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b14      	cmp	r3, #20
 8006602:	f200 80f0 	bhi.w	80067e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006661 	.word	0x08006661
 8006610:	080067e7 	.word	0x080067e7
 8006614:	080067e7 	.word	0x080067e7
 8006618:	080067e7 	.word	0x080067e7
 800661c:	080066a1 	.word	0x080066a1
 8006620:	080067e7 	.word	0x080067e7
 8006624:	080067e7 	.word	0x080067e7
 8006628:	080067e7 	.word	0x080067e7
 800662c:	080066e3 	.word	0x080066e3
 8006630:	080067e7 	.word	0x080067e7
 8006634:	080067e7 	.word	0x080067e7
 8006638:	080067e7 	.word	0x080067e7
 800663c:	08006723 	.word	0x08006723
 8006640:	080067e7 	.word	0x080067e7
 8006644:	080067e7 	.word	0x080067e7
 8006648:	080067e7 	.word	0x080067e7
 800664c:	08006765 	.word	0x08006765
 8006650:	080067e7 	.word	0x080067e7
 8006654:	080067e7 	.word	0x080067e7
 8006658:	080067e7 	.word	0x080067e7
 800665c:	080067a5 	.word	0x080067a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f98c 	bl	8006984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0208 	orr.w	r2, r2, #8
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0204 	bic.w	r2, r2, #4
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	619a      	str	r2, [r3, #24]
      break;
 800669e:	e0a5      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f9fc 	bl	8006aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6999      	ldr	r1, [r3, #24]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	021a      	lsls	r2, r3, #8
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	619a      	str	r2, [r3, #24]
      break;
 80066e0:	e084      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fa65 	bl	8006bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0208 	orr.w	r2, r2, #8
 80066fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0204 	bic.w	r2, r2, #4
 800670c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	61da      	str	r2, [r3, #28]
      break;
 8006720:	e064      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 facd 	bl	8006cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800673c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69d9      	ldr	r1, [r3, #28]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	021a      	lsls	r2, r3, #8
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	61da      	str	r2, [r3, #28]
      break;
 8006762:	e043      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fb16 	bl	8006d9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0208 	orr.w	r2, r2, #8
 800677e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0204 	bic.w	r2, r2, #4
 800678e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067a2:	e023      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fb5a 	bl	8006e64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	021a      	lsls	r2, r3, #8
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067e4:	e002      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop

08006800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a40      	ldr	r2, [pc, #256]	; (8006964 <TIM_Base_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d00f      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a3d      	ldr	r2, [pc, #244]	; (8006968 <TIM_Base_SetConfig+0x118>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3c      	ldr	r2, [pc, #240]	; (800696c <TIM_Base_SetConfig+0x11c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3b      	ldr	r2, [pc, #236]	; (8006970 <TIM_Base_SetConfig+0x120>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a3a      	ldr	r2, [pc, #232]	; (8006974 <TIM_Base_SetConfig+0x124>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d108      	bne.n	80068a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a2f      	ldr	r2, [pc, #188]	; (8006964 <TIM_Base_SetConfig+0x114>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d01f      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b0:	d01b      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <TIM_Base_SetConfig+0x118>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d017      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2b      	ldr	r2, [pc, #172]	; (800696c <TIM_Base_SetConfig+0x11c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a2a      	ldr	r2, [pc, #168]	; (8006970 <TIM_Base_SetConfig+0x120>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00f      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a29      	ldr	r2, [pc, #164]	; (8006974 <TIM_Base_SetConfig+0x124>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00b      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a28      	ldr	r2, [pc, #160]	; (8006978 <TIM_Base_SetConfig+0x128>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d007      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a27      	ldr	r2, [pc, #156]	; (800697c <TIM_Base_SetConfig+0x12c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <TIM_Base_SetConfig+0x130>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d108      	bne.n	80068fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a10      	ldr	r2, [pc, #64]	; (8006964 <TIM_Base_SetConfig+0x114>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a12      	ldr	r2, [pc, #72]	; (8006974 <TIM_Base_SetConfig+0x124>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a11      	ldr	r2, [pc, #68]	; (8006978 <TIM_Base_SetConfig+0x128>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a10      	ldr	r2, [pc, #64]	; (800697c <TIM_Base_SetConfig+0x12c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a0f      	ldr	r2, [pc, #60]	; (8006980 <TIM_Base_SetConfig+0x130>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d103      	bne.n	8006950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	615a      	str	r2, [r3, #20]
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40013400 	.word	0x40013400
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400
 8006980:	40014800 	.word	0x40014800

08006984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0201 	bic.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0303 	bic.w	r3, r3, #3
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0302 	bic.w	r3, r3, #2
 80069d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a2c      	ldr	r2, [pc, #176]	; (8006a90 <TIM_OC1_SetConfig+0x10c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_OC1_SetConfig+0x80>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a2b      	ldr	r2, [pc, #172]	; (8006a94 <TIM_OC1_SetConfig+0x110>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_OC1_SetConfig+0x80>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a2a      	ldr	r2, [pc, #168]	; (8006a98 <TIM_OC1_SetConfig+0x114>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_OC1_SetConfig+0x80>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a29      	ldr	r2, [pc, #164]	; (8006a9c <TIM_OC1_SetConfig+0x118>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_OC1_SetConfig+0x80>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <TIM_OC1_SetConfig+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d10c      	bne.n	8006a1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0308 	bic.w	r3, r3, #8
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0304 	bic.w	r3, r3, #4
 8006a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <TIM_OC1_SetConfig+0x10c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00f      	beq.n	8006a46 <TIM_OC1_SetConfig+0xc2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1a      	ldr	r2, [pc, #104]	; (8006a94 <TIM_OC1_SetConfig+0x110>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <TIM_OC1_SetConfig+0xc2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a19      	ldr	r2, [pc, #100]	; (8006a98 <TIM_OC1_SetConfig+0x114>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_OC1_SetConfig+0xc2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <TIM_OC1_SetConfig+0x118>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_OC1_SetConfig+0xc2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a17      	ldr	r2, [pc, #92]	; (8006aa0 <TIM_OC1_SetConfig+0x11c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d111      	bne.n	8006a6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40013400 	.word	0x40013400
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800

08006aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f023 0210 	bic.w	r2, r3, #16
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0320 	bic.w	r3, r3, #32
 8006af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a28      	ldr	r2, [pc, #160]	; (8006ba4 <TIM_OC2_SetConfig+0x100>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC2_SetConfig+0x6c>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a27      	ldr	r2, [pc, #156]	; (8006ba8 <TIM_OC2_SetConfig+0x104>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10d      	bne.n	8006b2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <TIM_OC2_SetConfig+0x100>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_OC2_SetConfig+0xb0>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1c      	ldr	r2, [pc, #112]	; (8006ba8 <TIM_OC2_SetConfig+0x104>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_OC2_SetConfig+0xb0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <TIM_OC2_SetConfig+0x108>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_OC2_SetConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <TIM_OC2_SetConfig+0x10c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC2_SetConfig+0xb0>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <TIM_OC2_SetConfig+0x110>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d113      	bne.n	8006b7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800

08006bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a27      	ldr	r2, [pc, #156]	; (8006cb4 <TIM_OC3_SetConfig+0xfc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_OC3_SetConfig+0x6a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <TIM_OC3_SetConfig+0x100>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d10d      	bne.n	8006c3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <TIM_OC3_SetConfig+0xfc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00f      	beq.n	8006c66 <TIM_OC3_SetConfig+0xae>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <TIM_OC3_SetConfig+0x100>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <TIM_OC3_SetConfig+0xae>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <TIM_OC3_SetConfig+0x104>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <TIM_OC3_SetConfig+0xae>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <TIM_OC3_SetConfig+0x108>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_OC3_SetConfig+0xae>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <TIM_OC3_SetConfig+0x10c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d113      	bne.n	8006c8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	621a      	str	r2, [r3, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40013400 	.word	0x40013400
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40014400 	.word	0x40014400
 8006cc4:	40014800 	.word	0x40014800

08006cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	031b      	lsls	r3, r3, #12
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <TIM_OC4_SetConfig+0xc0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00f      	beq.n	8006d4c <TIM_OC4_SetConfig+0x84>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a17      	ldr	r2, [pc, #92]	; (8006d8c <TIM_OC4_SetConfig+0xc4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_OC4_SetConfig+0x84>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <TIM_OC4_SetConfig+0xc8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC4_SetConfig+0x84>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <TIM_OC4_SetConfig+0xcc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC4_SetConfig+0x84>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <TIM_OC4_SetConfig+0xd0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d109      	bne.n	8006d60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	019b      	lsls	r3, r3, #6
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40013400 	.word	0x40013400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800

08006d9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006de0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	041b      	lsls	r3, r3, #16
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a17      	ldr	r2, [pc, #92]	; (8006e50 <TIM_OC5_SetConfig+0xb4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00f      	beq.n	8006e16 <TIM_OC5_SetConfig+0x7a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <TIM_OC5_SetConfig+0xb8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00b      	beq.n	8006e16 <TIM_OC5_SetConfig+0x7a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <TIM_OC5_SetConfig+0xbc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <TIM_OC5_SetConfig+0x7a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a14      	ldr	r2, [pc, #80]	; (8006e5c <TIM_OC5_SetConfig+0xc0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d003      	beq.n	8006e16 <TIM_OC5_SetConfig+0x7a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <TIM_OC5_SetConfig+0xc4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d109      	bne.n	8006e2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40012c00 	.word	0x40012c00
 8006e54:	40013400 	.word	0x40013400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40014400 	.word	0x40014400
 8006e60:	40014800 	.word	0x40014800

08006e64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	051b      	lsls	r3, r3, #20
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <TIM_OC6_SetConfig+0xb8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x7c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <TIM_OC6_SetConfig+0xbc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x7c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <TIM_OC6_SetConfig+0xc0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x7c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <TIM_OC6_SetConfig+0xc4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC6_SetConfig+0x7c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a14      	ldr	r2, [pc, #80]	; (8006f2c <TIM_OC6_SetConfig+0xc8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d109      	bne.n	8006ef4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40013400 	.word	0x40013400
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800

08006f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	2201      	movs	r2, #1
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a1a      	ldr	r2, [r3, #32]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	401a      	ands	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	fa01 f303 	lsl.w	r3, r1, r3
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e068      	b.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2e      	ldr	r2, [pc, #184]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2d      	ldr	r2, [pc, #180]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d108      	bne.n	8006fda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01d      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d018      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1b      	ldr	r2, [pc, #108]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a1a      	ldr	r2, [pc, #104]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a18      	ldr	r2, [pc, #96]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d009      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a14      	ldr	r2, [pc, #80]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d10c      	bne.n	8007054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4313      	orrs	r3, r2
 800704a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40013400 	.word	0x40013400
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40014000 	.word	0x40014000

0800708c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e040      	b.n	800715c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fb fa24 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2224      	movs	r2, #36	; 0x24
 80070f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f992 	bl	8007430 <UART_SetConfig>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e022      	b.n	800715c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fc3e 	bl	80079a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fcc5 	bl	8007ae4 <UART_CheckIdleState>
 800715a:	4603      	mov	r3, r0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	; 0x28
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007178:	2b20      	cmp	r3, #32
 800717a:	f040 8082 	bne.w	8007282 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_UART_Transmit+0x26>
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e07a      	b.n	8007284 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_UART_Transmit+0x38>
 8007198:	2302      	movs	r3, #2
 800719a:	e073      	b.n	8007284 <HAL_UART_Transmit+0x120>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2221      	movs	r2, #33	; 0x21
 80071b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071b2:	f7fb fbf9 	bl	80029a8 <HAL_GetTick>
 80071b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	88fa      	ldrh	r2, [r7, #6]
 80071bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d0:	d108      	bne.n	80071e4 <HAL_UART_Transmit+0x80>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d104      	bne.n	80071e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	e003      	b.n	80071ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80071f4:	e02d      	b.n	8007252 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	2180      	movs	r1, #128	; 0x80
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fcb8 	bl	8007b76 <UART_WaitOnFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e039      	b.n	8007284 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	881a      	ldrh	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007222:	b292      	uxth	r2, r2
 8007224:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	3302      	adds	r3, #2
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e008      	b.n	8007240 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	b292      	uxth	r2, r2
 8007238:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3301      	adds	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1cb      	bne.n	80071f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	2140      	movs	r1, #64	; 0x40
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fc84 	bl	8007b76 <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e005      	b.n	8007284 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e000      	b.n	8007284 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007282:	2302      	movs	r3, #2
  }
}
 8007284:	4618      	mov	r0, r3
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08a      	sub	sp, #40	; 0x28
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	f040 80bf 	bne.w	8007424 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_UART_Receive+0x26>
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0b7      	b.n	8007426 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_UART_Receive+0x38>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e0b0      	b.n	8007426 <HAL_UART_Receive+0x19a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2222      	movs	r2, #34	; 0x22
 80072d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072e0:	f7fb fb62 	bl	80029a8 <HAL_GetTick>
 80072e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d10e      	bne.n	800731e <HAL_UART_Receive+0x92>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d105      	bne.n	8007314 <HAL_UART_Receive+0x88>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800730e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007312:	e02d      	b.n	8007370 <HAL_UART_Receive+0xe4>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	22ff      	movs	r2, #255	; 0xff
 8007318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800731c:	e028      	b.n	8007370 <HAL_UART_Receive+0xe4>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <HAL_UART_Receive+0xb6>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <HAL_UART_Receive+0xac>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007336:	e01b      	b.n	8007370 <HAL_UART_Receive+0xe4>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	227f      	movs	r2, #127	; 0x7f
 800733c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007340:	e016      	b.n	8007370 <HAL_UART_Receive+0xe4>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800734a:	d10d      	bne.n	8007368 <HAL_UART_Receive+0xdc>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <HAL_UART_Receive+0xd2>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	227f      	movs	r2, #127	; 0x7f
 8007358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800735c:	e008      	b.n	8007370 <HAL_UART_Receive+0xe4>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	223f      	movs	r2, #63	; 0x3f
 8007362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007366:	e003      	b.n	8007370 <HAL_UART_Receive+0xe4>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007376:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d108      	bne.n	8007394 <HAL_UART_Receive+0x108>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	e003      	b.n	800739c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80073a4:	e033      	b.n	800740e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2200      	movs	r2, #0
 80073ae:	2120      	movs	r1, #32
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fbe0 	bl	8007b76 <UART_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e032      	b.n	8007426 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10c      	bne.n	80073e0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	8a7b      	ldrh	r3, [r7, #18]
 80073d0:	4013      	ands	r3, r2
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	3302      	adds	r3, #2
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	e00d      	b.n	80073fc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	8a7b      	ldrh	r3, [r7, #18]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	4013      	ands	r3, r2
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3301      	adds	r3, #1
 80073fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007402:	b29b      	uxth	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1c5      	bne.n	80073a6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e000      	b.n	8007426 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
  }
}
 8007426:	4618      	mov	r0, r3
 8007428:	3720      	adds	r7, #32
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007434:	b08a      	sub	sp, #40	; 0x28
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	431a      	orrs	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	4313      	orrs	r3, r2
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4ba4      	ldr	r3, [pc, #656]	; (80076f0 <UART_SetConfig+0x2c0>)
 8007460:	4013      	ands	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007468:	430b      	orrs	r3, r1
 800746a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a99      	ldr	r2, [pc, #612]	; (80076f4 <UART_SetConfig+0x2c4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007498:	4313      	orrs	r3, r2
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	430a      	orrs	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a90      	ldr	r2, [pc, #576]	; (80076f8 <UART_SetConfig+0x2c8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d126      	bne.n	8007508 <UART_SetConfig+0xd8>
 80074ba:	4b90      	ldr	r3, [pc, #576]	; (80076fc <UART_SetConfig+0x2cc>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d81b      	bhi.n	8007500 <UART_SetConfig+0xd0>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <UART_SetConfig+0xa0>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e6:	e116      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074e8:	2302      	movs	r3, #2
 80074ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ee:	e112      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074f6:	e10e      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074fe:	e10a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007506:	e106      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a7c      	ldr	r2, [pc, #496]	; (8007700 <UART_SetConfig+0x2d0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d138      	bne.n	8007584 <UART_SetConfig+0x154>
 8007512:	4b7a      	ldr	r3, [pc, #488]	; (80076fc <UART_SetConfig+0x2cc>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	f003 030c 	and.w	r3, r3, #12
 800751c:	2b0c      	cmp	r3, #12
 800751e:	d82d      	bhi.n	800757c <UART_SetConfig+0x14c>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <UART_SetConfig+0xf8>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	0800755d 	.word	0x0800755d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800756d 	.word	0x0800756d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	08007565 	.word	0x08007565
 800754c:	0800757d 	.word	0x0800757d
 8007550:	0800757d 	.word	0x0800757d
 8007554:	0800757d 	.word	0x0800757d
 8007558:	08007575 	.word	0x08007575
 800755c:	2300      	movs	r3, #0
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007562:	e0d8      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007564:	2302      	movs	r3, #2
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	e0d4      	b.n	8007716 <UART_SetConfig+0x2e6>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e0d0      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757a:	e0cc      	b.n	8007716 <UART_SetConfig+0x2e6>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007582:	e0c8      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a5e      	ldr	r2, [pc, #376]	; (8007704 <UART_SetConfig+0x2d4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d125      	bne.n	80075da <UART_SetConfig+0x1aa>
 800758e:	4b5b      	ldr	r3, [pc, #364]	; (80076fc <UART_SetConfig+0x2cc>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007598:	2b30      	cmp	r3, #48	; 0x30
 800759a:	d016      	beq.n	80075ca <UART_SetConfig+0x19a>
 800759c:	2b30      	cmp	r3, #48	; 0x30
 800759e:	d818      	bhi.n	80075d2 <UART_SetConfig+0x1a2>
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d00a      	beq.n	80075ba <UART_SetConfig+0x18a>
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d814      	bhi.n	80075d2 <UART_SetConfig+0x1a2>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <UART_SetConfig+0x182>
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d008      	beq.n	80075c2 <UART_SetConfig+0x192>
 80075b0:	e00f      	b.n	80075d2 <UART_SetConfig+0x1a2>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b8:	e0ad      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075ba:	2302      	movs	r3, #2
 80075bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c0:	e0a9      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075c2:	2304      	movs	r3, #4
 80075c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c8:	e0a5      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075ca:	2308      	movs	r3, #8
 80075cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d0:	e0a1      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075d2:	2310      	movs	r3, #16
 80075d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d8:	e09d      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a4a      	ldr	r2, [pc, #296]	; (8007708 <UART_SetConfig+0x2d8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d125      	bne.n	8007630 <UART_SetConfig+0x200>
 80075e4:	4b45      	ldr	r3, [pc, #276]	; (80076fc <UART_SetConfig+0x2cc>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075ee:	2bc0      	cmp	r3, #192	; 0xc0
 80075f0:	d016      	beq.n	8007620 <UART_SetConfig+0x1f0>
 80075f2:	2bc0      	cmp	r3, #192	; 0xc0
 80075f4:	d818      	bhi.n	8007628 <UART_SetConfig+0x1f8>
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d00a      	beq.n	8007610 <UART_SetConfig+0x1e0>
 80075fa:	2b80      	cmp	r3, #128	; 0x80
 80075fc:	d814      	bhi.n	8007628 <UART_SetConfig+0x1f8>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <UART_SetConfig+0x1d8>
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d008      	beq.n	8007618 <UART_SetConfig+0x1e8>
 8007606:	e00f      	b.n	8007628 <UART_SetConfig+0x1f8>
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800760e:	e082      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007610:	2302      	movs	r3, #2
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007616:	e07e      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761e:	e07a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007626:	e076      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762e:	e072      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a35      	ldr	r2, [pc, #212]	; (800770c <UART_SetConfig+0x2dc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d12a      	bne.n	8007690 <UART_SetConfig+0x260>
 800763a:	4b30      	ldr	r3, [pc, #192]	; (80076fc <UART_SetConfig+0x2cc>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007648:	d01a      	beq.n	8007680 <UART_SetConfig+0x250>
 800764a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800764e:	d81b      	bhi.n	8007688 <UART_SetConfig+0x258>
 8007650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007654:	d00c      	beq.n	8007670 <UART_SetConfig+0x240>
 8007656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765a:	d815      	bhi.n	8007688 <UART_SetConfig+0x258>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <UART_SetConfig+0x238>
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d008      	beq.n	8007678 <UART_SetConfig+0x248>
 8007666:	e00f      	b.n	8007688 <UART_SetConfig+0x258>
 8007668:	2300      	movs	r3, #0
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766e:	e052      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007670:	2302      	movs	r3, #2
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007676:	e04e      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800767e:	e04a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007686:	e046      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768e:	e042      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a17      	ldr	r2, [pc, #92]	; (80076f4 <UART_SetConfig+0x2c4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d13a      	bne.n	8007710 <UART_SetConfig+0x2e0>
 800769a:	4b18      	ldr	r3, [pc, #96]	; (80076fc <UART_SetConfig+0x2cc>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076a8:	d01a      	beq.n	80076e0 <UART_SetConfig+0x2b0>
 80076aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076ae:	d81b      	bhi.n	80076e8 <UART_SetConfig+0x2b8>
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b4:	d00c      	beq.n	80076d0 <UART_SetConfig+0x2a0>
 80076b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ba:	d815      	bhi.n	80076e8 <UART_SetConfig+0x2b8>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <UART_SetConfig+0x298>
 80076c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c4:	d008      	beq.n	80076d8 <UART_SetConfig+0x2a8>
 80076c6:	e00f      	b.n	80076e8 <UART_SetConfig+0x2b8>
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ce:	e022      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076d0:	2302      	movs	r3, #2
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d6:	e01e      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076de:	e01a      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e6:	e016      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ee:	e012      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076f0:	efff69f3 	.word	0xefff69f3
 80076f4:	40008000 	.word	0x40008000
 80076f8:	40013800 	.word	0x40013800
 80076fc:	40021000 	.word	0x40021000
 8007700:	40004400 	.word	0x40004400
 8007704:	40004800 	.word	0x40004800
 8007708:	40004c00 	.word	0x40004c00
 800770c:	40005000 	.word	0x40005000
 8007710:	2310      	movs	r3, #16
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a9f      	ldr	r2, [pc, #636]	; (8007998 <UART_SetConfig+0x568>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d17a      	bne.n	8007816 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007724:	2b08      	cmp	r3, #8
 8007726:	d824      	bhi.n	8007772 <UART_SetConfig+0x342>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <UART_SetConfig+0x300>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007755 	.word	0x08007755
 8007734:	08007773 	.word	0x08007773
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007773 	.word	0x08007773
 8007740:	08007763 	.word	0x08007763
 8007744:	08007773 	.word	0x08007773
 8007748:	08007773 	.word	0x08007773
 800774c:	08007773 	.word	0x08007773
 8007750:	0800776b 	.word	0x0800776b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007754:	f7fd fd8c 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8007758:	61f8      	str	r0, [r7, #28]
        break;
 800775a:	e010      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800775c:	4b8f      	ldr	r3, [pc, #572]	; (800799c <UART_SetConfig+0x56c>)
 800775e:	61fb      	str	r3, [r7, #28]
        break;
 8007760:	e00d      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007762:	f7fd fced 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8007766:	61f8      	str	r0, [r7, #28]
        break;
 8007768:	e009      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776e:	61fb      	str	r3, [r7, #28]
        break;
 8007770:	e005      	b.n	800777e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800777c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80fb 	beq.w	800797c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	429a      	cmp	r2, r3
 8007794:	d305      	bcc.n	80077a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d903      	bls.n	80077aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077a8:	e0e8      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	2200      	movs	r2, #0
 80077ae:	461c      	mov	r4, r3
 80077b0:	4615      	mov	r5, r2
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	022b      	lsls	r3, r5, #8
 80077bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80077c0:	0222      	lsls	r2, r4, #8
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	6849      	ldr	r1, [r1, #4]
 80077c6:	0849      	lsrs	r1, r1, #1
 80077c8:	2000      	movs	r0, #0
 80077ca:	4688      	mov	r8, r1
 80077cc:	4681      	mov	r9, r0
 80077ce:	eb12 0a08 	adds.w	sl, r2, r8
 80077d2:	eb43 0b09 	adc.w	fp, r3, r9
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e4:	4650      	mov	r0, sl
 80077e6:	4659      	mov	r1, fp
 80077e8:	f7f9 f9ee 	bl	8000bc8 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077fa:	d308      	bcc.n	800780e <UART_SetConfig+0x3de>
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007802:	d204      	bcs.n	800780e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	60da      	str	r2, [r3, #12]
 800780c:	e0b6      	b.n	800797c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007814:	e0b2      	b.n	800797c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781e:	d15e      	bne.n	80078de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007824:	2b08      	cmp	r3, #8
 8007826:	d828      	bhi.n	800787a <UART_SetConfig+0x44a>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0x400>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007855 	.word	0x08007855
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007865 	.word	0x08007865
 800783c:	0800787b 	.word	0x0800787b
 8007840:	0800786b 	.word	0x0800786b
 8007844:	0800787b 	.word	0x0800787b
 8007848:	0800787b 	.word	0x0800787b
 800784c:	0800787b 	.word	0x0800787b
 8007850:	08007873 	.word	0x08007873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007854:	f7fd fd0c 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8007858:	61f8      	str	r0, [r7, #28]
        break;
 800785a:	e014      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fd fd1e 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8007860:	61f8      	str	r0, [r7, #28]
        break;
 8007862:	e010      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007864:	4b4d      	ldr	r3, [pc, #308]	; (800799c <UART_SetConfig+0x56c>)
 8007866:	61fb      	str	r3, [r7, #28]
        break;
 8007868:	e00d      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7fd fc69 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800786e:	61f8      	str	r0, [r7, #28]
        break;
 8007870:	e009      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007876:	61fb      	str	r3, [r7, #28]
        break;
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d077      	beq.n	800797c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	005a      	lsls	r2, r3, #1
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	441a      	add	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b0f      	cmp	r3, #15
 80078a6:	d916      	bls.n	80078d6 <UART_SetConfig+0x4a6>
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ae:	d212      	bcs.n	80078d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f023 030f 	bic.w	r3, r3, #15
 80078b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	8afb      	ldrh	r3, [r7, #22]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	8afa      	ldrh	r2, [r7, #22]
 80078d2:	60da      	str	r2, [r3, #12]
 80078d4:	e052      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078dc:	e04e      	b.n	800797c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d827      	bhi.n	8007936 <UART_SetConfig+0x506>
 80078e6:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <UART_SetConfig+0x4bc>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007911 	.word	0x08007911
 80078f0:	08007919 	.word	0x08007919
 80078f4:	08007921 	.word	0x08007921
 80078f8:	08007937 	.word	0x08007937
 80078fc:	08007927 	.word	0x08007927
 8007900:	08007937 	.word	0x08007937
 8007904:	08007937 	.word	0x08007937
 8007908:	08007937 	.word	0x08007937
 800790c:	0800792f 	.word	0x0800792f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fd fcae 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8007914:	61f8      	str	r0, [r7, #28]
        break;
 8007916:	e014      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007918:	f7fd fcc0 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 800791c:	61f8      	str	r0, [r7, #28]
        break;
 800791e:	e010      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <UART_SetConfig+0x56c>)
 8007922:	61fb      	str	r3, [r7, #28]
        break;
 8007924:	e00d      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007926:	f7fd fc0b 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800792a:	61f8      	str	r0, [r7, #28]
        break;
 800792c:	e009      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007932:	61fb      	str	r3, [r7, #28]
        break;
 8007934:	e005      	b.n	8007942 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007940:	bf00      	nop
    }

    if (pclk != 0U)
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d019      	beq.n	800797c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	085a      	lsrs	r2, r3, #1
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	fbb2 f3f3 	udiv	r3, r2, r3
 800795a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b0f      	cmp	r3, #15
 8007960:	d909      	bls.n	8007976 <UART_SetConfig+0x546>
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007968:	d205      	bcs.n	8007976 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	e002      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007988:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800798c:	4618      	mov	r0, r3
 800798e:	3728      	adds	r7, #40	; 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007996:	bf00      	nop
 8007998:	40008000 	.word	0x40008000
 800799c:	00f42400 	.word	0x00f42400

080079a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9e:	d10a      	bne.n	8007ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007af4:	f7fa ff58 	bl	80029a8 <HAL_GetTick>
 8007af8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d10e      	bne.n	8007b26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f82d 	bl	8007b76 <UART_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e023      	b.n	8007b6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d10e      	bne.n	8007b52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f817 	bl	8007b76 <UART_WaitOnFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e00d      	b.n	8007b6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b09c      	sub	sp, #112	; 0x70
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	603b      	str	r3, [r7, #0]
 8007b82:	4613      	mov	r3, r2
 8007b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b86:	e0a5      	b.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	f000 80a1 	beq.w	8007cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b92:	f7fa ff09 	bl	80029a8 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d302      	bcc.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d13e      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e6      	bne.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e5      	bne.n	8007bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e067      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d04f      	beq.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c42:	d147      	bne.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f023 0301 	bic.w	r3, r3, #1
 8007c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ca0:	623a      	str	r2, [r7, #32]
 8007ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	69f9      	ldr	r1, [r7, #28]
 8007ca6:	6a3a      	ldr	r2, [r7, #32]
 8007ca8:	e841 2300 	strex	r3, r2, [r1]
 8007cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e5      	bne.n	8007c80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e010      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69da      	ldr	r2, [r3, #28]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2301      	moveq	r3, #1
 8007ce6:	2300      	movne	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	f43f af4a 	beq.w	8007b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3770      	adds	r7, #112	; 0x70
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <atoi>:
 8007cfe:	220a      	movs	r2, #10
 8007d00:	2100      	movs	r1, #0
 8007d02:	f000 be33 	b.w	800896c <strtol>
	...

08007d08 <__errno>:
 8007d08:	4b01      	ldr	r3, [pc, #4]	; (8007d10 <__errno+0x8>)
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	2000000c 	.word	0x2000000c

08007d14 <__libc_init_array>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4d0d      	ldr	r5, [pc, #52]	; (8007d4c <__libc_init_array+0x38>)
 8007d18:	4c0d      	ldr	r4, [pc, #52]	; (8007d50 <__libc_init_array+0x3c>)
 8007d1a:	1b64      	subs	r4, r4, r5
 8007d1c:	10a4      	asrs	r4, r4, #2
 8007d1e:	2600      	movs	r6, #0
 8007d20:	42a6      	cmp	r6, r4
 8007d22:	d109      	bne.n	8007d38 <__libc_init_array+0x24>
 8007d24:	4d0b      	ldr	r5, [pc, #44]	; (8007d54 <__libc_init_array+0x40>)
 8007d26:	4c0c      	ldr	r4, [pc, #48]	; (8007d58 <__libc_init_array+0x44>)
 8007d28:	f003 fad6 	bl	800b2d8 <_init>
 8007d2c:	1b64      	subs	r4, r4, r5
 8007d2e:	10a4      	asrs	r4, r4, #2
 8007d30:	2600      	movs	r6, #0
 8007d32:	42a6      	cmp	r6, r4
 8007d34:	d105      	bne.n	8007d42 <__libc_init_array+0x2e>
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3c:	4798      	blx	r3
 8007d3e:	3601      	adds	r6, #1
 8007d40:	e7ee      	b.n	8007d20 <__libc_init_array+0xc>
 8007d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d46:	4798      	blx	r3
 8007d48:	3601      	adds	r6, #1
 8007d4a:	e7f2      	b.n	8007d32 <__libc_init_array+0x1e>
 8007d4c:	0800b900 	.word	0x0800b900
 8007d50:	0800b900 	.word	0x0800b900
 8007d54:	0800b900 	.word	0x0800b900
 8007d58:	0800b904 	.word	0x0800b904

08007d5c <memset>:
 8007d5c:	4402      	add	r2, r0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d100      	bne.n	8007d66 <memset+0xa>
 8007d64:	4770      	bx	lr
 8007d66:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6a:	e7f9      	b.n	8007d60 <memset+0x4>

08007d6c <__cvt>:
 8007d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	ec55 4b10 	vmov	r4, r5, d0
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	460e      	mov	r6, r1
 8007d78:	4619      	mov	r1, r3
 8007d7a:	462b      	mov	r3, r5
 8007d7c:	bfbb      	ittet	lt
 8007d7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d82:	461d      	movlt	r5, r3
 8007d84:	2300      	movge	r3, #0
 8007d86:	232d      	movlt	r3, #45	; 0x2d
 8007d88:	700b      	strb	r3, [r1, #0]
 8007d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d90:	4691      	mov	r9, r2
 8007d92:	f023 0820 	bic.w	r8, r3, #32
 8007d96:	bfbc      	itt	lt
 8007d98:	4622      	movlt	r2, r4
 8007d9a:	4614      	movlt	r4, r2
 8007d9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007da0:	d005      	beq.n	8007dae <__cvt+0x42>
 8007da2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007da6:	d100      	bne.n	8007daa <__cvt+0x3e>
 8007da8:	3601      	adds	r6, #1
 8007daa:	2102      	movs	r1, #2
 8007dac:	e000      	b.n	8007db0 <__cvt+0x44>
 8007dae:	2103      	movs	r1, #3
 8007db0:	ab03      	add	r3, sp, #12
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	ab02      	add	r3, sp, #8
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	ec45 4b10 	vmov	d0, r4, r5
 8007dbc:	4653      	mov	r3, sl
 8007dbe:	4632      	mov	r2, r6
 8007dc0:	f000 ff4e 	bl	8008c60 <_dtoa_r>
 8007dc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dc8:	4607      	mov	r7, r0
 8007dca:	d102      	bne.n	8007dd2 <__cvt+0x66>
 8007dcc:	f019 0f01 	tst.w	r9, #1
 8007dd0:	d022      	beq.n	8007e18 <__cvt+0xac>
 8007dd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dd6:	eb07 0906 	add.w	r9, r7, r6
 8007dda:	d110      	bne.n	8007dfe <__cvt+0x92>
 8007ddc:	783b      	ldrb	r3, [r7, #0]
 8007dde:	2b30      	cmp	r3, #48	; 0x30
 8007de0:	d10a      	bne.n	8007df8 <__cvt+0x8c>
 8007de2:	2200      	movs	r2, #0
 8007de4:	2300      	movs	r3, #0
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fe7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007dee:	b918      	cbnz	r0, 8007df8 <__cvt+0x8c>
 8007df0:	f1c6 0601 	rsb	r6, r6, #1
 8007df4:	f8ca 6000 	str.w	r6, [sl]
 8007df8:	f8da 3000 	ldr.w	r3, [sl]
 8007dfc:	4499      	add	r9, r3
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2300      	movs	r3, #0
 8007e02:	4620      	mov	r0, r4
 8007e04:	4629      	mov	r1, r5
 8007e06:	f7f8 fe6f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e0a:	b108      	cbz	r0, 8007e10 <__cvt+0xa4>
 8007e0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e10:	2230      	movs	r2, #48	; 0x30
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	454b      	cmp	r3, r9
 8007e16:	d307      	bcc.n	8007e28 <__cvt+0xbc>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e1c:	1bdb      	subs	r3, r3, r7
 8007e1e:	4638      	mov	r0, r7
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	b004      	add	sp, #16
 8007e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e28:	1c59      	adds	r1, r3, #1
 8007e2a:	9103      	str	r1, [sp, #12]
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	e7f0      	b.n	8007e12 <__cvt+0xa6>

08007e30 <__exponent>:
 8007e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e32:	4603      	mov	r3, r0
 8007e34:	2900      	cmp	r1, #0
 8007e36:	bfb8      	it	lt
 8007e38:	4249      	neglt	r1, r1
 8007e3a:	f803 2b02 	strb.w	r2, [r3], #2
 8007e3e:	bfb4      	ite	lt
 8007e40:	222d      	movlt	r2, #45	; 0x2d
 8007e42:	222b      	movge	r2, #43	; 0x2b
 8007e44:	2909      	cmp	r1, #9
 8007e46:	7042      	strb	r2, [r0, #1]
 8007e48:	dd2a      	ble.n	8007ea0 <__exponent+0x70>
 8007e4a:	f10d 0407 	add.w	r4, sp, #7
 8007e4e:	46a4      	mov	ip, r4
 8007e50:	270a      	movs	r7, #10
 8007e52:	46a6      	mov	lr, r4
 8007e54:	460a      	mov	r2, r1
 8007e56:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e5a:	fb07 1516 	mls	r5, r7, r6, r1
 8007e5e:	3530      	adds	r5, #48	; 0x30
 8007e60:	2a63      	cmp	r2, #99	; 0x63
 8007e62:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	dcf1      	bgt.n	8007e52 <__exponent+0x22>
 8007e6e:	3130      	adds	r1, #48	; 0x30
 8007e70:	f1ae 0502 	sub.w	r5, lr, #2
 8007e74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e78:	1c44      	adds	r4, r0, #1
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	4561      	cmp	r1, ip
 8007e7e:	d30a      	bcc.n	8007e96 <__exponent+0x66>
 8007e80:	f10d 0209 	add.w	r2, sp, #9
 8007e84:	eba2 020e 	sub.w	r2, r2, lr
 8007e88:	4565      	cmp	r5, ip
 8007e8a:	bf88      	it	hi
 8007e8c:	2200      	movhi	r2, #0
 8007e8e:	4413      	add	r3, r2
 8007e90:	1a18      	subs	r0, r3, r0
 8007e92:	b003      	add	sp, #12
 8007e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e9e:	e7ed      	b.n	8007e7c <__exponent+0x4c>
 8007ea0:	2330      	movs	r3, #48	; 0x30
 8007ea2:	3130      	adds	r1, #48	; 0x30
 8007ea4:	7083      	strb	r3, [r0, #2]
 8007ea6:	70c1      	strb	r1, [r0, #3]
 8007ea8:	1d03      	adds	r3, r0, #4
 8007eaa:	e7f1      	b.n	8007e90 <__exponent+0x60>

08007eac <_printf_float>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	ed2d 8b02 	vpush	{d8}
 8007eb4:	b08d      	sub	sp, #52	; 0x34
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	f001 fe73 	bl	8009bac <_localeconv_r>
 8007ec6:	f8d0 a000 	ldr.w	sl, [r0]
 8007eca:	4650      	mov	r0, sl
 8007ecc:	f7f8 f98a 	bl	80001e4 <strlen>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8007edc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ee0:	3307      	adds	r3, #7
 8007ee2:	f023 0307 	bic.w	r3, r3, #7
 8007ee6:	f103 0208 	add.w	r2, r3, #8
 8007eea:	f8c8 2000 	str.w	r2, [r8]
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ef6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007efa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f04:	ee08 0a10 	vmov	s16, r0
 8007f08:	4b9f      	ldr	r3, [pc, #636]	; (8008188 <_printf_float+0x2dc>)
 8007f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f12:	f7f8 fe1b 	bl	8000b4c <__aeabi_dcmpun>
 8007f16:	bb88      	cbnz	r0, 8007f7c <_printf_float+0xd0>
 8007f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f1c:	4b9a      	ldr	r3, [pc, #616]	; (8008188 <_printf_float+0x2dc>)
 8007f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f22:	f7f8 fdf5 	bl	8000b10 <__aeabi_dcmple>
 8007f26:	bb48      	cbnz	r0, 8007f7c <_printf_float+0xd0>
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	f7f8 fde4 	bl	8000afc <__aeabi_dcmplt>
 8007f34:	b110      	cbz	r0, 8007f3c <_printf_float+0x90>
 8007f36:	232d      	movs	r3, #45	; 0x2d
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3c:	4b93      	ldr	r3, [pc, #588]	; (800818c <_printf_float+0x2e0>)
 8007f3e:	4894      	ldr	r0, [pc, #592]	; (8008190 <_printf_float+0x2e4>)
 8007f40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f44:	bf94      	ite	ls
 8007f46:	4698      	movls	r8, r3
 8007f48:	4680      	movhi	r8, r0
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	6123      	str	r3, [r4, #16]
 8007f4e:	9b05      	ldr	r3, [sp, #20]
 8007f50:	f023 0204 	bic.w	r2, r3, #4
 8007f54:	6022      	str	r2, [r4, #0]
 8007f56:	f04f 0900 	mov.w	r9, #0
 8007f5a:	9700      	str	r7, [sp, #0]
 8007f5c:	4633      	mov	r3, r6
 8007f5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f60:	4621      	mov	r1, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 f9d8 	bl	8008318 <_printf_common>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	f040 8090 	bne.w	800808e <_printf_float+0x1e2>
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f72:	b00d      	add	sp, #52	; 0x34
 8007f74:	ecbd 8b02 	vpop	{d8}
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	4649      	mov	r1, r9
 8007f84:	f7f8 fde2 	bl	8000b4c <__aeabi_dcmpun>
 8007f88:	b140      	cbz	r0, 8007f9c <_printf_float+0xf0>
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfbc      	itt	lt
 8007f90:	232d      	movlt	r3, #45	; 0x2d
 8007f92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f96:	487f      	ldr	r0, [pc, #508]	; (8008194 <_printf_float+0x2e8>)
 8007f98:	4b7f      	ldr	r3, [pc, #508]	; (8008198 <_printf_float+0x2ec>)
 8007f9a:	e7d1      	b.n	8007f40 <_printf_float+0x94>
 8007f9c:	6863      	ldr	r3, [r4, #4]
 8007f9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fa2:	9206      	str	r2, [sp, #24]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	d13f      	bne.n	8008028 <_printf_float+0x17c>
 8007fa8:	2306      	movs	r3, #6
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	6861      	ldr	r1, [r4, #4]
 8007fb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	ab0a      	add	r3, sp, #40	; 0x28
 8007fba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fbe:	ab09      	add	r3, sp, #36	; 0x24
 8007fc0:	ec49 8b10 	vmov	d0, r8, r9
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	6022      	str	r2, [r4, #0]
 8007fc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f7ff fecd 	bl	8007d6c <__cvt>
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fd6:	2b47      	cmp	r3, #71	; 0x47
 8007fd8:	4680      	mov	r8, r0
 8007fda:	d108      	bne.n	8007fee <_printf_float+0x142>
 8007fdc:	1cc8      	adds	r0, r1, #3
 8007fde:	db02      	blt.n	8007fe6 <_printf_float+0x13a>
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	dd41      	ble.n	800806a <_printf_float+0x1be>
 8007fe6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fea:	fa5f fb8b 	uxtb.w	fp, fp
 8007fee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ff2:	d820      	bhi.n	8008036 <_printf_float+0x18a>
 8007ff4:	3901      	subs	r1, #1
 8007ff6:	465a      	mov	r2, fp
 8007ff8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ffc:	9109      	str	r1, [sp, #36]	; 0x24
 8007ffe:	f7ff ff17 	bl	8007e30 <__exponent>
 8008002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008004:	1813      	adds	r3, r2, r0
 8008006:	2a01      	cmp	r2, #1
 8008008:	4681      	mov	r9, r0
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	dc02      	bgt.n	8008014 <_printf_float+0x168>
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	07d2      	lsls	r2, r2, #31
 8008012:	d501      	bpl.n	8008018 <_printf_float+0x16c>
 8008014:	3301      	adds	r3, #1
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800801c:	2b00      	cmp	r3, #0
 800801e:	d09c      	beq.n	8007f5a <_printf_float+0xae>
 8008020:	232d      	movs	r3, #45	; 0x2d
 8008022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008026:	e798      	b.n	8007f5a <_printf_float+0xae>
 8008028:	9a06      	ldr	r2, [sp, #24]
 800802a:	2a47      	cmp	r2, #71	; 0x47
 800802c:	d1be      	bne.n	8007fac <_printf_float+0x100>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1bc      	bne.n	8007fac <_printf_float+0x100>
 8008032:	2301      	movs	r3, #1
 8008034:	e7b9      	b.n	8007faa <_printf_float+0xfe>
 8008036:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800803a:	d118      	bne.n	800806e <_printf_float+0x1c2>
 800803c:	2900      	cmp	r1, #0
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	dd0b      	ble.n	800805a <_printf_float+0x1ae>
 8008042:	6121      	str	r1, [r4, #16]
 8008044:	b913      	cbnz	r3, 800804c <_printf_float+0x1a0>
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	07d0      	lsls	r0, r2, #31
 800804a:	d502      	bpl.n	8008052 <_printf_float+0x1a6>
 800804c:	3301      	adds	r3, #1
 800804e:	440b      	add	r3, r1
 8008050:	6123      	str	r3, [r4, #16]
 8008052:	65a1      	str	r1, [r4, #88]	; 0x58
 8008054:	f04f 0900 	mov.w	r9, #0
 8008058:	e7de      	b.n	8008018 <_printf_float+0x16c>
 800805a:	b913      	cbnz	r3, 8008062 <_printf_float+0x1b6>
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	07d2      	lsls	r2, r2, #31
 8008060:	d501      	bpl.n	8008066 <_printf_float+0x1ba>
 8008062:	3302      	adds	r3, #2
 8008064:	e7f4      	b.n	8008050 <_printf_float+0x1a4>
 8008066:	2301      	movs	r3, #1
 8008068:	e7f2      	b.n	8008050 <_printf_float+0x1a4>
 800806a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800806e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008070:	4299      	cmp	r1, r3
 8008072:	db05      	blt.n	8008080 <_printf_float+0x1d4>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	6121      	str	r1, [r4, #16]
 8008078:	07d8      	lsls	r0, r3, #31
 800807a:	d5ea      	bpl.n	8008052 <_printf_float+0x1a6>
 800807c:	1c4b      	adds	r3, r1, #1
 800807e:	e7e7      	b.n	8008050 <_printf_float+0x1a4>
 8008080:	2900      	cmp	r1, #0
 8008082:	bfd4      	ite	le
 8008084:	f1c1 0202 	rsble	r2, r1, #2
 8008088:	2201      	movgt	r2, #1
 800808a:	4413      	add	r3, r2
 800808c:	e7e0      	b.n	8008050 <_printf_float+0x1a4>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	055a      	lsls	r2, r3, #21
 8008092:	d407      	bmi.n	80080a4 <_printf_float+0x1f8>
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	4642      	mov	r2, r8
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	d12c      	bne.n	80080fc <_printf_float+0x250>
 80080a2:	e764      	b.n	8007f6e <_printf_float+0xc2>
 80080a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080a8:	f240 80e0 	bls.w	800826c <_printf_float+0x3c0>
 80080ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	f7f8 fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d034      	beq.n	8008126 <_printf_float+0x27a>
 80080bc:	4a37      	ldr	r2, [pc, #220]	; (800819c <_printf_float+0x2f0>)
 80080be:	2301      	movs	r3, #1
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f af51 	beq.w	8007f6e <_printf_float+0xc2>
 80080cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080d0:	429a      	cmp	r2, r3
 80080d2:	db02      	blt.n	80080da <_printf_float+0x22e>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	07d8      	lsls	r0, r3, #31
 80080d8:	d510      	bpl.n	80080fc <_printf_float+0x250>
 80080da:	ee18 3a10 	vmov	r3, s16
 80080de:	4652      	mov	r2, sl
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af41 	beq.w	8007f6e <_printf_float+0xc2>
 80080ec:	f04f 0800 	mov.w	r8, #0
 80080f0:	f104 091a 	add.w	r9, r4, #26
 80080f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f6:	3b01      	subs	r3, #1
 80080f8:	4543      	cmp	r3, r8
 80080fa:	dc09      	bgt.n	8008110 <_printf_float+0x264>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	079b      	lsls	r3, r3, #30
 8008100:	f100 8105 	bmi.w	800830e <_printf_float+0x462>
 8008104:	68e0      	ldr	r0, [r4, #12]
 8008106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008108:	4298      	cmp	r0, r3
 800810a:	bfb8      	it	lt
 800810c:	4618      	movlt	r0, r3
 800810e:	e730      	b.n	8007f72 <_printf_float+0xc6>
 8008110:	2301      	movs	r3, #1
 8008112:	464a      	mov	r2, r9
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af27 	beq.w	8007f6e <_printf_float+0xc2>
 8008120:	f108 0801 	add.w	r8, r8, #1
 8008124:	e7e6      	b.n	80080f4 <_printf_float+0x248>
 8008126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	dc39      	bgt.n	80081a0 <_printf_float+0x2f4>
 800812c:	4a1b      	ldr	r2, [pc, #108]	; (800819c <_printf_float+0x2f0>)
 800812e:	2301      	movs	r3, #1
 8008130:	4631      	mov	r1, r6
 8008132:	4628      	mov	r0, r5
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	f43f af19 	beq.w	8007f6e <_printf_float+0xc2>
 800813c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008140:	4313      	orrs	r3, r2
 8008142:	d102      	bne.n	800814a <_printf_float+0x29e>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	07d9      	lsls	r1, r3, #31
 8008148:	d5d8      	bpl.n	80080fc <_printf_float+0x250>
 800814a:	ee18 3a10 	vmov	r3, s16
 800814e:	4652      	mov	r2, sl
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af09 	beq.w	8007f6e <_printf_float+0xc2>
 800815c:	f04f 0900 	mov.w	r9, #0
 8008160:	f104 0a1a 	add.w	sl, r4, #26
 8008164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008166:	425b      	negs	r3, r3
 8008168:	454b      	cmp	r3, r9
 800816a:	dc01      	bgt.n	8008170 <_printf_float+0x2c4>
 800816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816e:	e792      	b.n	8008096 <_printf_float+0x1ea>
 8008170:	2301      	movs	r3, #1
 8008172:	4652      	mov	r2, sl
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	f43f aef7 	beq.w	8007f6e <_printf_float+0xc2>
 8008180:	f109 0901 	add.w	r9, r9, #1
 8008184:	e7ee      	b.n	8008164 <_printf_float+0x2b8>
 8008186:	bf00      	nop
 8008188:	7fefffff 	.word	0x7fefffff
 800818c:	0800b504 	.word	0x0800b504
 8008190:	0800b508 	.word	0x0800b508
 8008194:	0800b510 	.word	0x0800b510
 8008198:	0800b50c 	.word	0x0800b50c
 800819c:	0800b899 	.word	0x0800b899
 80081a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081a4:	429a      	cmp	r2, r3
 80081a6:	bfa8      	it	ge
 80081a8:	461a      	movge	r2, r3
 80081aa:	2a00      	cmp	r2, #0
 80081ac:	4691      	mov	r9, r2
 80081ae:	dc37      	bgt.n	8008220 <_printf_float+0x374>
 80081b0:	f04f 0b00 	mov.w	fp, #0
 80081b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081b8:	f104 021a 	add.w	r2, r4, #26
 80081bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081be:	9305      	str	r3, [sp, #20]
 80081c0:	eba3 0309 	sub.w	r3, r3, r9
 80081c4:	455b      	cmp	r3, fp
 80081c6:	dc33      	bgt.n	8008230 <_printf_float+0x384>
 80081c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081cc:	429a      	cmp	r2, r3
 80081ce:	db3b      	blt.n	8008248 <_printf_float+0x39c>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	07da      	lsls	r2, r3, #31
 80081d4:	d438      	bmi.n	8008248 <_printf_float+0x39c>
 80081d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d8:	9a05      	ldr	r2, [sp, #20]
 80081da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081dc:	1a9a      	subs	r2, r3, r2
 80081de:	eba3 0901 	sub.w	r9, r3, r1
 80081e2:	4591      	cmp	r9, r2
 80081e4:	bfa8      	it	ge
 80081e6:	4691      	movge	r9, r2
 80081e8:	f1b9 0f00 	cmp.w	r9, #0
 80081ec:	dc35      	bgt.n	800825a <_printf_float+0x3ae>
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081f6:	f104 0a1a 	add.w	sl, r4, #26
 80081fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	eba3 0309 	sub.w	r3, r3, r9
 8008204:	4543      	cmp	r3, r8
 8008206:	f77f af79 	ble.w	80080fc <_printf_float+0x250>
 800820a:	2301      	movs	r3, #1
 800820c:	4652      	mov	r2, sl
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	f43f aeaa 	beq.w	8007f6e <_printf_float+0xc2>
 800821a:	f108 0801 	add.w	r8, r8, #1
 800821e:	e7ec      	b.n	80081fa <_printf_float+0x34e>
 8008220:	4613      	mov	r3, r2
 8008222:	4631      	mov	r1, r6
 8008224:	4642      	mov	r2, r8
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	d1c0      	bne.n	80081b0 <_printf_float+0x304>
 800822e:	e69e      	b.n	8007f6e <_printf_float+0xc2>
 8008230:	2301      	movs	r3, #1
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	9205      	str	r2, [sp, #20]
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f ae97 	beq.w	8007f6e <_printf_float+0xc2>
 8008240:	9a05      	ldr	r2, [sp, #20]
 8008242:	f10b 0b01 	add.w	fp, fp, #1
 8008246:	e7b9      	b.n	80081bc <_printf_float+0x310>
 8008248:	ee18 3a10 	vmov	r3, s16
 800824c:	4652      	mov	r2, sl
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	d1be      	bne.n	80081d6 <_printf_float+0x32a>
 8008258:	e689      	b.n	8007f6e <_printf_float+0xc2>
 800825a:	9a05      	ldr	r2, [sp, #20]
 800825c:	464b      	mov	r3, r9
 800825e:	4442      	add	r2, r8
 8008260:	4631      	mov	r1, r6
 8008262:	4628      	mov	r0, r5
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	d1c1      	bne.n	80081ee <_printf_float+0x342>
 800826a:	e680      	b.n	8007f6e <_printf_float+0xc2>
 800826c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800826e:	2a01      	cmp	r2, #1
 8008270:	dc01      	bgt.n	8008276 <_printf_float+0x3ca>
 8008272:	07db      	lsls	r3, r3, #31
 8008274:	d538      	bpl.n	80082e8 <_printf_float+0x43c>
 8008276:	2301      	movs	r3, #1
 8008278:	4642      	mov	r2, r8
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f ae74 	beq.w	8007f6e <_printf_float+0xc2>
 8008286:	ee18 3a10 	vmov	r3, s16
 800828a:	4652      	mov	r2, sl
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	f43f ae6b 	beq.w	8007f6e <_printf_float+0xc2>
 8008298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	f7f8 fc22 	bl	8000ae8 <__aeabi_dcmpeq>
 80082a4:	b9d8      	cbnz	r0, 80082de <_printf_float+0x432>
 80082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a8:	f108 0201 	add.w	r2, r8, #1
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	d10e      	bne.n	80082d6 <_printf_float+0x42a>
 80082b8:	e659      	b.n	8007f6e <_printf_float+0xc2>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4652      	mov	r2, sl
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b8      	blx	r7
 80082c4:	3001      	adds	r0, #1
 80082c6:	f43f ae52 	beq.w	8007f6e <_printf_float+0xc2>
 80082ca:	f108 0801 	add.w	r8, r8, #1
 80082ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d0:	3b01      	subs	r3, #1
 80082d2:	4543      	cmp	r3, r8
 80082d4:	dcf1      	bgt.n	80082ba <_printf_float+0x40e>
 80082d6:	464b      	mov	r3, r9
 80082d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082dc:	e6dc      	b.n	8008098 <_printf_float+0x1ec>
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	f104 0a1a 	add.w	sl, r4, #26
 80082e6:	e7f2      	b.n	80082ce <_printf_float+0x422>
 80082e8:	2301      	movs	r3, #1
 80082ea:	4642      	mov	r2, r8
 80082ec:	e7df      	b.n	80082ae <_printf_float+0x402>
 80082ee:	2301      	movs	r3, #1
 80082f0:	464a      	mov	r2, r9
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f ae38 	beq.w	8007f6e <_printf_float+0xc2>
 80082fe:	f108 0801 	add.w	r8, r8, #1
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008306:	1a5b      	subs	r3, r3, r1
 8008308:	4543      	cmp	r3, r8
 800830a:	dcf0      	bgt.n	80082ee <_printf_float+0x442>
 800830c:	e6fa      	b.n	8008104 <_printf_float+0x258>
 800830e:	f04f 0800 	mov.w	r8, #0
 8008312:	f104 0919 	add.w	r9, r4, #25
 8008316:	e7f4      	b.n	8008302 <_printf_float+0x456>

08008318 <_printf_common>:
 8008318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	4616      	mov	r6, r2
 800831e:	4699      	mov	r9, r3
 8008320:	688a      	ldr	r2, [r1, #8]
 8008322:	690b      	ldr	r3, [r1, #16]
 8008324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008328:	4293      	cmp	r3, r2
 800832a:	bfb8      	it	lt
 800832c:	4613      	movlt	r3, r2
 800832e:	6033      	str	r3, [r6, #0]
 8008330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008334:	4607      	mov	r7, r0
 8008336:	460c      	mov	r4, r1
 8008338:	b10a      	cbz	r2, 800833e <_printf_common+0x26>
 800833a:	3301      	adds	r3, #1
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	0699      	lsls	r1, r3, #26
 8008342:	bf42      	ittt	mi
 8008344:	6833      	ldrmi	r3, [r6, #0]
 8008346:	3302      	addmi	r3, #2
 8008348:	6033      	strmi	r3, [r6, #0]
 800834a:	6825      	ldr	r5, [r4, #0]
 800834c:	f015 0506 	ands.w	r5, r5, #6
 8008350:	d106      	bne.n	8008360 <_printf_common+0x48>
 8008352:	f104 0a19 	add.w	sl, r4, #25
 8008356:	68e3      	ldr	r3, [r4, #12]
 8008358:	6832      	ldr	r2, [r6, #0]
 800835a:	1a9b      	subs	r3, r3, r2
 800835c:	42ab      	cmp	r3, r5
 800835e:	dc26      	bgt.n	80083ae <_printf_common+0x96>
 8008360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008364:	1e13      	subs	r3, r2, #0
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	bf18      	it	ne
 800836a:	2301      	movne	r3, #1
 800836c:	0692      	lsls	r2, r2, #26
 800836e:	d42b      	bmi.n	80083c8 <_printf_common+0xb0>
 8008370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008374:	4649      	mov	r1, r9
 8008376:	4638      	mov	r0, r7
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d01e      	beq.n	80083bc <_printf_common+0xa4>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	68e5      	ldr	r5, [r4, #12]
 8008382:	6832      	ldr	r2, [r6, #0]
 8008384:	f003 0306 	and.w	r3, r3, #6
 8008388:	2b04      	cmp	r3, #4
 800838a:	bf08      	it	eq
 800838c:	1aad      	subeq	r5, r5, r2
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	6922      	ldr	r2, [r4, #16]
 8008392:	bf0c      	ite	eq
 8008394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008398:	2500      	movne	r5, #0
 800839a:	4293      	cmp	r3, r2
 800839c:	bfc4      	itt	gt
 800839e:	1a9b      	subgt	r3, r3, r2
 80083a0:	18ed      	addgt	r5, r5, r3
 80083a2:	2600      	movs	r6, #0
 80083a4:	341a      	adds	r4, #26
 80083a6:	42b5      	cmp	r5, r6
 80083a8:	d11a      	bne.n	80083e0 <_printf_common+0xc8>
 80083aa:	2000      	movs	r0, #0
 80083ac:	e008      	b.n	80083c0 <_printf_common+0xa8>
 80083ae:	2301      	movs	r3, #1
 80083b0:	4652      	mov	r2, sl
 80083b2:	4649      	mov	r1, r9
 80083b4:	4638      	mov	r0, r7
 80083b6:	47c0      	blx	r8
 80083b8:	3001      	adds	r0, #1
 80083ba:	d103      	bne.n	80083c4 <_printf_common+0xac>
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295
 80083c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c4:	3501      	adds	r5, #1
 80083c6:	e7c6      	b.n	8008356 <_printf_common+0x3e>
 80083c8:	18e1      	adds	r1, r4, r3
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	2030      	movs	r0, #48	; 0x30
 80083ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083d2:	4422      	add	r2, r4
 80083d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083dc:	3302      	adds	r3, #2
 80083de:	e7c7      	b.n	8008370 <_printf_common+0x58>
 80083e0:	2301      	movs	r3, #1
 80083e2:	4622      	mov	r2, r4
 80083e4:	4649      	mov	r1, r9
 80083e6:	4638      	mov	r0, r7
 80083e8:	47c0      	blx	r8
 80083ea:	3001      	adds	r0, #1
 80083ec:	d0e6      	beq.n	80083bc <_printf_common+0xa4>
 80083ee:	3601      	adds	r6, #1
 80083f0:	e7d9      	b.n	80083a6 <_printf_common+0x8e>
	...

080083f4 <_printf_i>:
 80083f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	7e0f      	ldrb	r7, [r1, #24]
 80083fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083fc:	2f78      	cmp	r7, #120	; 0x78
 80083fe:	4691      	mov	r9, r2
 8008400:	4680      	mov	r8, r0
 8008402:	460c      	mov	r4, r1
 8008404:	469a      	mov	sl, r3
 8008406:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800840a:	d807      	bhi.n	800841c <_printf_i+0x28>
 800840c:	2f62      	cmp	r7, #98	; 0x62
 800840e:	d80a      	bhi.n	8008426 <_printf_i+0x32>
 8008410:	2f00      	cmp	r7, #0
 8008412:	f000 80d8 	beq.w	80085c6 <_printf_i+0x1d2>
 8008416:	2f58      	cmp	r7, #88	; 0x58
 8008418:	f000 80a3 	beq.w	8008562 <_printf_i+0x16e>
 800841c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008424:	e03a      	b.n	800849c <_printf_i+0xa8>
 8008426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800842a:	2b15      	cmp	r3, #21
 800842c:	d8f6      	bhi.n	800841c <_printf_i+0x28>
 800842e:	a101      	add	r1, pc, #4	; (adr r1, 8008434 <_printf_i+0x40>)
 8008430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008434:	0800848d 	.word	0x0800848d
 8008438:	080084a1 	.word	0x080084a1
 800843c:	0800841d 	.word	0x0800841d
 8008440:	0800841d 	.word	0x0800841d
 8008444:	0800841d 	.word	0x0800841d
 8008448:	0800841d 	.word	0x0800841d
 800844c:	080084a1 	.word	0x080084a1
 8008450:	0800841d 	.word	0x0800841d
 8008454:	0800841d 	.word	0x0800841d
 8008458:	0800841d 	.word	0x0800841d
 800845c:	0800841d 	.word	0x0800841d
 8008460:	080085ad 	.word	0x080085ad
 8008464:	080084d1 	.word	0x080084d1
 8008468:	0800858f 	.word	0x0800858f
 800846c:	0800841d 	.word	0x0800841d
 8008470:	0800841d 	.word	0x0800841d
 8008474:	080085cf 	.word	0x080085cf
 8008478:	0800841d 	.word	0x0800841d
 800847c:	080084d1 	.word	0x080084d1
 8008480:	0800841d 	.word	0x0800841d
 8008484:	0800841d 	.word	0x0800841d
 8008488:	08008597 	.word	0x08008597
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	602a      	str	r2, [r5, #0]
 8008494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800849c:	2301      	movs	r3, #1
 800849e:	e0a3      	b.n	80085e8 <_printf_i+0x1f4>
 80084a0:	6820      	ldr	r0, [r4, #0]
 80084a2:	6829      	ldr	r1, [r5, #0]
 80084a4:	0606      	lsls	r6, r0, #24
 80084a6:	f101 0304 	add.w	r3, r1, #4
 80084aa:	d50a      	bpl.n	80084c2 <_printf_i+0xce>
 80084ac:	680e      	ldr	r6, [r1, #0]
 80084ae:	602b      	str	r3, [r5, #0]
 80084b0:	2e00      	cmp	r6, #0
 80084b2:	da03      	bge.n	80084bc <_printf_i+0xc8>
 80084b4:	232d      	movs	r3, #45	; 0x2d
 80084b6:	4276      	negs	r6, r6
 80084b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084bc:	485e      	ldr	r0, [pc, #376]	; (8008638 <_printf_i+0x244>)
 80084be:	230a      	movs	r3, #10
 80084c0:	e019      	b.n	80084f6 <_printf_i+0x102>
 80084c2:	680e      	ldr	r6, [r1, #0]
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084ca:	bf18      	it	ne
 80084cc:	b236      	sxthne	r6, r6
 80084ce:	e7ef      	b.n	80084b0 <_printf_i+0xbc>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	1d19      	adds	r1, r3, #4
 80084d6:	6029      	str	r1, [r5, #0]
 80084d8:	0601      	lsls	r1, r0, #24
 80084da:	d501      	bpl.n	80084e0 <_printf_i+0xec>
 80084dc:	681e      	ldr	r6, [r3, #0]
 80084de:	e002      	b.n	80084e6 <_printf_i+0xf2>
 80084e0:	0646      	lsls	r6, r0, #25
 80084e2:	d5fb      	bpl.n	80084dc <_printf_i+0xe8>
 80084e4:	881e      	ldrh	r6, [r3, #0]
 80084e6:	4854      	ldr	r0, [pc, #336]	; (8008638 <_printf_i+0x244>)
 80084e8:	2f6f      	cmp	r7, #111	; 0x6f
 80084ea:	bf0c      	ite	eq
 80084ec:	2308      	moveq	r3, #8
 80084ee:	230a      	movne	r3, #10
 80084f0:	2100      	movs	r1, #0
 80084f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084f6:	6865      	ldr	r5, [r4, #4]
 80084f8:	60a5      	str	r5, [r4, #8]
 80084fa:	2d00      	cmp	r5, #0
 80084fc:	bfa2      	ittt	ge
 80084fe:	6821      	ldrge	r1, [r4, #0]
 8008500:	f021 0104 	bicge.w	r1, r1, #4
 8008504:	6021      	strge	r1, [r4, #0]
 8008506:	b90e      	cbnz	r6, 800850c <_printf_i+0x118>
 8008508:	2d00      	cmp	r5, #0
 800850a:	d04d      	beq.n	80085a8 <_printf_i+0x1b4>
 800850c:	4615      	mov	r5, r2
 800850e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008512:	fb03 6711 	mls	r7, r3, r1, r6
 8008516:	5dc7      	ldrb	r7, [r0, r7]
 8008518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800851c:	4637      	mov	r7, r6
 800851e:	42bb      	cmp	r3, r7
 8008520:	460e      	mov	r6, r1
 8008522:	d9f4      	bls.n	800850e <_printf_i+0x11a>
 8008524:	2b08      	cmp	r3, #8
 8008526:	d10b      	bne.n	8008540 <_printf_i+0x14c>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07de      	lsls	r6, r3, #31
 800852c:	d508      	bpl.n	8008540 <_printf_i+0x14c>
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	6861      	ldr	r1, [r4, #4]
 8008532:	4299      	cmp	r1, r3
 8008534:	bfde      	ittt	le
 8008536:	2330      	movle	r3, #48	; 0x30
 8008538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800853c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008540:	1b52      	subs	r2, r2, r5
 8008542:	6122      	str	r2, [r4, #16]
 8008544:	f8cd a000 	str.w	sl, [sp]
 8008548:	464b      	mov	r3, r9
 800854a:	aa03      	add	r2, sp, #12
 800854c:	4621      	mov	r1, r4
 800854e:	4640      	mov	r0, r8
 8008550:	f7ff fee2 	bl	8008318 <_printf_common>
 8008554:	3001      	adds	r0, #1
 8008556:	d14c      	bne.n	80085f2 <_printf_i+0x1fe>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	b004      	add	sp, #16
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	4835      	ldr	r0, [pc, #212]	; (8008638 <_printf_i+0x244>)
 8008564:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008568:	6829      	ldr	r1, [r5, #0]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008570:	6029      	str	r1, [r5, #0]
 8008572:	061d      	lsls	r5, r3, #24
 8008574:	d514      	bpl.n	80085a0 <_printf_i+0x1ac>
 8008576:	07df      	lsls	r7, r3, #31
 8008578:	bf44      	itt	mi
 800857a:	f043 0320 	orrmi.w	r3, r3, #32
 800857e:	6023      	strmi	r3, [r4, #0]
 8008580:	b91e      	cbnz	r6, 800858a <_printf_i+0x196>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f023 0320 	bic.w	r3, r3, #32
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	2310      	movs	r3, #16
 800858c:	e7b0      	b.n	80084f0 <_printf_i+0xfc>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	f043 0320 	orr.w	r3, r3, #32
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	2378      	movs	r3, #120	; 0x78
 8008598:	4828      	ldr	r0, [pc, #160]	; (800863c <_printf_i+0x248>)
 800859a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800859e:	e7e3      	b.n	8008568 <_printf_i+0x174>
 80085a0:	0659      	lsls	r1, r3, #25
 80085a2:	bf48      	it	mi
 80085a4:	b2b6      	uxthmi	r6, r6
 80085a6:	e7e6      	b.n	8008576 <_printf_i+0x182>
 80085a8:	4615      	mov	r5, r2
 80085aa:	e7bb      	b.n	8008524 <_printf_i+0x130>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	6826      	ldr	r6, [r4, #0]
 80085b0:	6961      	ldr	r1, [r4, #20]
 80085b2:	1d18      	adds	r0, r3, #4
 80085b4:	6028      	str	r0, [r5, #0]
 80085b6:	0635      	lsls	r5, r6, #24
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	d501      	bpl.n	80085c0 <_printf_i+0x1cc>
 80085bc:	6019      	str	r1, [r3, #0]
 80085be:	e002      	b.n	80085c6 <_printf_i+0x1d2>
 80085c0:	0670      	lsls	r0, r6, #25
 80085c2:	d5fb      	bpl.n	80085bc <_printf_i+0x1c8>
 80085c4:	8019      	strh	r1, [r3, #0]
 80085c6:	2300      	movs	r3, #0
 80085c8:	6123      	str	r3, [r4, #16]
 80085ca:	4615      	mov	r5, r2
 80085cc:	e7ba      	b.n	8008544 <_printf_i+0x150>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	1d1a      	adds	r2, r3, #4
 80085d2:	602a      	str	r2, [r5, #0]
 80085d4:	681d      	ldr	r5, [r3, #0]
 80085d6:	6862      	ldr	r2, [r4, #4]
 80085d8:	2100      	movs	r1, #0
 80085da:	4628      	mov	r0, r5
 80085dc:	f7f7 fe10 	bl	8000200 <memchr>
 80085e0:	b108      	cbz	r0, 80085e6 <_printf_i+0x1f2>
 80085e2:	1b40      	subs	r0, r0, r5
 80085e4:	6060      	str	r0, [r4, #4]
 80085e6:	6863      	ldr	r3, [r4, #4]
 80085e8:	6123      	str	r3, [r4, #16]
 80085ea:	2300      	movs	r3, #0
 80085ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f0:	e7a8      	b.n	8008544 <_printf_i+0x150>
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	462a      	mov	r2, r5
 80085f6:	4649      	mov	r1, r9
 80085f8:	4640      	mov	r0, r8
 80085fa:	47d0      	blx	sl
 80085fc:	3001      	adds	r0, #1
 80085fe:	d0ab      	beq.n	8008558 <_printf_i+0x164>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	079b      	lsls	r3, r3, #30
 8008604:	d413      	bmi.n	800862e <_printf_i+0x23a>
 8008606:	68e0      	ldr	r0, [r4, #12]
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	4298      	cmp	r0, r3
 800860c:	bfb8      	it	lt
 800860e:	4618      	movlt	r0, r3
 8008610:	e7a4      	b.n	800855c <_printf_i+0x168>
 8008612:	2301      	movs	r3, #1
 8008614:	4632      	mov	r2, r6
 8008616:	4649      	mov	r1, r9
 8008618:	4640      	mov	r0, r8
 800861a:	47d0      	blx	sl
 800861c:	3001      	adds	r0, #1
 800861e:	d09b      	beq.n	8008558 <_printf_i+0x164>
 8008620:	3501      	adds	r5, #1
 8008622:	68e3      	ldr	r3, [r4, #12]
 8008624:	9903      	ldr	r1, [sp, #12]
 8008626:	1a5b      	subs	r3, r3, r1
 8008628:	42ab      	cmp	r3, r5
 800862a:	dcf2      	bgt.n	8008612 <_printf_i+0x21e>
 800862c:	e7eb      	b.n	8008606 <_printf_i+0x212>
 800862e:	2500      	movs	r5, #0
 8008630:	f104 0619 	add.w	r6, r4, #25
 8008634:	e7f5      	b.n	8008622 <_printf_i+0x22e>
 8008636:	bf00      	nop
 8008638:	0800b514 	.word	0x0800b514
 800863c:	0800b525 	.word	0x0800b525

08008640 <iprintf>:
 8008640:	b40f      	push	{r0, r1, r2, r3}
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <iprintf+0x2c>)
 8008644:	b513      	push	{r0, r1, r4, lr}
 8008646:	681c      	ldr	r4, [r3, #0]
 8008648:	b124      	cbz	r4, 8008654 <iprintf+0x14>
 800864a:	69a3      	ldr	r3, [r4, #24]
 800864c:	b913      	cbnz	r3, 8008654 <iprintf+0x14>
 800864e:	4620      	mov	r0, r4
 8008650:	f001 fa0e 	bl	8009a70 <__sinit>
 8008654:	ab05      	add	r3, sp, #20
 8008656:	9a04      	ldr	r2, [sp, #16]
 8008658:	68a1      	ldr	r1, [r4, #8]
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	4620      	mov	r0, r4
 800865e:	f002 f9b1 	bl	800a9c4 <_vfiprintf_r>
 8008662:	b002      	add	sp, #8
 8008664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008668:	b004      	add	sp, #16
 800866a:	4770      	bx	lr
 800866c:	2000000c 	.word	0x2000000c

08008670 <_puts_r>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	460e      	mov	r6, r1
 8008674:	4605      	mov	r5, r0
 8008676:	b118      	cbz	r0, 8008680 <_puts_r+0x10>
 8008678:	6983      	ldr	r3, [r0, #24]
 800867a:	b90b      	cbnz	r3, 8008680 <_puts_r+0x10>
 800867c:	f001 f9f8 	bl	8009a70 <__sinit>
 8008680:	69ab      	ldr	r3, [r5, #24]
 8008682:	68ac      	ldr	r4, [r5, #8]
 8008684:	b913      	cbnz	r3, 800868c <_puts_r+0x1c>
 8008686:	4628      	mov	r0, r5
 8008688:	f001 f9f2 	bl	8009a70 <__sinit>
 800868c:	4b2c      	ldr	r3, [pc, #176]	; (8008740 <_puts_r+0xd0>)
 800868e:	429c      	cmp	r4, r3
 8008690:	d120      	bne.n	80086d4 <_puts_r+0x64>
 8008692:	686c      	ldr	r4, [r5, #4]
 8008694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008696:	07db      	lsls	r3, r3, #31
 8008698:	d405      	bmi.n	80086a6 <_puts_r+0x36>
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	0598      	lsls	r0, r3, #22
 800869e:	d402      	bmi.n	80086a6 <_puts_r+0x36>
 80086a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086a2:	f001 fa88 	bl	8009bb6 <__retarget_lock_acquire_recursive>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	0719      	lsls	r1, r3, #28
 80086aa:	d51d      	bpl.n	80086e8 <_puts_r+0x78>
 80086ac:	6923      	ldr	r3, [r4, #16]
 80086ae:	b1db      	cbz	r3, 80086e8 <_puts_r+0x78>
 80086b0:	3e01      	subs	r6, #1
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086b8:	3b01      	subs	r3, #1
 80086ba:	60a3      	str	r3, [r4, #8]
 80086bc:	bb39      	cbnz	r1, 800870e <_puts_r+0x9e>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da38      	bge.n	8008734 <_puts_r+0xc4>
 80086c2:	4622      	mov	r2, r4
 80086c4:	210a      	movs	r1, #10
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 f95a 	bl	8008980 <__swbuf_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d011      	beq.n	80086f4 <_puts_r+0x84>
 80086d0:	250a      	movs	r5, #10
 80086d2:	e011      	b.n	80086f8 <_puts_r+0x88>
 80086d4:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <_puts_r+0xd4>)
 80086d6:	429c      	cmp	r4, r3
 80086d8:	d101      	bne.n	80086de <_puts_r+0x6e>
 80086da:	68ac      	ldr	r4, [r5, #8]
 80086dc:	e7da      	b.n	8008694 <_puts_r+0x24>
 80086de:	4b1a      	ldr	r3, [pc, #104]	; (8008748 <_puts_r+0xd8>)
 80086e0:	429c      	cmp	r4, r3
 80086e2:	bf08      	it	eq
 80086e4:	68ec      	ldreq	r4, [r5, #12]
 80086e6:	e7d5      	b.n	8008694 <_puts_r+0x24>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f9ac 	bl	8008a48 <__swsetup_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0dd      	beq.n	80086b0 <_puts_r+0x40>
 80086f4:	f04f 35ff 	mov.w	r5, #4294967295
 80086f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086fa:	07da      	lsls	r2, r3, #31
 80086fc:	d405      	bmi.n	800870a <_puts_r+0x9a>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	059b      	lsls	r3, r3, #22
 8008702:	d402      	bmi.n	800870a <_puts_r+0x9a>
 8008704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008706:	f001 fa57 	bl	8009bb8 <__retarget_lock_release_recursive>
 800870a:	4628      	mov	r0, r5
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	2b00      	cmp	r3, #0
 8008710:	da04      	bge.n	800871c <_puts_r+0xac>
 8008712:	69a2      	ldr	r2, [r4, #24]
 8008714:	429a      	cmp	r2, r3
 8008716:	dc06      	bgt.n	8008726 <_puts_r+0xb6>
 8008718:	290a      	cmp	r1, #10
 800871a:	d004      	beq.n	8008726 <_puts_r+0xb6>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	6022      	str	r2, [r4, #0]
 8008722:	7019      	strb	r1, [r3, #0]
 8008724:	e7c5      	b.n	80086b2 <_puts_r+0x42>
 8008726:	4622      	mov	r2, r4
 8008728:	4628      	mov	r0, r5
 800872a:	f000 f929 	bl	8008980 <__swbuf_r>
 800872e:	3001      	adds	r0, #1
 8008730:	d1bf      	bne.n	80086b2 <_puts_r+0x42>
 8008732:	e7df      	b.n	80086f4 <_puts_r+0x84>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	250a      	movs	r5, #10
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	701d      	strb	r5, [r3, #0]
 800873e:	e7db      	b.n	80086f8 <_puts_r+0x88>
 8008740:	0800b6e8 	.word	0x0800b6e8
 8008744:	0800b708 	.word	0x0800b708
 8008748:	0800b6c8 	.word	0x0800b6c8

0800874c <puts>:
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <puts+0xc>)
 800874e:	4601      	mov	r1, r0
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	f7ff bf8d 	b.w	8008670 <_puts_r>
 8008756:	bf00      	nop
 8008758:	2000000c 	.word	0x2000000c

0800875c <siscanf>:
 800875c:	b40e      	push	{r1, r2, r3}
 800875e:	b510      	push	{r4, lr}
 8008760:	b09f      	sub	sp, #124	; 0x7c
 8008762:	ac21      	add	r4, sp, #132	; 0x84
 8008764:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008768:	f854 2b04 	ldr.w	r2, [r4], #4
 800876c:	9201      	str	r2, [sp, #4]
 800876e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008772:	9004      	str	r0, [sp, #16]
 8008774:	9008      	str	r0, [sp, #32]
 8008776:	f7f7 fd35 	bl	80001e4 <strlen>
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <siscanf+0x50>)
 800877c:	9005      	str	r0, [sp, #20]
 800877e:	9009      	str	r0, [sp, #36]	; 0x24
 8008780:	930d      	str	r3, [sp, #52]	; 0x34
 8008782:	480b      	ldr	r0, [pc, #44]	; (80087b0 <siscanf+0x54>)
 8008784:	9a01      	ldr	r2, [sp, #4]
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	9403      	str	r4, [sp, #12]
 800878a:	2300      	movs	r3, #0
 800878c:	9311      	str	r3, [sp, #68]	; 0x44
 800878e:	9316      	str	r3, [sp, #88]	; 0x58
 8008790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008794:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008798:	a904      	add	r1, sp, #16
 800879a:	4623      	mov	r3, r4
 800879c:	f001 ff70 	bl	800a680 <__ssvfiscanf_r>
 80087a0:	b01f      	add	sp, #124	; 0x7c
 80087a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a6:	b003      	add	sp, #12
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	080087d7 	.word	0x080087d7
 80087b0:	2000000c 	.word	0x2000000c

080087b4 <__sread>:
 80087b4:	b510      	push	{r4, lr}
 80087b6:	460c      	mov	r4, r1
 80087b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087bc:	f002 fb84 	bl	800aec8 <_read_r>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	bfab      	itete	ge
 80087c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087c6:	89a3      	ldrhlt	r3, [r4, #12]
 80087c8:	181b      	addge	r3, r3, r0
 80087ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ce:	bfac      	ite	ge
 80087d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087d2:	81a3      	strhlt	r3, [r4, #12]
 80087d4:	bd10      	pop	{r4, pc}

080087d6 <__seofread>:
 80087d6:	2000      	movs	r0, #0
 80087d8:	4770      	bx	lr

080087da <__swrite>:
 80087da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087de:	461f      	mov	r7, r3
 80087e0:	898b      	ldrh	r3, [r1, #12]
 80087e2:	05db      	lsls	r3, r3, #23
 80087e4:	4605      	mov	r5, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	4616      	mov	r6, r2
 80087ea:	d505      	bpl.n	80087f8 <__swrite+0x1e>
 80087ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f0:	2302      	movs	r3, #2
 80087f2:	2200      	movs	r2, #0
 80087f4:	f001 f9e2 	bl	8009bbc <_lseek_r>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	4632      	mov	r2, r6
 8008806:	463b      	mov	r3, r7
 8008808:	4628      	mov	r0, r5
 800880a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800880e:	f000 b909 	b.w	8008a24 <_write_r>

08008812 <__sseek>:
 8008812:	b510      	push	{r4, lr}
 8008814:	460c      	mov	r4, r1
 8008816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881a:	f001 f9cf 	bl	8009bbc <_lseek_r>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	bf15      	itete	ne
 8008824:	6560      	strne	r0, [r4, #84]	; 0x54
 8008826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800882a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800882e:	81a3      	strheq	r3, [r4, #12]
 8008830:	bf18      	it	ne
 8008832:	81a3      	strhne	r3, [r4, #12]
 8008834:	bd10      	pop	{r4, pc}

08008836 <__sclose>:
 8008836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883a:	f000 b973 	b.w	8008b24 <_close_r>

0800883e <strncpy>:
 800883e:	b510      	push	{r4, lr}
 8008840:	3901      	subs	r1, #1
 8008842:	4603      	mov	r3, r0
 8008844:	b132      	cbz	r2, 8008854 <strncpy+0x16>
 8008846:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800884a:	f803 4b01 	strb.w	r4, [r3], #1
 800884e:	3a01      	subs	r2, #1
 8008850:	2c00      	cmp	r4, #0
 8008852:	d1f7      	bne.n	8008844 <strncpy+0x6>
 8008854:	441a      	add	r2, r3
 8008856:	2100      	movs	r1, #0
 8008858:	4293      	cmp	r3, r2
 800885a:	d100      	bne.n	800885e <strncpy+0x20>
 800885c:	bd10      	pop	{r4, pc}
 800885e:	f803 1b01 	strb.w	r1, [r3], #1
 8008862:	e7f9      	b.n	8008858 <strncpy+0x1a>

08008864 <_strtol_l.constprop.0>:
 8008864:	2b01      	cmp	r3, #1
 8008866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886a:	d001      	beq.n	8008870 <_strtol_l.constprop.0+0xc>
 800886c:	2b24      	cmp	r3, #36	; 0x24
 800886e:	d906      	bls.n	800887e <_strtol_l.constprop.0+0x1a>
 8008870:	f7ff fa4a 	bl	8007d08 <__errno>
 8008874:	2316      	movs	r3, #22
 8008876:	6003      	str	r3, [r0, #0]
 8008878:	2000      	movs	r0, #0
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008964 <_strtol_l.constprop.0+0x100>
 8008882:	460d      	mov	r5, r1
 8008884:	462e      	mov	r6, r5
 8008886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800888a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800888e:	f017 0708 	ands.w	r7, r7, #8
 8008892:	d1f7      	bne.n	8008884 <_strtol_l.constprop.0+0x20>
 8008894:	2c2d      	cmp	r4, #45	; 0x2d
 8008896:	d132      	bne.n	80088fe <_strtol_l.constprop.0+0x9a>
 8008898:	782c      	ldrb	r4, [r5, #0]
 800889a:	2701      	movs	r7, #1
 800889c:	1cb5      	adds	r5, r6, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d05b      	beq.n	800895a <_strtol_l.constprop.0+0xf6>
 80088a2:	2b10      	cmp	r3, #16
 80088a4:	d109      	bne.n	80088ba <_strtol_l.constprop.0+0x56>
 80088a6:	2c30      	cmp	r4, #48	; 0x30
 80088a8:	d107      	bne.n	80088ba <_strtol_l.constprop.0+0x56>
 80088aa:	782c      	ldrb	r4, [r5, #0]
 80088ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088b0:	2c58      	cmp	r4, #88	; 0x58
 80088b2:	d14d      	bne.n	8008950 <_strtol_l.constprop.0+0xec>
 80088b4:	786c      	ldrb	r4, [r5, #1]
 80088b6:	2310      	movs	r3, #16
 80088b8:	3502      	adds	r5, #2
 80088ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80088be:	f108 38ff 	add.w	r8, r8, #4294967295
 80088c2:	f04f 0c00 	mov.w	ip, #0
 80088c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80088ca:	4666      	mov	r6, ip
 80088cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80088d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80088d4:	f1be 0f09 	cmp.w	lr, #9
 80088d8:	d816      	bhi.n	8008908 <_strtol_l.constprop.0+0xa4>
 80088da:	4674      	mov	r4, lr
 80088dc:	42a3      	cmp	r3, r4
 80088de:	dd24      	ble.n	800892a <_strtol_l.constprop.0+0xc6>
 80088e0:	f1bc 0f00 	cmp.w	ip, #0
 80088e4:	db1e      	blt.n	8008924 <_strtol_l.constprop.0+0xc0>
 80088e6:	45b1      	cmp	r9, r6
 80088e8:	d31c      	bcc.n	8008924 <_strtol_l.constprop.0+0xc0>
 80088ea:	d101      	bne.n	80088f0 <_strtol_l.constprop.0+0x8c>
 80088ec:	45a2      	cmp	sl, r4
 80088ee:	db19      	blt.n	8008924 <_strtol_l.constprop.0+0xc0>
 80088f0:	fb06 4603 	mla	r6, r6, r3, r4
 80088f4:	f04f 0c01 	mov.w	ip, #1
 80088f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088fc:	e7e8      	b.n	80088d0 <_strtol_l.constprop.0+0x6c>
 80088fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008900:	bf04      	itt	eq
 8008902:	782c      	ldrbeq	r4, [r5, #0]
 8008904:	1cb5      	addeq	r5, r6, #2
 8008906:	e7ca      	b.n	800889e <_strtol_l.constprop.0+0x3a>
 8008908:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800890c:	f1be 0f19 	cmp.w	lr, #25
 8008910:	d801      	bhi.n	8008916 <_strtol_l.constprop.0+0xb2>
 8008912:	3c37      	subs	r4, #55	; 0x37
 8008914:	e7e2      	b.n	80088dc <_strtol_l.constprop.0+0x78>
 8008916:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800891a:	f1be 0f19 	cmp.w	lr, #25
 800891e:	d804      	bhi.n	800892a <_strtol_l.constprop.0+0xc6>
 8008920:	3c57      	subs	r4, #87	; 0x57
 8008922:	e7db      	b.n	80088dc <_strtol_l.constprop.0+0x78>
 8008924:	f04f 3cff 	mov.w	ip, #4294967295
 8008928:	e7e6      	b.n	80088f8 <_strtol_l.constprop.0+0x94>
 800892a:	f1bc 0f00 	cmp.w	ip, #0
 800892e:	da05      	bge.n	800893c <_strtol_l.constprop.0+0xd8>
 8008930:	2322      	movs	r3, #34	; 0x22
 8008932:	6003      	str	r3, [r0, #0]
 8008934:	4646      	mov	r6, r8
 8008936:	b942      	cbnz	r2, 800894a <_strtol_l.constprop.0+0xe6>
 8008938:	4630      	mov	r0, r6
 800893a:	e79e      	b.n	800887a <_strtol_l.constprop.0+0x16>
 800893c:	b107      	cbz	r7, 8008940 <_strtol_l.constprop.0+0xdc>
 800893e:	4276      	negs	r6, r6
 8008940:	2a00      	cmp	r2, #0
 8008942:	d0f9      	beq.n	8008938 <_strtol_l.constprop.0+0xd4>
 8008944:	f1bc 0f00 	cmp.w	ip, #0
 8008948:	d000      	beq.n	800894c <_strtol_l.constprop.0+0xe8>
 800894a:	1e69      	subs	r1, r5, #1
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	e7f3      	b.n	8008938 <_strtol_l.constprop.0+0xd4>
 8008950:	2430      	movs	r4, #48	; 0x30
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1b1      	bne.n	80088ba <_strtol_l.constprop.0+0x56>
 8008956:	2308      	movs	r3, #8
 8008958:	e7af      	b.n	80088ba <_strtol_l.constprop.0+0x56>
 800895a:	2c30      	cmp	r4, #48	; 0x30
 800895c:	d0a5      	beq.n	80088aa <_strtol_l.constprop.0+0x46>
 800895e:	230a      	movs	r3, #10
 8008960:	e7ab      	b.n	80088ba <_strtol_l.constprop.0+0x56>
 8008962:	bf00      	nop
 8008964:	0800b537 	.word	0x0800b537

08008968 <_strtol_r>:
 8008968:	f7ff bf7c 	b.w	8008864 <_strtol_l.constprop.0>

0800896c <strtol>:
 800896c:	4613      	mov	r3, r2
 800896e:	460a      	mov	r2, r1
 8008970:	4601      	mov	r1, r0
 8008972:	4802      	ldr	r0, [pc, #8]	; (800897c <strtol+0x10>)
 8008974:	6800      	ldr	r0, [r0, #0]
 8008976:	f7ff bf75 	b.w	8008864 <_strtol_l.constprop.0>
 800897a:	bf00      	nop
 800897c:	2000000c 	.word	0x2000000c

08008980 <__swbuf_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	460e      	mov	r6, r1
 8008984:	4614      	mov	r4, r2
 8008986:	4605      	mov	r5, r0
 8008988:	b118      	cbz	r0, 8008992 <__swbuf_r+0x12>
 800898a:	6983      	ldr	r3, [r0, #24]
 800898c:	b90b      	cbnz	r3, 8008992 <__swbuf_r+0x12>
 800898e:	f001 f86f 	bl	8009a70 <__sinit>
 8008992:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <__swbuf_r+0x98>)
 8008994:	429c      	cmp	r4, r3
 8008996:	d12b      	bne.n	80089f0 <__swbuf_r+0x70>
 8008998:	686c      	ldr	r4, [r5, #4]
 800899a:	69a3      	ldr	r3, [r4, #24]
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	071a      	lsls	r2, r3, #28
 80089a2:	d52f      	bpl.n	8008a04 <__swbuf_r+0x84>
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	b36b      	cbz	r3, 8008a04 <__swbuf_r+0x84>
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	6820      	ldr	r0, [r4, #0]
 80089ac:	1ac0      	subs	r0, r0, r3
 80089ae:	6963      	ldr	r3, [r4, #20]
 80089b0:	b2f6      	uxtb	r6, r6
 80089b2:	4283      	cmp	r3, r0
 80089b4:	4637      	mov	r7, r6
 80089b6:	dc04      	bgt.n	80089c2 <__swbuf_r+0x42>
 80089b8:	4621      	mov	r1, r4
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 ffc4 	bl	8009948 <_fflush_r>
 80089c0:	bb30      	cbnz	r0, 8008a10 <__swbuf_r+0x90>
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	60a3      	str	r3, [r4, #8]
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	701e      	strb	r6, [r3, #0]
 80089d0:	6963      	ldr	r3, [r4, #20]
 80089d2:	3001      	adds	r0, #1
 80089d4:	4283      	cmp	r3, r0
 80089d6:	d004      	beq.n	80089e2 <__swbuf_r+0x62>
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	07db      	lsls	r3, r3, #31
 80089dc:	d506      	bpl.n	80089ec <__swbuf_r+0x6c>
 80089de:	2e0a      	cmp	r6, #10
 80089e0:	d104      	bne.n	80089ec <__swbuf_r+0x6c>
 80089e2:	4621      	mov	r1, r4
 80089e4:	4628      	mov	r0, r5
 80089e6:	f000 ffaf 	bl	8009948 <_fflush_r>
 80089ea:	b988      	cbnz	r0, 8008a10 <__swbuf_r+0x90>
 80089ec:	4638      	mov	r0, r7
 80089ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <__swbuf_r+0x9c>)
 80089f2:	429c      	cmp	r4, r3
 80089f4:	d101      	bne.n	80089fa <__swbuf_r+0x7a>
 80089f6:	68ac      	ldr	r4, [r5, #8]
 80089f8:	e7cf      	b.n	800899a <__swbuf_r+0x1a>
 80089fa:	4b09      	ldr	r3, [pc, #36]	; (8008a20 <__swbuf_r+0xa0>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	bf08      	it	eq
 8008a00:	68ec      	ldreq	r4, [r5, #12]
 8008a02:	e7ca      	b.n	800899a <__swbuf_r+0x1a>
 8008a04:	4621      	mov	r1, r4
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 f81e 	bl	8008a48 <__swsetup_r>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d0cb      	beq.n	80089a8 <__swbuf_r+0x28>
 8008a10:	f04f 37ff 	mov.w	r7, #4294967295
 8008a14:	e7ea      	b.n	80089ec <__swbuf_r+0x6c>
 8008a16:	bf00      	nop
 8008a18:	0800b6e8 	.word	0x0800b6e8
 8008a1c:	0800b708 	.word	0x0800b708
 8008a20:	0800b6c8 	.word	0x0800b6c8

08008a24 <_write_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d07      	ldr	r5, [pc, #28]	; (8008a44 <_write_r+0x20>)
 8008a28:	4604      	mov	r4, r0
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	602a      	str	r2, [r5, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	f7f9 fe85 	bl	8002742 <_write>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_write_r+0x1e>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_write_r+0x1e>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	200007ac 	.word	0x200007ac

08008a48 <__swsetup_r>:
 8008a48:	4b32      	ldr	r3, [pc, #200]	; (8008b14 <__swsetup_r+0xcc>)
 8008a4a:	b570      	push	{r4, r5, r6, lr}
 8008a4c:	681d      	ldr	r5, [r3, #0]
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	b125      	cbz	r5, 8008a5e <__swsetup_r+0x16>
 8008a54:	69ab      	ldr	r3, [r5, #24]
 8008a56:	b913      	cbnz	r3, 8008a5e <__swsetup_r+0x16>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f001 f809 	bl	8009a70 <__sinit>
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <__swsetup_r+0xd0>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	d10f      	bne.n	8008a84 <__swsetup_r+0x3c>
 8008a64:	686c      	ldr	r4, [r5, #4]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a6c:	0719      	lsls	r1, r3, #28
 8008a6e:	d42c      	bmi.n	8008aca <__swsetup_r+0x82>
 8008a70:	06dd      	lsls	r5, r3, #27
 8008a72:	d411      	bmi.n	8008a98 <__swsetup_r+0x50>
 8008a74:	2309      	movs	r3, #9
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	e03e      	b.n	8008b02 <__swsetup_r+0xba>
 8008a84:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <__swsetup_r+0xd4>)
 8008a86:	429c      	cmp	r4, r3
 8008a88:	d101      	bne.n	8008a8e <__swsetup_r+0x46>
 8008a8a:	68ac      	ldr	r4, [r5, #8]
 8008a8c:	e7eb      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <__swsetup_r+0xd8>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	bf08      	it	eq
 8008a94:	68ec      	ldreq	r4, [r5, #12]
 8008a96:	e7e6      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a98:	0758      	lsls	r0, r3, #29
 8008a9a:	d512      	bpl.n	8008ac2 <__swsetup_r+0x7a>
 8008a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9e:	b141      	cbz	r1, 8008ab2 <__swsetup_r+0x6a>
 8008aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d002      	beq.n	8008aae <__swsetup_r+0x66>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f001 fcaf 	bl	800a40c <_free_r>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	2300      	movs	r3, #0
 8008abc:	6063      	str	r3, [r4, #4]
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	b94b      	cbnz	r3, 8008ae2 <__swsetup_r+0x9a>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad8:	d003      	beq.n	8008ae2 <__swsetup_r+0x9a>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4630      	mov	r0, r6
 8008ade:	f001 f8a5 	bl	8009c2c <__smakebuf_r>
 8008ae2:	89a0      	ldrh	r0, [r4, #12]
 8008ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae8:	f010 0301 	ands.w	r3, r0, #1
 8008aec:	d00a      	beq.n	8008b04 <__swsetup_r+0xbc>
 8008aee:	2300      	movs	r3, #0
 8008af0:	60a3      	str	r3, [r4, #8]
 8008af2:	6963      	ldr	r3, [r4, #20]
 8008af4:	425b      	negs	r3, r3
 8008af6:	61a3      	str	r3, [r4, #24]
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	b943      	cbnz	r3, 8008b0e <__swsetup_r+0xc6>
 8008afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b00:	d1ba      	bne.n	8008a78 <__swsetup_r+0x30>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	0781      	lsls	r1, r0, #30
 8008b06:	bf58      	it	pl
 8008b08:	6963      	ldrpl	r3, [r4, #20]
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	e7f4      	b.n	8008af8 <__swsetup_r+0xb0>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e7f7      	b.n	8008b02 <__swsetup_r+0xba>
 8008b12:	bf00      	nop
 8008b14:	2000000c 	.word	0x2000000c
 8008b18:	0800b6e8 	.word	0x0800b6e8
 8008b1c:	0800b708 	.word	0x0800b708
 8008b20:	0800b6c8 	.word	0x0800b6c8

08008b24 <_close_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d06      	ldr	r5, [pc, #24]	; (8008b40 <_close_r+0x1c>)
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7f9 fe23 	bl	800277a <_close>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_close_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_close_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	200007ac 	.word	0x200007ac

08008b44 <quorem>:
 8008b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	6903      	ldr	r3, [r0, #16]
 8008b4a:	690c      	ldr	r4, [r1, #16]
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	4607      	mov	r7, r0
 8008b50:	f2c0 8081 	blt.w	8008c56 <quorem+0x112>
 8008b54:	3c01      	subs	r4, #1
 8008b56:	f101 0814 	add.w	r8, r1, #20
 8008b5a:	f100 0514 	add.w	r5, r0, #20
 8008b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b78:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b7c:	d331      	bcc.n	8008be2 <quorem+0x9e>
 8008b7e:	f04f 0e00 	mov.w	lr, #0
 8008b82:	4640      	mov	r0, r8
 8008b84:	46ac      	mov	ip, r5
 8008b86:	46f2      	mov	sl, lr
 8008b88:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b8c:	b293      	uxth	r3, r2
 8008b8e:	fb06 e303 	mla	r3, r6, r3, lr
 8008b92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	ebaa 0303 	sub.w	r3, sl, r3
 8008b9c:	f8dc a000 	ldr.w	sl, [ip]
 8008ba0:	0c12      	lsrs	r2, r2, #16
 8008ba2:	fa13 f38a 	uxtah	r3, r3, sl
 8008ba6:	fb06 e202 	mla	r2, r6, r2, lr
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bb2:	b292      	uxth	r2, r2
 8008bb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008bb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008bc0:	4581      	cmp	r9, r0
 8008bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bc6:	f84c 3b04 	str.w	r3, [ip], #4
 8008bca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bce:	d2db      	bcs.n	8008b88 <quorem+0x44>
 8008bd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bd4:	b92b      	cbnz	r3, 8008be2 <quorem+0x9e>
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	d32e      	bcc.n	8008c3e <quorem+0xfa>
 8008be0:	613c      	str	r4, [r7, #16]
 8008be2:	4638      	mov	r0, r7
 8008be4:	f001 fafa 	bl	800a1dc <__mcmp>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	db24      	blt.n	8008c36 <quorem+0xf2>
 8008bec:	3601      	adds	r6, #1
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f04f 0c00 	mov.w	ip, #0
 8008bf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bf8:	f8d0 e000 	ldr.w	lr, [r0]
 8008bfc:	b293      	uxth	r3, r2
 8008bfe:	ebac 0303 	sub.w	r3, ip, r3
 8008c02:	0c12      	lsrs	r2, r2, #16
 8008c04:	fa13 f38e 	uxtah	r3, r3, lr
 8008c08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c16:	45c1      	cmp	r9, r8
 8008c18:	f840 3b04 	str.w	r3, [r0], #4
 8008c1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c20:	d2e8      	bcs.n	8008bf4 <quorem+0xb0>
 8008c22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c2a:	b922      	cbnz	r2, 8008c36 <quorem+0xf2>
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	461a      	mov	r2, r3
 8008c32:	d30a      	bcc.n	8008c4a <quorem+0x106>
 8008c34:	613c      	str	r4, [r7, #16]
 8008c36:	4630      	mov	r0, r6
 8008c38:	b003      	add	sp, #12
 8008c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3e:	6812      	ldr	r2, [r2, #0]
 8008c40:	3b04      	subs	r3, #4
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	d1cc      	bne.n	8008be0 <quorem+0x9c>
 8008c46:	3c01      	subs	r4, #1
 8008c48:	e7c7      	b.n	8008bda <quorem+0x96>
 8008c4a:	6812      	ldr	r2, [r2, #0]
 8008c4c:	3b04      	subs	r3, #4
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	d1f0      	bne.n	8008c34 <quorem+0xf0>
 8008c52:	3c01      	subs	r4, #1
 8008c54:	e7eb      	b.n	8008c2e <quorem+0xea>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e7ee      	b.n	8008c38 <quorem+0xf4>
 8008c5a:	0000      	movs	r0, r0
 8008c5c:	0000      	movs	r0, r0
	...

08008c60 <_dtoa_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	ed2d 8b04 	vpush	{d8-d9}
 8008c68:	ec57 6b10 	vmov	r6, r7, d0
 8008c6c:	b093      	sub	sp, #76	; 0x4c
 8008c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c74:	9106      	str	r1, [sp, #24]
 8008c76:	ee10 aa10 	vmov	sl, s0
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c80:	46bb      	mov	fp, r7
 8008c82:	b975      	cbnz	r5, 8008ca2 <_dtoa_r+0x42>
 8008c84:	2010      	movs	r0, #16
 8008c86:	f001 f811 	bl	8009cac <malloc>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c8e:	b920      	cbnz	r0, 8008c9a <_dtoa_r+0x3a>
 8008c90:	4ba7      	ldr	r3, [pc, #668]	; (8008f30 <_dtoa_r+0x2d0>)
 8008c92:	21ea      	movs	r1, #234	; 0xea
 8008c94:	48a7      	ldr	r0, [pc, #668]	; (8008f34 <_dtoa_r+0x2d4>)
 8008c96:	f002 fa1f 	bl	800b0d8 <__assert_func>
 8008c9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c9e:	6005      	str	r5, [r0, #0]
 8008ca0:	60c5      	str	r5, [r0, #12]
 8008ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca4:	6819      	ldr	r1, [r3, #0]
 8008ca6:	b151      	cbz	r1, 8008cbe <_dtoa_r+0x5e>
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	604a      	str	r2, [r1, #4]
 8008cac:	2301      	movs	r3, #1
 8008cae:	4093      	lsls	r3, r2
 8008cb0:	608b      	str	r3, [r1, #8]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f001 f850 	bl	8009d58 <_Bfree>
 8008cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	1e3b      	subs	r3, r7, #0
 8008cc0:	bfaa      	itet	ge
 8008cc2:	2300      	movge	r3, #0
 8008cc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008cc8:	f8c8 3000 	strge.w	r3, [r8]
 8008ccc:	4b9a      	ldr	r3, [pc, #616]	; (8008f38 <_dtoa_r+0x2d8>)
 8008cce:	bfbc      	itt	lt
 8008cd0:	2201      	movlt	r2, #1
 8008cd2:	f8c8 2000 	strlt.w	r2, [r8]
 8008cd6:	ea33 030b 	bics.w	r3, r3, fp
 8008cda:	d11b      	bne.n	8008d14 <_dtoa_r+0xb4>
 8008cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cde:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ce8:	4333      	orrs	r3, r6
 8008cea:	f000 8592 	beq.w	8009812 <_dtoa_r+0xbb2>
 8008cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf0:	b963      	cbnz	r3, 8008d0c <_dtoa_r+0xac>
 8008cf2:	4b92      	ldr	r3, [pc, #584]	; (8008f3c <_dtoa_r+0x2dc>)
 8008cf4:	e022      	b.n	8008d3c <_dtoa_r+0xdc>
 8008cf6:	4b92      	ldr	r3, [pc, #584]	; (8008f40 <_dtoa_r+0x2e0>)
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	9801      	ldr	r0, [sp, #4]
 8008d02:	b013      	add	sp, #76	; 0x4c
 8008d04:	ecbd 8b04 	vpop	{d8-d9}
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	4b8b      	ldr	r3, [pc, #556]	; (8008f3c <_dtoa_r+0x2dc>)
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	3303      	adds	r3, #3
 8008d12:	e7f3      	b.n	8008cfc <_dtoa_r+0x9c>
 8008d14:	2200      	movs	r2, #0
 8008d16:	2300      	movs	r3, #0
 8008d18:	4650      	mov	r0, sl
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	f7f7 fee4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d20:	ec4b ab19 	vmov	d9, sl, fp
 8008d24:	4680      	mov	r8, r0
 8008d26:	b158      	cbz	r0, 8008d40 <_dtoa_r+0xe0>
 8008d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 856b 	beq.w	800980c <_dtoa_r+0xbac>
 8008d36:	4883      	ldr	r0, [pc, #524]	; (8008f44 <_dtoa_r+0x2e4>)
 8008d38:	6018      	str	r0, [r3, #0]
 8008d3a:	1e43      	subs	r3, r0, #1
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	e7df      	b.n	8008d00 <_dtoa_r+0xa0>
 8008d40:	ec4b ab10 	vmov	d0, sl, fp
 8008d44:	aa10      	add	r2, sp, #64	; 0x40
 8008d46:	a911      	add	r1, sp, #68	; 0x44
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f001 faed 	bl	800a328 <__d2b>
 8008d4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008d52:	ee08 0a10 	vmov	s16, r0
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	f000 8084 	beq.w	8008e64 <_dtoa_r+0x204>
 8008d5c:	ee19 3a90 	vmov	r3, s19
 8008d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d68:	4656      	mov	r6, sl
 8008d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d76:	4b74      	ldr	r3, [pc, #464]	; (8008f48 <_dtoa_r+0x2e8>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fa93 	bl	80002a8 <__aeabi_dsub>
 8008d82:	a365      	add	r3, pc, #404	; (adr r3, 8008f18 <_dtoa_r+0x2b8>)
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	f7f7 fc46 	bl	8000618 <__aeabi_dmul>
 8008d8c:	a364      	add	r3, pc, #400	; (adr r3, 8008f20 <_dtoa_r+0x2c0>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	f7f7 fa8b 	bl	80002ac <__adddf3>
 8008d96:	4606      	mov	r6, r0
 8008d98:	4628      	mov	r0, r5
 8008d9a:	460f      	mov	r7, r1
 8008d9c:	f7f7 fbd2 	bl	8000544 <__aeabi_i2d>
 8008da0:	a361      	add	r3, pc, #388	; (adr r3, 8008f28 <_dtoa_r+0x2c8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fc37 	bl	8000618 <__aeabi_dmul>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 fa7b 	bl	80002ac <__adddf3>
 8008db6:	4606      	mov	r6, r0
 8008db8:	460f      	mov	r7, r1
 8008dba:	f7f7 fedd 	bl	8000b78 <__aeabi_d2iz>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	9000      	str	r0, [sp, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 fe98 	bl	8000afc <__aeabi_dcmplt>
 8008dcc:	b150      	cbz	r0, 8008de4 <_dtoa_r+0x184>
 8008dce:	9800      	ldr	r0, [sp, #0]
 8008dd0:	f7f7 fbb8 	bl	8000544 <__aeabi_i2d>
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	f7f7 fe86 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ddc:	b910      	cbnz	r0, 8008de4 <_dtoa_r+0x184>
 8008dde:	9b00      	ldr	r3, [sp, #0]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	9b00      	ldr	r3, [sp, #0]
 8008de6:	2b16      	cmp	r3, #22
 8008de8:	d85a      	bhi.n	8008ea0 <_dtoa_r+0x240>
 8008dea:	9a00      	ldr	r2, [sp, #0]
 8008dec:	4b57      	ldr	r3, [pc, #348]	; (8008f4c <_dtoa_r+0x2ec>)
 8008dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	ec51 0b19 	vmov	r0, r1, d9
 8008dfa:	f7f7 fe7f 	bl	8000afc <__aeabi_dcmplt>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d050      	beq.n	8008ea4 <_dtoa_r+0x244>
 8008e02:	9b00      	ldr	r3, [sp, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e0e:	1b5d      	subs	r5, r3, r5
 8008e10:	1e6b      	subs	r3, r5, #1
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	bf45      	ittet	mi
 8008e16:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e1a:	9304      	strmi	r3, [sp, #16]
 8008e1c:	2300      	movpl	r3, #0
 8008e1e:	2300      	movmi	r3, #0
 8008e20:	bf4c      	ite	mi
 8008e22:	9305      	strmi	r3, [sp, #20]
 8008e24:	9304      	strpl	r3, [sp, #16]
 8008e26:	9b00      	ldr	r3, [sp, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db3d      	blt.n	8008ea8 <_dtoa_r+0x248>
 8008e2c:	9b05      	ldr	r3, [sp, #20]
 8008e2e:	9a00      	ldr	r2, [sp, #0]
 8008e30:	920a      	str	r2, [sp, #40]	; 0x28
 8008e32:	4413      	add	r3, r2
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	2300      	movs	r3, #0
 8008e38:	9307      	str	r3, [sp, #28]
 8008e3a:	9b06      	ldr	r3, [sp, #24]
 8008e3c:	2b09      	cmp	r3, #9
 8008e3e:	f200 8089 	bhi.w	8008f54 <_dtoa_r+0x2f4>
 8008e42:	2b05      	cmp	r3, #5
 8008e44:	bfc4      	itt	gt
 8008e46:	3b04      	subgt	r3, #4
 8008e48:	9306      	strgt	r3, [sp, #24]
 8008e4a:	9b06      	ldr	r3, [sp, #24]
 8008e4c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e50:	bfcc      	ite	gt
 8008e52:	2500      	movgt	r5, #0
 8008e54:	2501      	movle	r5, #1
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	f200 8087 	bhi.w	8008f6a <_dtoa_r+0x30a>
 8008e5c:	e8df f003 	tbb	[pc, r3]
 8008e60:	59383a2d 	.word	0x59383a2d
 8008e64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e68:	441d      	add	r5, r3
 8008e6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	bfc1      	itttt	gt
 8008e72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e82:	bfda      	itte	le
 8008e84:	f1c3 0320 	rsble	r3, r3, #32
 8008e88:	fa06 f003 	lslle.w	r0, r6, r3
 8008e8c:	4318      	orrgt	r0, r3
 8008e8e:	f7f7 fb49 	bl	8000524 <__aeabi_ui2d>
 8008e92:	2301      	movs	r3, #1
 8008e94:	4606      	mov	r6, r0
 8008e96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e9a:	3d01      	subs	r5, #1
 8008e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e9e:	e76a      	b.n	8008d76 <_dtoa_r+0x116>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e7b2      	b.n	8008e0a <_dtoa_r+0x1aa>
 8008ea4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ea6:	e7b1      	b.n	8008e0c <_dtoa_r+0x1ac>
 8008ea8:	9b04      	ldr	r3, [sp, #16]
 8008eaa:	9a00      	ldr	r2, [sp, #0]
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	9304      	str	r3, [sp, #16]
 8008eb0:	4253      	negs	r3, r2
 8008eb2:	9307      	str	r3, [sp, #28]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8008eb8:	e7bf      	b.n	8008e3a <_dtoa_r+0x1da>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9308      	str	r3, [sp, #32]
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	dc55      	bgt.n	8008f70 <_dtoa_r+0x310>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ece:	e00c      	b.n	8008eea <_dtoa_r+0x28a>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e7f3      	b.n	8008ebc <_dtoa_r+0x25c>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed8:	9308      	str	r3, [sp, #32]
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	4413      	add	r3, r2
 8008ede:	9302      	str	r3, [sp, #8]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	9303      	str	r3, [sp, #12]
 8008ee6:	bfb8      	it	lt
 8008ee8:	2301      	movlt	r3, #1
 8008eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008eec:	2200      	movs	r2, #0
 8008eee:	6042      	str	r2, [r0, #4]
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	f102 0614 	add.w	r6, r2, #20
 8008ef6:	429e      	cmp	r6, r3
 8008ef8:	6841      	ldr	r1, [r0, #4]
 8008efa:	d93d      	bls.n	8008f78 <_dtoa_r+0x318>
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 feeb 	bl	8009cd8 <_Balloc>
 8008f02:	9001      	str	r0, [sp, #4]
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d13b      	bne.n	8008f80 <_dtoa_r+0x320>
 8008f08:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <_dtoa_r+0x2f0>)
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f10:	e6c0      	b.n	8008c94 <_dtoa_r+0x34>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e7df      	b.n	8008ed6 <_dtoa_r+0x276>
 8008f16:	bf00      	nop
 8008f18:	636f4361 	.word	0x636f4361
 8008f1c:	3fd287a7 	.word	0x3fd287a7
 8008f20:	8b60c8b3 	.word	0x8b60c8b3
 8008f24:	3fc68a28 	.word	0x3fc68a28
 8008f28:	509f79fb 	.word	0x509f79fb
 8008f2c:	3fd34413 	.word	0x3fd34413
 8008f30:	0800b644 	.word	0x0800b644
 8008f34:	0800b65b 	.word	0x0800b65b
 8008f38:	7ff00000 	.word	0x7ff00000
 8008f3c:	0800b640 	.word	0x0800b640
 8008f40:	0800b637 	.word	0x0800b637
 8008f44:	0800b89a 	.word	0x0800b89a
 8008f48:	3ff80000 	.word	0x3ff80000
 8008f4c:	0800b7b0 	.word	0x0800b7b0
 8008f50:	0800b6b6 	.word	0x0800b6b6
 8008f54:	2501      	movs	r5, #1
 8008f56:	2300      	movs	r3, #0
 8008f58:	9306      	str	r3, [sp, #24]
 8008f5a:	9508      	str	r5, [sp, #32]
 8008f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f64:	2200      	movs	r2, #0
 8008f66:	2312      	movs	r3, #18
 8008f68:	e7b0      	b.n	8008ecc <_dtoa_r+0x26c>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	9308      	str	r3, [sp, #32]
 8008f6e:	e7f5      	b.n	8008f5c <_dtoa_r+0x2fc>
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f76:	e7b8      	b.n	8008eea <_dtoa_r+0x28a>
 8008f78:	3101      	adds	r1, #1
 8008f7a:	6041      	str	r1, [r0, #4]
 8008f7c:	0052      	lsls	r2, r2, #1
 8008f7e:	e7b8      	b.n	8008ef2 <_dtoa_r+0x292>
 8008f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f82:	9a01      	ldr	r2, [sp, #4]
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	2b0e      	cmp	r3, #14
 8008f8a:	f200 809d 	bhi.w	80090c8 <_dtoa_r+0x468>
 8008f8e:	2d00      	cmp	r5, #0
 8008f90:	f000 809a 	beq.w	80090c8 <_dtoa_r+0x468>
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd32      	ble.n	8009000 <_dtoa_r+0x3a0>
 8008f9a:	4ab7      	ldr	r2, [pc, #732]	; (8009278 <_dtoa_r+0x618>)
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fa8:	9b00      	ldr	r3, [sp, #0]
 8008faa:	05d8      	lsls	r0, r3, #23
 8008fac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008fb0:	d516      	bpl.n	8008fe0 <_dtoa_r+0x380>
 8008fb2:	4bb2      	ldr	r3, [pc, #712]	; (800927c <_dtoa_r+0x61c>)
 8008fb4:	ec51 0b19 	vmov	r0, r1, d9
 8008fb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fbc:	f7f7 fc56 	bl	800086c <__aeabi_ddiv>
 8008fc0:	f007 070f 	and.w	r7, r7, #15
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	468b      	mov	fp, r1
 8008fc8:	2503      	movs	r5, #3
 8008fca:	4eac      	ldr	r6, [pc, #688]	; (800927c <_dtoa_r+0x61c>)
 8008fcc:	b957      	cbnz	r7, 8008fe4 <_dtoa_r+0x384>
 8008fce:	4642      	mov	r2, r8
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	4650      	mov	r0, sl
 8008fd4:	4659      	mov	r1, fp
 8008fd6:	f7f7 fc49 	bl	800086c <__aeabi_ddiv>
 8008fda:	4682      	mov	sl, r0
 8008fdc:	468b      	mov	fp, r1
 8008fde:	e028      	b.n	8009032 <_dtoa_r+0x3d2>
 8008fe0:	2502      	movs	r5, #2
 8008fe2:	e7f2      	b.n	8008fca <_dtoa_r+0x36a>
 8008fe4:	07f9      	lsls	r1, r7, #31
 8008fe6:	d508      	bpl.n	8008ffa <_dtoa_r+0x39a>
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ff0:	f7f7 fb12 	bl	8000618 <__aeabi_dmul>
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	4689      	mov	r9, r1
 8008ffa:	107f      	asrs	r7, r7, #1
 8008ffc:	3608      	adds	r6, #8
 8008ffe:	e7e5      	b.n	8008fcc <_dtoa_r+0x36c>
 8009000:	f000 809b 	beq.w	800913a <_dtoa_r+0x4da>
 8009004:	9b00      	ldr	r3, [sp, #0]
 8009006:	4f9d      	ldr	r7, [pc, #628]	; (800927c <_dtoa_r+0x61c>)
 8009008:	425e      	negs	r6, r3
 800900a:	4b9b      	ldr	r3, [pc, #620]	; (8009278 <_dtoa_r+0x618>)
 800900c:	f006 020f 	and.w	r2, r6, #15
 8009010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	ec51 0b19 	vmov	r0, r1, d9
 800901c:	f7f7 fafc 	bl	8000618 <__aeabi_dmul>
 8009020:	1136      	asrs	r6, r6, #4
 8009022:	4682      	mov	sl, r0
 8009024:	468b      	mov	fp, r1
 8009026:	2300      	movs	r3, #0
 8009028:	2502      	movs	r5, #2
 800902a:	2e00      	cmp	r6, #0
 800902c:	d17a      	bne.n	8009124 <_dtoa_r+0x4c4>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1d3      	bne.n	8008fda <_dtoa_r+0x37a>
 8009032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 8082 	beq.w	800913e <_dtoa_r+0x4de>
 800903a:	4b91      	ldr	r3, [pc, #580]	; (8009280 <_dtoa_r+0x620>)
 800903c:	2200      	movs	r2, #0
 800903e:	4650      	mov	r0, sl
 8009040:	4659      	mov	r1, fp
 8009042:	f7f7 fd5b 	bl	8000afc <__aeabi_dcmplt>
 8009046:	2800      	cmp	r0, #0
 8009048:	d079      	beq.n	800913e <_dtoa_r+0x4de>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d076      	beq.n	800913e <_dtoa_r+0x4de>
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	dd36      	ble.n	80090c4 <_dtoa_r+0x464>
 8009056:	9b00      	ldr	r3, [sp, #0]
 8009058:	4650      	mov	r0, sl
 800905a:	4659      	mov	r1, fp
 800905c:	1e5f      	subs	r7, r3, #1
 800905e:	2200      	movs	r2, #0
 8009060:	4b88      	ldr	r3, [pc, #544]	; (8009284 <_dtoa_r+0x624>)
 8009062:	f7f7 fad9 	bl	8000618 <__aeabi_dmul>
 8009066:	9e02      	ldr	r6, [sp, #8]
 8009068:	4682      	mov	sl, r0
 800906a:	468b      	mov	fp, r1
 800906c:	3501      	adds	r5, #1
 800906e:	4628      	mov	r0, r5
 8009070:	f7f7 fa68 	bl	8000544 <__aeabi_i2d>
 8009074:	4652      	mov	r2, sl
 8009076:	465b      	mov	r3, fp
 8009078:	f7f7 face 	bl	8000618 <__aeabi_dmul>
 800907c:	4b82      	ldr	r3, [pc, #520]	; (8009288 <_dtoa_r+0x628>)
 800907e:	2200      	movs	r2, #0
 8009080:	f7f7 f914 	bl	80002ac <__adddf3>
 8009084:	46d0      	mov	r8, sl
 8009086:	46d9      	mov	r9, fp
 8009088:	4682      	mov	sl, r0
 800908a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800908e:	2e00      	cmp	r6, #0
 8009090:	d158      	bne.n	8009144 <_dtoa_r+0x4e4>
 8009092:	4b7e      	ldr	r3, [pc, #504]	; (800928c <_dtoa_r+0x62c>)
 8009094:	2200      	movs	r2, #0
 8009096:	4640      	mov	r0, r8
 8009098:	4649      	mov	r1, r9
 800909a:	f7f7 f905 	bl	80002a8 <__aeabi_dsub>
 800909e:	4652      	mov	r2, sl
 80090a0:	465b      	mov	r3, fp
 80090a2:	4680      	mov	r8, r0
 80090a4:	4689      	mov	r9, r1
 80090a6:	f7f7 fd47 	bl	8000b38 <__aeabi_dcmpgt>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f040 8295 	bne.w	80095da <_dtoa_r+0x97a>
 80090b0:	4652      	mov	r2, sl
 80090b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7f7 fd1f 	bl	8000afc <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f040 8289 	bne.w	80095d6 <_dtoa_r+0x976>
 80090c4:	ec5b ab19 	vmov	sl, fp, d9
 80090c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f2c0 8148 	blt.w	8009360 <_dtoa_r+0x700>
 80090d0:	9a00      	ldr	r2, [sp, #0]
 80090d2:	2a0e      	cmp	r2, #14
 80090d4:	f300 8144 	bgt.w	8009360 <_dtoa_r+0x700>
 80090d8:	4b67      	ldr	r3, [pc, #412]	; (8009278 <_dtoa_r+0x618>)
 80090da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f280 80d5 	bge.w	8009294 <_dtoa_r+0x634>
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f300 80d1 	bgt.w	8009294 <_dtoa_r+0x634>
 80090f2:	f040 826f 	bne.w	80095d4 <_dtoa_r+0x974>
 80090f6:	4b65      	ldr	r3, [pc, #404]	; (800928c <_dtoa_r+0x62c>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	4640      	mov	r0, r8
 80090fc:	4649      	mov	r1, r9
 80090fe:	f7f7 fa8b 	bl	8000618 <__aeabi_dmul>
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	f7f7 fd0d 	bl	8000b24 <__aeabi_dcmpge>
 800910a:	9e03      	ldr	r6, [sp, #12]
 800910c:	4637      	mov	r7, r6
 800910e:	2800      	cmp	r0, #0
 8009110:	f040 8245 	bne.w	800959e <_dtoa_r+0x93e>
 8009114:	9d01      	ldr	r5, [sp, #4]
 8009116:	2331      	movs	r3, #49	; 0x31
 8009118:	f805 3b01 	strb.w	r3, [r5], #1
 800911c:	9b00      	ldr	r3, [sp, #0]
 800911e:	3301      	adds	r3, #1
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	e240      	b.n	80095a6 <_dtoa_r+0x946>
 8009124:	07f2      	lsls	r2, r6, #31
 8009126:	d505      	bpl.n	8009134 <_dtoa_r+0x4d4>
 8009128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800912c:	f7f7 fa74 	bl	8000618 <__aeabi_dmul>
 8009130:	3501      	adds	r5, #1
 8009132:	2301      	movs	r3, #1
 8009134:	1076      	asrs	r6, r6, #1
 8009136:	3708      	adds	r7, #8
 8009138:	e777      	b.n	800902a <_dtoa_r+0x3ca>
 800913a:	2502      	movs	r5, #2
 800913c:	e779      	b.n	8009032 <_dtoa_r+0x3d2>
 800913e:	9f00      	ldr	r7, [sp, #0]
 8009140:	9e03      	ldr	r6, [sp, #12]
 8009142:	e794      	b.n	800906e <_dtoa_r+0x40e>
 8009144:	9901      	ldr	r1, [sp, #4]
 8009146:	4b4c      	ldr	r3, [pc, #304]	; (8009278 <_dtoa_r+0x618>)
 8009148:	4431      	add	r1, r6
 800914a:	910d      	str	r1, [sp, #52]	; 0x34
 800914c:	9908      	ldr	r1, [sp, #32]
 800914e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009156:	2900      	cmp	r1, #0
 8009158:	d043      	beq.n	80091e2 <_dtoa_r+0x582>
 800915a:	494d      	ldr	r1, [pc, #308]	; (8009290 <_dtoa_r+0x630>)
 800915c:	2000      	movs	r0, #0
 800915e:	f7f7 fb85 	bl	800086c <__aeabi_ddiv>
 8009162:	4652      	mov	r2, sl
 8009164:	465b      	mov	r3, fp
 8009166:	f7f7 f89f 	bl	80002a8 <__aeabi_dsub>
 800916a:	9d01      	ldr	r5, [sp, #4]
 800916c:	4682      	mov	sl, r0
 800916e:	468b      	mov	fp, r1
 8009170:	4649      	mov	r1, r9
 8009172:	4640      	mov	r0, r8
 8009174:	f7f7 fd00 	bl	8000b78 <__aeabi_d2iz>
 8009178:	4606      	mov	r6, r0
 800917a:	f7f7 f9e3 	bl	8000544 <__aeabi_i2d>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4640      	mov	r0, r8
 8009184:	4649      	mov	r1, r9
 8009186:	f7f7 f88f 	bl	80002a8 <__aeabi_dsub>
 800918a:	3630      	adds	r6, #48	; 0x30
 800918c:	f805 6b01 	strb.w	r6, [r5], #1
 8009190:	4652      	mov	r2, sl
 8009192:	465b      	mov	r3, fp
 8009194:	4680      	mov	r8, r0
 8009196:	4689      	mov	r9, r1
 8009198:	f7f7 fcb0 	bl	8000afc <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	d163      	bne.n	8009268 <_dtoa_r+0x608>
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	4936      	ldr	r1, [pc, #216]	; (8009280 <_dtoa_r+0x620>)
 80091a6:	2000      	movs	r0, #0
 80091a8:	f7f7 f87e 	bl	80002a8 <__aeabi_dsub>
 80091ac:	4652      	mov	r2, sl
 80091ae:	465b      	mov	r3, fp
 80091b0:	f7f7 fca4 	bl	8000afc <__aeabi_dcmplt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f040 80b5 	bne.w	8009324 <_dtoa_r+0x6c4>
 80091ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091bc:	429d      	cmp	r5, r3
 80091be:	d081      	beq.n	80090c4 <_dtoa_r+0x464>
 80091c0:	4b30      	ldr	r3, [pc, #192]	; (8009284 <_dtoa_r+0x624>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	4650      	mov	r0, sl
 80091c6:	4659      	mov	r1, fp
 80091c8:	f7f7 fa26 	bl	8000618 <__aeabi_dmul>
 80091cc:	4b2d      	ldr	r3, [pc, #180]	; (8009284 <_dtoa_r+0x624>)
 80091ce:	4682      	mov	sl, r0
 80091d0:	468b      	mov	fp, r1
 80091d2:	4640      	mov	r0, r8
 80091d4:	4649      	mov	r1, r9
 80091d6:	2200      	movs	r2, #0
 80091d8:	f7f7 fa1e 	bl	8000618 <__aeabi_dmul>
 80091dc:	4680      	mov	r8, r0
 80091de:	4689      	mov	r9, r1
 80091e0:	e7c6      	b.n	8009170 <_dtoa_r+0x510>
 80091e2:	4650      	mov	r0, sl
 80091e4:	4659      	mov	r1, fp
 80091e6:	f7f7 fa17 	bl	8000618 <__aeabi_dmul>
 80091ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ec:	9d01      	ldr	r5, [sp, #4]
 80091ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80091f0:	4682      	mov	sl, r0
 80091f2:	468b      	mov	fp, r1
 80091f4:	4649      	mov	r1, r9
 80091f6:	4640      	mov	r0, r8
 80091f8:	f7f7 fcbe 	bl	8000b78 <__aeabi_d2iz>
 80091fc:	4606      	mov	r6, r0
 80091fe:	f7f7 f9a1 	bl	8000544 <__aeabi_i2d>
 8009202:	3630      	adds	r6, #48	; 0x30
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 f84c 	bl	80002a8 <__aeabi_dsub>
 8009210:	f805 6b01 	strb.w	r6, [r5], #1
 8009214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009216:	429d      	cmp	r5, r3
 8009218:	4680      	mov	r8, r0
 800921a:	4689      	mov	r9, r1
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	d124      	bne.n	800926c <_dtoa_r+0x60c>
 8009222:	4b1b      	ldr	r3, [pc, #108]	; (8009290 <_dtoa_r+0x630>)
 8009224:	4650      	mov	r0, sl
 8009226:	4659      	mov	r1, fp
 8009228:	f7f7 f840 	bl	80002ac <__adddf3>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4640      	mov	r0, r8
 8009232:	4649      	mov	r1, r9
 8009234:	f7f7 fc80 	bl	8000b38 <__aeabi_dcmpgt>
 8009238:	2800      	cmp	r0, #0
 800923a:	d173      	bne.n	8009324 <_dtoa_r+0x6c4>
 800923c:	4652      	mov	r2, sl
 800923e:	465b      	mov	r3, fp
 8009240:	4913      	ldr	r1, [pc, #76]	; (8009290 <_dtoa_r+0x630>)
 8009242:	2000      	movs	r0, #0
 8009244:	f7f7 f830 	bl	80002a8 <__aeabi_dsub>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4640      	mov	r0, r8
 800924e:	4649      	mov	r1, r9
 8009250:	f7f7 fc54 	bl	8000afc <__aeabi_dcmplt>
 8009254:	2800      	cmp	r0, #0
 8009256:	f43f af35 	beq.w	80090c4 <_dtoa_r+0x464>
 800925a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800925c:	1e6b      	subs	r3, r5, #1
 800925e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009260:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009264:	2b30      	cmp	r3, #48	; 0x30
 8009266:	d0f8      	beq.n	800925a <_dtoa_r+0x5fa>
 8009268:	9700      	str	r7, [sp, #0]
 800926a:	e049      	b.n	8009300 <_dtoa_r+0x6a0>
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <_dtoa_r+0x624>)
 800926e:	f7f7 f9d3 	bl	8000618 <__aeabi_dmul>
 8009272:	4680      	mov	r8, r0
 8009274:	4689      	mov	r9, r1
 8009276:	e7bd      	b.n	80091f4 <_dtoa_r+0x594>
 8009278:	0800b7b0 	.word	0x0800b7b0
 800927c:	0800b788 	.word	0x0800b788
 8009280:	3ff00000 	.word	0x3ff00000
 8009284:	40240000 	.word	0x40240000
 8009288:	401c0000 	.word	0x401c0000
 800928c:	40140000 	.word	0x40140000
 8009290:	3fe00000 	.word	0x3fe00000
 8009294:	9d01      	ldr	r5, [sp, #4]
 8009296:	4656      	mov	r6, sl
 8009298:	465f      	mov	r7, fp
 800929a:	4642      	mov	r2, r8
 800929c:	464b      	mov	r3, r9
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f7 fae3 	bl	800086c <__aeabi_ddiv>
 80092a6:	f7f7 fc67 	bl	8000b78 <__aeabi_d2iz>
 80092aa:	4682      	mov	sl, r0
 80092ac:	f7f7 f94a 	bl	8000544 <__aeabi_i2d>
 80092b0:	4642      	mov	r2, r8
 80092b2:	464b      	mov	r3, r9
 80092b4:	f7f7 f9b0 	bl	8000618 <__aeabi_dmul>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4630      	mov	r0, r6
 80092be:	4639      	mov	r1, r7
 80092c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80092c4:	f7f6 fff0 	bl	80002a8 <__aeabi_dsub>
 80092c8:	f805 6b01 	strb.w	r6, [r5], #1
 80092cc:	9e01      	ldr	r6, [sp, #4]
 80092ce:	9f03      	ldr	r7, [sp, #12]
 80092d0:	1bae      	subs	r6, r5, r6
 80092d2:	42b7      	cmp	r7, r6
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	d135      	bne.n	8009346 <_dtoa_r+0x6e6>
 80092da:	f7f6 ffe7 	bl	80002ac <__adddf3>
 80092de:	4642      	mov	r2, r8
 80092e0:	464b      	mov	r3, r9
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	f7f7 fc27 	bl	8000b38 <__aeabi_dcmpgt>
 80092ea:	b9d0      	cbnz	r0, 8009322 <_dtoa_r+0x6c2>
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f7 fbf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80092f8:	b110      	cbz	r0, 8009300 <_dtoa_r+0x6a0>
 80092fa:	f01a 0f01 	tst.w	sl, #1
 80092fe:	d110      	bne.n	8009322 <_dtoa_r+0x6c2>
 8009300:	4620      	mov	r0, r4
 8009302:	ee18 1a10 	vmov	r1, s16
 8009306:	f000 fd27 	bl	8009d58 <_Bfree>
 800930a:	2300      	movs	r3, #0
 800930c:	9800      	ldr	r0, [sp, #0]
 800930e:	702b      	strb	r3, [r5, #0]
 8009310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009312:	3001      	adds	r0, #1
 8009314:	6018      	str	r0, [r3, #0]
 8009316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009318:	2b00      	cmp	r3, #0
 800931a:	f43f acf1 	beq.w	8008d00 <_dtoa_r+0xa0>
 800931e:	601d      	str	r5, [r3, #0]
 8009320:	e4ee      	b.n	8008d00 <_dtoa_r+0xa0>
 8009322:	9f00      	ldr	r7, [sp, #0]
 8009324:	462b      	mov	r3, r5
 8009326:	461d      	mov	r5, r3
 8009328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800932c:	2a39      	cmp	r2, #57	; 0x39
 800932e:	d106      	bne.n	800933e <_dtoa_r+0x6de>
 8009330:	9a01      	ldr	r2, [sp, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d1f7      	bne.n	8009326 <_dtoa_r+0x6c6>
 8009336:	9901      	ldr	r1, [sp, #4]
 8009338:	2230      	movs	r2, #48	; 0x30
 800933a:	3701      	adds	r7, #1
 800933c:	700a      	strb	r2, [r1, #0]
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	3201      	adds	r2, #1
 8009342:	701a      	strb	r2, [r3, #0]
 8009344:	e790      	b.n	8009268 <_dtoa_r+0x608>
 8009346:	4ba6      	ldr	r3, [pc, #664]	; (80095e0 <_dtoa_r+0x980>)
 8009348:	2200      	movs	r2, #0
 800934a:	f7f7 f965 	bl	8000618 <__aeabi_dmul>
 800934e:	2200      	movs	r2, #0
 8009350:	2300      	movs	r3, #0
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	f7f7 fbc7 	bl	8000ae8 <__aeabi_dcmpeq>
 800935a:	2800      	cmp	r0, #0
 800935c:	d09d      	beq.n	800929a <_dtoa_r+0x63a>
 800935e:	e7cf      	b.n	8009300 <_dtoa_r+0x6a0>
 8009360:	9a08      	ldr	r2, [sp, #32]
 8009362:	2a00      	cmp	r2, #0
 8009364:	f000 80d7 	beq.w	8009516 <_dtoa_r+0x8b6>
 8009368:	9a06      	ldr	r2, [sp, #24]
 800936a:	2a01      	cmp	r2, #1
 800936c:	f300 80ba 	bgt.w	80094e4 <_dtoa_r+0x884>
 8009370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009372:	2a00      	cmp	r2, #0
 8009374:	f000 80b2 	beq.w	80094dc <_dtoa_r+0x87c>
 8009378:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800937c:	9e07      	ldr	r6, [sp, #28]
 800937e:	9d04      	ldr	r5, [sp, #16]
 8009380:	9a04      	ldr	r2, [sp, #16]
 8009382:	441a      	add	r2, r3
 8009384:	9204      	str	r2, [sp, #16]
 8009386:	9a05      	ldr	r2, [sp, #20]
 8009388:	2101      	movs	r1, #1
 800938a:	441a      	add	r2, r3
 800938c:	4620      	mov	r0, r4
 800938e:	9205      	str	r2, [sp, #20]
 8009390:	f000 fd9a 	bl	8009ec8 <__i2b>
 8009394:	4607      	mov	r7, r0
 8009396:	2d00      	cmp	r5, #0
 8009398:	dd0c      	ble.n	80093b4 <_dtoa_r+0x754>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	dd09      	ble.n	80093b4 <_dtoa_r+0x754>
 80093a0:	42ab      	cmp	r3, r5
 80093a2:	9a04      	ldr	r2, [sp, #16]
 80093a4:	bfa8      	it	ge
 80093a6:	462b      	movge	r3, r5
 80093a8:	1ad2      	subs	r2, r2, r3
 80093aa:	9204      	str	r2, [sp, #16]
 80093ac:	9a05      	ldr	r2, [sp, #20]
 80093ae:	1aed      	subs	r5, r5, r3
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	b31b      	cbz	r3, 8009400 <_dtoa_r+0x7a0>
 80093b8:	9b08      	ldr	r3, [sp, #32]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 80af 	beq.w	800951e <_dtoa_r+0x8be>
 80093c0:	2e00      	cmp	r6, #0
 80093c2:	dd13      	ble.n	80093ec <_dtoa_r+0x78c>
 80093c4:	4639      	mov	r1, r7
 80093c6:	4632      	mov	r2, r6
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 fe3d 	bl	800a048 <__pow5mult>
 80093ce:	ee18 2a10 	vmov	r2, s16
 80093d2:	4601      	mov	r1, r0
 80093d4:	4607      	mov	r7, r0
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 fd8c 	bl	8009ef4 <__multiply>
 80093dc:	ee18 1a10 	vmov	r1, s16
 80093e0:	4680      	mov	r8, r0
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fcb8 	bl	8009d58 <_Bfree>
 80093e8:	ee08 8a10 	vmov	s16, r8
 80093ec:	9b07      	ldr	r3, [sp, #28]
 80093ee:	1b9a      	subs	r2, r3, r6
 80093f0:	d006      	beq.n	8009400 <_dtoa_r+0x7a0>
 80093f2:	ee18 1a10 	vmov	r1, s16
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 fe26 	bl	800a048 <__pow5mult>
 80093fc:	ee08 0a10 	vmov	s16, r0
 8009400:	2101      	movs	r1, #1
 8009402:	4620      	mov	r0, r4
 8009404:	f000 fd60 	bl	8009ec8 <__i2b>
 8009408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940a:	2b00      	cmp	r3, #0
 800940c:	4606      	mov	r6, r0
 800940e:	f340 8088 	ble.w	8009522 <_dtoa_r+0x8c2>
 8009412:	461a      	mov	r2, r3
 8009414:	4601      	mov	r1, r0
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fe16 	bl	800a048 <__pow5mult>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	2b01      	cmp	r3, #1
 8009420:	4606      	mov	r6, r0
 8009422:	f340 8081 	ble.w	8009528 <_dtoa_r+0x8c8>
 8009426:	f04f 0800 	mov.w	r8, #0
 800942a:	6933      	ldr	r3, [r6, #16]
 800942c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009430:	6918      	ldr	r0, [r3, #16]
 8009432:	f000 fcf9 	bl	8009e28 <__hi0bits>
 8009436:	f1c0 0020 	rsb	r0, r0, #32
 800943a:	9b05      	ldr	r3, [sp, #20]
 800943c:	4418      	add	r0, r3
 800943e:	f010 001f 	ands.w	r0, r0, #31
 8009442:	f000 8092 	beq.w	800956a <_dtoa_r+0x90a>
 8009446:	f1c0 0320 	rsb	r3, r0, #32
 800944a:	2b04      	cmp	r3, #4
 800944c:	f340 808a 	ble.w	8009564 <_dtoa_r+0x904>
 8009450:	f1c0 001c 	rsb	r0, r0, #28
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	4403      	add	r3, r0
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	9b05      	ldr	r3, [sp, #20]
 800945c:	4403      	add	r3, r0
 800945e:	4405      	add	r5, r0
 8009460:	9305      	str	r3, [sp, #20]
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	dd07      	ble.n	8009478 <_dtoa_r+0x818>
 8009468:	ee18 1a10 	vmov	r1, s16
 800946c:	461a      	mov	r2, r3
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fe44 	bl	800a0fc <__lshift>
 8009474:	ee08 0a10 	vmov	s16, r0
 8009478:	9b05      	ldr	r3, [sp, #20]
 800947a:	2b00      	cmp	r3, #0
 800947c:	dd05      	ble.n	800948a <_dtoa_r+0x82a>
 800947e:	4631      	mov	r1, r6
 8009480:	461a      	mov	r2, r3
 8009482:	4620      	mov	r0, r4
 8009484:	f000 fe3a 	bl	800a0fc <__lshift>
 8009488:	4606      	mov	r6, r0
 800948a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d06e      	beq.n	800956e <_dtoa_r+0x90e>
 8009490:	ee18 0a10 	vmov	r0, s16
 8009494:	4631      	mov	r1, r6
 8009496:	f000 fea1 	bl	800a1dc <__mcmp>
 800949a:	2800      	cmp	r0, #0
 800949c:	da67      	bge.n	800956e <_dtoa_r+0x90e>
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	ee18 1a10 	vmov	r1, s16
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	220a      	movs	r2, #10
 80094aa:	2300      	movs	r3, #0
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 fc75 	bl	8009d9c <__multadd>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	ee08 0a10 	vmov	s16, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 81b1 	beq.w	8009820 <_dtoa_r+0xbc0>
 80094be:	2300      	movs	r3, #0
 80094c0:	4639      	mov	r1, r7
 80094c2:	220a      	movs	r2, #10
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 fc69 	bl	8009d9c <__multadd>
 80094ca:	9b02      	ldr	r3, [sp, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	4607      	mov	r7, r0
 80094d0:	f300 808e 	bgt.w	80095f0 <_dtoa_r+0x990>
 80094d4:	9b06      	ldr	r3, [sp, #24]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	dc51      	bgt.n	800957e <_dtoa_r+0x91e>
 80094da:	e089      	b.n	80095f0 <_dtoa_r+0x990>
 80094dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094e2:	e74b      	b.n	800937c <_dtoa_r+0x71c>
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	1e5e      	subs	r6, r3, #1
 80094e8:	9b07      	ldr	r3, [sp, #28]
 80094ea:	42b3      	cmp	r3, r6
 80094ec:	bfbf      	itttt	lt
 80094ee:	9b07      	ldrlt	r3, [sp, #28]
 80094f0:	9607      	strlt	r6, [sp, #28]
 80094f2:	1af2      	sublt	r2, r6, r3
 80094f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80094f6:	bfb6      	itet	lt
 80094f8:	189b      	addlt	r3, r3, r2
 80094fa:	1b9e      	subge	r6, r3, r6
 80094fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	bfb8      	it	lt
 8009502:	2600      	movlt	r6, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfb7      	itett	lt
 8009508:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800950c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009510:	1a9d      	sublt	r5, r3, r2
 8009512:	2300      	movlt	r3, #0
 8009514:	e734      	b.n	8009380 <_dtoa_r+0x720>
 8009516:	9e07      	ldr	r6, [sp, #28]
 8009518:	9d04      	ldr	r5, [sp, #16]
 800951a:	9f08      	ldr	r7, [sp, #32]
 800951c:	e73b      	b.n	8009396 <_dtoa_r+0x736>
 800951e:	9a07      	ldr	r2, [sp, #28]
 8009520:	e767      	b.n	80093f2 <_dtoa_r+0x792>
 8009522:	9b06      	ldr	r3, [sp, #24]
 8009524:	2b01      	cmp	r3, #1
 8009526:	dc18      	bgt.n	800955a <_dtoa_r+0x8fa>
 8009528:	f1ba 0f00 	cmp.w	sl, #0
 800952c:	d115      	bne.n	800955a <_dtoa_r+0x8fa>
 800952e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009532:	b993      	cbnz	r3, 800955a <_dtoa_r+0x8fa>
 8009534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009538:	0d1b      	lsrs	r3, r3, #20
 800953a:	051b      	lsls	r3, r3, #20
 800953c:	b183      	cbz	r3, 8009560 <_dtoa_r+0x900>
 800953e:	9b04      	ldr	r3, [sp, #16]
 8009540:	3301      	adds	r3, #1
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	9b05      	ldr	r3, [sp, #20]
 8009546:	3301      	adds	r3, #1
 8009548:	9305      	str	r3, [sp, #20]
 800954a:	f04f 0801 	mov.w	r8, #1
 800954e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009550:	2b00      	cmp	r3, #0
 8009552:	f47f af6a 	bne.w	800942a <_dtoa_r+0x7ca>
 8009556:	2001      	movs	r0, #1
 8009558:	e76f      	b.n	800943a <_dtoa_r+0x7da>
 800955a:	f04f 0800 	mov.w	r8, #0
 800955e:	e7f6      	b.n	800954e <_dtoa_r+0x8ee>
 8009560:	4698      	mov	r8, r3
 8009562:	e7f4      	b.n	800954e <_dtoa_r+0x8ee>
 8009564:	f43f af7d 	beq.w	8009462 <_dtoa_r+0x802>
 8009568:	4618      	mov	r0, r3
 800956a:	301c      	adds	r0, #28
 800956c:	e772      	b.n	8009454 <_dtoa_r+0x7f4>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	dc37      	bgt.n	80095e4 <_dtoa_r+0x984>
 8009574:	9b06      	ldr	r3, [sp, #24]
 8009576:	2b02      	cmp	r3, #2
 8009578:	dd34      	ble.n	80095e4 <_dtoa_r+0x984>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	9302      	str	r3, [sp, #8]
 800957e:	9b02      	ldr	r3, [sp, #8]
 8009580:	b96b      	cbnz	r3, 800959e <_dtoa_r+0x93e>
 8009582:	4631      	mov	r1, r6
 8009584:	2205      	movs	r2, #5
 8009586:	4620      	mov	r0, r4
 8009588:	f000 fc08 	bl	8009d9c <__multadd>
 800958c:	4601      	mov	r1, r0
 800958e:	4606      	mov	r6, r0
 8009590:	ee18 0a10 	vmov	r0, s16
 8009594:	f000 fe22 	bl	800a1dc <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	f73f adbb 	bgt.w	8009114 <_dtoa_r+0x4b4>
 800959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a0:	9d01      	ldr	r5, [sp, #4]
 80095a2:	43db      	mvns	r3, r3
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	f04f 0800 	mov.w	r8, #0
 80095aa:	4631      	mov	r1, r6
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fbd3 	bl	8009d58 <_Bfree>
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	f43f aea4 	beq.w	8009300 <_dtoa_r+0x6a0>
 80095b8:	f1b8 0f00 	cmp.w	r8, #0
 80095bc:	d005      	beq.n	80095ca <_dtoa_r+0x96a>
 80095be:	45b8      	cmp	r8, r7
 80095c0:	d003      	beq.n	80095ca <_dtoa_r+0x96a>
 80095c2:	4641      	mov	r1, r8
 80095c4:	4620      	mov	r0, r4
 80095c6:	f000 fbc7 	bl	8009d58 <_Bfree>
 80095ca:	4639      	mov	r1, r7
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 fbc3 	bl	8009d58 <_Bfree>
 80095d2:	e695      	b.n	8009300 <_dtoa_r+0x6a0>
 80095d4:	2600      	movs	r6, #0
 80095d6:	4637      	mov	r7, r6
 80095d8:	e7e1      	b.n	800959e <_dtoa_r+0x93e>
 80095da:	9700      	str	r7, [sp, #0]
 80095dc:	4637      	mov	r7, r6
 80095de:	e599      	b.n	8009114 <_dtoa_r+0x4b4>
 80095e0:	40240000 	.word	0x40240000
 80095e4:	9b08      	ldr	r3, [sp, #32]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 80ca 	beq.w	8009780 <_dtoa_r+0xb20>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	9302      	str	r3, [sp, #8]
 80095f0:	2d00      	cmp	r5, #0
 80095f2:	dd05      	ble.n	8009600 <_dtoa_r+0x9a0>
 80095f4:	4639      	mov	r1, r7
 80095f6:	462a      	mov	r2, r5
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fd7f 	bl	800a0fc <__lshift>
 80095fe:	4607      	mov	r7, r0
 8009600:	f1b8 0f00 	cmp.w	r8, #0
 8009604:	d05b      	beq.n	80096be <_dtoa_r+0xa5e>
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fb65 	bl	8009cd8 <_Balloc>
 800960e:	4605      	mov	r5, r0
 8009610:	b928      	cbnz	r0, 800961e <_dtoa_r+0x9be>
 8009612:	4b87      	ldr	r3, [pc, #540]	; (8009830 <_dtoa_r+0xbd0>)
 8009614:	4602      	mov	r2, r0
 8009616:	f240 21ea 	movw	r1, #746	; 0x2ea
 800961a:	f7ff bb3b 	b.w	8008c94 <_dtoa_r+0x34>
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	3202      	adds	r2, #2
 8009622:	0092      	lsls	r2, r2, #2
 8009624:	f107 010c 	add.w	r1, r7, #12
 8009628:	300c      	adds	r0, #12
 800962a:	f000 fb47 	bl	8009cbc <memcpy>
 800962e:	2201      	movs	r2, #1
 8009630:	4629      	mov	r1, r5
 8009632:	4620      	mov	r0, r4
 8009634:	f000 fd62 	bl	800a0fc <__lshift>
 8009638:	9b01      	ldr	r3, [sp, #4]
 800963a:	f103 0901 	add.w	r9, r3, #1
 800963e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009642:	4413      	add	r3, r2
 8009644:	9305      	str	r3, [sp, #20]
 8009646:	f00a 0301 	and.w	r3, sl, #1
 800964a:	46b8      	mov	r8, r7
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	4607      	mov	r7, r0
 8009650:	4631      	mov	r1, r6
 8009652:	ee18 0a10 	vmov	r0, s16
 8009656:	f7ff fa75 	bl	8008b44 <quorem>
 800965a:	4641      	mov	r1, r8
 800965c:	9002      	str	r0, [sp, #8]
 800965e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009662:	ee18 0a10 	vmov	r0, s16
 8009666:	f000 fdb9 	bl	800a1dc <__mcmp>
 800966a:	463a      	mov	r2, r7
 800966c:	9003      	str	r0, [sp, #12]
 800966e:	4631      	mov	r1, r6
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fdcf 	bl	800a214 <__mdiff>
 8009676:	68c2      	ldr	r2, [r0, #12]
 8009678:	f109 3bff 	add.w	fp, r9, #4294967295
 800967c:	4605      	mov	r5, r0
 800967e:	bb02      	cbnz	r2, 80096c2 <_dtoa_r+0xa62>
 8009680:	4601      	mov	r1, r0
 8009682:	ee18 0a10 	vmov	r0, s16
 8009686:	f000 fda9 	bl	800a1dc <__mcmp>
 800968a:	4602      	mov	r2, r0
 800968c:	4629      	mov	r1, r5
 800968e:	4620      	mov	r0, r4
 8009690:	9207      	str	r2, [sp, #28]
 8009692:	f000 fb61 	bl	8009d58 <_Bfree>
 8009696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800969a:	ea43 0102 	orr.w	r1, r3, r2
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	430b      	orrs	r3, r1
 80096a2:	464d      	mov	r5, r9
 80096a4:	d10f      	bne.n	80096c6 <_dtoa_r+0xa66>
 80096a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096aa:	d02a      	beq.n	8009702 <_dtoa_r+0xaa2>
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	dd02      	ble.n	80096b8 <_dtoa_r+0xa58>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80096b8:	f88b a000 	strb.w	sl, [fp]
 80096bc:	e775      	b.n	80095aa <_dtoa_r+0x94a>
 80096be:	4638      	mov	r0, r7
 80096c0:	e7ba      	b.n	8009638 <_dtoa_r+0x9d8>
 80096c2:	2201      	movs	r2, #1
 80096c4:	e7e2      	b.n	800968c <_dtoa_r+0xa2c>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	db04      	blt.n	80096d6 <_dtoa_r+0xa76>
 80096cc:	9906      	ldr	r1, [sp, #24]
 80096ce:	430b      	orrs	r3, r1
 80096d0:	9904      	ldr	r1, [sp, #16]
 80096d2:	430b      	orrs	r3, r1
 80096d4:	d122      	bne.n	800971c <_dtoa_r+0xabc>
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	ddee      	ble.n	80096b8 <_dtoa_r+0xa58>
 80096da:	ee18 1a10 	vmov	r1, s16
 80096de:	2201      	movs	r2, #1
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 fd0b 	bl	800a0fc <__lshift>
 80096e6:	4631      	mov	r1, r6
 80096e8:	ee08 0a10 	vmov	s16, r0
 80096ec:	f000 fd76 	bl	800a1dc <__mcmp>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	dc03      	bgt.n	80096fc <_dtoa_r+0xa9c>
 80096f4:	d1e0      	bne.n	80096b8 <_dtoa_r+0xa58>
 80096f6:	f01a 0f01 	tst.w	sl, #1
 80096fa:	d0dd      	beq.n	80096b8 <_dtoa_r+0xa58>
 80096fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009700:	d1d7      	bne.n	80096b2 <_dtoa_r+0xa52>
 8009702:	2339      	movs	r3, #57	; 0x39
 8009704:	f88b 3000 	strb.w	r3, [fp]
 8009708:	462b      	mov	r3, r5
 800970a:	461d      	mov	r5, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009712:	2a39      	cmp	r2, #57	; 0x39
 8009714:	d071      	beq.n	80097fa <_dtoa_r+0xb9a>
 8009716:	3201      	adds	r2, #1
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	e746      	b.n	80095aa <_dtoa_r+0x94a>
 800971c:	2a00      	cmp	r2, #0
 800971e:	dd07      	ble.n	8009730 <_dtoa_r+0xad0>
 8009720:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009724:	d0ed      	beq.n	8009702 <_dtoa_r+0xaa2>
 8009726:	f10a 0301 	add.w	r3, sl, #1
 800972a:	f88b 3000 	strb.w	r3, [fp]
 800972e:	e73c      	b.n	80095aa <_dtoa_r+0x94a>
 8009730:	9b05      	ldr	r3, [sp, #20]
 8009732:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009736:	4599      	cmp	r9, r3
 8009738:	d047      	beq.n	80097ca <_dtoa_r+0xb6a>
 800973a:	ee18 1a10 	vmov	r1, s16
 800973e:	2300      	movs	r3, #0
 8009740:	220a      	movs	r2, #10
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fb2a 	bl	8009d9c <__multadd>
 8009748:	45b8      	cmp	r8, r7
 800974a:	ee08 0a10 	vmov	s16, r0
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	f04f 020a 	mov.w	r2, #10
 8009756:	4641      	mov	r1, r8
 8009758:	4620      	mov	r0, r4
 800975a:	d106      	bne.n	800976a <_dtoa_r+0xb0a>
 800975c:	f000 fb1e 	bl	8009d9c <__multadd>
 8009760:	4680      	mov	r8, r0
 8009762:	4607      	mov	r7, r0
 8009764:	f109 0901 	add.w	r9, r9, #1
 8009768:	e772      	b.n	8009650 <_dtoa_r+0x9f0>
 800976a:	f000 fb17 	bl	8009d9c <__multadd>
 800976e:	4639      	mov	r1, r7
 8009770:	4680      	mov	r8, r0
 8009772:	2300      	movs	r3, #0
 8009774:	220a      	movs	r2, #10
 8009776:	4620      	mov	r0, r4
 8009778:	f000 fb10 	bl	8009d9c <__multadd>
 800977c:	4607      	mov	r7, r0
 800977e:	e7f1      	b.n	8009764 <_dtoa_r+0xb04>
 8009780:	9b03      	ldr	r3, [sp, #12]
 8009782:	9302      	str	r3, [sp, #8]
 8009784:	9d01      	ldr	r5, [sp, #4]
 8009786:	ee18 0a10 	vmov	r0, s16
 800978a:	4631      	mov	r1, r6
 800978c:	f7ff f9da 	bl	8008b44 <quorem>
 8009790:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	f805 ab01 	strb.w	sl, [r5], #1
 800979a:	1aea      	subs	r2, r5, r3
 800979c:	9b02      	ldr	r3, [sp, #8]
 800979e:	4293      	cmp	r3, r2
 80097a0:	dd09      	ble.n	80097b6 <_dtoa_r+0xb56>
 80097a2:	ee18 1a10 	vmov	r1, s16
 80097a6:	2300      	movs	r3, #0
 80097a8:	220a      	movs	r2, #10
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 faf6 	bl	8009d9c <__multadd>
 80097b0:	ee08 0a10 	vmov	s16, r0
 80097b4:	e7e7      	b.n	8009786 <_dtoa_r+0xb26>
 80097b6:	9b02      	ldr	r3, [sp, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bfc8      	it	gt
 80097bc:	461d      	movgt	r5, r3
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	bfd8      	it	le
 80097c2:	2501      	movle	r5, #1
 80097c4:	441d      	add	r5, r3
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	ee18 1a10 	vmov	r1, s16
 80097ce:	2201      	movs	r2, #1
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 fc93 	bl	800a0fc <__lshift>
 80097d6:	4631      	mov	r1, r6
 80097d8:	ee08 0a10 	vmov	s16, r0
 80097dc:	f000 fcfe 	bl	800a1dc <__mcmp>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	dc91      	bgt.n	8009708 <_dtoa_r+0xaa8>
 80097e4:	d102      	bne.n	80097ec <_dtoa_r+0xb8c>
 80097e6:	f01a 0f01 	tst.w	sl, #1
 80097ea:	d18d      	bne.n	8009708 <_dtoa_r+0xaa8>
 80097ec:	462b      	mov	r3, r5
 80097ee:	461d      	mov	r5, r3
 80097f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097f4:	2a30      	cmp	r2, #48	; 0x30
 80097f6:	d0fa      	beq.n	80097ee <_dtoa_r+0xb8e>
 80097f8:	e6d7      	b.n	80095aa <_dtoa_r+0x94a>
 80097fa:	9a01      	ldr	r2, [sp, #4]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d184      	bne.n	800970a <_dtoa_r+0xaaa>
 8009800:	9b00      	ldr	r3, [sp, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	2331      	movs	r3, #49	; 0x31
 8009808:	7013      	strb	r3, [r2, #0]
 800980a:	e6ce      	b.n	80095aa <_dtoa_r+0x94a>
 800980c:	4b09      	ldr	r3, [pc, #36]	; (8009834 <_dtoa_r+0xbd4>)
 800980e:	f7ff ba95 	b.w	8008d3c <_dtoa_r+0xdc>
 8009812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009814:	2b00      	cmp	r3, #0
 8009816:	f47f aa6e 	bne.w	8008cf6 <_dtoa_r+0x96>
 800981a:	4b07      	ldr	r3, [pc, #28]	; (8009838 <_dtoa_r+0xbd8>)
 800981c:	f7ff ba8e 	b.w	8008d3c <_dtoa_r+0xdc>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	dcae      	bgt.n	8009784 <_dtoa_r+0xb24>
 8009826:	9b06      	ldr	r3, [sp, #24]
 8009828:	2b02      	cmp	r3, #2
 800982a:	f73f aea8 	bgt.w	800957e <_dtoa_r+0x91e>
 800982e:	e7a9      	b.n	8009784 <_dtoa_r+0xb24>
 8009830:	0800b6b6 	.word	0x0800b6b6
 8009834:	0800b899 	.word	0x0800b899
 8009838:	0800b637 	.word	0x0800b637

0800983c <__sflush_r>:
 800983c:	898a      	ldrh	r2, [r1, #12]
 800983e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009842:	4605      	mov	r5, r0
 8009844:	0710      	lsls	r0, r2, #28
 8009846:	460c      	mov	r4, r1
 8009848:	d458      	bmi.n	80098fc <__sflush_r+0xc0>
 800984a:	684b      	ldr	r3, [r1, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	dc05      	bgt.n	800985c <__sflush_r+0x20>
 8009850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009852:	2b00      	cmp	r3, #0
 8009854:	dc02      	bgt.n	800985c <__sflush_r+0x20>
 8009856:	2000      	movs	r0, #0
 8009858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800985c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800985e:	2e00      	cmp	r6, #0
 8009860:	d0f9      	beq.n	8009856 <__sflush_r+0x1a>
 8009862:	2300      	movs	r3, #0
 8009864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009868:	682f      	ldr	r7, [r5, #0]
 800986a:	602b      	str	r3, [r5, #0]
 800986c:	d032      	beq.n	80098d4 <__sflush_r+0x98>
 800986e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	075a      	lsls	r2, r3, #29
 8009874:	d505      	bpl.n	8009882 <__sflush_r+0x46>
 8009876:	6863      	ldr	r3, [r4, #4]
 8009878:	1ac0      	subs	r0, r0, r3
 800987a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800987c:	b10b      	cbz	r3, 8009882 <__sflush_r+0x46>
 800987e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009880:	1ac0      	subs	r0, r0, r3
 8009882:	2300      	movs	r3, #0
 8009884:	4602      	mov	r2, r0
 8009886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009888:	6a21      	ldr	r1, [r4, #32]
 800988a:	4628      	mov	r0, r5
 800988c:	47b0      	blx	r6
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	d106      	bne.n	80098a2 <__sflush_r+0x66>
 8009894:	6829      	ldr	r1, [r5, #0]
 8009896:	291d      	cmp	r1, #29
 8009898:	d82c      	bhi.n	80098f4 <__sflush_r+0xb8>
 800989a:	4a2a      	ldr	r2, [pc, #168]	; (8009944 <__sflush_r+0x108>)
 800989c:	40ca      	lsrs	r2, r1
 800989e:	07d6      	lsls	r6, r2, #31
 80098a0:	d528      	bpl.n	80098f4 <__sflush_r+0xb8>
 80098a2:	2200      	movs	r2, #0
 80098a4:	6062      	str	r2, [r4, #4]
 80098a6:	04d9      	lsls	r1, r3, #19
 80098a8:	6922      	ldr	r2, [r4, #16]
 80098aa:	6022      	str	r2, [r4, #0]
 80098ac:	d504      	bpl.n	80098b8 <__sflush_r+0x7c>
 80098ae:	1c42      	adds	r2, r0, #1
 80098b0:	d101      	bne.n	80098b6 <__sflush_r+0x7a>
 80098b2:	682b      	ldr	r3, [r5, #0]
 80098b4:	b903      	cbnz	r3, 80098b8 <__sflush_r+0x7c>
 80098b6:	6560      	str	r0, [r4, #84]	; 0x54
 80098b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ba:	602f      	str	r7, [r5, #0]
 80098bc:	2900      	cmp	r1, #0
 80098be:	d0ca      	beq.n	8009856 <__sflush_r+0x1a>
 80098c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098c4:	4299      	cmp	r1, r3
 80098c6:	d002      	beq.n	80098ce <__sflush_r+0x92>
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 fd9f 	bl	800a40c <_free_r>
 80098ce:	2000      	movs	r0, #0
 80098d0:	6360      	str	r0, [r4, #52]	; 0x34
 80098d2:	e7c1      	b.n	8009858 <__sflush_r+0x1c>
 80098d4:	6a21      	ldr	r1, [r4, #32]
 80098d6:	2301      	movs	r3, #1
 80098d8:	4628      	mov	r0, r5
 80098da:	47b0      	blx	r6
 80098dc:	1c41      	adds	r1, r0, #1
 80098de:	d1c7      	bne.n	8009870 <__sflush_r+0x34>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0c4      	beq.n	8009870 <__sflush_r+0x34>
 80098e6:	2b1d      	cmp	r3, #29
 80098e8:	d001      	beq.n	80098ee <__sflush_r+0xb2>
 80098ea:	2b16      	cmp	r3, #22
 80098ec:	d101      	bne.n	80098f2 <__sflush_r+0xb6>
 80098ee:	602f      	str	r7, [r5, #0]
 80098f0:	e7b1      	b.n	8009856 <__sflush_r+0x1a>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f8:	81a3      	strh	r3, [r4, #12]
 80098fa:	e7ad      	b.n	8009858 <__sflush_r+0x1c>
 80098fc:	690f      	ldr	r7, [r1, #16]
 80098fe:	2f00      	cmp	r7, #0
 8009900:	d0a9      	beq.n	8009856 <__sflush_r+0x1a>
 8009902:	0793      	lsls	r3, r2, #30
 8009904:	680e      	ldr	r6, [r1, #0]
 8009906:	bf08      	it	eq
 8009908:	694b      	ldreq	r3, [r1, #20]
 800990a:	600f      	str	r7, [r1, #0]
 800990c:	bf18      	it	ne
 800990e:	2300      	movne	r3, #0
 8009910:	eba6 0807 	sub.w	r8, r6, r7
 8009914:	608b      	str	r3, [r1, #8]
 8009916:	f1b8 0f00 	cmp.w	r8, #0
 800991a:	dd9c      	ble.n	8009856 <__sflush_r+0x1a>
 800991c:	6a21      	ldr	r1, [r4, #32]
 800991e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009920:	4643      	mov	r3, r8
 8009922:	463a      	mov	r2, r7
 8009924:	4628      	mov	r0, r5
 8009926:	47b0      	blx	r6
 8009928:	2800      	cmp	r0, #0
 800992a:	dc06      	bgt.n	800993a <__sflush_r+0xfe>
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	f04f 30ff 	mov.w	r0, #4294967295
 8009938:	e78e      	b.n	8009858 <__sflush_r+0x1c>
 800993a:	4407      	add	r7, r0
 800993c:	eba8 0800 	sub.w	r8, r8, r0
 8009940:	e7e9      	b.n	8009916 <__sflush_r+0xda>
 8009942:	bf00      	nop
 8009944:	20400001 	.word	0x20400001

08009948 <_fflush_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	690b      	ldr	r3, [r1, #16]
 800994c:	4605      	mov	r5, r0
 800994e:	460c      	mov	r4, r1
 8009950:	b913      	cbnz	r3, 8009958 <_fflush_r+0x10>
 8009952:	2500      	movs	r5, #0
 8009954:	4628      	mov	r0, r5
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	b118      	cbz	r0, 8009962 <_fflush_r+0x1a>
 800995a:	6983      	ldr	r3, [r0, #24]
 800995c:	b90b      	cbnz	r3, 8009962 <_fflush_r+0x1a>
 800995e:	f000 f887 	bl	8009a70 <__sinit>
 8009962:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <_fflush_r+0x6c>)
 8009964:	429c      	cmp	r4, r3
 8009966:	d11b      	bne.n	80099a0 <_fflush_r+0x58>
 8009968:	686c      	ldr	r4, [r5, #4]
 800996a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0ef      	beq.n	8009952 <_fflush_r+0xa>
 8009972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009974:	07d0      	lsls	r0, r2, #31
 8009976:	d404      	bmi.n	8009982 <_fflush_r+0x3a>
 8009978:	0599      	lsls	r1, r3, #22
 800997a:	d402      	bmi.n	8009982 <_fflush_r+0x3a>
 800997c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800997e:	f000 f91a 	bl	8009bb6 <__retarget_lock_acquire_recursive>
 8009982:	4628      	mov	r0, r5
 8009984:	4621      	mov	r1, r4
 8009986:	f7ff ff59 	bl	800983c <__sflush_r>
 800998a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800998c:	07da      	lsls	r2, r3, #31
 800998e:	4605      	mov	r5, r0
 8009990:	d4e0      	bmi.n	8009954 <_fflush_r+0xc>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	059b      	lsls	r3, r3, #22
 8009996:	d4dd      	bmi.n	8009954 <_fflush_r+0xc>
 8009998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999a:	f000 f90d 	bl	8009bb8 <__retarget_lock_release_recursive>
 800999e:	e7d9      	b.n	8009954 <_fflush_r+0xc>
 80099a0:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <_fflush_r+0x70>)
 80099a2:	429c      	cmp	r4, r3
 80099a4:	d101      	bne.n	80099aa <_fflush_r+0x62>
 80099a6:	68ac      	ldr	r4, [r5, #8]
 80099a8:	e7df      	b.n	800996a <_fflush_r+0x22>
 80099aa:	4b04      	ldr	r3, [pc, #16]	; (80099bc <_fflush_r+0x74>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	bf08      	it	eq
 80099b0:	68ec      	ldreq	r4, [r5, #12]
 80099b2:	e7da      	b.n	800996a <_fflush_r+0x22>
 80099b4:	0800b6e8 	.word	0x0800b6e8
 80099b8:	0800b708 	.word	0x0800b708
 80099bc:	0800b6c8 	.word	0x0800b6c8

080099c0 <std>:
 80099c0:	2300      	movs	r3, #0
 80099c2:	b510      	push	{r4, lr}
 80099c4:	4604      	mov	r4, r0
 80099c6:	e9c0 3300 	strd	r3, r3, [r0]
 80099ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099ce:	6083      	str	r3, [r0, #8]
 80099d0:	8181      	strh	r1, [r0, #12]
 80099d2:	6643      	str	r3, [r0, #100]	; 0x64
 80099d4:	81c2      	strh	r2, [r0, #14]
 80099d6:	6183      	str	r3, [r0, #24]
 80099d8:	4619      	mov	r1, r3
 80099da:	2208      	movs	r2, #8
 80099dc:	305c      	adds	r0, #92	; 0x5c
 80099de:	f7fe f9bd 	bl	8007d5c <memset>
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <std+0x38>)
 80099e4:	6263      	str	r3, [r4, #36]	; 0x24
 80099e6:	4b05      	ldr	r3, [pc, #20]	; (80099fc <std+0x3c>)
 80099e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ea:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <std+0x40>)
 80099ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <std+0x44>)
 80099f0:	6224      	str	r4, [r4, #32]
 80099f2:	6323      	str	r3, [r4, #48]	; 0x30
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	bf00      	nop
 80099f8:	080087b5 	.word	0x080087b5
 80099fc:	080087db 	.word	0x080087db
 8009a00:	08008813 	.word	0x08008813
 8009a04:	08008837 	.word	0x08008837

08009a08 <_cleanup_r>:
 8009a08:	4901      	ldr	r1, [pc, #4]	; (8009a10 <_cleanup_r+0x8>)
 8009a0a:	f000 b8af 	b.w	8009b6c <_fwalk_reent>
 8009a0e:	bf00      	nop
 8009a10:	08009949 	.word	0x08009949

08009a14 <__sfmoreglue>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	2268      	movs	r2, #104	; 0x68
 8009a18:	1e4d      	subs	r5, r1, #1
 8009a1a:	4355      	muls	r5, r2
 8009a1c:	460e      	mov	r6, r1
 8009a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a22:	f000 fd5f 	bl	800a4e4 <_malloc_r>
 8009a26:	4604      	mov	r4, r0
 8009a28:	b140      	cbz	r0, 8009a3c <__sfmoreglue+0x28>
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8009a30:	300c      	adds	r0, #12
 8009a32:	60a0      	str	r0, [r4, #8]
 8009a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a38:	f7fe f990 	bl	8007d5c <memset>
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}

08009a40 <__sfp_lock_acquire>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__sfp_lock_acquire+0x8>)
 8009a42:	f000 b8b8 	b.w	8009bb6 <__retarget_lock_acquire_recursive>
 8009a46:	bf00      	nop
 8009a48:	200007a1 	.word	0x200007a1

08009a4c <__sfp_lock_release>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	; (8009a54 <__sfp_lock_release+0x8>)
 8009a4e:	f000 b8b3 	b.w	8009bb8 <__retarget_lock_release_recursive>
 8009a52:	bf00      	nop
 8009a54:	200007a1 	.word	0x200007a1

08009a58 <__sinit_lock_acquire>:
 8009a58:	4801      	ldr	r0, [pc, #4]	; (8009a60 <__sinit_lock_acquire+0x8>)
 8009a5a:	f000 b8ac 	b.w	8009bb6 <__retarget_lock_acquire_recursive>
 8009a5e:	bf00      	nop
 8009a60:	200007a2 	.word	0x200007a2

08009a64 <__sinit_lock_release>:
 8009a64:	4801      	ldr	r0, [pc, #4]	; (8009a6c <__sinit_lock_release+0x8>)
 8009a66:	f000 b8a7 	b.w	8009bb8 <__retarget_lock_release_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	200007a2 	.word	0x200007a2

08009a70 <__sinit>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	4604      	mov	r4, r0
 8009a74:	f7ff fff0 	bl	8009a58 <__sinit_lock_acquire>
 8009a78:	69a3      	ldr	r3, [r4, #24]
 8009a7a:	b11b      	cbz	r3, 8009a84 <__sinit+0x14>
 8009a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a80:	f7ff bff0 	b.w	8009a64 <__sinit_lock_release>
 8009a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a88:	6523      	str	r3, [r4, #80]	; 0x50
 8009a8a:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <__sinit+0x68>)
 8009a8c:	4a13      	ldr	r2, [pc, #76]	; (8009adc <__sinit+0x6c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a92:	42a3      	cmp	r3, r4
 8009a94:	bf04      	itt	eq
 8009a96:	2301      	moveq	r3, #1
 8009a98:	61a3      	streq	r3, [r4, #24]
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 f820 	bl	8009ae0 <__sfp>
 8009aa0:	6060      	str	r0, [r4, #4]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 f81c 	bl	8009ae0 <__sfp>
 8009aa8:	60a0      	str	r0, [r4, #8]
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f000 f818 	bl	8009ae0 <__sfp>
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	60e0      	str	r0, [r4, #12]
 8009ab4:	2104      	movs	r1, #4
 8009ab6:	6860      	ldr	r0, [r4, #4]
 8009ab8:	f7ff ff82 	bl	80099c0 <std>
 8009abc:	68a0      	ldr	r0, [r4, #8]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	2109      	movs	r1, #9
 8009ac2:	f7ff ff7d 	bl	80099c0 <std>
 8009ac6:	68e0      	ldr	r0, [r4, #12]
 8009ac8:	2202      	movs	r2, #2
 8009aca:	2112      	movs	r1, #18
 8009acc:	f7ff ff78 	bl	80099c0 <std>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	61a3      	str	r3, [r4, #24]
 8009ad4:	e7d2      	b.n	8009a7c <__sinit+0xc>
 8009ad6:	bf00      	nop
 8009ad8:	0800b500 	.word	0x0800b500
 8009adc:	08009a09 	.word	0x08009a09

08009ae0 <__sfp>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	f7ff ffac 	bl	8009a40 <__sfp_lock_acquire>
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <__sfp+0x84>)
 8009aea:	681e      	ldr	r6, [r3, #0]
 8009aec:	69b3      	ldr	r3, [r6, #24]
 8009aee:	b913      	cbnz	r3, 8009af6 <__sfp+0x16>
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7ff ffbd 	bl	8009a70 <__sinit>
 8009af6:	3648      	adds	r6, #72	; 0x48
 8009af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	d503      	bpl.n	8009b08 <__sfp+0x28>
 8009b00:	6833      	ldr	r3, [r6, #0]
 8009b02:	b30b      	cbz	r3, 8009b48 <__sfp+0x68>
 8009b04:	6836      	ldr	r6, [r6, #0]
 8009b06:	e7f7      	b.n	8009af8 <__sfp+0x18>
 8009b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b0c:	b9d5      	cbnz	r5, 8009b44 <__sfp+0x64>
 8009b0e:	4b16      	ldr	r3, [pc, #88]	; (8009b68 <__sfp+0x88>)
 8009b10:	60e3      	str	r3, [r4, #12]
 8009b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b16:	6665      	str	r5, [r4, #100]	; 0x64
 8009b18:	f000 f84c 	bl	8009bb4 <__retarget_lock_init_recursive>
 8009b1c:	f7ff ff96 	bl	8009a4c <__sfp_lock_release>
 8009b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b28:	6025      	str	r5, [r4, #0]
 8009b2a:	61a5      	str	r5, [r4, #24]
 8009b2c:	2208      	movs	r2, #8
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b34:	f7fe f912 	bl	8007d5c <memset>
 8009b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b40:	4620      	mov	r0, r4
 8009b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b44:	3468      	adds	r4, #104	; 0x68
 8009b46:	e7d9      	b.n	8009afc <__sfp+0x1c>
 8009b48:	2104      	movs	r1, #4
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	f7ff ff62 	bl	8009a14 <__sfmoreglue>
 8009b50:	4604      	mov	r4, r0
 8009b52:	6030      	str	r0, [r6, #0]
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d1d5      	bne.n	8009b04 <__sfp+0x24>
 8009b58:	f7ff ff78 	bl	8009a4c <__sfp_lock_release>
 8009b5c:	230c      	movs	r3, #12
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	e7ee      	b.n	8009b40 <__sfp+0x60>
 8009b62:	bf00      	nop
 8009b64:	0800b500 	.word	0x0800b500
 8009b68:	ffff0001 	.word	0xffff0001

08009b6c <_fwalk_reent>:
 8009b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b70:	4606      	mov	r6, r0
 8009b72:	4688      	mov	r8, r1
 8009b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b78:	2700      	movs	r7, #0
 8009b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b82:	d505      	bpl.n	8009b90 <_fwalk_reent+0x24>
 8009b84:	6824      	ldr	r4, [r4, #0]
 8009b86:	2c00      	cmp	r4, #0
 8009b88:	d1f7      	bne.n	8009b7a <_fwalk_reent+0xe>
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b90:	89ab      	ldrh	r3, [r5, #12]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d907      	bls.n	8009ba6 <_fwalk_reent+0x3a>
 8009b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	d003      	beq.n	8009ba6 <_fwalk_reent+0x3a>
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	47c0      	blx	r8
 8009ba4:	4307      	orrs	r7, r0
 8009ba6:	3568      	adds	r5, #104	; 0x68
 8009ba8:	e7e9      	b.n	8009b7e <_fwalk_reent+0x12>
	...

08009bac <_localeconv_r>:
 8009bac:	4800      	ldr	r0, [pc, #0]	; (8009bb0 <_localeconv_r+0x4>)
 8009bae:	4770      	bx	lr
 8009bb0:	20000160 	.word	0x20000160

08009bb4 <__retarget_lock_init_recursive>:
 8009bb4:	4770      	bx	lr

08009bb6 <__retarget_lock_acquire_recursive>:
 8009bb6:	4770      	bx	lr

08009bb8 <__retarget_lock_release_recursive>:
 8009bb8:	4770      	bx	lr
	...

08009bbc <_lseek_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d07      	ldr	r5, [pc, #28]	; (8009bdc <_lseek_r+0x20>)
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	4608      	mov	r0, r1
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	602a      	str	r2, [r5, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f7f8 fdfc 	bl	80027c8 <_lseek>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_lseek_r+0x1e>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_lseek_r+0x1e>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	200007ac 	.word	0x200007ac

08009be0 <__swhatbuf_r>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	460e      	mov	r6, r1
 8009be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be8:	2900      	cmp	r1, #0
 8009bea:	b096      	sub	sp, #88	; 0x58
 8009bec:	4614      	mov	r4, r2
 8009bee:	461d      	mov	r5, r3
 8009bf0:	da08      	bge.n	8009c04 <__swhatbuf_r+0x24>
 8009bf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	602a      	str	r2, [r5, #0]
 8009bfa:	061a      	lsls	r2, r3, #24
 8009bfc:	d410      	bmi.n	8009c20 <__swhatbuf_r+0x40>
 8009bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c02:	e00e      	b.n	8009c22 <__swhatbuf_r+0x42>
 8009c04:	466a      	mov	r2, sp
 8009c06:	f001 fa97 	bl	800b138 <_fstat_r>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	dbf1      	blt.n	8009bf2 <__swhatbuf_r+0x12>
 8009c0e:	9a01      	ldr	r2, [sp, #4]
 8009c10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c18:	425a      	negs	r2, r3
 8009c1a:	415a      	adcs	r2, r3
 8009c1c:	602a      	str	r2, [r5, #0]
 8009c1e:	e7ee      	b.n	8009bfe <__swhatbuf_r+0x1e>
 8009c20:	2340      	movs	r3, #64	; 0x40
 8009c22:	2000      	movs	r0, #0
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	b016      	add	sp, #88	; 0x58
 8009c28:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c2c <__smakebuf_r>:
 8009c2c:	898b      	ldrh	r3, [r1, #12]
 8009c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c30:	079d      	lsls	r5, r3, #30
 8009c32:	4606      	mov	r6, r0
 8009c34:	460c      	mov	r4, r1
 8009c36:	d507      	bpl.n	8009c48 <__smakebuf_r+0x1c>
 8009c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	2301      	movs	r3, #1
 8009c42:	6163      	str	r3, [r4, #20]
 8009c44:	b002      	add	sp, #8
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	ab01      	add	r3, sp, #4
 8009c4a:	466a      	mov	r2, sp
 8009c4c:	f7ff ffc8 	bl	8009be0 <__swhatbuf_r>
 8009c50:	9900      	ldr	r1, [sp, #0]
 8009c52:	4605      	mov	r5, r0
 8009c54:	4630      	mov	r0, r6
 8009c56:	f000 fc45 	bl	800a4e4 <_malloc_r>
 8009c5a:	b948      	cbnz	r0, 8009c70 <__smakebuf_r+0x44>
 8009c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d4ef      	bmi.n	8009c44 <__smakebuf_r+0x18>
 8009c64:	f023 0303 	bic.w	r3, r3, #3
 8009c68:	f043 0302 	orr.w	r3, r3, #2
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	e7e3      	b.n	8009c38 <__smakebuf_r+0xc>
 8009c70:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <__smakebuf_r+0x7c>)
 8009c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	6020      	str	r0, [r4, #0]
 8009c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	9b00      	ldr	r3, [sp, #0]
 8009c80:	6163      	str	r3, [r4, #20]
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	6120      	str	r0, [r4, #16]
 8009c86:	b15b      	cbz	r3, 8009ca0 <__smakebuf_r+0x74>
 8009c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f001 fa65 	bl	800b15c <_isatty_r>
 8009c92:	b128      	cbz	r0, 8009ca0 <__smakebuf_r+0x74>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f023 0303 	bic.w	r3, r3, #3
 8009c9a:	f043 0301 	orr.w	r3, r3, #1
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	89a0      	ldrh	r0, [r4, #12]
 8009ca2:	4305      	orrs	r5, r0
 8009ca4:	81a5      	strh	r5, [r4, #12]
 8009ca6:	e7cd      	b.n	8009c44 <__smakebuf_r+0x18>
 8009ca8:	08009a09 	.word	0x08009a09

08009cac <malloc>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <malloc+0xc>)
 8009cae:	4601      	mov	r1, r0
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f000 bc17 	b.w	800a4e4 <_malloc_r>
 8009cb6:	bf00      	nop
 8009cb8:	2000000c 	.word	0x2000000c

08009cbc <memcpy>:
 8009cbc:	440a      	add	r2, r1
 8009cbe:	4291      	cmp	r1, r2
 8009cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cc4:	d100      	bne.n	8009cc8 <memcpy+0xc>
 8009cc6:	4770      	bx	lr
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cd2:	4291      	cmp	r1, r2
 8009cd4:	d1f9      	bne.n	8009cca <memcpy+0xe>
 8009cd6:	bd10      	pop	{r4, pc}

08009cd8 <_Balloc>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	b976      	cbnz	r6, 8009d00 <_Balloc+0x28>
 8009ce2:	2010      	movs	r0, #16
 8009ce4:	f7ff ffe2 	bl	8009cac <malloc>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6260      	str	r0, [r4, #36]	; 0x24
 8009cec:	b920      	cbnz	r0, 8009cf8 <_Balloc+0x20>
 8009cee:	4b18      	ldr	r3, [pc, #96]	; (8009d50 <_Balloc+0x78>)
 8009cf0:	4818      	ldr	r0, [pc, #96]	; (8009d54 <_Balloc+0x7c>)
 8009cf2:	2166      	movs	r1, #102	; 0x66
 8009cf4:	f001 f9f0 	bl	800b0d8 <__assert_func>
 8009cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cfc:	6006      	str	r6, [r0, #0]
 8009cfe:	60c6      	str	r6, [r0, #12]
 8009d00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d02:	68f3      	ldr	r3, [r6, #12]
 8009d04:	b183      	cbz	r3, 8009d28 <_Balloc+0x50>
 8009d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d0e:	b9b8      	cbnz	r0, 8009d40 <_Balloc+0x68>
 8009d10:	2101      	movs	r1, #1
 8009d12:	fa01 f605 	lsl.w	r6, r1, r5
 8009d16:	1d72      	adds	r2, r6, #5
 8009d18:	0092      	lsls	r2, r2, #2
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fb60 	bl	800a3e0 <_calloc_r>
 8009d20:	b160      	cbz	r0, 8009d3c <_Balloc+0x64>
 8009d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d26:	e00e      	b.n	8009d46 <_Balloc+0x6e>
 8009d28:	2221      	movs	r2, #33	; 0x21
 8009d2a:	2104      	movs	r1, #4
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fb57 	bl	800a3e0 <_calloc_r>
 8009d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d34:	60f0      	str	r0, [r6, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e4      	bne.n	8009d06 <_Balloc+0x2e>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	6802      	ldr	r2, [r0, #0]
 8009d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d46:	2300      	movs	r3, #0
 8009d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d4c:	e7f7      	b.n	8009d3e <_Balloc+0x66>
 8009d4e:	bf00      	nop
 8009d50:	0800b644 	.word	0x0800b644
 8009d54:	0800b728 	.word	0x0800b728

08009d58 <_Bfree>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	b976      	cbnz	r6, 8009d80 <_Bfree+0x28>
 8009d62:	2010      	movs	r0, #16
 8009d64:	f7ff ffa2 	bl	8009cac <malloc>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	6268      	str	r0, [r5, #36]	; 0x24
 8009d6c:	b920      	cbnz	r0, 8009d78 <_Bfree+0x20>
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <_Bfree+0x3c>)
 8009d70:	4809      	ldr	r0, [pc, #36]	; (8009d98 <_Bfree+0x40>)
 8009d72:	218a      	movs	r1, #138	; 0x8a
 8009d74:	f001 f9b0 	bl	800b0d8 <__assert_func>
 8009d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d7c:	6006      	str	r6, [r0, #0]
 8009d7e:	60c6      	str	r6, [r0, #12]
 8009d80:	b13c      	cbz	r4, 8009d92 <_Bfree+0x3a>
 8009d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d84:	6862      	ldr	r2, [r4, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d8c:	6021      	str	r1, [r4, #0]
 8009d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	0800b644 	.word	0x0800b644
 8009d98:	0800b728 	.word	0x0800b728

08009d9c <__multadd>:
 8009d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da0:	690d      	ldr	r5, [r1, #16]
 8009da2:	4607      	mov	r7, r0
 8009da4:	460c      	mov	r4, r1
 8009da6:	461e      	mov	r6, r3
 8009da8:	f101 0c14 	add.w	ip, r1, #20
 8009dac:	2000      	movs	r0, #0
 8009dae:	f8dc 3000 	ldr.w	r3, [ip]
 8009db2:	b299      	uxth	r1, r3
 8009db4:	fb02 6101 	mla	r1, r2, r1, r6
 8009db8:	0c1e      	lsrs	r6, r3, #16
 8009dba:	0c0b      	lsrs	r3, r1, #16
 8009dbc:	fb02 3306 	mla	r3, r2, r6, r3
 8009dc0:	b289      	uxth	r1, r1
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dc8:	4285      	cmp	r5, r0
 8009dca:	f84c 1b04 	str.w	r1, [ip], #4
 8009dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dd2:	dcec      	bgt.n	8009dae <__multadd+0x12>
 8009dd4:	b30e      	cbz	r6, 8009e1a <__multadd+0x7e>
 8009dd6:	68a3      	ldr	r3, [r4, #8]
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	dc19      	bgt.n	8009e10 <__multadd+0x74>
 8009ddc:	6861      	ldr	r1, [r4, #4]
 8009dde:	4638      	mov	r0, r7
 8009de0:	3101      	adds	r1, #1
 8009de2:	f7ff ff79 	bl	8009cd8 <_Balloc>
 8009de6:	4680      	mov	r8, r0
 8009de8:	b928      	cbnz	r0, 8009df6 <__multadd+0x5a>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <__multadd+0x84>)
 8009dee:	480d      	ldr	r0, [pc, #52]	; (8009e24 <__multadd+0x88>)
 8009df0:	21b5      	movs	r1, #181	; 0xb5
 8009df2:	f001 f971 	bl	800b0d8 <__assert_func>
 8009df6:	6922      	ldr	r2, [r4, #16]
 8009df8:	3202      	adds	r2, #2
 8009dfa:	f104 010c 	add.w	r1, r4, #12
 8009dfe:	0092      	lsls	r2, r2, #2
 8009e00:	300c      	adds	r0, #12
 8009e02:	f7ff ff5b 	bl	8009cbc <memcpy>
 8009e06:	4621      	mov	r1, r4
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff ffa5 	bl	8009d58 <_Bfree>
 8009e0e:	4644      	mov	r4, r8
 8009e10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e14:	3501      	adds	r5, #1
 8009e16:	615e      	str	r6, [r3, #20]
 8009e18:	6125      	str	r5, [r4, #16]
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e20:	0800b6b6 	.word	0x0800b6b6
 8009e24:	0800b728 	.word	0x0800b728

08009e28 <__hi0bits>:
 8009e28:	0c03      	lsrs	r3, r0, #16
 8009e2a:	041b      	lsls	r3, r3, #16
 8009e2c:	b9d3      	cbnz	r3, 8009e64 <__hi0bits+0x3c>
 8009e2e:	0400      	lsls	r0, r0, #16
 8009e30:	2310      	movs	r3, #16
 8009e32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e36:	bf04      	itt	eq
 8009e38:	0200      	lsleq	r0, r0, #8
 8009e3a:	3308      	addeq	r3, #8
 8009e3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e40:	bf04      	itt	eq
 8009e42:	0100      	lsleq	r0, r0, #4
 8009e44:	3304      	addeq	r3, #4
 8009e46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e4a:	bf04      	itt	eq
 8009e4c:	0080      	lsleq	r0, r0, #2
 8009e4e:	3302      	addeq	r3, #2
 8009e50:	2800      	cmp	r0, #0
 8009e52:	db05      	blt.n	8009e60 <__hi0bits+0x38>
 8009e54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e58:	f103 0301 	add.w	r3, r3, #1
 8009e5c:	bf08      	it	eq
 8009e5e:	2320      	moveq	r3, #32
 8009e60:	4618      	mov	r0, r3
 8009e62:	4770      	bx	lr
 8009e64:	2300      	movs	r3, #0
 8009e66:	e7e4      	b.n	8009e32 <__hi0bits+0xa>

08009e68 <__lo0bits>:
 8009e68:	6803      	ldr	r3, [r0, #0]
 8009e6a:	f013 0207 	ands.w	r2, r3, #7
 8009e6e:	4601      	mov	r1, r0
 8009e70:	d00b      	beq.n	8009e8a <__lo0bits+0x22>
 8009e72:	07da      	lsls	r2, r3, #31
 8009e74:	d423      	bmi.n	8009ebe <__lo0bits+0x56>
 8009e76:	0798      	lsls	r0, r3, #30
 8009e78:	bf49      	itett	mi
 8009e7a:	085b      	lsrmi	r3, r3, #1
 8009e7c:	089b      	lsrpl	r3, r3, #2
 8009e7e:	2001      	movmi	r0, #1
 8009e80:	600b      	strmi	r3, [r1, #0]
 8009e82:	bf5c      	itt	pl
 8009e84:	600b      	strpl	r3, [r1, #0]
 8009e86:	2002      	movpl	r0, #2
 8009e88:	4770      	bx	lr
 8009e8a:	b298      	uxth	r0, r3
 8009e8c:	b9a8      	cbnz	r0, 8009eba <__lo0bits+0x52>
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	2010      	movs	r0, #16
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	b90a      	cbnz	r2, 8009e9a <__lo0bits+0x32>
 8009e96:	3008      	adds	r0, #8
 8009e98:	0a1b      	lsrs	r3, r3, #8
 8009e9a:	071a      	lsls	r2, r3, #28
 8009e9c:	bf04      	itt	eq
 8009e9e:	091b      	lsreq	r3, r3, #4
 8009ea0:	3004      	addeq	r0, #4
 8009ea2:	079a      	lsls	r2, r3, #30
 8009ea4:	bf04      	itt	eq
 8009ea6:	089b      	lsreq	r3, r3, #2
 8009ea8:	3002      	addeq	r0, #2
 8009eaa:	07da      	lsls	r2, r3, #31
 8009eac:	d403      	bmi.n	8009eb6 <__lo0bits+0x4e>
 8009eae:	085b      	lsrs	r3, r3, #1
 8009eb0:	f100 0001 	add.w	r0, r0, #1
 8009eb4:	d005      	beq.n	8009ec2 <__lo0bits+0x5a>
 8009eb6:	600b      	str	r3, [r1, #0]
 8009eb8:	4770      	bx	lr
 8009eba:	4610      	mov	r0, r2
 8009ebc:	e7e9      	b.n	8009e92 <__lo0bits+0x2a>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	4770      	bx	lr
 8009ec2:	2020      	movs	r0, #32
 8009ec4:	4770      	bx	lr
	...

08009ec8 <__i2b>:
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	460c      	mov	r4, r1
 8009ecc:	2101      	movs	r1, #1
 8009ece:	f7ff ff03 	bl	8009cd8 <_Balloc>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	b928      	cbnz	r0, 8009ee2 <__i2b+0x1a>
 8009ed6:	4b05      	ldr	r3, [pc, #20]	; (8009eec <__i2b+0x24>)
 8009ed8:	4805      	ldr	r0, [pc, #20]	; (8009ef0 <__i2b+0x28>)
 8009eda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ede:	f001 f8fb 	bl	800b0d8 <__assert_func>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	6144      	str	r4, [r0, #20]
 8009ee6:	6103      	str	r3, [r0, #16]
 8009ee8:	bd10      	pop	{r4, pc}
 8009eea:	bf00      	nop
 8009eec:	0800b6b6 	.word	0x0800b6b6
 8009ef0:	0800b728 	.word	0x0800b728

08009ef4 <__multiply>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	4691      	mov	r9, r2
 8009efa:	690a      	ldr	r2, [r1, #16]
 8009efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	bfb8      	it	lt
 8009f04:	460b      	movlt	r3, r1
 8009f06:	460c      	mov	r4, r1
 8009f08:	bfbc      	itt	lt
 8009f0a:	464c      	movlt	r4, r9
 8009f0c:	4699      	movlt	r9, r3
 8009f0e:	6927      	ldr	r7, [r4, #16]
 8009f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f14:	68a3      	ldr	r3, [r4, #8]
 8009f16:	6861      	ldr	r1, [r4, #4]
 8009f18:	eb07 060a 	add.w	r6, r7, sl
 8009f1c:	42b3      	cmp	r3, r6
 8009f1e:	b085      	sub	sp, #20
 8009f20:	bfb8      	it	lt
 8009f22:	3101      	addlt	r1, #1
 8009f24:	f7ff fed8 	bl	8009cd8 <_Balloc>
 8009f28:	b930      	cbnz	r0, 8009f38 <__multiply+0x44>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	4b44      	ldr	r3, [pc, #272]	; (800a040 <__multiply+0x14c>)
 8009f2e:	4845      	ldr	r0, [pc, #276]	; (800a044 <__multiply+0x150>)
 8009f30:	f240 115d 	movw	r1, #349	; 0x15d
 8009f34:	f001 f8d0 	bl	800b0d8 <__assert_func>
 8009f38:	f100 0514 	add.w	r5, r0, #20
 8009f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f40:	462b      	mov	r3, r5
 8009f42:	2200      	movs	r2, #0
 8009f44:	4543      	cmp	r3, r8
 8009f46:	d321      	bcc.n	8009f8c <__multiply+0x98>
 8009f48:	f104 0314 	add.w	r3, r4, #20
 8009f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f50:	f109 0314 	add.w	r3, r9, #20
 8009f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f58:	9202      	str	r2, [sp, #8]
 8009f5a:	1b3a      	subs	r2, r7, r4
 8009f5c:	3a15      	subs	r2, #21
 8009f5e:	f022 0203 	bic.w	r2, r2, #3
 8009f62:	3204      	adds	r2, #4
 8009f64:	f104 0115 	add.w	r1, r4, #21
 8009f68:	428f      	cmp	r7, r1
 8009f6a:	bf38      	it	cc
 8009f6c:	2204      	movcc	r2, #4
 8009f6e:	9201      	str	r2, [sp, #4]
 8009f70:	9a02      	ldr	r2, [sp, #8]
 8009f72:	9303      	str	r3, [sp, #12]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d80c      	bhi.n	8009f92 <__multiply+0x9e>
 8009f78:	2e00      	cmp	r6, #0
 8009f7a:	dd03      	ble.n	8009f84 <__multiply+0x90>
 8009f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d05a      	beq.n	800a03a <__multiply+0x146>
 8009f84:	6106      	str	r6, [r0, #16]
 8009f86:	b005      	add	sp, #20
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	f843 2b04 	str.w	r2, [r3], #4
 8009f90:	e7d8      	b.n	8009f44 <__multiply+0x50>
 8009f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f96:	f1ba 0f00 	cmp.w	sl, #0
 8009f9a:	d024      	beq.n	8009fe6 <__multiply+0xf2>
 8009f9c:	f104 0e14 	add.w	lr, r4, #20
 8009fa0:	46a9      	mov	r9, r5
 8009fa2:	f04f 0c00 	mov.w	ip, #0
 8009fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009faa:	f8d9 1000 	ldr.w	r1, [r9]
 8009fae:	fa1f fb82 	uxth.w	fp, r2
 8009fb2:	b289      	uxth	r1, r1
 8009fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8009fc0:	4461      	add	r1, ip
 8009fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fce:	b289      	uxth	r1, r1
 8009fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fd4:	4577      	cmp	r7, lr
 8009fd6:	f849 1b04 	str.w	r1, [r9], #4
 8009fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fde:	d8e2      	bhi.n	8009fa6 <__multiply+0xb2>
 8009fe0:	9a01      	ldr	r2, [sp, #4]
 8009fe2:	f845 c002 	str.w	ip, [r5, r2]
 8009fe6:	9a03      	ldr	r2, [sp, #12]
 8009fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fec:	3304      	adds	r3, #4
 8009fee:	f1b9 0f00 	cmp.w	r9, #0
 8009ff2:	d020      	beq.n	800a036 <__multiply+0x142>
 8009ff4:	6829      	ldr	r1, [r5, #0]
 8009ff6:	f104 0c14 	add.w	ip, r4, #20
 8009ffa:	46ae      	mov	lr, r5
 8009ffc:	f04f 0a00 	mov.w	sl, #0
 800a000:	f8bc b000 	ldrh.w	fp, [ip]
 800a004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a008:	fb09 220b 	mla	r2, r9, fp, r2
 800a00c:	4492      	add	sl, r2
 800a00e:	b289      	uxth	r1, r1
 800a010:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a014:	f84e 1b04 	str.w	r1, [lr], #4
 800a018:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a01c:	f8be 1000 	ldrh.w	r1, [lr]
 800a020:	0c12      	lsrs	r2, r2, #16
 800a022:	fb09 1102 	mla	r1, r9, r2, r1
 800a026:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a02a:	4567      	cmp	r7, ip
 800a02c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a030:	d8e6      	bhi.n	800a000 <__multiply+0x10c>
 800a032:	9a01      	ldr	r2, [sp, #4]
 800a034:	50a9      	str	r1, [r5, r2]
 800a036:	3504      	adds	r5, #4
 800a038:	e79a      	b.n	8009f70 <__multiply+0x7c>
 800a03a:	3e01      	subs	r6, #1
 800a03c:	e79c      	b.n	8009f78 <__multiply+0x84>
 800a03e:	bf00      	nop
 800a040:	0800b6b6 	.word	0x0800b6b6
 800a044:	0800b728 	.word	0x0800b728

0800a048 <__pow5mult>:
 800a048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a04c:	4615      	mov	r5, r2
 800a04e:	f012 0203 	ands.w	r2, r2, #3
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	d007      	beq.n	800a068 <__pow5mult+0x20>
 800a058:	4c25      	ldr	r4, [pc, #148]	; (800a0f0 <__pow5mult+0xa8>)
 800a05a:	3a01      	subs	r2, #1
 800a05c:	2300      	movs	r3, #0
 800a05e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a062:	f7ff fe9b 	bl	8009d9c <__multadd>
 800a066:	4607      	mov	r7, r0
 800a068:	10ad      	asrs	r5, r5, #2
 800a06a:	d03d      	beq.n	800a0e8 <__pow5mult+0xa0>
 800a06c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a06e:	b97c      	cbnz	r4, 800a090 <__pow5mult+0x48>
 800a070:	2010      	movs	r0, #16
 800a072:	f7ff fe1b 	bl	8009cac <malloc>
 800a076:	4602      	mov	r2, r0
 800a078:	6270      	str	r0, [r6, #36]	; 0x24
 800a07a:	b928      	cbnz	r0, 800a088 <__pow5mult+0x40>
 800a07c:	4b1d      	ldr	r3, [pc, #116]	; (800a0f4 <__pow5mult+0xac>)
 800a07e:	481e      	ldr	r0, [pc, #120]	; (800a0f8 <__pow5mult+0xb0>)
 800a080:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a084:	f001 f828 	bl	800b0d8 <__assert_func>
 800a088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a08c:	6004      	str	r4, [r0, #0]
 800a08e:	60c4      	str	r4, [r0, #12]
 800a090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a098:	b94c      	cbnz	r4, 800a0ae <__pow5mult+0x66>
 800a09a:	f240 2171 	movw	r1, #625	; 0x271
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f7ff ff12 	bl	8009ec8 <__i2b>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	07eb      	lsls	r3, r5, #31
 800a0b4:	d50a      	bpl.n	800a0cc <__pow5mult+0x84>
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	4622      	mov	r2, r4
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff ff1a 	bl	8009ef4 <__multiply>
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	4680      	mov	r8, r0
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff fe47 	bl	8009d58 <_Bfree>
 800a0ca:	4647      	mov	r7, r8
 800a0cc:	106d      	asrs	r5, r5, #1
 800a0ce:	d00b      	beq.n	800a0e8 <__pow5mult+0xa0>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	b938      	cbnz	r0, 800a0e4 <__pow5mult+0x9c>
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7ff ff0b 	bl	8009ef4 <__multiply>
 800a0de:	6020      	str	r0, [r4, #0]
 800a0e0:	f8c0 9000 	str.w	r9, [r0]
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	e7e4      	b.n	800a0b2 <__pow5mult+0x6a>
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ee:	bf00      	nop
 800a0f0:	0800b878 	.word	0x0800b878
 800a0f4:	0800b644 	.word	0x0800b644
 800a0f8:	0800b728 	.word	0x0800b728

0800a0fc <__lshift>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	460c      	mov	r4, r1
 800a102:	6849      	ldr	r1, [r1, #4]
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	4607      	mov	r7, r0
 800a10e:	4691      	mov	r9, r2
 800a110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a114:	f108 0601 	add.w	r6, r8, #1
 800a118:	42b3      	cmp	r3, r6
 800a11a:	db0b      	blt.n	800a134 <__lshift+0x38>
 800a11c:	4638      	mov	r0, r7
 800a11e:	f7ff fddb 	bl	8009cd8 <_Balloc>
 800a122:	4605      	mov	r5, r0
 800a124:	b948      	cbnz	r0, 800a13a <__lshift+0x3e>
 800a126:	4602      	mov	r2, r0
 800a128:	4b2a      	ldr	r3, [pc, #168]	; (800a1d4 <__lshift+0xd8>)
 800a12a:	482b      	ldr	r0, [pc, #172]	; (800a1d8 <__lshift+0xdc>)
 800a12c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a130:	f000 ffd2 	bl	800b0d8 <__assert_func>
 800a134:	3101      	adds	r1, #1
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	e7ee      	b.n	800a118 <__lshift+0x1c>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f100 0114 	add.w	r1, r0, #20
 800a140:	f100 0210 	add.w	r2, r0, #16
 800a144:	4618      	mov	r0, r3
 800a146:	4553      	cmp	r3, sl
 800a148:	db37      	blt.n	800a1ba <__lshift+0xbe>
 800a14a:	6920      	ldr	r0, [r4, #16]
 800a14c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a150:	f104 0314 	add.w	r3, r4, #20
 800a154:	f019 091f 	ands.w	r9, r9, #31
 800a158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a15c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a160:	d02f      	beq.n	800a1c2 <__lshift+0xc6>
 800a162:	f1c9 0e20 	rsb	lr, r9, #32
 800a166:	468a      	mov	sl, r1
 800a168:	f04f 0c00 	mov.w	ip, #0
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	fa02 f209 	lsl.w	r2, r2, r9
 800a172:	ea42 020c 	orr.w	r2, r2, ip
 800a176:	f84a 2b04 	str.w	r2, [sl], #4
 800a17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a17e:	4298      	cmp	r0, r3
 800a180:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a184:	d8f2      	bhi.n	800a16c <__lshift+0x70>
 800a186:	1b03      	subs	r3, r0, r4
 800a188:	3b15      	subs	r3, #21
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	3304      	adds	r3, #4
 800a190:	f104 0215 	add.w	r2, r4, #21
 800a194:	4290      	cmp	r0, r2
 800a196:	bf38      	it	cc
 800a198:	2304      	movcc	r3, #4
 800a19a:	f841 c003 	str.w	ip, [r1, r3]
 800a19e:	f1bc 0f00 	cmp.w	ip, #0
 800a1a2:	d001      	beq.n	800a1a8 <__lshift+0xac>
 800a1a4:	f108 0602 	add.w	r6, r8, #2
 800a1a8:	3e01      	subs	r6, #1
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	612e      	str	r6, [r5, #16]
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	f7ff fdd2 	bl	8009d58 <_Bfree>
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1be:	3301      	adds	r3, #1
 800a1c0:	e7c1      	b.n	800a146 <__lshift+0x4a>
 800a1c2:	3904      	subs	r1, #4
 800a1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1cc:	4298      	cmp	r0, r3
 800a1ce:	d8f9      	bhi.n	800a1c4 <__lshift+0xc8>
 800a1d0:	e7ea      	b.n	800a1a8 <__lshift+0xac>
 800a1d2:	bf00      	nop
 800a1d4:	0800b6b6 	.word	0x0800b6b6
 800a1d8:	0800b728 	.word	0x0800b728

0800a1dc <__mcmp>:
 800a1dc:	b530      	push	{r4, r5, lr}
 800a1de:	6902      	ldr	r2, [r0, #16]
 800a1e0:	690c      	ldr	r4, [r1, #16]
 800a1e2:	1b12      	subs	r2, r2, r4
 800a1e4:	d10e      	bne.n	800a204 <__mcmp+0x28>
 800a1e6:	f100 0314 	add.w	r3, r0, #20
 800a1ea:	3114      	adds	r1, #20
 800a1ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1fc:	42a5      	cmp	r5, r4
 800a1fe:	d003      	beq.n	800a208 <__mcmp+0x2c>
 800a200:	d305      	bcc.n	800a20e <__mcmp+0x32>
 800a202:	2201      	movs	r2, #1
 800a204:	4610      	mov	r0, r2
 800a206:	bd30      	pop	{r4, r5, pc}
 800a208:	4283      	cmp	r3, r0
 800a20a:	d3f3      	bcc.n	800a1f4 <__mcmp+0x18>
 800a20c:	e7fa      	b.n	800a204 <__mcmp+0x28>
 800a20e:	f04f 32ff 	mov.w	r2, #4294967295
 800a212:	e7f7      	b.n	800a204 <__mcmp+0x28>

0800a214 <__mdiff>:
 800a214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a218:	460c      	mov	r4, r1
 800a21a:	4606      	mov	r6, r0
 800a21c:	4611      	mov	r1, r2
 800a21e:	4620      	mov	r0, r4
 800a220:	4690      	mov	r8, r2
 800a222:	f7ff ffdb 	bl	800a1dc <__mcmp>
 800a226:	1e05      	subs	r5, r0, #0
 800a228:	d110      	bne.n	800a24c <__mdiff+0x38>
 800a22a:	4629      	mov	r1, r5
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7ff fd53 	bl	8009cd8 <_Balloc>
 800a232:	b930      	cbnz	r0, 800a242 <__mdiff+0x2e>
 800a234:	4b3a      	ldr	r3, [pc, #232]	; (800a320 <__mdiff+0x10c>)
 800a236:	4602      	mov	r2, r0
 800a238:	f240 2132 	movw	r1, #562	; 0x232
 800a23c:	4839      	ldr	r0, [pc, #228]	; (800a324 <__mdiff+0x110>)
 800a23e:	f000 ff4b 	bl	800b0d8 <__assert_func>
 800a242:	2301      	movs	r3, #1
 800a244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24c:	bfa4      	itt	ge
 800a24e:	4643      	movge	r3, r8
 800a250:	46a0      	movge	r8, r4
 800a252:	4630      	mov	r0, r6
 800a254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a258:	bfa6      	itte	ge
 800a25a:	461c      	movge	r4, r3
 800a25c:	2500      	movge	r5, #0
 800a25e:	2501      	movlt	r5, #1
 800a260:	f7ff fd3a 	bl	8009cd8 <_Balloc>
 800a264:	b920      	cbnz	r0, 800a270 <__mdiff+0x5c>
 800a266:	4b2e      	ldr	r3, [pc, #184]	; (800a320 <__mdiff+0x10c>)
 800a268:	4602      	mov	r2, r0
 800a26a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a26e:	e7e5      	b.n	800a23c <__mdiff+0x28>
 800a270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a274:	6926      	ldr	r6, [r4, #16]
 800a276:	60c5      	str	r5, [r0, #12]
 800a278:	f104 0914 	add.w	r9, r4, #20
 800a27c:	f108 0514 	add.w	r5, r8, #20
 800a280:	f100 0e14 	add.w	lr, r0, #20
 800a284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a28c:	f108 0210 	add.w	r2, r8, #16
 800a290:	46f2      	mov	sl, lr
 800a292:	2100      	movs	r1, #0
 800a294:	f859 3b04 	ldr.w	r3, [r9], #4
 800a298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a29c:	fa1f f883 	uxth.w	r8, r3
 800a2a0:	fa11 f18b 	uxtah	r1, r1, fp
 800a2a4:	0c1b      	lsrs	r3, r3, #16
 800a2a6:	eba1 0808 	sub.w	r8, r1, r8
 800a2aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2b2:	fa1f f888 	uxth.w	r8, r8
 800a2b6:	1419      	asrs	r1, r3, #16
 800a2b8:	454e      	cmp	r6, r9
 800a2ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2be:	f84a 3b04 	str.w	r3, [sl], #4
 800a2c2:	d8e7      	bhi.n	800a294 <__mdiff+0x80>
 800a2c4:	1b33      	subs	r3, r6, r4
 800a2c6:	3b15      	subs	r3, #21
 800a2c8:	f023 0303 	bic.w	r3, r3, #3
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	3415      	adds	r4, #21
 800a2d0:	42a6      	cmp	r6, r4
 800a2d2:	bf38      	it	cc
 800a2d4:	2304      	movcc	r3, #4
 800a2d6:	441d      	add	r5, r3
 800a2d8:	4473      	add	r3, lr
 800a2da:	469e      	mov	lr, r3
 800a2dc:	462e      	mov	r6, r5
 800a2de:	4566      	cmp	r6, ip
 800a2e0:	d30e      	bcc.n	800a300 <__mdiff+0xec>
 800a2e2:	f10c 0203 	add.w	r2, ip, #3
 800a2e6:	1b52      	subs	r2, r2, r5
 800a2e8:	f022 0203 	bic.w	r2, r2, #3
 800a2ec:	3d03      	subs	r5, #3
 800a2ee:	45ac      	cmp	ip, r5
 800a2f0:	bf38      	it	cc
 800a2f2:	2200      	movcc	r2, #0
 800a2f4:	441a      	add	r2, r3
 800a2f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2fa:	b17b      	cbz	r3, 800a31c <__mdiff+0x108>
 800a2fc:	6107      	str	r7, [r0, #16]
 800a2fe:	e7a3      	b.n	800a248 <__mdiff+0x34>
 800a300:	f856 8b04 	ldr.w	r8, [r6], #4
 800a304:	fa11 f288 	uxtah	r2, r1, r8
 800a308:	1414      	asrs	r4, r2, #16
 800a30a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a30e:	b292      	uxth	r2, r2
 800a310:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a314:	f84e 2b04 	str.w	r2, [lr], #4
 800a318:	1421      	asrs	r1, r4, #16
 800a31a:	e7e0      	b.n	800a2de <__mdiff+0xca>
 800a31c:	3f01      	subs	r7, #1
 800a31e:	e7ea      	b.n	800a2f6 <__mdiff+0xe2>
 800a320:	0800b6b6 	.word	0x0800b6b6
 800a324:	0800b728 	.word	0x0800b728

0800a328 <__d2b>:
 800a328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4689      	mov	r9, r1
 800a32e:	2101      	movs	r1, #1
 800a330:	ec57 6b10 	vmov	r6, r7, d0
 800a334:	4690      	mov	r8, r2
 800a336:	f7ff fccf 	bl	8009cd8 <_Balloc>
 800a33a:	4604      	mov	r4, r0
 800a33c:	b930      	cbnz	r0, 800a34c <__d2b+0x24>
 800a33e:	4602      	mov	r2, r0
 800a340:	4b25      	ldr	r3, [pc, #148]	; (800a3d8 <__d2b+0xb0>)
 800a342:	4826      	ldr	r0, [pc, #152]	; (800a3dc <__d2b+0xb4>)
 800a344:	f240 310a 	movw	r1, #778	; 0x30a
 800a348:	f000 fec6 	bl	800b0d8 <__assert_func>
 800a34c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a354:	bb35      	cbnz	r5, 800a3a4 <__d2b+0x7c>
 800a356:	2e00      	cmp	r6, #0
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	d028      	beq.n	800a3ae <__d2b+0x86>
 800a35c:	4668      	mov	r0, sp
 800a35e:	9600      	str	r6, [sp, #0]
 800a360:	f7ff fd82 	bl	8009e68 <__lo0bits>
 800a364:	9900      	ldr	r1, [sp, #0]
 800a366:	b300      	cbz	r0, 800a3aa <__d2b+0x82>
 800a368:	9a01      	ldr	r2, [sp, #4]
 800a36a:	f1c0 0320 	rsb	r3, r0, #32
 800a36e:	fa02 f303 	lsl.w	r3, r2, r3
 800a372:	430b      	orrs	r3, r1
 800a374:	40c2      	lsrs	r2, r0
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	9201      	str	r2, [sp, #4]
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	61a3      	str	r3, [r4, #24]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	bf14      	ite	ne
 800a382:	2202      	movne	r2, #2
 800a384:	2201      	moveq	r2, #1
 800a386:	6122      	str	r2, [r4, #16]
 800a388:	b1d5      	cbz	r5, 800a3c0 <__d2b+0x98>
 800a38a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a38e:	4405      	add	r5, r0
 800a390:	f8c9 5000 	str.w	r5, [r9]
 800a394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a398:	f8c8 0000 	str.w	r0, [r8]
 800a39c:	4620      	mov	r0, r4
 800a39e:	b003      	add	sp, #12
 800a3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3a8:	e7d5      	b.n	800a356 <__d2b+0x2e>
 800a3aa:	6161      	str	r1, [r4, #20]
 800a3ac:	e7e5      	b.n	800a37a <__d2b+0x52>
 800a3ae:	a801      	add	r0, sp, #4
 800a3b0:	f7ff fd5a 	bl	8009e68 <__lo0bits>
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	6122      	str	r2, [r4, #16]
 800a3bc:	3020      	adds	r0, #32
 800a3be:	e7e3      	b.n	800a388 <__d2b+0x60>
 800a3c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3c8:	f8c9 0000 	str.w	r0, [r9]
 800a3cc:	6918      	ldr	r0, [r3, #16]
 800a3ce:	f7ff fd2b 	bl	8009e28 <__hi0bits>
 800a3d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3d6:	e7df      	b.n	800a398 <__d2b+0x70>
 800a3d8:	0800b6b6 	.word	0x0800b6b6
 800a3dc:	0800b728 	.word	0x0800b728

0800a3e0 <_calloc_r>:
 800a3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e2:	fba1 2402 	umull	r2, r4, r1, r2
 800a3e6:	b94c      	cbnz	r4, 800a3fc <_calloc_r+0x1c>
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	9201      	str	r2, [sp, #4]
 800a3ec:	f000 f87a 	bl	800a4e4 <_malloc_r>
 800a3f0:	9a01      	ldr	r2, [sp, #4]
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	b930      	cbnz	r0, 800a404 <_calloc_r+0x24>
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	b003      	add	sp, #12
 800a3fa:	bd30      	pop	{r4, r5, pc}
 800a3fc:	220c      	movs	r2, #12
 800a3fe:	6002      	str	r2, [r0, #0]
 800a400:	2500      	movs	r5, #0
 800a402:	e7f8      	b.n	800a3f6 <_calloc_r+0x16>
 800a404:	4621      	mov	r1, r4
 800a406:	f7fd fca9 	bl	8007d5c <memset>
 800a40a:	e7f4      	b.n	800a3f6 <_calloc_r+0x16>

0800a40c <_free_r>:
 800a40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a40e:	2900      	cmp	r1, #0
 800a410:	d044      	beq.n	800a49c <_free_r+0x90>
 800a412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a416:	9001      	str	r0, [sp, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f1a1 0404 	sub.w	r4, r1, #4
 800a41e:	bfb8      	it	lt
 800a420:	18e4      	addlt	r4, r4, r3
 800a422:	f000 febd 	bl	800b1a0 <__malloc_lock>
 800a426:	4a1e      	ldr	r2, [pc, #120]	; (800a4a0 <_free_r+0x94>)
 800a428:	9801      	ldr	r0, [sp, #4]
 800a42a:	6813      	ldr	r3, [r2, #0]
 800a42c:	b933      	cbnz	r3, 800a43c <_free_r+0x30>
 800a42e:	6063      	str	r3, [r4, #4]
 800a430:	6014      	str	r4, [r2, #0]
 800a432:	b003      	add	sp, #12
 800a434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a438:	f000 beb8 	b.w	800b1ac <__malloc_unlock>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d908      	bls.n	800a452 <_free_r+0x46>
 800a440:	6825      	ldr	r5, [r4, #0]
 800a442:	1961      	adds	r1, r4, r5
 800a444:	428b      	cmp	r3, r1
 800a446:	bf01      	itttt	eq
 800a448:	6819      	ldreq	r1, [r3, #0]
 800a44a:	685b      	ldreq	r3, [r3, #4]
 800a44c:	1949      	addeq	r1, r1, r5
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	e7ed      	b.n	800a42e <_free_r+0x22>
 800a452:	461a      	mov	r2, r3
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	b10b      	cbz	r3, 800a45c <_free_r+0x50>
 800a458:	42a3      	cmp	r3, r4
 800a45a:	d9fa      	bls.n	800a452 <_free_r+0x46>
 800a45c:	6811      	ldr	r1, [r2, #0]
 800a45e:	1855      	adds	r5, r2, r1
 800a460:	42a5      	cmp	r5, r4
 800a462:	d10b      	bne.n	800a47c <_free_r+0x70>
 800a464:	6824      	ldr	r4, [r4, #0]
 800a466:	4421      	add	r1, r4
 800a468:	1854      	adds	r4, r2, r1
 800a46a:	42a3      	cmp	r3, r4
 800a46c:	6011      	str	r1, [r2, #0]
 800a46e:	d1e0      	bne.n	800a432 <_free_r+0x26>
 800a470:	681c      	ldr	r4, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	6053      	str	r3, [r2, #4]
 800a476:	4421      	add	r1, r4
 800a478:	6011      	str	r1, [r2, #0]
 800a47a:	e7da      	b.n	800a432 <_free_r+0x26>
 800a47c:	d902      	bls.n	800a484 <_free_r+0x78>
 800a47e:	230c      	movs	r3, #12
 800a480:	6003      	str	r3, [r0, #0]
 800a482:	e7d6      	b.n	800a432 <_free_r+0x26>
 800a484:	6825      	ldr	r5, [r4, #0]
 800a486:	1961      	adds	r1, r4, r5
 800a488:	428b      	cmp	r3, r1
 800a48a:	bf04      	itt	eq
 800a48c:	6819      	ldreq	r1, [r3, #0]
 800a48e:	685b      	ldreq	r3, [r3, #4]
 800a490:	6063      	str	r3, [r4, #4]
 800a492:	bf04      	itt	eq
 800a494:	1949      	addeq	r1, r1, r5
 800a496:	6021      	streq	r1, [r4, #0]
 800a498:	6054      	str	r4, [r2, #4]
 800a49a:	e7ca      	b.n	800a432 <_free_r+0x26>
 800a49c:	b003      	add	sp, #12
 800a49e:	bd30      	pop	{r4, r5, pc}
 800a4a0:	200007a4 	.word	0x200007a4

0800a4a4 <sbrk_aligned>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	4e0e      	ldr	r6, [pc, #56]	; (800a4e0 <sbrk_aligned+0x3c>)
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	6831      	ldr	r1, [r6, #0]
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	b911      	cbnz	r1, 800a4b6 <sbrk_aligned+0x12>
 800a4b0:	f000 fd1c 	bl	800aeec <_sbrk_r>
 800a4b4:	6030      	str	r0, [r6, #0]
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f000 fd17 	bl	800aeec <_sbrk_r>
 800a4be:	1c43      	adds	r3, r0, #1
 800a4c0:	d00a      	beq.n	800a4d8 <sbrk_aligned+0x34>
 800a4c2:	1cc4      	adds	r4, r0, #3
 800a4c4:	f024 0403 	bic.w	r4, r4, #3
 800a4c8:	42a0      	cmp	r0, r4
 800a4ca:	d007      	beq.n	800a4dc <sbrk_aligned+0x38>
 800a4cc:	1a21      	subs	r1, r4, r0
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f000 fd0c 	bl	800aeec <_sbrk_r>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d101      	bne.n	800a4dc <sbrk_aligned+0x38>
 800a4d8:	f04f 34ff 	mov.w	r4, #4294967295
 800a4dc:	4620      	mov	r0, r4
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	200007a8 	.word	0x200007a8

0800a4e4 <_malloc_r>:
 800a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e8:	1ccd      	adds	r5, r1, #3
 800a4ea:	f025 0503 	bic.w	r5, r5, #3
 800a4ee:	3508      	adds	r5, #8
 800a4f0:	2d0c      	cmp	r5, #12
 800a4f2:	bf38      	it	cc
 800a4f4:	250c      	movcc	r5, #12
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	db01      	blt.n	800a500 <_malloc_r+0x1c>
 800a4fc:	42a9      	cmp	r1, r5
 800a4fe:	d905      	bls.n	800a50c <_malloc_r+0x28>
 800a500:	230c      	movs	r3, #12
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	2600      	movs	r6, #0
 800a506:	4630      	mov	r0, r6
 800a508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a50c:	4e2e      	ldr	r6, [pc, #184]	; (800a5c8 <_malloc_r+0xe4>)
 800a50e:	f000 fe47 	bl	800b1a0 <__malloc_lock>
 800a512:	6833      	ldr	r3, [r6, #0]
 800a514:	461c      	mov	r4, r3
 800a516:	bb34      	cbnz	r4, 800a566 <_malloc_r+0x82>
 800a518:	4629      	mov	r1, r5
 800a51a:	4638      	mov	r0, r7
 800a51c:	f7ff ffc2 	bl	800a4a4 <sbrk_aligned>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	4604      	mov	r4, r0
 800a524:	d14d      	bne.n	800a5c2 <_malloc_r+0xde>
 800a526:	6834      	ldr	r4, [r6, #0]
 800a528:	4626      	mov	r6, r4
 800a52a:	2e00      	cmp	r6, #0
 800a52c:	d140      	bne.n	800a5b0 <_malloc_r+0xcc>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	4631      	mov	r1, r6
 800a532:	4638      	mov	r0, r7
 800a534:	eb04 0803 	add.w	r8, r4, r3
 800a538:	f000 fcd8 	bl	800aeec <_sbrk_r>
 800a53c:	4580      	cmp	r8, r0
 800a53e:	d13a      	bne.n	800a5b6 <_malloc_r+0xd2>
 800a540:	6821      	ldr	r1, [r4, #0]
 800a542:	3503      	adds	r5, #3
 800a544:	1a6d      	subs	r5, r5, r1
 800a546:	f025 0503 	bic.w	r5, r5, #3
 800a54a:	3508      	adds	r5, #8
 800a54c:	2d0c      	cmp	r5, #12
 800a54e:	bf38      	it	cc
 800a550:	250c      	movcc	r5, #12
 800a552:	4629      	mov	r1, r5
 800a554:	4638      	mov	r0, r7
 800a556:	f7ff ffa5 	bl	800a4a4 <sbrk_aligned>
 800a55a:	3001      	adds	r0, #1
 800a55c:	d02b      	beq.n	800a5b6 <_malloc_r+0xd2>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	442b      	add	r3, r5
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	e00e      	b.n	800a584 <_malloc_r+0xa0>
 800a566:	6822      	ldr	r2, [r4, #0]
 800a568:	1b52      	subs	r2, r2, r5
 800a56a:	d41e      	bmi.n	800a5aa <_malloc_r+0xc6>
 800a56c:	2a0b      	cmp	r2, #11
 800a56e:	d916      	bls.n	800a59e <_malloc_r+0xba>
 800a570:	1961      	adds	r1, r4, r5
 800a572:	42a3      	cmp	r3, r4
 800a574:	6025      	str	r5, [r4, #0]
 800a576:	bf18      	it	ne
 800a578:	6059      	strne	r1, [r3, #4]
 800a57a:	6863      	ldr	r3, [r4, #4]
 800a57c:	bf08      	it	eq
 800a57e:	6031      	streq	r1, [r6, #0]
 800a580:	5162      	str	r2, [r4, r5]
 800a582:	604b      	str	r3, [r1, #4]
 800a584:	4638      	mov	r0, r7
 800a586:	f104 060b 	add.w	r6, r4, #11
 800a58a:	f000 fe0f 	bl	800b1ac <__malloc_unlock>
 800a58e:	f026 0607 	bic.w	r6, r6, #7
 800a592:	1d23      	adds	r3, r4, #4
 800a594:	1af2      	subs	r2, r6, r3
 800a596:	d0b6      	beq.n	800a506 <_malloc_r+0x22>
 800a598:	1b9b      	subs	r3, r3, r6
 800a59a:	50a3      	str	r3, [r4, r2]
 800a59c:	e7b3      	b.n	800a506 <_malloc_r+0x22>
 800a59e:	6862      	ldr	r2, [r4, #4]
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	bf0c      	ite	eq
 800a5a4:	6032      	streq	r2, [r6, #0]
 800a5a6:	605a      	strne	r2, [r3, #4]
 800a5a8:	e7ec      	b.n	800a584 <_malloc_r+0xa0>
 800a5aa:	4623      	mov	r3, r4
 800a5ac:	6864      	ldr	r4, [r4, #4]
 800a5ae:	e7b2      	b.n	800a516 <_malloc_r+0x32>
 800a5b0:	4634      	mov	r4, r6
 800a5b2:	6876      	ldr	r6, [r6, #4]
 800a5b4:	e7b9      	b.n	800a52a <_malloc_r+0x46>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	603b      	str	r3, [r7, #0]
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f000 fdf6 	bl	800b1ac <__malloc_unlock>
 800a5c0:	e7a1      	b.n	800a506 <_malloc_r+0x22>
 800a5c2:	6025      	str	r5, [r4, #0]
 800a5c4:	e7de      	b.n	800a584 <_malloc_r+0xa0>
 800a5c6:	bf00      	nop
 800a5c8:	200007a4 	.word	0x200007a4

0800a5cc <_sungetc_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	1c4b      	adds	r3, r1, #1
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	d103      	bne.n	800a5dc <_sungetc_r+0x10>
 800a5d4:	f04f 35ff 	mov.w	r5, #4294967295
 800a5d8:	4628      	mov	r0, r5
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	8993      	ldrh	r3, [r2, #12]
 800a5de:	f023 0320 	bic.w	r3, r3, #32
 800a5e2:	8193      	strh	r3, [r2, #12]
 800a5e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5e6:	6852      	ldr	r2, [r2, #4]
 800a5e8:	b2cd      	uxtb	r5, r1
 800a5ea:	b18b      	cbz	r3, 800a610 <_sungetc_r+0x44>
 800a5ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	dd08      	ble.n	800a604 <_sungetc_r+0x38>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	1e5a      	subs	r2, r3, #1
 800a5f6:	6022      	str	r2, [r4, #0]
 800a5f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a5fc:	6863      	ldr	r3, [r4, #4]
 800a5fe:	3301      	adds	r3, #1
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	e7e9      	b.n	800a5d8 <_sungetc_r+0xc>
 800a604:	4621      	mov	r1, r4
 800a606:	f000 fd2d 	bl	800b064 <__submore>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d0f1      	beq.n	800a5f2 <_sungetc_r+0x26>
 800a60e:	e7e1      	b.n	800a5d4 <_sungetc_r+0x8>
 800a610:	6921      	ldr	r1, [r4, #16]
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	b151      	cbz	r1, 800a62c <_sungetc_r+0x60>
 800a616:	4299      	cmp	r1, r3
 800a618:	d208      	bcs.n	800a62c <_sungetc_r+0x60>
 800a61a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a61e:	42a9      	cmp	r1, r5
 800a620:	d104      	bne.n	800a62c <_sungetc_r+0x60>
 800a622:	3b01      	subs	r3, #1
 800a624:	3201      	adds	r2, #1
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	6062      	str	r2, [r4, #4]
 800a62a:	e7d5      	b.n	800a5d8 <_sungetc_r+0xc>
 800a62c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a634:	6363      	str	r3, [r4, #52]	; 0x34
 800a636:	2303      	movs	r3, #3
 800a638:	63a3      	str	r3, [r4, #56]	; 0x38
 800a63a:	4623      	mov	r3, r4
 800a63c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	2301      	movs	r3, #1
 800a644:	e7dc      	b.n	800a600 <_sungetc_r+0x34>

0800a646 <__ssrefill_r>:
 800a646:	b510      	push	{r4, lr}
 800a648:	460c      	mov	r4, r1
 800a64a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a64c:	b169      	cbz	r1, 800a66a <__ssrefill_r+0x24>
 800a64e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a652:	4299      	cmp	r1, r3
 800a654:	d001      	beq.n	800a65a <__ssrefill_r+0x14>
 800a656:	f7ff fed9 	bl	800a40c <_free_r>
 800a65a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a65c:	6063      	str	r3, [r4, #4]
 800a65e:	2000      	movs	r0, #0
 800a660:	6360      	str	r0, [r4, #52]	; 0x34
 800a662:	b113      	cbz	r3, 800a66a <__ssrefill_r+0x24>
 800a664:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a666:	6023      	str	r3, [r4, #0]
 800a668:	bd10      	pop	{r4, pc}
 800a66a:	6923      	ldr	r3, [r4, #16]
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	2300      	movs	r3, #0
 800a670:	6063      	str	r3, [r4, #4]
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	f043 0320 	orr.w	r3, r3, #32
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	f04f 30ff 	mov.w	r0, #4294967295
 800a67e:	e7f3      	b.n	800a668 <__ssrefill_r+0x22>

0800a680 <__ssvfiscanf_r>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a68a:	2100      	movs	r1, #0
 800a68c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a690:	49a6      	ldr	r1, [pc, #664]	; (800a92c <__ssvfiscanf_r+0x2ac>)
 800a692:	91a0      	str	r1, [sp, #640]	; 0x280
 800a694:	f10d 0804 	add.w	r8, sp, #4
 800a698:	49a5      	ldr	r1, [pc, #660]	; (800a930 <__ssvfiscanf_r+0x2b0>)
 800a69a:	4fa6      	ldr	r7, [pc, #664]	; (800a934 <__ssvfiscanf_r+0x2b4>)
 800a69c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a938 <__ssvfiscanf_r+0x2b8>
 800a6a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	91a1      	str	r1, [sp, #644]	; 0x284
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	7813      	ldrb	r3, [r2, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 815a 	beq.w	800a966 <__ssvfiscanf_r+0x2e6>
 800a6b2:	5dd9      	ldrb	r1, [r3, r7]
 800a6b4:	f011 0108 	ands.w	r1, r1, #8
 800a6b8:	f102 0501 	add.w	r5, r2, #1
 800a6bc:	d019      	beq.n	800a6f2 <__ssvfiscanf_r+0x72>
 800a6be:	6863      	ldr	r3, [r4, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dd0f      	ble.n	800a6e4 <__ssvfiscanf_r+0x64>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	781a      	ldrb	r2, [r3, #0]
 800a6c8:	5cba      	ldrb	r2, [r7, r2]
 800a6ca:	0712      	lsls	r2, r2, #28
 800a6cc:	d401      	bmi.n	800a6d2 <__ssvfiscanf_r+0x52>
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	e7eb      	b.n	800a6aa <__ssvfiscanf_r+0x2a>
 800a6d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a6d4:	3201      	adds	r2, #1
 800a6d6:	9245      	str	r2, [sp, #276]	; 0x114
 800a6d8:	6862      	ldr	r2, [r4, #4]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	3a01      	subs	r2, #1
 800a6de:	6062      	str	r2, [r4, #4]
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	e7ec      	b.n	800a6be <__ssvfiscanf_r+0x3e>
 800a6e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	4798      	blx	r3
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d0e9      	beq.n	800a6c4 <__ssvfiscanf_r+0x44>
 800a6f0:	e7ed      	b.n	800a6ce <__ssvfiscanf_r+0x4e>
 800a6f2:	2b25      	cmp	r3, #37	; 0x25
 800a6f4:	d012      	beq.n	800a71c <__ssvfiscanf_r+0x9c>
 800a6f6:	469a      	mov	sl, r3
 800a6f8:	6863      	ldr	r3, [r4, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f340 8091 	ble.w	800a822 <__ssvfiscanf_r+0x1a2>
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	7813      	ldrb	r3, [r2, #0]
 800a704:	4553      	cmp	r3, sl
 800a706:	f040 812e 	bne.w	800a966 <__ssvfiscanf_r+0x2e6>
 800a70a:	6863      	ldr	r3, [r4, #4]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	6063      	str	r3, [r4, #4]
 800a710:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a712:	3201      	adds	r2, #1
 800a714:	3301      	adds	r3, #1
 800a716:	6022      	str	r2, [r4, #0]
 800a718:	9345      	str	r3, [sp, #276]	; 0x114
 800a71a:	e7d8      	b.n	800a6ce <__ssvfiscanf_r+0x4e>
 800a71c:	9141      	str	r1, [sp, #260]	; 0x104
 800a71e:	9143      	str	r1, [sp, #268]	; 0x10c
 800a720:	7853      	ldrb	r3, [r2, #1]
 800a722:	2b2a      	cmp	r3, #42	; 0x2a
 800a724:	bf02      	ittt	eq
 800a726:	2310      	moveq	r3, #16
 800a728:	1c95      	addeq	r5, r2, #2
 800a72a:	9341      	streq	r3, [sp, #260]	; 0x104
 800a72c:	220a      	movs	r2, #10
 800a72e:	46aa      	mov	sl, r5
 800a730:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a734:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a738:	2b09      	cmp	r3, #9
 800a73a:	d91d      	bls.n	800a778 <__ssvfiscanf_r+0xf8>
 800a73c:	487e      	ldr	r0, [pc, #504]	; (800a938 <__ssvfiscanf_r+0x2b8>)
 800a73e:	2203      	movs	r2, #3
 800a740:	f7f5 fd5e 	bl	8000200 <memchr>
 800a744:	b140      	cbz	r0, 800a758 <__ssvfiscanf_r+0xd8>
 800a746:	2301      	movs	r3, #1
 800a748:	eba0 0009 	sub.w	r0, r0, r9
 800a74c:	fa03 f000 	lsl.w	r0, r3, r0
 800a750:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a752:	4318      	orrs	r0, r3
 800a754:	9041      	str	r0, [sp, #260]	; 0x104
 800a756:	4655      	mov	r5, sl
 800a758:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a75c:	2b78      	cmp	r3, #120	; 0x78
 800a75e:	d806      	bhi.n	800a76e <__ssvfiscanf_r+0xee>
 800a760:	2b57      	cmp	r3, #87	; 0x57
 800a762:	d810      	bhi.n	800a786 <__ssvfiscanf_r+0x106>
 800a764:	2b25      	cmp	r3, #37	; 0x25
 800a766:	d0c6      	beq.n	800a6f6 <__ssvfiscanf_r+0x76>
 800a768:	d856      	bhi.n	800a818 <__ssvfiscanf_r+0x198>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d064      	beq.n	800a838 <__ssvfiscanf_r+0x1b8>
 800a76e:	2303      	movs	r3, #3
 800a770:	9347      	str	r3, [sp, #284]	; 0x11c
 800a772:	230a      	movs	r3, #10
 800a774:	9342      	str	r3, [sp, #264]	; 0x108
 800a776:	e071      	b.n	800a85c <__ssvfiscanf_r+0x1dc>
 800a778:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a77a:	fb02 1103 	mla	r1, r2, r3, r1
 800a77e:	3930      	subs	r1, #48	; 0x30
 800a780:	9143      	str	r1, [sp, #268]	; 0x10c
 800a782:	4655      	mov	r5, sl
 800a784:	e7d3      	b.n	800a72e <__ssvfiscanf_r+0xae>
 800a786:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a78a:	2a20      	cmp	r2, #32
 800a78c:	d8ef      	bhi.n	800a76e <__ssvfiscanf_r+0xee>
 800a78e:	a101      	add	r1, pc, #4	; (adr r1, 800a794 <__ssvfiscanf_r+0x114>)
 800a790:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a794:	0800a847 	.word	0x0800a847
 800a798:	0800a76f 	.word	0x0800a76f
 800a79c:	0800a76f 	.word	0x0800a76f
 800a7a0:	0800a8a5 	.word	0x0800a8a5
 800a7a4:	0800a76f 	.word	0x0800a76f
 800a7a8:	0800a76f 	.word	0x0800a76f
 800a7ac:	0800a76f 	.word	0x0800a76f
 800a7b0:	0800a76f 	.word	0x0800a76f
 800a7b4:	0800a76f 	.word	0x0800a76f
 800a7b8:	0800a76f 	.word	0x0800a76f
 800a7bc:	0800a76f 	.word	0x0800a76f
 800a7c0:	0800a8bb 	.word	0x0800a8bb
 800a7c4:	0800a891 	.word	0x0800a891
 800a7c8:	0800a81f 	.word	0x0800a81f
 800a7cc:	0800a81f 	.word	0x0800a81f
 800a7d0:	0800a81f 	.word	0x0800a81f
 800a7d4:	0800a76f 	.word	0x0800a76f
 800a7d8:	0800a895 	.word	0x0800a895
 800a7dc:	0800a76f 	.word	0x0800a76f
 800a7e0:	0800a76f 	.word	0x0800a76f
 800a7e4:	0800a76f 	.word	0x0800a76f
 800a7e8:	0800a76f 	.word	0x0800a76f
 800a7ec:	0800a8cb 	.word	0x0800a8cb
 800a7f0:	0800a89d 	.word	0x0800a89d
 800a7f4:	0800a83f 	.word	0x0800a83f
 800a7f8:	0800a76f 	.word	0x0800a76f
 800a7fc:	0800a76f 	.word	0x0800a76f
 800a800:	0800a8c7 	.word	0x0800a8c7
 800a804:	0800a76f 	.word	0x0800a76f
 800a808:	0800a891 	.word	0x0800a891
 800a80c:	0800a76f 	.word	0x0800a76f
 800a810:	0800a76f 	.word	0x0800a76f
 800a814:	0800a847 	.word	0x0800a847
 800a818:	3b45      	subs	r3, #69	; 0x45
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d8a7      	bhi.n	800a76e <__ssvfiscanf_r+0xee>
 800a81e:	2305      	movs	r3, #5
 800a820:	e01b      	b.n	800a85a <__ssvfiscanf_r+0x1da>
 800a822:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a824:	4621      	mov	r1, r4
 800a826:	4630      	mov	r0, r6
 800a828:	4798      	blx	r3
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f43f af68 	beq.w	800a700 <__ssvfiscanf_r+0x80>
 800a830:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a832:	2800      	cmp	r0, #0
 800a834:	f040 808d 	bne.w	800a952 <__ssvfiscanf_r+0x2d2>
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	e08f      	b.n	800a95e <__ssvfiscanf_r+0x2de>
 800a83e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a840:	f042 0220 	orr.w	r2, r2, #32
 800a844:	9241      	str	r2, [sp, #260]	; 0x104
 800a846:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a84c:	9241      	str	r2, [sp, #260]	; 0x104
 800a84e:	2210      	movs	r2, #16
 800a850:	2b6f      	cmp	r3, #111	; 0x6f
 800a852:	9242      	str	r2, [sp, #264]	; 0x108
 800a854:	bf34      	ite	cc
 800a856:	2303      	movcc	r3, #3
 800a858:	2304      	movcs	r3, #4
 800a85a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a85c:	6863      	ldr	r3, [r4, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd42      	ble.n	800a8e8 <__ssvfiscanf_r+0x268>
 800a862:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a864:	0659      	lsls	r1, r3, #25
 800a866:	d404      	bmi.n	800a872 <__ssvfiscanf_r+0x1f2>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	781a      	ldrb	r2, [r3, #0]
 800a86c:	5cba      	ldrb	r2, [r7, r2]
 800a86e:	0712      	lsls	r2, r2, #28
 800a870:	d441      	bmi.n	800a8f6 <__ssvfiscanf_r+0x276>
 800a872:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a874:	2b02      	cmp	r3, #2
 800a876:	dc50      	bgt.n	800a91a <__ssvfiscanf_r+0x29a>
 800a878:	466b      	mov	r3, sp
 800a87a:	4622      	mov	r2, r4
 800a87c:	a941      	add	r1, sp, #260	; 0x104
 800a87e:	4630      	mov	r0, r6
 800a880:	f000 f9d0 	bl	800ac24 <_scanf_chars>
 800a884:	2801      	cmp	r0, #1
 800a886:	d06e      	beq.n	800a966 <__ssvfiscanf_r+0x2e6>
 800a888:	2802      	cmp	r0, #2
 800a88a:	f47f af20 	bne.w	800a6ce <__ssvfiscanf_r+0x4e>
 800a88e:	e7cf      	b.n	800a830 <__ssvfiscanf_r+0x1b0>
 800a890:	220a      	movs	r2, #10
 800a892:	e7dd      	b.n	800a850 <__ssvfiscanf_r+0x1d0>
 800a894:	2300      	movs	r3, #0
 800a896:	9342      	str	r3, [sp, #264]	; 0x108
 800a898:	2303      	movs	r3, #3
 800a89a:	e7de      	b.n	800a85a <__ssvfiscanf_r+0x1da>
 800a89c:	2308      	movs	r3, #8
 800a89e:	9342      	str	r3, [sp, #264]	; 0x108
 800a8a0:	2304      	movs	r3, #4
 800a8a2:	e7da      	b.n	800a85a <__ssvfiscanf_r+0x1da>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	f000 fb30 	bl	800af0c <__sccl>
 800a8ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b2:	9341      	str	r3, [sp, #260]	; 0x104
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e7cf      	b.n	800a85a <__ssvfiscanf_r+0x1da>
 800a8ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c0:	9341      	str	r3, [sp, #260]	; 0x104
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e7c9      	b.n	800a85a <__ssvfiscanf_r+0x1da>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e7c7      	b.n	800a85a <__ssvfiscanf_r+0x1da>
 800a8ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a8cc:	06c3      	lsls	r3, r0, #27
 800a8ce:	f53f aefe 	bmi.w	800a6ce <__ssvfiscanf_r+0x4e>
 800a8d2:	9b00      	ldr	r3, [sp, #0]
 800a8d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8d6:	1d19      	adds	r1, r3, #4
 800a8d8:	9100      	str	r1, [sp, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f010 0f01 	tst.w	r0, #1
 800a8e0:	bf14      	ite	ne
 800a8e2:	801a      	strhne	r2, [r3, #0]
 800a8e4:	601a      	streq	r2, [r3, #0]
 800a8e6:	e6f2      	b.n	800a6ce <__ssvfiscanf_r+0x4e>
 800a8e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	4798      	blx	r3
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d0b6      	beq.n	800a862 <__ssvfiscanf_r+0x1e2>
 800a8f4:	e79c      	b.n	800a830 <__ssvfiscanf_r+0x1b0>
 800a8f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8f8:	3201      	adds	r2, #1
 800a8fa:	9245      	str	r2, [sp, #276]	; 0x114
 800a8fc:	6862      	ldr	r2, [r4, #4]
 800a8fe:	3a01      	subs	r2, #1
 800a900:	2a00      	cmp	r2, #0
 800a902:	6062      	str	r2, [r4, #4]
 800a904:	dd02      	ble.n	800a90c <__ssvfiscanf_r+0x28c>
 800a906:	3301      	adds	r3, #1
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	e7ad      	b.n	800a868 <__ssvfiscanf_r+0x1e8>
 800a90c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a90e:	4621      	mov	r1, r4
 800a910:	4630      	mov	r0, r6
 800a912:	4798      	blx	r3
 800a914:	2800      	cmp	r0, #0
 800a916:	d0a7      	beq.n	800a868 <__ssvfiscanf_r+0x1e8>
 800a918:	e78a      	b.n	800a830 <__ssvfiscanf_r+0x1b0>
 800a91a:	2b04      	cmp	r3, #4
 800a91c:	dc0e      	bgt.n	800a93c <__ssvfiscanf_r+0x2bc>
 800a91e:	466b      	mov	r3, sp
 800a920:	4622      	mov	r2, r4
 800a922:	a941      	add	r1, sp, #260	; 0x104
 800a924:	4630      	mov	r0, r6
 800a926:	f000 f9d7 	bl	800acd8 <_scanf_i>
 800a92a:	e7ab      	b.n	800a884 <__ssvfiscanf_r+0x204>
 800a92c:	0800a5cd 	.word	0x0800a5cd
 800a930:	0800a647 	.word	0x0800a647
 800a934:	0800b537 	.word	0x0800b537
 800a938:	0800b884 	.word	0x0800b884
 800a93c:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <__ssvfiscanf_r+0x2ec>)
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f43f aec5 	beq.w	800a6ce <__ssvfiscanf_r+0x4e>
 800a944:	466b      	mov	r3, sp
 800a946:	4622      	mov	r2, r4
 800a948:	a941      	add	r1, sp, #260	; 0x104
 800a94a:	4630      	mov	r0, r6
 800a94c:	f3af 8000 	nop.w
 800a950:	e798      	b.n	800a884 <__ssvfiscanf_r+0x204>
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a958:	bf18      	it	ne
 800a95a:	f04f 30ff 	movne.w	r0, #4294967295
 800a95e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a966:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a968:	e7f9      	b.n	800a95e <__ssvfiscanf_r+0x2de>
 800a96a:	bf00      	nop
 800a96c:	00000000 	.word	0x00000000

0800a970 <__sfputc_r>:
 800a970:	6893      	ldr	r3, [r2, #8]
 800a972:	3b01      	subs	r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	b410      	push	{r4}
 800a978:	6093      	str	r3, [r2, #8]
 800a97a:	da08      	bge.n	800a98e <__sfputc_r+0x1e>
 800a97c:	6994      	ldr	r4, [r2, #24]
 800a97e:	42a3      	cmp	r3, r4
 800a980:	db01      	blt.n	800a986 <__sfputc_r+0x16>
 800a982:	290a      	cmp	r1, #10
 800a984:	d103      	bne.n	800a98e <__sfputc_r+0x1e>
 800a986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a98a:	f7fd bff9 	b.w	8008980 <__swbuf_r>
 800a98e:	6813      	ldr	r3, [r2, #0]
 800a990:	1c58      	adds	r0, r3, #1
 800a992:	6010      	str	r0, [r2, #0]
 800a994:	7019      	strb	r1, [r3, #0]
 800a996:	4608      	mov	r0, r1
 800a998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <__sfputs_r>:
 800a99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	460f      	mov	r7, r1
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	18d5      	adds	r5, r2, r3
 800a9a8:	42ac      	cmp	r4, r5
 800a9aa:	d101      	bne.n	800a9b0 <__sfputs_r+0x12>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	e007      	b.n	800a9c0 <__sfputs_r+0x22>
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	463a      	mov	r2, r7
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7ff ffda 	bl	800a970 <__sfputc_r>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d1f3      	bne.n	800a9a8 <__sfputs_r+0xa>
 800a9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9c4 <_vfiprintf_r>:
 800a9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	460d      	mov	r5, r1
 800a9ca:	b09d      	sub	sp, #116	; 0x74
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	4698      	mov	r8, r3
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	b118      	cbz	r0, 800a9dc <_vfiprintf_r+0x18>
 800a9d4:	6983      	ldr	r3, [r0, #24]
 800a9d6:	b90b      	cbnz	r3, 800a9dc <_vfiprintf_r+0x18>
 800a9d8:	f7ff f84a 	bl	8009a70 <__sinit>
 800a9dc:	4b89      	ldr	r3, [pc, #548]	; (800ac04 <_vfiprintf_r+0x240>)
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	d11b      	bne.n	800aa1a <_vfiprintf_r+0x56>
 800a9e2:	6875      	ldr	r5, [r6, #4]
 800a9e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9e6:	07d9      	lsls	r1, r3, #31
 800a9e8:	d405      	bmi.n	800a9f6 <_vfiprintf_r+0x32>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	059a      	lsls	r2, r3, #22
 800a9ee:	d402      	bmi.n	800a9f6 <_vfiprintf_r+0x32>
 800a9f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9f2:	f7ff f8e0 	bl	8009bb6 <__retarget_lock_acquire_recursive>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	071b      	lsls	r3, r3, #28
 800a9fa:	d501      	bpl.n	800aa00 <_vfiprintf_r+0x3c>
 800a9fc:	692b      	ldr	r3, [r5, #16]
 800a9fe:	b9eb      	cbnz	r3, 800aa3c <_vfiprintf_r+0x78>
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7fe f820 	bl	8008a48 <__swsetup_r>
 800aa08:	b1c0      	cbz	r0, 800aa3c <_vfiprintf_r+0x78>
 800aa0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa0c:	07dc      	lsls	r4, r3, #31
 800aa0e:	d50e      	bpl.n	800aa2e <_vfiprintf_r+0x6a>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	b01d      	add	sp, #116	; 0x74
 800aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1a:	4b7b      	ldr	r3, [pc, #492]	; (800ac08 <_vfiprintf_r+0x244>)
 800aa1c:	429d      	cmp	r5, r3
 800aa1e:	d101      	bne.n	800aa24 <_vfiprintf_r+0x60>
 800aa20:	68b5      	ldr	r5, [r6, #8]
 800aa22:	e7df      	b.n	800a9e4 <_vfiprintf_r+0x20>
 800aa24:	4b79      	ldr	r3, [pc, #484]	; (800ac0c <_vfiprintf_r+0x248>)
 800aa26:	429d      	cmp	r5, r3
 800aa28:	bf08      	it	eq
 800aa2a:	68f5      	ldreq	r5, [r6, #12]
 800aa2c:	e7da      	b.n	800a9e4 <_vfiprintf_r+0x20>
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	0598      	lsls	r0, r3, #22
 800aa32:	d4ed      	bmi.n	800aa10 <_vfiprintf_r+0x4c>
 800aa34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa36:	f7ff f8bf 	bl	8009bb8 <__retarget_lock_release_recursive>
 800aa3a:	e7e9      	b.n	800aa10 <_vfiprintf_r+0x4c>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa40:	2320      	movs	r3, #32
 800aa42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa46:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa4a:	2330      	movs	r3, #48	; 0x30
 800aa4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac10 <_vfiprintf_r+0x24c>
 800aa50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa54:	f04f 0901 	mov.w	r9, #1
 800aa58:	4623      	mov	r3, r4
 800aa5a:	469a      	mov	sl, r3
 800aa5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa60:	b10a      	cbz	r2, 800aa66 <_vfiprintf_r+0xa2>
 800aa62:	2a25      	cmp	r2, #37	; 0x25
 800aa64:	d1f9      	bne.n	800aa5a <_vfiprintf_r+0x96>
 800aa66:	ebba 0b04 	subs.w	fp, sl, r4
 800aa6a:	d00b      	beq.n	800aa84 <_vfiprintf_r+0xc0>
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	4622      	mov	r2, r4
 800aa70:	4629      	mov	r1, r5
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ff93 	bl	800a99e <__sfputs_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	f000 80aa 	beq.w	800abd2 <_vfiprintf_r+0x20e>
 800aa7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa80:	445a      	add	r2, fp
 800aa82:	9209      	str	r2, [sp, #36]	; 0x24
 800aa84:	f89a 3000 	ldrb.w	r3, [sl]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 80a2 	beq.w	800abd2 <_vfiprintf_r+0x20e>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa98:	f10a 0a01 	add.w	sl, sl, #1
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa4:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa6:	4654      	mov	r4, sl
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaae:	4858      	ldr	r0, [pc, #352]	; (800ac10 <_vfiprintf_r+0x24c>)
 800aab0:	f7f5 fba6 	bl	8000200 <memchr>
 800aab4:	9a04      	ldr	r2, [sp, #16]
 800aab6:	b9d8      	cbnz	r0, 800aaf0 <_vfiprintf_r+0x12c>
 800aab8:	06d1      	lsls	r1, r2, #27
 800aaba:	bf44      	itt	mi
 800aabc:	2320      	movmi	r3, #32
 800aabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac2:	0713      	lsls	r3, r2, #28
 800aac4:	bf44      	itt	mi
 800aac6:	232b      	movmi	r3, #43	; 0x2b
 800aac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aacc:	f89a 3000 	ldrb.w	r3, [sl]
 800aad0:	2b2a      	cmp	r3, #42	; 0x2a
 800aad2:	d015      	beq.n	800ab00 <_vfiprintf_r+0x13c>
 800aad4:	9a07      	ldr	r2, [sp, #28]
 800aad6:	4654      	mov	r4, sl
 800aad8:	2000      	movs	r0, #0
 800aada:	f04f 0c0a 	mov.w	ip, #10
 800aade:	4621      	mov	r1, r4
 800aae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae4:	3b30      	subs	r3, #48	; 0x30
 800aae6:	2b09      	cmp	r3, #9
 800aae8:	d94e      	bls.n	800ab88 <_vfiprintf_r+0x1c4>
 800aaea:	b1b0      	cbz	r0, 800ab1a <_vfiprintf_r+0x156>
 800aaec:	9207      	str	r2, [sp, #28]
 800aaee:	e014      	b.n	800ab1a <_vfiprintf_r+0x156>
 800aaf0:	eba0 0308 	sub.w	r3, r0, r8
 800aaf4:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	46a2      	mov	sl, r4
 800aafe:	e7d2      	b.n	800aaa6 <_vfiprintf_r+0xe2>
 800ab00:	9b03      	ldr	r3, [sp, #12]
 800ab02:	1d19      	adds	r1, r3, #4
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	9103      	str	r1, [sp, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbb      	ittet	lt
 800ab0c:	425b      	neglt	r3, r3
 800ab0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab12:	9307      	strge	r3, [sp, #28]
 800ab14:	9307      	strlt	r3, [sp, #28]
 800ab16:	bfb8      	it	lt
 800ab18:	9204      	strlt	r2, [sp, #16]
 800ab1a:	7823      	ldrb	r3, [r4, #0]
 800ab1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab1e:	d10c      	bne.n	800ab3a <_vfiprintf_r+0x176>
 800ab20:	7863      	ldrb	r3, [r4, #1]
 800ab22:	2b2a      	cmp	r3, #42	; 0x2a
 800ab24:	d135      	bne.n	800ab92 <_vfiprintf_r+0x1ce>
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	9203      	str	r2, [sp, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bfb8      	it	lt
 800ab32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab36:	3402      	adds	r4, #2
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac20 <_vfiprintf_r+0x25c>
 800ab3e:	7821      	ldrb	r1, [r4, #0]
 800ab40:	2203      	movs	r2, #3
 800ab42:	4650      	mov	r0, sl
 800ab44:	f7f5 fb5c 	bl	8000200 <memchr>
 800ab48:	b140      	cbz	r0, 800ab5c <_vfiprintf_r+0x198>
 800ab4a:	2340      	movs	r3, #64	; 0x40
 800ab4c:	eba0 000a 	sub.w	r0, r0, sl
 800ab50:	fa03 f000 	lsl.w	r0, r3, r0
 800ab54:	9b04      	ldr	r3, [sp, #16]
 800ab56:	4303      	orrs	r3, r0
 800ab58:	3401      	adds	r4, #1
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab60:	482c      	ldr	r0, [pc, #176]	; (800ac14 <_vfiprintf_r+0x250>)
 800ab62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab66:	2206      	movs	r2, #6
 800ab68:	f7f5 fb4a 	bl	8000200 <memchr>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d03f      	beq.n	800abf0 <_vfiprintf_r+0x22c>
 800ab70:	4b29      	ldr	r3, [pc, #164]	; (800ac18 <_vfiprintf_r+0x254>)
 800ab72:	bb1b      	cbnz	r3, 800abbc <_vfiprintf_r+0x1f8>
 800ab74:	9b03      	ldr	r3, [sp, #12]
 800ab76:	3307      	adds	r3, #7
 800ab78:	f023 0307 	bic.w	r3, r3, #7
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	9303      	str	r3, [sp, #12]
 800ab80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab82:	443b      	add	r3, r7
 800ab84:	9309      	str	r3, [sp, #36]	; 0x24
 800ab86:	e767      	b.n	800aa58 <_vfiprintf_r+0x94>
 800ab88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	2001      	movs	r0, #1
 800ab90:	e7a5      	b.n	800aade <_vfiprintf_r+0x11a>
 800ab92:	2300      	movs	r3, #0
 800ab94:	3401      	adds	r4, #1
 800ab96:	9305      	str	r3, [sp, #20]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	f04f 0c0a 	mov.w	ip, #10
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba4:	3a30      	subs	r2, #48	; 0x30
 800aba6:	2a09      	cmp	r2, #9
 800aba8:	d903      	bls.n	800abb2 <_vfiprintf_r+0x1ee>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0c5      	beq.n	800ab3a <_vfiprintf_r+0x176>
 800abae:	9105      	str	r1, [sp, #20]
 800abb0:	e7c3      	b.n	800ab3a <_vfiprintf_r+0x176>
 800abb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb6:	4604      	mov	r4, r0
 800abb8:	2301      	movs	r3, #1
 800abba:	e7f0      	b.n	800ab9e <_vfiprintf_r+0x1da>
 800abbc:	ab03      	add	r3, sp, #12
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	462a      	mov	r2, r5
 800abc2:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <_vfiprintf_r+0x258>)
 800abc4:	a904      	add	r1, sp, #16
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7fd f970 	bl	8007eac <_printf_float>
 800abcc:	4607      	mov	r7, r0
 800abce:	1c78      	adds	r0, r7, #1
 800abd0:	d1d6      	bne.n	800ab80 <_vfiprintf_r+0x1bc>
 800abd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd4:	07d9      	lsls	r1, r3, #31
 800abd6:	d405      	bmi.n	800abe4 <_vfiprintf_r+0x220>
 800abd8:	89ab      	ldrh	r3, [r5, #12]
 800abda:	059a      	lsls	r2, r3, #22
 800abdc:	d402      	bmi.n	800abe4 <_vfiprintf_r+0x220>
 800abde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abe0:	f7fe ffea 	bl	8009bb8 <__retarget_lock_release_recursive>
 800abe4:	89ab      	ldrh	r3, [r5, #12]
 800abe6:	065b      	lsls	r3, r3, #25
 800abe8:	f53f af12 	bmi.w	800aa10 <_vfiprintf_r+0x4c>
 800abec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abee:	e711      	b.n	800aa14 <_vfiprintf_r+0x50>
 800abf0:	ab03      	add	r3, sp, #12
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	462a      	mov	r2, r5
 800abf6:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <_vfiprintf_r+0x258>)
 800abf8:	a904      	add	r1, sp, #16
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7fd fbfa 	bl	80083f4 <_printf_i>
 800ac00:	e7e4      	b.n	800abcc <_vfiprintf_r+0x208>
 800ac02:	bf00      	nop
 800ac04:	0800b6e8 	.word	0x0800b6e8
 800ac08:	0800b708 	.word	0x0800b708
 800ac0c:	0800b6c8 	.word	0x0800b6c8
 800ac10:	0800b888 	.word	0x0800b888
 800ac14:	0800b88e 	.word	0x0800b88e
 800ac18:	08007ead 	.word	0x08007ead
 800ac1c:	0800a99f 	.word	0x0800a99f
 800ac20:	0800b884 	.word	0x0800b884

0800ac24 <_scanf_chars>:
 800ac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac28:	4615      	mov	r5, r2
 800ac2a:	688a      	ldr	r2, [r1, #8]
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	b932      	cbnz	r2, 800ac40 <_scanf_chars+0x1c>
 800ac32:	698a      	ldr	r2, [r1, #24]
 800ac34:	2a00      	cmp	r2, #0
 800ac36:	bf0c      	ite	eq
 800ac38:	2201      	moveq	r2, #1
 800ac3a:	f04f 32ff 	movne.w	r2, #4294967295
 800ac3e:	608a      	str	r2, [r1, #8]
 800ac40:	6822      	ldr	r2, [r4, #0]
 800ac42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800acd4 <_scanf_chars+0xb0>
 800ac46:	06d1      	lsls	r1, r2, #27
 800ac48:	bf5f      	itttt	pl
 800ac4a:	681a      	ldrpl	r2, [r3, #0]
 800ac4c:	1d11      	addpl	r1, r2, #4
 800ac4e:	6019      	strpl	r1, [r3, #0]
 800ac50:	6816      	ldrpl	r6, [r2, #0]
 800ac52:	2700      	movs	r7, #0
 800ac54:	69a0      	ldr	r0, [r4, #24]
 800ac56:	b188      	cbz	r0, 800ac7c <_scanf_chars+0x58>
 800ac58:	2801      	cmp	r0, #1
 800ac5a:	d107      	bne.n	800ac6c <_scanf_chars+0x48>
 800ac5c:	682a      	ldr	r2, [r5, #0]
 800ac5e:	7811      	ldrb	r1, [r2, #0]
 800ac60:	6962      	ldr	r2, [r4, #20]
 800ac62:	5c52      	ldrb	r2, [r2, r1]
 800ac64:	b952      	cbnz	r2, 800ac7c <_scanf_chars+0x58>
 800ac66:	2f00      	cmp	r7, #0
 800ac68:	d031      	beq.n	800acce <_scanf_chars+0xaa>
 800ac6a:	e022      	b.n	800acb2 <_scanf_chars+0x8e>
 800ac6c:	2802      	cmp	r0, #2
 800ac6e:	d120      	bne.n	800acb2 <_scanf_chars+0x8e>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ac78:	071b      	lsls	r3, r3, #28
 800ac7a:	d41a      	bmi.n	800acb2 <_scanf_chars+0x8e>
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	06da      	lsls	r2, r3, #27
 800ac80:	bf5e      	ittt	pl
 800ac82:	682b      	ldrpl	r3, [r5, #0]
 800ac84:	781b      	ldrbpl	r3, [r3, #0]
 800ac86:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ac8a:	682a      	ldr	r2, [r5, #0]
 800ac8c:	686b      	ldr	r3, [r5, #4]
 800ac8e:	3201      	adds	r2, #1
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	68a2      	ldr	r2, [r4, #8]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	3a01      	subs	r2, #1
 800ac98:	606b      	str	r3, [r5, #4]
 800ac9a:	3701      	adds	r7, #1
 800ac9c:	60a2      	str	r2, [r4, #8]
 800ac9e:	b142      	cbz	r2, 800acb2 <_scanf_chars+0x8e>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dcd7      	bgt.n	800ac54 <_scanf_chars+0x30>
 800aca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aca8:	4629      	mov	r1, r5
 800acaa:	4640      	mov	r0, r8
 800acac:	4798      	blx	r3
 800acae:	2800      	cmp	r0, #0
 800acb0:	d0d0      	beq.n	800ac54 <_scanf_chars+0x30>
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	f013 0310 	ands.w	r3, r3, #16
 800acb8:	d105      	bne.n	800acc6 <_scanf_chars+0xa2>
 800acba:	68e2      	ldr	r2, [r4, #12]
 800acbc:	3201      	adds	r2, #1
 800acbe:	60e2      	str	r2, [r4, #12]
 800acc0:	69a2      	ldr	r2, [r4, #24]
 800acc2:	b102      	cbz	r2, 800acc6 <_scanf_chars+0xa2>
 800acc4:	7033      	strb	r3, [r6, #0]
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	443b      	add	r3, r7
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	2000      	movs	r0, #0
 800acce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd2:	bf00      	nop
 800acd4:	0800b537 	.word	0x0800b537

0800acd8 <_scanf_i>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	4698      	mov	r8, r3
 800acde:	4b76      	ldr	r3, [pc, #472]	; (800aeb8 <_scanf_i+0x1e0>)
 800ace0:	460c      	mov	r4, r1
 800ace2:	4682      	mov	sl, r0
 800ace4:	4616      	mov	r6, r2
 800ace6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800acea:	b087      	sub	sp, #28
 800acec:	ab03      	add	r3, sp, #12
 800acee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800acf2:	4b72      	ldr	r3, [pc, #456]	; (800aebc <_scanf_i+0x1e4>)
 800acf4:	69a1      	ldr	r1, [r4, #24]
 800acf6:	4a72      	ldr	r2, [pc, #456]	; (800aec0 <_scanf_i+0x1e8>)
 800acf8:	2903      	cmp	r1, #3
 800acfa:	bf18      	it	ne
 800acfc:	461a      	movne	r2, r3
 800acfe:	68a3      	ldr	r3, [r4, #8]
 800ad00:	9201      	str	r2, [sp, #4]
 800ad02:	1e5a      	subs	r2, r3, #1
 800ad04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad08:	bf88      	it	hi
 800ad0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad0e:	4627      	mov	r7, r4
 800ad10:	bf82      	ittt	hi
 800ad12:	eb03 0905 	addhi.w	r9, r3, r5
 800ad16:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad1a:	60a3      	strhi	r3, [r4, #8]
 800ad1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ad20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ad24:	bf98      	it	ls
 800ad26:	f04f 0900 	movls.w	r9, #0
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	463d      	mov	r5, r7
 800ad2e:	f04f 0b00 	mov.w	fp, #0
 800ad32:	6831      	ldr	r1, [r6, #0]
 800ad34:	ab03      	add	r3, sp, #12
 800ad36:	7809      	ldrb	r1, [r1, #0]
 800ad38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	f7f5 fa5f 	bl	8000200 <memchr>
 800ad42:	b328      	cbz	r0, 800ad90 <_scanf_i+0xb8>
 800ad44:	f1bb 0f01 	cmp.w	fp, #1
 800ad48:	d159      	bne.n	800adfe <_scanf_i+0x126>
 800ad4a:	6862      	ldr	r2, [r4, #4]
 800ad4c:	b92a      	cbnz	r2, 800ad5a <_scanf_i+0x82>
 800ad4e:	6822      	ldr	r2, [r4, #0]
 800ad50:	2308      	movs	r3, #8
 800ad52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad56:	6063      	str	r3, [r4, #4]
 800ad58:	6022      	str	r2, [r4, #0]
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ad60:	6022      	str	r2, [r4, #0]
 800ad62:	68a2      	ldr	r2, [r4, #8]
 800ad64:	1e51      	subs	r1, r2, #1
 800ad66:	60a1      	str	r1, [r4, #8]
 800ad68:	b192      	cbz	r2, 800ad90 <_scanf_i+0xb8>
 800ad6a:	6832      	ldr	r2, [r6, #0]
 800ad6c:	1c51      	adds	r1, r2, #1
 800ad6e:	6031      	str	r1, [r6, #0]
 800ad70:	7812      	ldrb	r2, [r2, #0]
 800ad72:	f805 2b01 	strb.w	r2, [r5], #1
 800ad76:	6872      	ldr	r2, [r6, #4]
 800ad78:	3a01      	subs	r2, #1
 800ad7a:	2a00      	cmp	r2, #0
 800ad7c:	6072      	str	r2, [r6, #4]
 800ad7e:	dc07      	bgt.n	800ad90 <_scanf_i+0xb8>
 800ad80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ad84:	4631      	mov	r1, r6
 800ad86:	4650      	mov	r0, sl
 800ad88:	4790      	blx	r2
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f040 8085 	bne.w	800ae9a <_scanf_i+0x1c2>
 800ad90:	f10b 0b01 	add.w	fp, fp, #1
 800ad94:	f1bb 0f03 	cmp.w	fp, #3
 800ad98:	d1cb      	bne.n	800ad32 <_scanf_i+0x5a>
 800ad9a:	6863      	ldr	r3, [r4, #4]
 800ad9c:	b90b      	cbnz	r3, 800ada2 <_scanf_i+0xca>
 800ad9e:	230a      	movs	r3, #10
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	4947      	ldr	r1, [pc, #284]	; (800aec4 <_scanf_i+0x1ec>)
 800ada6:	6960      	ldr	r0, [r4, #20]
 800ada8:	1ac9      	subs	r1, r1, r3
 800adaa:	f000 f8af 	bl	800af0c <__sccl>
 800adae:	f04f 0b00 	mov.w	fp, #0
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	6822      	ldr	r2, [r4, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d03d      	beq.n	800ae36 <_scanf_i+0x15e>
 800adba:	6831      	ldr	r1, [r6, #0]
 800adbc:	6960      	ldr	r0, [r4, #20]
 800adbe:	f891 c000 	ldrb.w	ip, [r1]
 800adc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d035      	beq.n	800ae36 <_scanf_i+0x15e>
 800adca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800adce:	d124      	bne.n	800ae1a <_scanf_i+0x142>
 800add0:	0510      	lsls	r0, r2, #20
 800add2:	d522      	bpl.n	800ae1a <_scanf_i+0x142>
 800add4:	f10b 0b01 	add.w	fp, fp, #1
 800add8:	f1b9 0f00 	cmp.w	r9, #0
 800addc:	d003      	beq.n	800ade6 <_scanf_i+0x10e>
 800adde:	3301      	adds	r3, #1
 800ade0:	f109 39ff 	add.w	r9, r9, #4294967295
 800ade4:	60a3      	str	r3, [r4, #8]
 800ade6:	6873      	ldr	r3, [r6, #4]
 800ade8:	3b01      	subs	r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	6073      	str	r3, [r6, #4]
 800adee:	dd1b      	ble.n	800ae28 <_scanf_i+0x150>
 800adf0:	6833      	ldr	r3, [r6, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	6033      	str	r3, [r6, #0]
 800adf6:	68a3      	ldr	r3, [r4, #8]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	60a3      	str	r3, [r4, #8]
 800adfc:	e7d9      	b.n	800adb2 <_scanf_i+0xda>
 800adfe:	f1bb 0f02 	cmp.w	fp, #2
 800ae02:	d1ae      	bne.n	800ad62 <_scanf_i+0x8a>
 800ae04:	6822      	ldr	r2, [r4, #0]
 800ae06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ae0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ae0e:	d1bf      	bne.n	800ad90 <_scanf_i+0xb8>
 800ae10:	2310      	movs	r3, #16
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae18:	e7a2      	b.n	800ad60 <_scanf_i+0x88>
 800ae1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ae1e:	6022      	str	r2, [r4, #0]
 800ae20:	780b      	ldrb	r3, [r1, #0]
 800ae22:	f805 3b01 	strb.w	r3, [r5], #1
 800ae26:	e7de      	b.n	800ade6 <_scanf_i+0x10e>
 800ae28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	4650      	mov	r0, sl
 800ae30:	4798      	blx	r3
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d0df      	beq.n	800adf6 <_scanf_i+0x11e>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	05db      	lsls	r3, r3, #23
 800ae3a:	d50d      	bpl.n	800ae58 <_scanf_i+0x180>
 800ae3c:	42bd      	cmp	r5, r7
 800ae3e:	d909      	bls.n	800ae54 <_scanf_i+0x17c>
 800ae40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ae44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae48:	4632      	mov	r2, r6
 800ae4a:	4650      	mov	r0, sl
 800ae4c:	4798      	blx	r3
 800ae4e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ae52:	464d      	mov	r5, r9
 800ae54:	42bd      	cmp	r5, r7
 800ae56:	d02d      	beq.n	800aeb4 <_scanf_i+0x1dc>
 800ae58:	6822      	ldr	r2, [r4, #0]
 800ae5a:	f012 0210 	ands.w	r2, r2, #16
 800ae5e:	d113      	bne.n	800ae88 <_scanf_i+0x1b0>
 800ae60:	702a      	strb	r2, [r5, #0]
 800ae62:	6863      	ldr	r3, [r4, #4]
 800ae64:	9e01      	ldr	r6, [sp, #4]
 800ae66:	4639      	mov	r1, r7
 800ae68:	4650      	mov	r0, sl
 800ae6a:	47b0      	blx	r6
 800ae6c:	6821      	ldr	r1, [r4, #0]
 800ae6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae72:	f011 0f20 	tst.w	r1, #32
 800ae76:	d013      	beq.n	800aea0 <_scanf_i+0x1c8>
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	f8c8 2000 	str.w	r2, [r8]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6018      	str	r0, [r3, #0]
 800ae82:	68e3      	ldr	r3, [r4, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	60e3      	str	r3, [r4, #12]
 800ae88:	1bed      	subs	r5, r5, r7
 800ae8a:	44ab      	add	fp, r5
 800ae8c:	6925      	ldr	r5, [r4, #16]
 800ae8e:	445d      	add	r5, fp
 800ae90:	6125      	str	r5, [r4, #16]
 800ae92:	2000      	movs	r0, #0
 800ae94:	b007      	add	sp, #28
 800ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9a:	f04f 0b00 	mov.w	fp, #0
 800ae9e:	e7ca      	b.n	800ae36 <_scanf_i+0x15e>
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	f8c8 2000 	str.w	r2, [r8]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f011 0f01 	tst.w	r1, #1
 800aeac:	bf14      	ite	ne
 800aeae:	8018      	strhne	r0, [r3, #0]
 800aeb0:	6018      	streq	r0, [r3, #0]
 800aeb2:	e7e6      	b.n	800ae82 <_scanf_i+0x1aa>
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	e7ed      	b.n	800ae94 <_scanf_i+0x1bc>
 800aeb8:	0800b444 	.word	0x0800b444
 800aebc:	0800b061 	.word	0x0800b061
 800aec0:	08008969 	.word	0x08008969
 800aec4:	0800b8ae 	.word	0x0800b8ae

0800aec8 <_read_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d07      	ldr	r5, [pc, #28]	; (800aee8 <_read_r+0x20>)
 800aecc:	4604      	mov	r4, r0
 800aece:	4608      	mov	r0, r1
 800aed0:	4611      	mov	r1, r2
 800aed2:	2200      	movs	r2, #0
 800aed4:	602a      	str	r2, [r5, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	f7f7 fc16 	bl	8002708 <_read>
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	d102      	bne.n	800aee6 <_read_r+0x1e>
 800aee0:	682b      	ldr	r3, [r5, #0]
 800aee2:	b103      	cbz	r3, 800aee6 <_read_r+0x1e>
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	200007ac 	.word	0x200007ac

0800aeec <_sbrk_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d06      	ldr	r5, [pc, #24]	; (800af08 <_sbrk_r+0x1c>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	f7f7 fc74 	bl	80027e4 <_sbrk>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_sbrk_r+0x1a>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_sbrk_r+0x1a>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	200007ac 	.word	0x200007ac

0800af0c <__sccl>:
 800af0c:	b570      	push	{r4, r5, r6, lr}
 800af0e:	780b      	ldrb	r3, [r1, #0]
 800af10:	4604      	mov	r4, r0
 800af12:	2b5e      	cmp	r3, #94	; 0x5e
 800af14:	bf0b      	itete	eq
 800af16:	784b      	ldrbeq	r3, [r1, #1]
 800af18:	1c48      	addne	r0, r1, #1
 800af1a:	1c88      	addeq	r0, r1, #2
 800af1c:	2200      	movne	r2, #0
 800af1e:	bf08      	it	eq
 800af20:	2201      	moveq	r2, #1
 800af22:	1e61      	subs	r1, r4, #1
 800af24:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800af28:	f801 2f01 	strb.w	r2, [r1, #1]!
 800af2c:	42a9      	cmp	r1, r5
 800af2e:	d1fb      	bne.n	800af28 <__sccl+0x1c>
 800af30:	b90b      	cbnz	r3, 800af36 <__sccl+0x2a>
 800af32:	3801      	subs	r0, #1
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	f082 0201 	eor.w	r2, r2, #1
 800af3a:	54e2      	strb	r2, [r4, r3]
 800af3c:	4605      	mov	r5, r0
 800af3e:	4628      	mov	r0, r5
 800af40:	f810 1b01 	ldrb.w	r1, [r0], #1
 800af44:	292d      	cmp	r1, #45	; 0x2d
 800af46:	d006      	beq.n	800af56 <__sccl+0x4a>
 800af48:	295d      	cmp	r1, #93	; 0x5d
 800af4a:	d0f3      	beq.n	800af34 <__sccl+0x28>
 800af4c:	b909      	cbnz	r1, 800af52 <__sccl+0x46>
 800af4e:	4628      	mov	r0, r5
 800af50:	e7f0      	b.n	800af34 <__sccl+0x28>
 800af52:	460b      	mov	r3, r1
 800af54:	e7f1      	b.n	800af3a <__sccl+0x2e>
 800af56:	786e      	ldrb	r6, [r5, #1]
 800af58:	2e5d      	cmp	r6, #93	; 0x5d
 800af5a:	d0fa      	beq.n	800af52 <__sccl+0x46>
 800af5c:	42b3      	cmp	r3, r6
 800af5e:	dcf8      	bgt.n	800af52 <__sccl+0x46>
 800af60:	3502      	adds	r5, #2
 800af62:	4619      	mov	r1, r3
 800af64:	3101      	adds	r1, #1
 800af66:	428e      	cmp	r6, r1
 800af68:	5462      	strb	r2, [r4, r1]
 800af6a:	dcfb      	bgt.n	800af64 <__sccl+0x58>
 800af6c:	1af1      	subs	r1, r6, r3
 800af6e:	3901      	subs	r1, #1
 800af70:	1c58      	adds	r0, r3, #1
 800af72:	42b3      	cmp	r3, r6
 800af74:	bfa8      	it	ge
 800af76:	2100      	movge	r1, #0
 800af78:	1843      	adds	r3, r0, r1
 800af7a:	e7e0      	b.n	800af3e <__sccl+0x32>

0800af7c <_strtoul_l.constprop.0>:
 800af7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af80:	4f36      	ldr	r7, [pc, #216]	; (800b05c <_strtoul_l.constprop.0+0xe0>)
 800af82:	4686      	mov	lr, r0
 800af84:	460d      	mov	r5, r1
 800af86:	4628      	mov	r0, r5
 800af88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af8c:	5de6      	ldrb	r6, [r4, r7]
 800af8e:	f016 0608 	ands.w	r6, r6, #8
 800af92:	d1f8      	bne.n	800af86 <_strtoul_l.constprop.0+0xa>
 800af94:	2c2d      	cmp	r4, #45	; 0x2d
 800af96:	d12f      	bne.n	800aff8 <_strtoul_l.constprop.0+0x7c>
 800af98:	782c      	ldrb	r4, [r5, #0]
 800af9a:	2601      	movs	r6, #1
 800af9c:	1c85      	adds	r5, r0, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d057      	beq.n	800b052 <_strtoul_l.constprop.0+0xd6>
 800afa2:	2b10      	cmp	r3, #16
 800afa4:	d109      	bne.n	800afba <_strtoul_l.constprop.0+0x3e>
 800afa6:	2c30      	cmp	r4, #48	; 0x30
 800afa8:	d107      	bne.n	800afba <_strtoul_l.constprop.0+0x3e>
 800afaa:	7828      	ldrb	r0, [r5, #0]
 800afac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800afb0:	2858      	cmp	r0, #88	; 0x58
 800afb2:	d149      	bne.n	800b048 <_strtoul_l.constprop.0+0xcc>
 800afb4:	786c      	ldrb	r4, [r5, #1]
 800afb6:	2310      	movs	r3, #16
 800afb8:	3502      	adds	r5, #2
 800afba:	f04f 38ff 	mov.w	r8, #4294967295
 800afbe:	2700      	movs	r7, #0
 800afc0:	fbb8 f8f3 	udiv	r8, r8, r3
 800afc4:	fb03 f908 	mul.w	r9, r3, r8
 800afc8:	ea6f 0909 	mvn.w	r9, r9
 800afcc:	4638      	mov	r0, r7
 800afce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800afd2:	f1bc 0f09 	cmp.w	ip, #9
 800afd6:	d814      	bhi.n	800b002 <_strtoul_l.constprop.0+0x86>
 800afd8:	4664      	mov	r4, ip
 800afda:	42a3      	cmp	r3, r4
 800afdc:	dd22      	ble.n	800b024 <_strtoul_l.constprop.0+0xa8>
 800afde:	2f00      	cmp	r7, #0
 800afe0:	db1d      	blt.n	800b01e <_strtoul_l.constprop.0+0xa2>
 800afe2:	4580      	cmp	r8, r0
 800afe4:	d31b      	bcc.n	800b01e <_strtoul_l.constprop.0+0xa2>
 800afe6:	d101      	bne.n	800afec <_strtoul_l.constprop.0+0x70>
 800afe8:	45a1      	cmp	r9, r4
 800afea:	db18      	blt.n	800b01e <_strtoul_l.constprop.0+0xa2>
 800afec:	fb00 4003 	mla	r0, r0, r3, r4
 800aff0:	2701      	movs	r7, #1
 800aff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aff6:	e7ea      	b.n	800afce <_strtoul_l.constprop.0+0x52>
 800aff8:	2c2b      	cmp	r4, #43	; 0x2b
 800affa:	bf04      	itt	eq
 800affc:	782c      	ldrbeq	r4, [r5, #0]
 800affe:	1c85      	addeq	r5, r0, #2
 800b000:	e7cd      	b.n	800af9e <_strtoul_l.constprop.0+0x22>
 800b002:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b006:	f1bc 0f19 	cmp.w	ip, #25
 800b00a:	d801      	bhi.n	800b010 <_strtoul_l.constprop.0+0x94>
 800b00c:	3c37      	subs	r4, #55	; 0x37
 800b00e:	e7e4      	b.n	800afda <_strtoul_l.constprop.0+0x5e>
 800b010:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b014:	f1bc 0f19 	cmp.w	ip, #25
 800b018:	d804      	bhi.n	800b024 <_strtoul_l.constprop.0+0xa8>
 800b01a:	3c57      	subs	r4, #87	; 0x57
 800b01c:	e7dd      	b.n	800afda <_strtoul_l.constprop.0+0x5e>
 800b01e:	f04f 37ff 	mov.w	r7, #4294967295
 800b022:	e7e6      	b.n	800aff2 <_strtoul_l.constprop.0+0x76>
 800b024:	2f00      	cmp	r7, #0
 800b026:	da07      	bge.n	800b038 <_strtoul_l.constprop.0+0xbc>
 800b028:	2322      	movs	r3, #34	; 0x22
 800b02a:	f8ce 3000 	str.w	r3, [lr]
 800b02e:	f04f 30ff 	mov.w	r0, #4294967295
 800b032:	b932      	cbnz	r2, 800b042 <_strtoul_l.constprop.0+0xc6>
 800b034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b038:	b106      	cbz	r6, 800b03c <_strtoul_l.constprop.0+0xc0>
 800b03a:	4240      	negs	r0, r0
 800b03c:	2a00      	cmp	r2, #0
 800b03e:	d0f9      	beq.n	800b034 <_strtoul_l.constprop.0+0xb8>
 800b040:	b107      	cbz	r7, 800b044 <_strtoul_l.constprop.0+0xc8>
 800b042:	1e69      	subs	r1, r5, #1
 800b044:	6011      	str	r1, [r2, #0]
 800b046:	e7f5      	b.n	800b034 <_strtoul_l.constprop.0+0xb8>
 800b048:	2430      	movs	r4, #48	; 0x30
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1b5      	bne.n	800afba <_strtoul_l.constprop.0+0x3e>
 800b04e:	2308      	movs	r3, #8
 800b050:	e7b3      	b.n	800afba <_strtoul_l.constprop.0+0x3e>
 800b052:	2c30      	cmp	r4, #48	; 0x30
 800b054:	d0a9      	beq.n	800afaa <_strtoul_l.constprop.0+0x2e>
 800b056:	230a      	movs	r3, #10
 800b058:	e7af      	b.n	800afba <_strtoul_l.constprop.0+0x3e>
 800b05a:	bf00      	nop
 800b05c:	0800b537 	.word	0x0800b537

0800b060 <_strtoul_r>:
 800b060:	f7ff bf8c 	b.w	800af7c <_strtoul_l.constprop.0>

0800b064 <__submore>:
 800b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b068:	460c      	mov	r4, r1
 800b06a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b070:	4299      	cmp	r1, r3
 800b072:	d11d      	bne.n	800b0b0 <__submore+0x4c>
 800b074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b078:	f7ff fa34 	bl	800a4e4 <_malloc_r>
 800b07c:	b918      	cbnz	r0, 800b086 <__submore+0x22>
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b08a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b08c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b090:	6360      	str	r0, [r4, #52]	; 0x34
 800b092:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b096:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b09a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b09e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b0a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b0a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b0aa:	6020      	str	r0, [r4, #0]
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e7e8      	b.n	800b082 <__submore+0x1e>
 800b0b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b0b2:	0077      	lsls	r7, r6, #1
 800b0b4:	463a      	mov	r2, r7
 800b0b6:	f000 f87f 	bl	800b1b8 <_realloc_r>
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d0de      	beq.n	800b07e <__submore+0x1a>
 800b0c0:	eb00 0806 	add.w	r8, r0, r6
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	4632      	mov	r2, r6
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	f7fe fdf7 	bl	8009cbc <memcpy>
 800b0ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b0d2:	f8c4 8000 	str.w	r8, [r4]
 800b0d6:	e7e9      	b.n	800b0ac <__submore+0x48>

0800b0d8 <__assert_func>:
 800b0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0da:	4614      	mov	r4, r2
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4b09      	ldr	r3, [pc, #36]	; (800b104 <__assert_func+0x2c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	68d8      	ldr	r0, [r3, #12]
 800b0e6:	b14c      	cbz	r4, 800b0fc <__assert_func+0x24>
 800b0e8:	4b07      	ldr	r3, [pc, #28]	; (800b108 <__assert_func+0x30>)
 800b0ea:	9100      	str	r1, [sp, #0]
 800b0ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0f0:	4906      	ldr	r1, [pc, #24]	; (800b10c <__assert_func+0x34>)
 800b0f2:	462b      	mov	r3, r5
 800b0f4:	f000 f80e 	bl	800b114 <fiprintf>
 800b0f8:	f000 f89a 	bl	800b230 <abort>
 800b0fc:	4b04      	ldr	r3, [pc, #16]	; (800b110 <__assert_func+0x38>)
 800b0fe:	461c      	mov	r4, r3
 800b100:	e7f3      	b.n	800b0ea <__assert_func+0x12>
 800b102:	bf00      	nop
 800b104:	2000000c 	.word	0x2000000c
 800b108:	0800b8b0 	.word	0x0800b8b0
 800b10c:	0800b8bd 	.word	0x0800b8bd
 800b110:	0800b8eb 	.word	0x0800b8eb

0800b114 <fiprintf>:
 800b114:	b40e      	push	{r1, r2, r3}
 800b116:	b503      	push	{r0, r1, lr}
 800b118:	4601      	mov	r1, r0
 800b11a:	ab03      	add	r3, sp, #12
 800b11c:	4805      	ldr	r0, [pc, #20]	; (800b134 <fiprintf+0x20>)
 800b11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b122:	6800      	ldr	r0, [r0, #0]
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	f7ff fc4d 	bl	800a9c4 <_vfiprintf_r>
 800b12a:	b002      	add	sp, #8
 800b12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b130:	b003      	add	sp, #12
 800b132:	4770      	bx	lr
 800b134:	2000000c 	.word	0x2000000c

0800b138 <_fstat_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4d07      	ldr	r5, [pc, #28]	; (800b158 <_fstat_r+0x20>)
 800b13c:	2300      	movs	r3, #0
 800b13e:	4604      	mov	r4, r0
 800b140:	4608      	mov	r0, r1
 800b142:	4611      	mov	r1, r2
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	f7f7 fb24 	bl	8002792 <_fstat>
 800b14a:	1c43      	adds	r3, r0, #1
 800b14c:	d102      	bne.n	800b154 <_fstat_r+0x1c>
 800b14e:	682b      	ldr	r3, [r5, #0]
 800b150:	b103      	cbz	r3, 800b154 <_fstat_r+0x1c>
 800b152:	6023      	str	r3, [r4, #0]
 800b154:	bd38      	pop	{r3, r4, r5, pc}
 800b156:	bf00      	nop
 800b158:	200007ac 	.word	0x200007ac

0800b15c <_isatty_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d06      	ldr	r5, [pc, #24]	; (800b178 <_isatty_r+0x1c>)
 800b160:	2300      	movs	r3, #0
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	602b      	str	r3, [r5, #0]
 800b168:	f7f7 fb23 	bl	80027b2 <_isatty>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d102      	bne.n	800b176 <_isatty_r+0x1a>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	b103      	cbz	r3, 800b176 <_isatty_r+0x1a>
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	200007ac 	.word	0x200007ac

0800b17c <__ascii_mbtowc>:
 800b17c:	b082      	sub	sp, #8
 800b17e:	b901      	cbnz	r1, 800b182 <__ascii_mbtowc+0x6>
 800b180:	a901      	add	r1, sp, #4
 800b182:	b142      	cbz	r2, 800b196 <__ascii_mbtowc+0x1a>
 800b184:	b14b      	cbz	r3, 800b19a <__ascii_mbtowc+0x1e>
 800b186:	7813      	ldrb	r3, [r2, #0]
 800b188:	600b      	str	r3, [r1, #0]
 800b18a:	7812      	ldrb	r2, [r2, #0]
 800b18c:	1e10      	subs	r0, r2, #0
 800b18e:	bf18      	it	ne
 800b190:	2001      	movne	r0, #1
 800b192:	b002      	add	sp, #8
 800b194:	4770      	bx	lr
 800b196:	4610      	mov	r0, r2
 800b198:	e7fb      	b.n	800b192 <__ascii_mbtowc+0x16>
 800b19a:	f06f 0001 	mvn.w	r0, #1
 800b19e:	e7f8      	b.n	800b192 <__ascii_mbtowc+0x16>

0800b1a0 <__malloc_lock>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	; (800b1a8 <__malloc_lock+0x8>)
 800b1a2:	f7fe bd08 	b.w	8009bb6 <__retarget_lock_acquire_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	200007a0 	.word	0x200007a0

0800b1ac <__malloc_unlock>:
 800b1ac:	4801      	ldr	r0, [pc, #4]	; (800b1b4 <__malloc_unlock+0x8>)
 800b1ae:	f7fe bd03 	b.w	8009bb8 <__retarget_lock_release_recursive>
 800b1b2:	bf00      	nop
 800b1b4:	200007a0 	.word	0x200007a0

0800b1b8 <_realloc_r>:
 800b1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1bc:	4680      	mov	r8, r0
 800b1be:	4614      	mov	r4, r2
 800b1c0:	460e      	mov	r6, r1
 800b1c2:	b921      	cbnz	r1, 800b1ce <_realloc_r+0x16>
 800b1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	f7ff b98b 	b.w	800a4e4 <_malloc_r>
 800b1ce:	b92a      	cbnz	r2, 800b1dc <_realloc_r+0x24>
 800b1d0:	f7ff f91c 	bl	800a40c <_free_r>
 800b1d4:	4625      	mov	r5, r4
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1dc:	f000 f82f 	bl	800b23e <_malloc_usable_size_r>
 800b1e0:	4284      	cmp	r4, r0
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	d802      	bhi.n	800b1ec <_realloc_r+0x34>
 800b1e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1ea:	d812      	bhi.n	800b212 <_realloc_r+0x5a>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	f7ff f978 	bl	800a4e4 <_malloc_r>
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d0ed      	beq.n	800b1d6 <_realloc_r+0x1e>
 800b1fa:	42bc      	cmp	r4, r7
 800b1fc:	4622      	mov	r2, r4
 800b1fe:	4631      	mov	r1, r6
 800b200:	bf28      	it	cs
 800b202:	463a      	movcs	r2, r7
 800b204:	f7fe fd5a 	bl	8009cbc <memcpy>
 800b208:	4631      	mov	r1, r6
 800b20a:	4640      	mov	r0, r8
 800b20c:	f7ff f8fe 	bl	800a40c <_free_r>
 800b210:	e7e1      	b.n	800b1d6 <_realloc_r+0x1e>
 800b212:	4635      	mov	r5, r6
 800b214:	e7df      	b.n	800b1d6 <_realloc_r+0x1e>

0800b216 <__ascii_wctomb>:
 800b216:	b149      	cbz	r1, 800b22c <__ascii_wctomb+0x16>
 800b218:	2aff      	cmp	r2, #255	; 0xff
 800b21a:	bf85      	ittet	hi
 800b21c:	238a      	movhi	r3, #138	; 0x8a
 800b21e:	6003      	strhi	r3, [r0, #0]
 800b220:	700a      	strbls	r2, [r1, #0]
 800b222:	f04f 30ff 	movhi.w	r0, #4294967295
 800b226:	bf98      	it	ls
 800b228:	2001      	movls	r0, #1
 800b22a:	4770      	bx	lr
 800b22c:	4608      	mov	r0, r1
 800b22e:	4770      	bx	lr

0800b230 <abort>:
 800b230:	b508      	push	{r3, lr}
 800b232:	2006      	movs	r0, #6
 800b234:	f000 f834 	bl	800b2a0 <raise>
 800b238:	2001      	movs	r0, #1
 800b23a:	f7f7 fa5b 	bl	80026f4 <_exit>

0800b23e <_malloc_usable_size_r>:
 800b23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b242:	1f18      	subs	r0, r3, #4
 800b244:	2b00      	cmp	r3, #0
 800b246:	bfbc      	itt	lt
 800b248:	580b      	ldrlt	r3, [r1, r0]
 800b24a:	18c0      	addlt	r0, r0, r3
 800b24c:	4770      	bx	lr

0800b24e <_raise_r>:
 800b24e:	291f      	cmp	r1, #31
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4604      	mov	r4, r0
 800b254:	460d      	mov	r5, r1
 800b256:	d904      	bls.n	800b262 <_raise_r+0x14>
 800b258:	2316      	movs	r3, #22
 800b25a:	6003      	str	r3, [r0, #0]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	bd38      	pop	{r3, r4, r5, pc}
 800b262:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b264:	b112      	cbz	r2, 800b26c <_raise_r+0x1e>
 800b266:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b26a:	b94b      	cbnz	r3, 800b280 <_raise_r+0x32>
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 f831 	bl	800b2d4 <_getpid_r>
 800b272:	462a      	mov	r2, r5
 800b274:	4601      	mov	r1, r0
 800b276:	4620      	mov	r0, r4
 800b278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27c:	f000 b818 	b.w	800b2b0 <_kill_r>
 800b280:	2b01      	cmp	r3, #1
 800b282:	d00a      	beq.n	800b29a <_raise_r+0x4c>
 800b284:	1c59      	adds	r1, r3, #1
 800b286:	d103      	bne.n	800b290 <_raise_r+0x42>
 800b288:	2316      	movs	r3, #22
 800b28a:	6003      	str	r3, [r0, #0]
 800b28c:	2001      	movs	r0, #1
 800b28e:	e7e7      	b.n	800b260 <_raise_r+0x12>
 800b290:	2400      	movs	r4, #0
 800b292:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b296:	4628      	mov	r0, r5
 800b298:	4798      	blx	r3
 800b29a:	2000      	movs	r0, #0
 800b29c:	e7e0      	b.n	800b260 <_raise_r+0x12>
	...

0800b2a0 <raise>:
 800b2a0:	4b02      	ldr	r3, [pc, #8]	; (800b2ac <raise+0xc>)
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f7ff bfd2 	b.w	800b24e <_raise_r>
 800b2aa:	bf00      	nop
 800b2ac:	2000000c 	.word	0x2000000c

0800b2b0 <_kill_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d07      	ldr	r5, [pc, #28]	; (800b2d0 <_kill_r+0x20>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	f7f7 fa09 	bl	80026d4 <_kill>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	d102      	bne.n	800b2cc <_kill_r+0x1c>
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	b103      	cbz	r3, 800b2cc <_kill_r+0x1c>
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200007ac 	.word	0x200007ac

0800b2d4 <_getpid_r>:
 800b2d4:	f7f7 b9f6 	b.w	80026c4 <_getpid>

0800b2d8 <_init>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	bf00      	nop
 800b2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2de:	bc08      	pop	{r3}
 800b2e0:	469e      	mov	lr, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <_fini>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr
