
IdanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006084  08006084  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800608c  0800608c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000074  08006108  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08006108  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a9f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284b  00000000  00000000  00032b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00035390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  000363e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028504  00000000  00000000  00037318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001329c  00000000  00000000  0005f81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d71  00000000  00000000  00072ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168829  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aec  00000000  00000000  0016887c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005eac 	.word	0x08005eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005eac 	.word	0x08005eac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <buttonInit>:
extern  TIM_HandleTypeDef htim3;



void buttonInit(Button* button, ButtonName name, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	607a      	str	r2, [r7, #4]
 800057e:	461a      	mov	r2, r3
 8000580:	460b      	mov	r3, r1
 8000582:	72fb      	strb	r3, [r7, #11]
 8000584:	4613      	mov	r3, r2
 8000586:	813b      	strh	r3, [r7, #8]
	button->name = name;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	7afa      	ldrb	r2, [r7, #11]
 800058c:	701a      	strb	r2, [r3, #0]
	button->gpioPort = gpioPort;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]
	button->gpioPin = gpioPin;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	893a      	ldrh	r2, [r7, #8]
 8000598:	811a      	strh	r2, [r3, #8]
	button->pressTime = 0;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
	button->btState=BUTTON_STATE_NONE;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	741a      	strb	r2, [r3, #16]
	button->waitToSecondPress=0;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
	button->counter=0;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <getButtonState>:


Button_STATE  getButtonState(Button* bt)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	return bt->btState;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7c1b      	ldrb	r3, [r3, #16]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <changeButtonStateToNone>:

void changeButtonStateToNone(Button *bt){
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	bt->btState=BUTTON_STATE_NONE;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	741a      	strb	r2, [r3, #16]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <buttonOnInterrupt>:

void buttonOnInterrupt(Button* button, uint16_t pin)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	if (pin == button->gpioPin) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	891b      	ldrh	r3, [r3, #8]
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	429a      	cmp	r2, r3
 8000604:	d12c      	bne.n	8000660 <buttonOnInterrupt+0x70>
		if (HAL_GPIO_ReadPin(button->gpioPort, button->gpioPin) == 0) {
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685a      	ldr	r2, [r3, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	891b      	ldrh	r3, [r3, #8]
 800060e:	4619      	mov	r1, r3
 8000610:	4610      	mov	r0, r2
 8000612:	f001 f9db 	bl	80019cc <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d104      	bne.n	8000626 <buttonOnInterrupt+0x36>
			button->pressTime = myClock.tickCount;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <buttonOnInterrupt+0x78>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60da      	str	r2, [r3, #12]


		}

	}
}
 8000624:	e01c      	b.n	8000660 <buttonOnInterrupt+0x70>
			button->counter=0;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
			if (myClock.tickCount - button->pressTime > LONG_PRESS_MS) {
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <buttonOnInterrupt+0x78>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800063a:	d903      	bls.n	8000644 <buttonOnInterrupt+0x54>
				button->btState=BUTTON_STATE_LONG_PRESS;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2202      	movs	r2, #2
 8000640:	741a      	strb	r2, [r3, #16]
}
 8000642:	e00d      	b.n	8000660 <buttonOnInterrupt+0x70>
			else if (button->waitToSecondPress) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d006      	beq.n	800065a <buttonOnInterrupt+0x6a>
				button->btState=BUTTON_STATE_DOUBLE_PRESS;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2203      	movs	r2, #3
 8000650:	741a      	strb	r2, [r3, #16]
				button->waitToSecondPress=0;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
}
 8000658:	e002      	b.n	8000660 <buttonOnInterrupt+0x70>
				button->waitToSecondPress = 1;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	619a      	str	r2, [r3, #24]
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000098 	.word	0x20000098

0800066c <buttonTimerInterrupt>:

void buttonTimerInterrupt(Button* bt){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(bt->waitToSecondPress){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00f      	beq.n	800069c <buttonTimerInterrupt+0x30>
		bt->counter++;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	615a      	str	r2, [r3, #20]
		if(bt->counter>300){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800068e:	dd05      	ble.n	800069c <buttonTimerInterrupt+0x30>
			bt->btState=BUTTON_STATE_PRESS;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	741a      	strb	r2, [r3, #16]
			bt->waitToSecondPress=0;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
		}
	}
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <buzzerInit>:
const int Notes[] = {NOTE_1_G, NOTE_1_E, NOTE_1_E, NOTE_1_F, NOTE_1_D, NOTE_1_D, NOTE_1_C, NOTE_1_D, NOTE_1_E, NOTE_1_F, NOTE_1_G, NOTE_1_G, NOTE_1_G};
const int Lengths[] = {LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_2};
int len=sizeof(Notes)/sizeof(Notes[i]);

void buzzerInit(Buzzer * buzzer)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]


	buzzer->counter=0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
	buzzer->maxCounter=1000/Lengths[0];
 80006b6:	2304      	movs	r3, #4
 80006b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006bc:	fb92 f2f3 	sdiv	r2, r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	605a      	str	r2, [r3, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	721a      	strb	r2, [r3, #8]

}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <BuzzerInterrupt>:


void BuzzerInterrupt(Buzzer * buzzer){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

	if(buzzer->bzState !=BUZZER_STATE_ON){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d14b      	bne.n	8000780 <BuzzerInterrupt+0xa8>
		return;
	}
	buzzer->counter++;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	601a      	str	r2, [r3, #0]
	if (buzzer->counter < buzzer->maxCounter) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	db42      	blt.n	8000784 <BuzzerInterrupt+0xac>
		return;
	}

	reload=(100000/Notes[i])-1;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <BuzzerInterrupt+0xb8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <BuzzerInterrupt+0xbc>)
 8000704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000708:	4a23      	ldr	r2, [pc, #140]	; (8000798 <BuzzerInterrupt+0xc0>)
 800070a:	fb92 f3f3 	sdiv	r3, r2, r3
 800070e:	3b01      	subs	r3, #1
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <BuzzerInterrupt+0xc4>)
 8000712:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <BuzzerInterrupt+0xc8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, reload);
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <BuzzerInterrupt+0xc4>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <BuzzerInterrupt+0xc8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <BuzzerInterrupt+0xc4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <BuzzerInterrupt+0xc8>)
 800072e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, reload/2);
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <BuzzerInterrupt+0xc4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	0fda      	lsrs	r2, r3, #31
 8000736:	4413      	add	r3, r2
 8000738:	105b      	asrs	r3, r3, #1
 800073a:	461a      	mov	r2, r3
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <BuzzerInterrupt+0xc8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	635a      	str	r2, [r3, #52]	; 0x34

	if(i==(len-1)){
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <BuzzerInterrupt+0xcc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <BuzzerInterrupt+0xb8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d103      	bne.n	8000758 <BuzzerInterrupt+0x80>
		i=0;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <BuzzerInterrupt+0xb8>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e004      	b.n	8000762 <BuzzerInterrupt+0x8a>
	}
	else{
		i++;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <BuzzerInterrupt+0xb8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <BuzzerInterrupt+0xb8>)
 8000760:	6013      	str	r3, [r2, #0]
	}

	buzzer->maxCounter=1000/Lengths[i];
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <BuzzerInterrupt+0xb8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <BuzzerInterrupt+0xd0>)
 8000768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000770:	fb92 f2f3 	sdiv	r2, r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	605a      	str	r2, [r3, #4]
	buzzer->counter=0;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e002      	b.n	8000786 <BuzzerInterrupt+0xae>
		return;
 8000780:	bf00      	nop
 8000782:	e000      	b.n	8000786 <BuzzerInterrupt+0xae>
		return;
 8000784:	bf00      	nop

}
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	20000090 	.word	0x20000090
 8000794:	08005f3c 	.word	0x08005f3c
 8000798:	000186a0 	.word	0x000186a0
 800079c:	20000094 	.word	0x20000094
 80007a0:	20000108 	.word	0x20000108
 80007a4:	20000000 	.word	0x20000000
 80007a8:	08005f70 	.word	0x08005f70

080007ac <changeBuzzerToOn>:

void changeBuzzerToOn(Buzzer * buzzer){
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_ON;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2201      	movs	r2, #1
 80007b8:	721a      	strb	r2, [r3, #8]

}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <changeBuzzerToOff>:

void changeBuzzerToOff(Buzzer * buzzer){
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	721a      	strb	r2, [r3, #8]

}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <resetBuzzer>:


void resetBuzzer(){
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	i=0;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <resetBuzzer+0x14>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]

}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000090 	.word	0x20000090

080007f8 <stopBuzzer>:

void stopBuzzer(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(&htim3);
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <stopBuzzer+0x18>)
 80007fe:	f002 fd27 	bl	8003250 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000802:	2100      	movs	r1, #0
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <stopBuzzer+0x18>)
 8000806:	f002 ff19 	bl	800363c <HAL_TIM_PWM_Stop>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000108 	.word	0x20000108

08000814 <startBuzzer>:

void startBuzzer(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000818:	2100      	movs	r1, #0
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <startBuzzer+0x18>)
 800081c:	f002 fe08 	bl	8003430 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <startBuzzer+0x18>)
 8000822:	f002 fcad 	bl	8003180 <HAL_TIM_Base_Start>

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000108 	.word	0x20000108

08000830 <ClockInit>:

#include "Clock.h"

Clock myClock;

void ClockInit(){
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	myClock.tickCount=0;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <ClockInit+0x14>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]

}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000098 	.word	0x20000098

08000848 <ledInit>:
 */

#include "Led.h"

void ledInit(LED* led, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	4613      	mov	r3, r2
 8000854:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
	led->gpioPort = gpioPort;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	60da      	str	r2, [r3, #12]
	led->gpioPin = gpioPin;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	88fa      	ldrh	r2, [r7, #6]
 8000866:	821a      	strh	r2, [r3, #16]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <ledOn>:

void ledOn(LED* led)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	led->state = STATE_FULL;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 1);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	68d8      	ldr	r0, [r3, #12]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	8a1b      	ldrh	r3, [r3, #16]
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	f001 f8b5 	bl	80019fc <HAL_GPIO_WritePin>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <ledOff>:

void ledOff(LED* led)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68d8      	ldr	r0, [r3, #12]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	8a1b      	ldrh	r3, [r3, #16]
 80008b0:	2200      	movs	r2, #0
 80008b2:	4619      	mov	r1, r3
 80008b4:	f001 f8a2 	bl	80019fc <HAL_GPIO_WritePin>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <ledBlink>:

void ledBlink(LED* led, int period)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	led->state = STATE_BLINK;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2202      	movs	r2, #2
 80008ce:	701a      	strb	r2, [r3, #0]
	led->counter = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
	led->maxCounter = period;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68d8      	ldr	r0, [r3, #12]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	8a1b      	ldrh	r3, [r3, #16]
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	f001 f888 	bl	80019fc <HAL_GPIO_WritePin>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <ledOnTimerInterrupt>:

void ledOnTimerInterrupt(LED* led)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	if (led->state == STATE_BLINK) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d115      	bne.n	8000930 <ledOnTimerInterrupt+0x3c>
		led->counter++;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	605a      	str	r2, [r3, #4]
		if (led->counter == led->maxCounter) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	429a      	cmp	r2, r3
 8000918:	d10a      	bne.n	8000930 <ledOnTimerInterrupt+0x3c>
			HAL_GPIO_TogglePin(led->gpioPort, led->gpioPin);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	8a1b      	ldrh	r3, [r3, #16]
 8000922:	4619      	mov	r1, r3
 8000924:	4610      	mov	r0, r2
 8000926:	f001 f881 	bl	8001a2c <HAL_GPIO_TogglePin>
			led->counter = 0;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
		}
	}
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <Mymain>:
Buzzer bz1;




void Mymain(){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	ledInit(&ledB, LED1_GPIO_Port, LED1_Pin);
 800093e:	2220      	movs	r2, #32
 8000940:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000944:	4851      	ldr	r0, [pc, #324]	; (8000a8c <Mymain+0x154>)
 8000946:	f7ff ff7f 	bl	8000848 <ledInit>
	ledInit(&ledR, LED2_GPIO_Port, LED2_Pin);
 800094a:	2240      	movs	r2, #64	; 0x40
 800094c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000950:	484f      	ldr	r0, [pc, #316]	; (8000a90 <Mymain+0x158>)
 8000952:	f7ff ff79 	bl	8000848 <ledInit>

	 buttonInit(&buttonSw1, BTN_SW1, SW1_GPIO_Port,  SW1_Pin);
 8000956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800095e:	2100      	movs	r1, #0
 8000960:	484c      	ldr	r0, [pc, #304]	; (8000a94 <Mymain+0x15c>)
 8000962:	f7ff fe07 	bl	8000574 <buttonInit>
	 buttonInit(&buttonSw2, BTN_SW2, SW2_GPIO_Port, SW2_Pin);
 8000966:	2308      	movs	r3, #8
 8000968:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <Mymain+0x160>)
 800096a:	2101      	movs	r1, #1
 800096c:	484b      	ldr	r0, [pc, #300]	; (8000a9c <Mymain+0x164>)
 800096e:	f7ff fe01 	bl	8000574 <buttonInit>

	 ClockInit();
 8000972:	f7ff ff5d 	bl	8000830 <ClockInit>

	 buzzerInit(&bz1);
 8000976:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <Mymain+0x168>)
 8000978:	f7ff fe96 	bl	80006a8 <buzzerInit>

	 HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f000 fe60 	bl	8001642 <HAL_NVIC_EnableIRQ>
	 HAL_TIM_Base_Start_IT(&htim6);
 8000982:	4848      	ldr	r0, [pc, #288]	; (8000aa4 <Mymain+0x16c>)
 8000984:	f002 fc8c 	bl	80032a0 <HAL_TIM_Base_Start_IT>
	 //ledOn(&ledB);

	 Button_STATE SW1State;
	 Button_STATE SW2State;
	 while(1){
		 SW1State=getButtonState(&buttonSw1);
 8000988:	4842      	ldr	r0, [pc, #264]	; (8000a94 <Mymain+0x15c>)
 800098a:	f7ff fe18 	bl	80005be <getButtonState>
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]


		 if(SW1State!=BUTTON_STATE_NONE){
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d035      	beq.n	8000a04 <Mymain+0xcc>
			 switch(SW1State){
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d833      	bhi.n	8000a06 <Mymain+0xce>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <Mymain+0x6c>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	08000a07 	.word	0x08000a07
 80009a8:	080009b5 	.word	0x080009b5
 80009ac:	080009cd 	.word	0x080009cd
 80009b0:	080009e5 	.word	0x080009e5
			 case BUTTON_STATE_PRESS:
				 //HAL_TIM_Base_Stop_IT(&htim6);
				 stopBuzzer();
 80009b4:	f7ff ff20 	bl	80007f8 <stopBuzzer>
				 printf("SW1 short press\n\r");
 80009b8:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <Mymain+0x170>)
 80009ba:	f004 fae9 	bl	8004f90 <iprintf>
				 changeButtonStateToNone(&buttonSw1);
 80009be:	4835      	ldr	r0, [pc, #212]	; (8000a94 <Mymain+0x15c>)
 80009c0:	f7ff fe09 	bl	80005d6 <changeButtonStateToNone>
				 changeBuzzerToOff(&bz1);
 80009c4:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <Mymain+0x168>)
 80009c6:	f7ff fefe 	bl	80007c6 <changeBuzzerToOff>
				 break;
 80009ca:	e01c      	b.n	8000a06 <Mymain+0xce>


			 case BUTTON_STATE_LONG_PRESS:

				 //HAL_TIM_Base_Start_IT(&htim6);
				 startBuzzer();
 80009cc:	f7ff ff22 	bl	8000814 <startBuzzer>
				 printf("SW1 long press\n\r");
 80009d0:	4836      	ldr	r0, [pc, #216]	; (8000aac <Mymain+0x174>)
 80009d2:	f004 fadd 	bl	8004f90 <iprintf>
				 changeButtonStateToNone(&buttonSw1);
 80009d6:	482f      	ldr	r0, [pc, #188]	; (8000a94 <Mymain+0x15c>)
 80009d8:	f7ff fdfd 	bl	80005d6 <changeButtonStateToNone>
				 changeBuzzerToOn(&bz1);
 80009dc:	4830      	ldr	r0, [pc, #192]	; (8000aa0 <Mymain+0x168>)
 80009de:	f7ff fee5 	bl	80007ac <changeBuzzerToOn>
				 break;
 80009e2:	e010      	b.n	8000a06 <Mymain+0xce>

			 case BUTTON_STATE_DOUBLE_PRESS:
				 printf("SW1 double press\n\r");
 80009e4:	4832      	ldr	r0, [pc, #200]	; (8000ab0 <Mymain+0x178>)
 80009e6:	f004 fad3 	bl	8004f90 <iprintf>
				 ledBlink(&ledB, 100);
 80009ea:	2164      	movs	r1, #100	; 0x64
 80009ec:	4827      	ldr	r0, [pc, #156]	; (8000a8c <Mymain+0x154>)
 80009ee:	f7ff ff67 	bl	80008c0 <ledBlink>
				 ledBlink(&ledR, 500);
 80009f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009f6:	4826      	ldr	r0, [pc, #152]	; (8000a90 <Mymain+0x158>)
 80009f8:	f7ff ff62 	bl	80008c0 <ledBlink>
				 changeButtonStateToNone(&buttonSw1);
 80009fc:	4825      	ldr	r0, [pc, #148]	; (8000a94 <Mymain+0x15c>)
 80009fe:	f7ff fdea 	bl	80005d6 <changeButtonStateToNone>
			 case BUTTON_STATE_NONE:
				 break;
 8000a02:	e000      	b.n	8000a06 <Mymain+0xce>

			 }
		 }
 8000a04:	bf00      	nop

		 SW2State=getButtonState(&buttonSw2);
 8000a06:	4825      	ldr	r0, [pc, #148]	; (8000a9c <Mymain+0x164>)
 8000a08:	f7ff fdd9 	bl	80005be <getButtonState>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71bb      	strb	r3, [r7, #6]
		 if(SW2State!=BUTTON_STATE_NONE){
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d038      	beq.n	8000a88 <Mymain+0x150>
		 	switch(SW2State){
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d8b5      	bhi.n	8000988 <Mymain+0x50>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <Mymain+0xec>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000989 	.word	0x08000989
 8000a28:	08000a35 	.word	0x08000a35
 8000a2c:	08000a4f 	.word	0x08000a4f
 8000a30:	08000a69 	.word	0x08000a69
		 	case BUTTON_STATE_PRESS:
		 		ledOn(&ledR);
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <Mymain+0x158>)
 8000a36:	f7ff ff1d 	bl	8000874 <ledOn>
		 		ledOn(&ledB);
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <Mymain+0x154>)
 8000a3c:	f7ff ff1a 	bl	8000874 <ledOn>
		 		printf("SW2 short press\n\r");
 8000a40:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <Mymain+0x17c>)
 8000a42:	f004 faa5 	bl	8004f90 <iprintf>
		 		changeButtonStateToNone(&buttonSw2);
 8000a46:	4815      	ldr	r0, [pc, #84]	; (8000a9c <Mymain+0x164>)
 8000a48:	f7ff fdc5 	bl	80005d6 <changeButtonStateToNone>
		 		break;
 8000a4c:	e01d      	b.n	8000a8a <Mymain+0x152>
		 	case BUTTON_STATE_LONG_PRESS:

		 		ledOff(&ledR);
 8000a4e:	4810      	ldr	r0, [pc, #64]	; (8000a90 <Mymain+0x158>)
 8000a50:	f7ff ff23 	bl	800089a <ledOff>
		 		ledOff(&ledB);
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <Mymain+0x154>)
 8000a56:	f7ff ff20 	bl	800089a <ledOff>
		 		printf("SW2 long press\n\r");
 8000a5a:	4817      	ldr	r0, [pc, #92]	; (8000ab8 <Mymain+0x180>)
 8000a5c:	f004 fa98 	bl	8004f90 <iprintf>
		 		changeButtonStateToNone(&buttonSw2);
 8000a60:	480e      	ldr	r0, [pc, #56]	; (8000a9c <Mymain+0x164>)
 8000a62:	f7ff fdb8 	bl	80005d6 <changeButtonStateToNone>
		 		break;
 8000a66:	e010      	b.n	8000a8a <Mymain+0x152>

		 	case BUTTON_STATE_DOUBLE_PRESS:
		 		ledBlink(&ledB, 500);
 8000a68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <Mymain+0x154>)
 8000a6e:	f7ff ff27 	bl	80008c0 <ledBlink>
		 		ledBlink(&ledR, 100);
 8000a72:	2164      	movs	r1, #100	; 0x64
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <Mymain+0x158>)
 8000a76:	f7ff ff23 	bl	80008c0 <ledBlink>
		 		printf("SW2 double press\n\r");
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <Mymain+0x184>)
 8000a7c:	f004 fa88 	bl	8004f90 <iprintf>
		 		changeButtonStateToNone(&buttonSw2);
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <Mymain+0x164>)
 8000a82:	f7ff fda8 	bl	80005d6 <changeButtonStateToNone>
		 		break;
 8000a86:	e000      	b.n	8000a8a <Mymain+0x152>
		 	case BUTTON_STATE_NONE:
		 		break;

		 	}

		 }
 8000a88:	bf00      	nop
		 SW1State=getButtonState(&buttonSw1);
 8000a8a:	e77d      	b.n	8000988 <Mymain+0x50>
 8000a8c:	2000009c 	.word	0x2000009c
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	200000c4 	.word	0x200000c4
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	200000e0 	.word	0x200000e0
 8000aa0:	200000fc 	.word	0x200000fc
 8000aa4:	20000154 	.word	0x20000154
 8000aa8:	08005ec4 	.word	0x08005ec4
 8000aac:	08005ed8 	.word	0x08005ed8
 8000ab0:	08005eec 	.word	0x08005eec
 8000ab4:	08005f00 	.word	0x08005f00
 8000ab8:	08005f14 	.word	0x08005f14
 8000abc:	08005f28 	.word	0x08005f28

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
	 }

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if(htim==&htim6){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d113      	bne.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0x38>


		ledOnTimerInterrupt(&ledB);
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ad2:	f7ff ff0f 	bl	80008f4 <ledOnTimerInterrupt>
		ledOnTimerInterrupt(&ledR);
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ad8:	f7ff ff0c 	bl	80008f4 <ledOnTimerInterrupt>


		BuzzerInterrupt(&bz1);
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ade:	f7ff fdfb 	bl	80006d8 <BuzzerInterrupt>

		myClock.tickCount++;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000aea:	6013      	str	r3, [r2, #0]
		buttonTimerInterrupt(&buttonSw1);
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000aee:	f7ff fdbd 	bl	800066c <buttonTimerInterrupt>
		buttonTimerInterrupt(&buttonSw2);
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000af4:	f7ff fdba 	bl	800066c <buttonTimerInterrupt>




	}
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000154 	.word	0x20000154
 8000b04:	2000009c 	.word	0x2000009c
 8000b08:	200000b0 	.word	0x200000b0
 8000b0c:	200000fc 	.word	0x200000fc
 8000b10:	20000098 	.word	0x20000098
 8000b14:	200000c4 	.word	0x200000c4
 8000b18:	200000e0 	.word	0x200000e0

08000b1c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	buttonOnInterrupt(&buttonSw1, pin);
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b2c:	f7ff fd60 	bl	80005f0 <buttonOnInterrupt>
	buttonOnInterrupt(&buttonSw2, pin);
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x30>)
 8000b36:	f7ff fd5b 	bl	80005f0 <buttonOnInterrupt>
	resetBuzzer();
 8000b3a:	f7ff fe51 	bl	80007e0 <resetBuzzer>





}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000c4 	.word	0x200000c4
 8000b4c:	200000e0 	.word	0x200000e0

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fc02 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f80b 	bl	8000b72 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 f91c 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b60:	f000 f8ea 	bl	8000d38 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b64:	f000 f856 	bl	8000c14 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000b68:	f000 f8b0 	bl	8000ccc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Mymain();
 8000b6c:	f7ff fee4 	bl	8000938 <Mymain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <main+0x20>

08000b72 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b096      	sub	sp, #88	; 0x58
 8000b76:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2244      	movs	r2, #68	; 0x44
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 f9fd 	bl	8004f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b98:	f000 ff88 	bl	8001aac <HAL_PWREx_ControlVoltageScaling>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ba2:	f000 f99f 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 ffbf 	bl	8001b58 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000be0:	f000 f980 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	230f      	movs	r3, #15
 8000be6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be8:	2303      	movs	r3, #3
 8000bea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fb87 	bl	8002310 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c08:	f000 f96c 	bl	8000ee4 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3758      	adds	r7, #88	; 0x58
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <MX_TIM3_Init+0xb4>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c40:	f240 321f 	movw	r2, #799	; 0x31f
 8000c44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 382;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c4e:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8000c52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c60:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c62:	f002 fb8d 	bl	8003380 <HAL_TIM_PWM_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000c6c:	f000 f93a 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000c80:	f003 fb64 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c8a:	f000 f92b 	bl	8000ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8e:	2360      	movs	r3, #96	; 0x60
 8000c90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 191;
 8000c92:	23bf      	movs	r3, #191	; 0xbf
 8000c94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000ca6:	f002 fe7f 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000cb0:	f000 f918 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_TIM3_Init+0xb0>)
 8000cb6:	f000 f98b 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000108 	.word	0x20000108
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_TIM6_Init+0x64>)
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <MX_TIM6_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_TIM6_Init+0x64>)
 8000ce4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ce8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_TIM6_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_TIM6_Init+0x64>)
 8000cf2:	220a      	movs	r2, #10
 8000cf4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_TIM6_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_TIM6_Init+0x64>)
 8000cfe:	f002 f9e7 	bl	80030d0 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d08:	f000 f8ec 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_TIM6_Init+0x64>)
 8000d1a:	f003 fb17 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f000 f8de 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000154 	.word	0x20000154
 8000d34:	40001000 	.word	0x40001000

08000d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_USART2_UART_Init+0x5c>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART2_UART_Init+0x58>)
 8000d7c:	f003 fb8c 	bl	8004498 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 f8ad 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001a0 	.word	0x200001a0
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a3a      	ldr	r2, [pc, #232]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a2e      	ldr	r2, [pc, #184]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2160      	movs	r1, #96	; 0x60
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f000 fdf1 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <MX_GPIO_Init+0x120>)
 8000e32:	f000 fc21 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fc12 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e5a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f000 fc03 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8000e72:	2308      	movs	r3, #8
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e76:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_GPIO_Init+0x124>)
 8000e88:	f000 fbf6 	bl	8001678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2009      	movs	r0, #9
 8000e92:	f000 fbba 	bl	800160a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e96:	2009      	movs	r0, #9
 8000e98:	f000 fbd3 	bl	8001642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2028      	movs	r0, #40	; 0x28
 8000ea2:	f000 fbb2 	bl	800160a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea6:	2028      	movs	r0, #40	; 0x28
 8000ea8:	f000 fbcb 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000800 	.word	0x48000800
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ec8:	1d39      	adds	r1, r7, #4
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <__io_putchar+0x20>)
 8000ed2:	f003 fb2f 	bl	8004534 <HAL_UART_Transmit>

  return ch;
 8000ed6:	687b      	ldr	r3, [r7, #4]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200001a0 	.word	0x200001a0

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_MspInit+0x44>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_MspInit+0x44>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6613      	str	r3, [r2, #96]	; 0x60
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_MspInit+0x44>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x44>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_TIM_PWM_MspInit+0x44>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d113      	bne.n	8000f72 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_TIM_PWM_MspInit+0x48>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_TIM_PWM_MspInit+0x48>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_TIM_PWM_MspInit+0x48>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	201d      	movs	r0, #29
 8000f68:	f000 fb4f 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f6c:	201d      	movs	r0, #29
 8000f6e:	f000 fb68 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_TIM_Base_MspInit+0x44>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d113      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_TIM_Base_MspInit+0x48>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <HAL_TIM_Base_MspInit+0x48>)
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_Base_MspInit+0x48>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2036      	movs	r0, #54	; 0x36
 8000fb4:	f000 fb29 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fb8:	2036      	movs	r0, #54	; 0x36
 8000fba:	f000 fb42 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40001000 	.word	0x40001000
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a11      	ldr	r2, [pc, #68]	; (8001034 <HAL_TIM_MspPostInit+0x64>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11b      	bne.n	800102a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100a:	2310      	movs	r3, #16
 800100c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8001026:	f000 fb27 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40000400 	.word	0x40000400
 8001038:	40021000 	.word	0x40021000
 800103c:	48000400 	.word	0x48000400

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ac      	sub	sp, #176	; 0xb0
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2288      	movs	r2, #136	; 0x88
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f003 ff8d 	bl	8004f80 <memset>
  if(huart->Instance==USART2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <HAL_UART_MspInit+0xb0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d13b      	bne.n	80010e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001070:	2302      	movs	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fb6b 	bl	8002758 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff ff2c 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_UART_MspInit+0xb4>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001090:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <HAL_UART_MspInit+0xb4>)
 8001092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001096:	6593      	str	r3, [r2, #88]	; 0x58
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_UART_MspInit+0xb4>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_UART_MspInit+0xb4>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_UART_MspInit+0xb4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_UART_MspInit+0xb4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010bc:	230c      	movs	r3, #12
 80010be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d4:	2307      	movs	r3, #7
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f000 fac8 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	37b0      	adds	r7, #176	; 0xb0
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40004400 	.word	0x40004400
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f966 	bl	8001414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001150:	2008      	movs	r0, #8
 8001152:	f000 fc85 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM3_IRQHandler+0x10>)
 8001162:	f002 fb01 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000108 	.word	0x20000108

08001170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001174:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001178:	f000 fc72 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800117c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001180:	f000 fc6e 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM6_DAC_IRQHandler+0x10>)
 800118e:	f002 faeb 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000154 	.word	0x20000154

0800119c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
	}

return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e009      	b.n	80011fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe65 	bl	8000ec0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf1      	blt.n	80011e8 <_write+0x12>
	}
	return len;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_close>:

int _close(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	605a      	str	r2, [r3, #4]
	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f003 fe40 	bl	8004f2c <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20018000 	.word	0x20018000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	20000224 	.word	0x20000224
 80012e0:	20000240 	.word	0x20000240

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif


}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800130c:	f7ff ffea 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f003 fdff 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fc09 	bl	8000b50 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800134c:	08006094 	.word	0x08006094
  ldr r2, =_sbss
 8001350:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001354:	2000023c 	.word	0x2000023c

08001358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_2_IRQHandler>
	...

0800135c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_Init+0x3c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_Init+0x3c>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f93e 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f80f 	bl	800139c <HAL_InitTick>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	e001      	b.n	800138e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800138a:	f7ff fdb1 	bl	8000ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800138e:	79fb      	ldrb	r3, [r7, #7]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_InitTick+0x6c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d023      	beq.n	80013f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_InitTick+0x70>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_InitTick+0x6c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f949 	bl	800165e <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10f      	bne.n	80013f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d809      	bhi.n	80013ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f000 f913 	bl	800160a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_InitTick+0x74>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e007      	b.n	80013fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e004      	b.n	80013fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e001      	b.n	80013fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000000c 	.word	0x2000000c
 800140c:	20000004 	.word	0x20000004
 8001410:	20000008 	.word	0x20000008

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2000000c 	.word	0x2000000c
 8001438:	20000228 	.word	0x20000228

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000228 	.word	0x20000228

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4907      	ldr	r1, [pc, #28]	; (80014f0 <__NVIC_EnableIRQ+0x38>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff8e 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff29 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff3e 	bl	800149c <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff8e 	bl	8001548 <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5d 	bl	80014f4 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff31 	bl	80014b8 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa2 	bl	80015b0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e17f      	b.n	8001988 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8171 	beq.w	8001982 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d005      	beq.n	80016b8 <HAL_GPIO_Init+0x40>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d130      	bne.n	800171a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ee:	2201      	movs	r2, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 0201 	and.w	r2, r3, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b03      	cmp	r3, #3
 8001724:	d118      	bne.n	8001758 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800172c:	2201      	movs	r2, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	f003 0201 	and.w	r2, r3, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b03      	cmp	r3, #3
 8001762:	d017      	beq.n	8001794 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d123      	bne.n	80017e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	6939      	ldr	r1, [r7, #16]
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80ac 	beq.w	8001982 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_GPIO_Init+0x330>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_GPIO_Init+0x330>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6613      	str	r3, [r2, #96]	; 0x60
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_GPIO_Init+0x330>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001842:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <HAL_GPIO_Init+0x334>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186c:	d025      	beq.n	80018ba <HAL_GPIO_Init+0x242>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x338>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01f      	beq.n	80018b6 <HAL_GPIO_Init+0x23e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_GPIO_Init+0x33c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d019      	beq.n	80018b2 <HAL_GPIO_Init+0x23a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x340>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0x236>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x344>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00d      	beq.n	80018aa <HAL_GPIO_Init+0x232>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x348>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x22e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x34c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d101      	bne.n	80018a2 <HAL_GPIO_Init+0x22a>
 800189e:	2306      	movs	r3, #6
 80018a0:	e00c      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e00a      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018aa:	2304      	movs	r3, #4
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018ba:	2300      	movs	r3, #0
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018cc:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_GPIO_Init+0x334>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_GPIO_Init+0x350>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018fe:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_GPIO_Init+0x350>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_GPIO_Init+0x350>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <HAL_GPIO_Init+0x350>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f47f ae78 	bne.w	8001688 <HAL_GPIO_Init+0x10>
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48000c00 	.word	0x48000c00
 80019bc:	48001000 	.word	0x48001000
 80019c0:	48001400 	.word	0x48001400
 80019c4:	48001800 	.word	0x48001800
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e001      	b.n	80019ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43d9      	mvns	r1, r3
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f84c 	bl	8000b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40007000 	.word	0x40007000

08001aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aba:	d130      	bne.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac8:	d038      	beq.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2232      	movs	r2, #50	; 0x32
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0c9b      	lsrs	r3, r3, #18
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af0:	e002      	b.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b04:	d102      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f2      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b18:	d110      	bne.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e00f      	b.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2a:	d007      	beq.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b34:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	20000004 	.word	0x20000004
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e3ca      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6a:	4b97      	ldr	r3, [pc, #604]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b74:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80e4 	beq.w	8001d54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4a>
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	f040 808b 	bne.w	8001cb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 8087 	bne.w	8001cb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x62>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e3a2      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x7c>
 8001bca:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd2:	e005      	b.n	8001be0 <HAL_RCC_OscConfig+0x88>
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d223      	bcs.n	8001c2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fd55 	bl	8002698 <RCC_SetFlashLatencyFromMSIRange>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e383      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf8:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	496d      	ldr	r1, [pc, #436]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c16:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4968      	ldr	r1, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
 8001c2a:	e025      	b.n	8001c78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4960      	ldr	r1, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	495b      	ldr	r1, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fd15 	bl	8002698 <RCC_SetFlashLatencyFromMSIRange>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e343      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c78:	f000 fc4a 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	4950      	ldr	r1, [pc, #320]	; (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <HAL_RCC_OscConfig+0x278>)
 8001c96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fb7d 	bl	800139c <HAL_InitTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d052      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	e327      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d032      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb8:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fbba 	bl	800143c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fbb6 	bl	800143c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e310      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a36      	ldr	r2, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4931      	ldr	r1, [pc, #196]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	492c      	ldr	r1, [pc, #176]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
 8001d1c:	e01a      	b.n	8001d54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a29      	ldr	r2, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fb87 	bl	800143c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d32:	f7ff fb83 	bl	800143c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e2dd      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x1da>
 8001d50:	e000      	b.n	8001d54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d074      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d005      	beq.n	8001d72 <HAL_RCC_OscConfig+0x21a>
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d10e      	bne.n	8001d8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d10b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d064      	beq.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d160      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e2ba      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x24a>
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e026      	b.n	8001df0 <HAL_RCC_OscConfig+0x298>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001daa:	d115      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x280>
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a02      	ldr	r2, [pc, #8]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e014      	b.n	8001df0 <HAL_RCC_OscConfig+0x298>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08005fa4 	.word	0x08005fa4
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	4ba0      	ldr	r3, [pc, #640]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a9f      	ldr	r2, [pc, #636]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b9d      	ldr	r3, [pc, #628]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a9c      	ldr	r2, [pc, #624]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fb20 	bl	800143c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fb1c 	bl	800143c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e276      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e12:	4b92      	ldr	r3, [pc, #584]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x2a8>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fb0c 	bl	800143c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fb08 	bl	800143c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e262      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2d0>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d060      	beq.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x310>
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d119      	bne.n	8001e96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d116      	bne.n	8001e96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e68:	4b7c      	ldr	r3, [pc, #496]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x328>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e23f      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	4973      	ldr	r1, [pc, #460]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e94:	e040      	b.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d023      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9e:	4b6f      	ldr	r3, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6e      	ldr	r2, [pc, #440]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fac7 	bl	800143c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fac3 	bl	800143c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e21d      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec4:	4b65      	ldr	r3, [pc, #404]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	061b      	lsls	r3, r3, #24
 8001ede:	495f      	ldr	r1, [pc, #380]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	e018      	b.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5c      	ldr	r2, [pc, #368]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff faa3 	bl	800143c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fa9f 	bl	800143c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e1f9      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01c      	beq.n	8001f66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f32:	4a4a      	ldr	r2, [pc, #296]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fa7e 	bl	800143c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fa7a 	bl	800143c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1d4      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ef      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3ec>
 8001f64:	e01b      	b.n	8001f9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	4a3b      	ldr	r2, [pc, #236]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7ff fa61 	bl	800143c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fa5d 	bl	800143c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1b7      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ef      	bne.n	8001f7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a6 	beq.w	80020f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x508>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d118      	bne.n	8002016 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_OscConfig+0x508>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_RCC_OscConfig+0x508>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fa24 	bl	800143c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff8:	f7ff fa20 	bl	800143c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e17a      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_RCC_OscConfig+0x508>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <HAL_RCC_OscConfig+0x4d8>
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202e:	e029      	b.n	8002084 <HAL_RCC_OscConfig+0x52c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d115      	bne.n	8002064 <HAL_RCC_OscConfig+0x50c>
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_RCC_OscConfig+0x504>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <HAL_RCC_OscConfig+0x504>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	4a03      	ldr	r2, [pc, #12]	; (800205c <HAL_RCC_OscConfig+0x504>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002058:	e014      	b.n	8002084 <HAL_RCC_OscConfig+0x52c>
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a9b      	ldr	r2, [pc, #620]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	4b98      	ldr	r3, [pc, #608]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	4a97      	ldr	r2, [pc, #604]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d016      	beq.n	80020ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7ff f9d6 	bl	800143c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	e00a      	b.n	80020aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7ff f9d2 	bl	800143c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e12a      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ed      	beq.n	8002094 <HAL_RCC_OscConfig+0x53c>
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f9bf 	bl	800143c <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff f9bb 	bl	800143c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e113      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d8:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ed      	bne.n	80020c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a79      	ldr	r2, [pc, #484]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80fe 	beq.w	80022fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	2b02      	cmp	r3, #2
 8002108:	f040 80d0 	bne.w	80022ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800210c:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0203 	and.w	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	429a      	cmp	r2, r3
 800211e:	d130      	bne.n	8002182 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	3b01      	subs	r3, #1
 800212c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d127      	bne.n	8002182 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11f      	bne.n	8002182 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800214c:	2a07      	cmp	r2, #7
 800214e:	bf14      	ite	ne
 8002150:	2201      	movne	r2, #1
 8002152:	2200      	moveq	r2, #0
 8002154:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002156:	4293      	cmp	r3, r2
 8002158:	d113      	bne.n	8002182 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	3b01      	subs	r3, #1
 8002168:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d109      	bne.n	8002182 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d06e      	beq.n	8002260 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d069      	beq.n	800225c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0ad      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021a4:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80021aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b0:	f7ff f944 	bl	800143c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f940 	bl	800143c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e09a      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b40      	ldr	r3, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x784>)
 80021dc:	4013      	ands	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021e6:	3a01      	subs	r2, #1
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	4311      	orrs	r1, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021f0:	0212      	lsls	r2, r2, #8
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021f8:	0852      	lsrs	r2, r2, #1
 80021fa:	3a01      	subs	r2, #1
 80021fc:	0552      	lsls	r2, r2, #21
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002204:	0852      	lsrs	r2, r2, #1
 8002206:	3a01      	subs	r2, #1
 8002208:	0652      	lsls	r2, r2, #25
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002210:	0912      	lsrs	r2, r2, #4
 8002212:	0452      	lsls	r2, r2, #17
 8002214:	430a      	orrs	r2, r1
 8002216:	4930      	ldr	r1, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002218:	4313      	orrs	r3, r2
 800221a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002226:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800222e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002232:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002234:	f7ff f902 	bl	800143c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7ff f8fe 	bl	800143c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e058      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800225a:	e050      	b.n	80022fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e04f      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d148      	bne.n	80022fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 8002272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 800227e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002282:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002284:	f7ff f8da 	bl	800143c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff f8d6 	bl	800143c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e030      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x734>
 80022aa:	e028      	b.n	80022fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d023      	beq.n	80022fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_RCC_OscConfig+0x780>)
 80022b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7ff f8bd 	bl	800143c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	e00c      	b.n	80022e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff f8b9 	bl	800143c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d905      	bls.n	80022e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e013      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_OscConfig+0x7b0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ec      	bne.n	80022c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_OscConfig+0x7b0>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4905      	ldr	r1, [pc, #20]	; (8002308 <HAL_RCC_OscConfig+0x7b0>)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x7b4>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	60cb      	str	r3, [r1, #12]
 80022f8:	e001      	b.n	80022fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	feeefffc 	.word	0xfeeefffc

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0e7      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d910      	bls.n	8002354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b72      	ldr	r3, [pc, #456]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4970      	ldr	r1, [pc, #448]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0cf      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d010      	beq.n	8002382 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236c:	429a      	cmp	r2, r3
 800236e:	d908      	bls.n	8002382 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4960      	ldr	r1, [pc, #384]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d04c      	beq.n	8002428 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d121      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0a6      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ae:	4b54      	ldr	r3, [pc, #336]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d115      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e09a      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c6:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e08e      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e086      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 0203 	bic.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4943      	ldr	r1, [pc, #268]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f8:	f7ff f820 	bl	800143c <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002400:	f7ff f81c 	bl	800143c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	; 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e06e      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 020c 	and.w	r2, r3, #12
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	429a      	cmp	r2, r3
 8002426:	d1eb      	bne.n	8002400 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002440:	429a      	cmp	r2, r3
 8002442:	d208      	bcs.n	8002456 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	492b      	ldr	r1, [pc, #172]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d210      	bcs.n	8002486 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 0207 	bic.w	r2, r3, #7
 800246c:	4923      	ldr	r1, [pc, #140]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_RCC_ClockConfig+0x1ec>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e036      	b.n	80024f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4918      	ldr	r1, [pc, #96]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4910      	ldr	r1, [pc, #64]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c4:	f000 f824 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	490b      	ldr	r1, [pc, #44]	; (8002504 <HAL_RCC_ClockConfig+0x1f4>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1f8>)
 80024e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1fc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe ff57 	bl	800139c <HAL_InitTick>
 80024ee:	4603      	mov	r3, r0
 80024f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80024f2:	7afb      	ldrb	r3, [r7, #11]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
 8002504:	08005fa4 	.word	0x08005fa4
 8002508:	20000004 	.word	0x20000004
 800250c:	20000008 	.word	0x20000008

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x34>
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d121      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d11e      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002544:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002550:	4b31      	ldr	r3, [pc, #196]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e005      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800256c:	4a2b      	ldr	r2, [pc, #172]	; (800261c <HAL_RCC_GetSysClockFreq+0x10c>)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10d      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d102      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_GetSysClockFreq+0x110>)
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	e004      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d101      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_RCC_GetSysClockFreq+0x114>)
 8002596:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d134      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d003      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0xac>
 80025b4:	e005      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0x110>)
 80025b8:	617b      	str	r3, [r7, #20]
      break;
 80025ba:	e005      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_GetSysClockFreq+0x114>)
 80025be:	617b      	str	r3, [r7, #20]
      break;
 80025c0:	e002      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	617b      	str	r3, [r7, #20]
      break;
 80025c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	3301      	adds	r3, #1
 80025d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	fb03 f202 	mul.w	r2, r3, r2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0e5b      	lsrs	r3, r3, #25
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	3301      	adds	r3, #1
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002608:	69bb      	ldr	r3, [r7, #24]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	08005fbc 	.word	0x08005fbc
 8002620:	00f42400 	.word	0x00f42400
 8002624:	007a1200 	.word	0x007a1200

08002628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_GetHCLKFreq+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002644:	f7ff fff0 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08005fb4 	.word	0x08005fb4

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002670:	f7ff ffda 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0adb      	lsrs	r3, r3, #11
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4904      	ldr	r1, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	08005fb4 	.word	0x08005fb4

08002698 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026a4:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026b0:	f7ff f9ee 	bl	8001a90 <HAL_PWREx_GetVoltageRange>
 80026b4:	6178      	str	r0, [r7, #20]
 80026b6:	e014      	b.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6593      	str	r3, [r2, #88]	; 0x58
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026d0:	f7ff f9de 	bl	8001a90 <HAL_PWREx_GetVoltageRange>
 80026d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e8:	d10b      	bne.n	8002702 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d919      	bls.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2ba0      	cmp	r3, #160	; 0xa0
 80026f4:	d902      	bls.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026f6:	2302      	movs	r3, #2
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e013      	b.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026fc:	2301      	movs	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	e010      	b.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b80      	cmp	r3, #128	; 0x80
 8002706:	d902      	bls.n	800270e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002708:	2303      	movs	r3, #3
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	e00a      	b.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d102      	bne.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002714:	2302      	movs	r3, #2
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e004      	b.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b70      	cmp	r3, #112	; 0x70
 800271e:	d101      	bne.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002720:	2301      	movs	r3, #1
 8002722:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 0207 	bic.w	r2, r3, #7
 800272c:	4909      	ldr	r1, [pc, #36]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	40022000 	.word	0x40022000

08002758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002760:	2300      	movs	r3, #0
 8002762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002764:	2300      	movs	r3, #0
 8002766:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002770:	2b00      	cmp	r3, #0
 8002772:	d041      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002778:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800277c:	d02a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800277e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002782:	d824      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800278a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800278e:	d81e      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002798:	d010      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800279a:	e018      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800279c:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a85      	ldr	r2, [pc, #532]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a8:	e015      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fabb 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027ba:	e00c      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3320      	adds	r3, #32
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fba6 	bl	8002f14 <RCCEx_PLLSAI2_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027cc:	e003      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	74fb      	strb	r3, [r7, #19]
      break;
 80027d2:	e000      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027dc:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ea:	4973      	ldr	r1, [pc, #460]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027f2:	e001      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d041      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002808:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800280c:	d02a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800280e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002812:	d824      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002818:	d008      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800281a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800281e:	d81e      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d010      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800282a:	e018      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a61      	ldr	r2, [pc, #388]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002838:	e015      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fa73 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800284a:	e00c      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3320      	adds	r3, #32
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fb5e 	bl	8002f14 <RCCEx_PLLSAI2_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800285c:	e003      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	74fb      	strb	r3, [r7, #19]
      break;
 8002862:	e000      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800286c:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287a:	494f      	ldr	r1, [pc, #316]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002882:	e001      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a0 	beq.w	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028aa:	2300      	movs	r3, #0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	4a40      	ldr	r2, [pc, #256]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	; 0x58
 80028bc:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a3a      	ldr	r2, [pc, #232]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fdb0 	bl	800143c <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028de:	e009      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fdac 	bl	800143c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	74fb      	strb	r3, [r7, #19]
        break;
 80028f2:	e005      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d15c      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002910:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01f      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	d019      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe fd6b 	bl	800143c <HAL_GetTick>
 8002966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002968:	e00b      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe fd67 	bl	800143c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d902      	bls.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	74fb      	strb	r3, [r7, #19]
            break;
 8002980:	e006      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ec      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a6:	4904      	ldr	r1, [pc, #16]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029ae:	e009      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
 80029b4:	e006      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c4:	7c7b      	ldrb	r3, [r7, #17]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ca:	4b9e      	ldr	r3, [pc, #632]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	4a9d      	ldr	r2, [pc, #628]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e2:	4b98      	ldr	r3, [pc, #608]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f023 0203 	bic.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	4994      	ldr	r1, [pc, #592]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f023 020c 	bic.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	498c      	ldr	r1, [pc, #560]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a26:	4b87      	ldr	r3, [pc, #540]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4983      	ldr	r1, [pc, #524]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	497b      	ldr	r1, [pc, #492]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	4972      	ldr	r1, [pc, #456]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a8c:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	496a      	ldr	r1, [pc, #424]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	4961      	ldr	r1, [pc, #388]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ad0:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	4959      	ldr	r1, [pc, #356]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b00:	4950      	ldr	r1, [pc, #320]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b14:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	4948      	ldr	r1, [pc, #288]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	493f      	ldr	r1, [pc, #252]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d028      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b58:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b66:	4937      	ldr	r1, [pc, #220]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b76:	d106      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a31      	ldr	r2, [pc, #196]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b82:	60d3      	str	r3, [r2, #12]
 8002b84:	e011      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f8c8 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d028      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	491f      	ldr	r1, [pc, #124]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be0:	60d3      	str	r3, [r2, #12]
 8002be2:	e011      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f899 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02b      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c32:	d109      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3e:	60d3      	str	r3, [r2, #12]
 8002c40:	e014      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2101      	movs	r1, #1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f867 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c62:	7cfb      	ldrb	r3, [r7, #19]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02f      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c86:	4928      	ldr	r1, [pc, #160]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f844 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d014      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	74bb      	strb	r3, [r7, #18]
 8002cb2:	e011      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f925 	bl	8002f14 <RCCEx_PLLSAI2_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cce:	7cfb      	ldrb	r3, [r7, #19]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf2:	490d      	ldr	r1, [pc, #52]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000

08002d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3a:	4b75      	ldr	r3, [pc, #468]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d018      	beq.n	8002d78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d46:	4b72      	ldr	r3, [pc, #456]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10d      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d5e:	4b6c      	ldr	r3, [pc, #432]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d047      	beq.n	8002e02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e044      	b.n	8002e02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d018      	beq.n	8002db2 <RCCEx_PLLSAI1_Config+0x86>
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d825      	bhi.n	8002dd0 <RCCEx_PLLSAI1_Config+0xa4>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0x62>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d009      	beq.n	8002da0 <RCCEx_PLLSAI1_Config+0x74>
 8002d8c:	e020      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d8e:	4b60      	ldr	r3, [pc, #384]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11d      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9e:	e01a      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da0:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d116      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e013      	b.n	8002dda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db2:	4b57      	ldr	r3, [pc, #348]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dbe:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dce:	e006      	b.n	8002dde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e004      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e002      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10d      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	4944      	ldr	r1, [pc, #272]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d17d      	bne.n	8002f04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a40      	ldr	r2, [pc, #256]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fe fb12 	bl	800143c <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e1a:	e009      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e1c:	f7fe fb0e 	bl	800143c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2e:	e005      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ef      	bne.n	8002e1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d160      	bne.n	8002f04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d111      	bne.n	8002e6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e48:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	0211      	lsls	r1, r2, #8
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68d2      	ldr	r2, [r2, #12]
 8002e5e:	0912      	lsrs	r2, r2, #4
 8002e60:	0452      	lsls	r2, r2, #17
 8002e62:	430a      	orrs	r2, r1
 8002e64:	492a      	ldr	r1, [pc, #168]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	610b      	str	r3, [r1, #16]
 8002e6a:	e027      	b.n	8002ebc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d112      	bne.n	8002e98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6892      	ldr	r2, [r2, #8]
 8002e82:	0211      	lsls	r1, r2, #8
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6912      	ldr	r2, [r2, #16]
 8002e88:	0852      	lsrs	r2, r2, #1
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	0552      	lsls	r2, r2, #21
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	491f      	ldr	r1, [pc, #124]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	610b      	str	r3, [r1, #16]
 8002e96:	e011      	b.n	8002ebc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ea0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6892      	ldr	r2, [r2, #8]
 8002ea8:	0211      	lsls	r1, r2, #8
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6952      	ldr	r2, [r2, #20]
 8002eae:	0852      	lsrs	r2, r2, #1
 8002eb0:	3a01      	subs	r2, #1
 8002eb2:	0652      	lsls	r2, r2, #25
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	4916      	ldr	r1, [pc, #88]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fab8 	bl	800143c <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ece:	e009      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ed0:	f7fe fab4 	bl	800143c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d902      	bls.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ee2:	e005      	b.n	8002ef0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ef      	beq.n	8002ed0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	4904      	ldr	r1, [pc, #16]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000

08002f14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f22:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0203 	and.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d10d      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
       ||
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f46:	4b61      	ldr	r3, [pc, #388]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
       ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d047      	beq.n	8002fea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e044      	b.n	8002fea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d018      	beq.n	8002f9a <RCCEx_PLLSAI2_Config+0x86>
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d825      	bhi.n	8002fb8 <RCCEx_PLLSAI2_Config+0xa4>
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d002      	beq.n	8002f76 <RCCEx_PLLSAI2_Config+0x62>
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d009      	beq.n	8002f88 <RCCEx_PLLSAI2_Config+0x74>
 8002f74:	e020      	b.n	8002fb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f76:	4b55      	ldr	r3, [pc, #340]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d11d      	bne.n	8002fbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f86:	e01a      	b.n	8002fbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f88:	4b50      	ldr	r3, [pc, #320]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d116      	bne.n	8002fc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f98:	e013      	b.n	8002fc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fa6:	4b49      	ldr	r3, [pc, #292]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fb6:	e006      	b.n	8002fc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e004      	b.n	8002fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e002      	b.n	8002fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e000      	b.n	8002fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	4939      	ldr	r1, [pc, #228]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d167      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ff0:	4b36      	ldr	r3, [pc, #216]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a35      	ldr	r2, [pc, #212]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fa1e 	bl	800143c <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003002:	e009      	b.n	8003018 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003004:	f7fe fa1a 	bl	800143c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d902      	bls.n	8003018 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	73fb      	strb	r3, [r7, #15]
        break;
 8003016:	e005      	b.n	8003024 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003018:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1ef      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d14a      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d111      	bne.n	8003054 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003030:	4b26      	ldr	r3, [pc, #152]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6892      	ldr	r2, [r2, #8]
 8003040:	0211      	lsls	r1, r2, #8
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68d2      	ldr	r2, [r2, #12]
 8003046:	0912      	lsrs	r2, r2, #4
 8003048:	0452      	lsls	r2, r2, #17
 800304a:	430a      	orrs	r2, r1
 800304c:	491f      	ldr	r1, [pc, #124]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	614b      	str	r3, [r1, #20]
 8003052:	e011      	b.n	8003078 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800305c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	0211      	lsls	r1, r2, #8
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6912      	ldr	r2, [r2, #16]
 800306a:	0852      	lsrs	r2, r2, #1
 800306c:	3a01      	subs	r2, #1
 800306e:	0652      	lsls	r2, r2, #25
 8003070:	430a      	orrs	r2, r1
 8003072:	4916      	ldr	r1, [pc, #88]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a13      	ldr	r2, [pc, #76]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003082:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fe f9da 	bl	800143c <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800308a:	e009      	b.n	80030a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800308c:	f7fe f9d6 	bl	800143c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d902      	bls.n	80030a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	73fb      	strb	r3, [r7, #15]
          break;
 800309e:	e005      	b.n	80030ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ef      	beq.n	800308c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4904      	ldr	r1, [pc, #16]	; (80030cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e049      	b.n	8003176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd ff44 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f000 fd86 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d001      	beq.n	8003198 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e047      	b.n	8003228 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a23      	ldr	r2, [pc, #140]	; (8003234 <HAL_TIM_Base_Start+0xb4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01d      	beq.n	80031e6 <HAL_TIM_Base_Start+0x66>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b2:	d018      	beq.n	80031e6 <HAL_TIM_Base_Start+0x66>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <HAL_TIM_Base_Start+0xb8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_TIM_Base_Start+0x66>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1e      	ldr	r2, [pc, #120]	; (800323c <HAL_TIM_Base_Start+0xbc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_TIM_Base_Start+0x66>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <HAL_TIM_Base_Start+0xc0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_TIM_Base_Start+0x66>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <HAL_TIM_Base_Start+0xc4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_TIM_Base_Start+0x66>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_TIM_Base_Start+0xc8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d115      	bne.n	8003212 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_TIM_Base_Start+0xcc>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d015      	beq.n	8003224 <HAL_TIM_Base_Start+0xa4>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d011      	beq.n	8003224 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	e008      	b.n	8003224 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e000      	b.n	8003226 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40000400 	.word	0x40000400
 800323c:	40000800 	.word	0x40000800
 8003240:	40000c00 	.word	0x40000c00
 8003244:	40013400 	.word	0x40013400
 8003248:	40014000 	.word	0x40014000
 800324c:	00010007 	.word	0x00010007

08003250 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10f      	bne.n	8003288 <HAL_TIM_Base_Stop+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	f240 4344 	movw	r3, #1092	; 0x444
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_TIM_Base_Stop+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e04f      	b.n	8003358 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <HAL_TIM_Base_Start_IT+0xc4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01d      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x76>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d018      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x76>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x76>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <HAL_TIM_Base_Start_IT+0xcc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x76>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_TIM_Base_Start_IT+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x76>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_TIM_Base_Start_IT+0xd4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_TIM_Base_Start_IT+0x76>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_TIM_Base_Start_IT+0xd8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d115      	bne.n	8003342 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_TIM_Base_Start_IT+0xdc>)
 800331e:	4013      	ands	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d015      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0xb4>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d011      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	e008      	b.n	8003354 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e000      	b.n	8003356 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40013400 	.word	0x40013400
 8003378:	40014000 	.word	0x40014000
 800337c:	00010007 	.word	0x00010007

08003380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e049      	b.n	8003426 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fdc6 	bl	8000f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 fc2e 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x24>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e03c      	b.n	80034ce <HAL_TIM_PWM_Start+0x9e>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d109      	bne.n	800346e <HAL_TIM_PWM_Start+0x3e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e02f      	b.n	80034ce <HAL_TIM_PWM_Start+0x9e>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start+0x58>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e022      	b.n	80034ce <HAL_TIM_PWM_Start+0x9e>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d109      	bne.n	80034a2 <HAL_TIM_PWM_Start+0x72>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	e015      	b.n	80034ce <HAL_TIM_PWM_Start+0x9e>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start+0x8c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e008      	b.n	80034ce <HAL_TIM_PWM_Start+0x9e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e09c      	b.n	8003610 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_PWM_Start+0xb6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e4:	e023      	b.n	800352e <HAL_TIM_PWM_Start+0xfe>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_PWM_Start+0xc6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f4:	e01b      	b.n	800352e <HAL_TIM_PWM_Start+0xfe>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Start+0xd6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003504:	e013      	b.n	800352e <HAL_TIM_PWM_Start+0xfe>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Start+0xe6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003514:	e00b      	b.n	800352e <HAL_TIM_PWM_Start+0xfe>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b10      	cmp	r3, #16
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0xf6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003524:	e003      	b.n	800352e <HAL_TIM_PWM_Start+0xfe>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	6839      	ldr	r1, [r7, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fee2 	bl	8004300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a35      	ldr	r2, [pc, #212]	; (8003618 <HAL_TIM_PWM_Start+0x1e8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_TIM_PWM_Start+0x13e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_TIM_PWM_Start+0x1ec>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_TIM_PWM_Start+0x13e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a32      	ldr	r2, [pc, #200]	; (8003620 <HAL_TIM_PWM_Start+0x1f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_TIM_PWM_Start+0x13e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a31      	ldr	r2, [pc, #196]	; (8003624 <HAL_TIM_PWM_Start+0x1f4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_TIM_PWM_Start+0x13e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a2f      	ldr	r2, [pc, #188]	; (8003628 <HAL_TIM_PWM_Start+0x1f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_TIM_PWM_Start+0x142>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_TIM_PWM_Start+0x144>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003586:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_TIM_PWM_Start+0x1e8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_TIM_PWM_Start+0x19e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d018      	beq.n	80035ce <HAL_TIM_PWM_Start+0x19e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <HAL_TIM_PWM_Start+0x1fc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_TIM_PWM_Start+0x19e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a21      	ldr	r2, [pc, #132]	; (8003630 <HAL_TIM_PWM_Start+0x200>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_TIM_PWM_Start+0x19e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_TIM_PWM_Start+0x204>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_TIM_PWM_Start+0x19e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_TIM_PWM_Start+0x1ec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIM_PWM_Start+0x19e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a15      	ldr	r2, [pc, #84]	; (8003620 <HAL_TIM_PWM_Start+0x1f0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d115      	bne.n	80035fa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_TIM_PWM_Start+0x208>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d015      	beq.n	800360c <HAL_TIM_PWM_Start+0x1dc>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e6:	d011      	beq.n	800360c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	e008      	b.n	800360c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e000      	b.n	800360e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40013400 	.word	0x40013400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	00010007 	.word	0x00010007

0800363c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fe56 	bl	8004300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3e      	ldr	r2, [pc, #248]	; (8003754 <HAL_TIM_PWM_Stop+0x118>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_TIM_PWM_Stop+0x4a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <HAL_TIM_PWM_Stop+0x11c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_PWM_Stop+0x4a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_TIM_PWM_Stop+0x120>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_TIM_PWM_Stop+0x4a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <HAL_TIM_PWM_Stop+0x124>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIM_PWM_Stop+0x4a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a38      	ldr	r2, [pc, #224]	; (8003764 <HAL_TIM_PWM_Stop+0x128>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_TIM_PWM_Stop+0x4e>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_TIM_PWM_Stop+0x50>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d017      	beq.n	80036c0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a1a      	ldr	r2, [r3, #32]
 8003696:	f241 1311 	movw	r3, #4369	; 0x1111
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10f      	bne.n	80036c0 <HAL_TIM_PWM_Stop+0x84>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	f240 4344 	movw	r3, #1092	; 0x444
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_TIM_PWM_Stop+0x84>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6a1a      	ldr	r2, [r3, #32]
 80036c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10f      	bne.n	80036f0 <HAL_TIM_PWM_Stop+0xb4>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	f240 4344 	movw	r3, #1092	; 0x444
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_TIM_PWM_Stop+0xb4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <HAL_TIM_PWM_Stop+0xc4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fe:	e023      	b.n	8003748 <HAL_TIM_PWM_Stop+0x10c>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b04      	cmp	r3, #4
 8003704:	d104      	bne.n	8003710 <HAL_TIM_PWM_Stop+0xd4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370e:	e01b      	b.n	8003748 <HAL_TIM_PWM_Stop+0x10c>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d104      	bne.n	8003720 <HAL_TIM_PWM_Stop+0xe4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371e:	e013      	b.n	8003748 <HAL_TIM_PWM_Stop+0x10c>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d104      	bne.n	8003730 <HAL_TIM_PWM_Stop+0xf4>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800372e:	e00b      	b.n	8003748 <HAL_TIM_PWM_Stop+0x10c>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b10      	cmp	r3, #16
 8003734:	d104      	bne.n	8003740 <HAL_TIM_PWM_Stop+0x104>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800373e:	e003      	b.n	8003748 <HAL_TIM_PWM_Stop+0x10c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40013400 	.word	0x40013400
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa1a 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa0c 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fa1d 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9f0 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9e2 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9f3 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9c6 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9b8 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f9c9 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f99c 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f98e 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f99f 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd f8ea 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fdac 	bl	8004470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d10e      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d107      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800393e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fd9f 	bl	8004484 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d10e      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f94d 	bl	8003c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0220 	mvn.w	r2, #32
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fd5f 	bl	800445c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0ff      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b14      	cmp	r3, #20
 80039d2:	f200 80f0 	bhi.w	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003bb7 	.word	0x08003bb7
 80039e4:	08003bb7 	.word	0x08003bb7
 80039e8:	08003bb7 	.word	0x08003bb7
 80039ec:	08003a71 	.word	0x08003a71
 80039f0:	08003bb7 	.word	0x08003bb7
 80039f4:	08003bb7 	.word	0x08003bb7
 80039f8:	08003bb7 	.word	0x08003bb7
 80039fc:	08003ab3 	.word	0x08003ab3
 8003a00:	08003bb7 	.word	0x08003bb7
 8003a04:	08003bb7 	.word	0x08003bb7
 8003a08:	08003bb7 	.word	0x08003bb7
 8003a0c:	08003af3 	.word	0x08003af3
 8003a10:	08003bb7 	.word	0x08003bb7
 8003a14:	08003bb7 	.word	0x08003bb7
 8003a18:	08003bb7 	.word	0x08003bb7
 8003a1c:	08003b35 	.word	0x08003b35
 8003a20:	08003bb7 	.word	0x08003bb7
 8003a24:	08003bb7 	.word	0x08003bb7
 8003a28:	08003bb7 	.word	0x08003bb7
 8003a2c:	08003b75 	.word	0x08003b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f98c 	bl	8003d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0208 	orr.w	r2, r2, #8
 8003a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6999      	ldr	r1, [r3, #24]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]
      break;
 8003a6e:	e0a5      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f9fc 	bl	8003e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      break;
 8003ab0:	e084      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fa65 	bl	8003f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0208 	orr.w	r2, r2, #8
 8003acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0204 	bic.w	r2, r2, #4
 8003adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]
      break;
 8003af0:	e064      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 facd 	bl	8004098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
      break;
 8003b32:	e043      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb16 	bl	800416c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0208 	orr.w	r2, r2, #8
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b72:	e023      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb5a 	bl	8004234 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop

08003bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <TIM_Base_SetConfig+0x114>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3d      	ldr	r2, [pc, #244]	; (8003d38 <TIM_Base_SetConfig+0x118>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3c      	ldr	r2, [pc, #240]	; (8003d3c <TIM_Base_SetConfig+0x11c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3b      	ldr	r2, [pc, #236]	; (8003d40 <TIM_Base_SetConfig+0x120>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3a      	ldr	r2, [pc, #232]	; (8003d44 <TIM_Base_SetConfig+0x124>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <TIM_Base_SetConfig+0x114>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01f      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d01b      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <TIM_Base_SetConfig+0x118>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d017      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <TIM_Base_SetConfig+0x11c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <TIM_Base_SetConfig+0x120>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <TIM_Base_SetConfig+0x124>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <TIM_Base_SetConfig+0x128>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <TIM_Base_SetConfig+0x130>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <TIM_Base_SetConfig+0x114>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <TIM_Base_SetConfig+0x124>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a11      	ldr	r2, [pc, #68]	; (8003d48 <TIM_Base_SetConfig+0x128>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a10      	ldr	r2, [pc, #64]	; (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0f      	ldr	r2, [pc, #60]	; (8003d50 <TIM_Base_SetConfig+0x130>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40013400 	.word	0x40013400
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40014400 	.word	0x40014400
 8003d50:	40014800 	.word	0x40014800

08003d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0201 	bic.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 0302 	bic.w	r3, r3, #2
 8003da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <TIM_OC1_SetConfig+0x10c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00f      	beq.n	8003dd4 <TIM_OC1_SetConfig+0x80>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <TIM_OC1_SetConfig+0x110>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00b      	beq.n	8003dd4 <TIM_OC1_SetConfig+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2a      	ldr	r2, [pc, #168]	; (8003e68 <TIM_OC1_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_OC1_SetConfig+0x80>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <TIM_OC1_SetConfig+0x118>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC1_SetConfig+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <TIM_OC1_SetConfig+0x11c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10c      	bne.n	8003dee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0308 	bic.w	r3, r3, #8
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <TIM_OC1_SetConfig+0x10c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00f      	beq.n	8003e16 <TIM_OC1_SetConfig+0xc2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1a      	ldr	r2, [pc, #104]	; (8003e64 <TIM_OC1_SetConfig+0x110>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00b      	beq.n	8003e16 <TIM_OC1_SetConfig+0xc2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <TIM_OC1_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <TIM_OC1_SetConfig+0xc2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <TIM_OC1_SetConfig+0x118>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC1_SetConfig+0xc2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <TIM_OC1_SetConfig+0x11c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d111      	bne.n	8003e3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40013400 	.word	0x40013400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800

08003e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f023 0210 	bic.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <TIM_OC2_SetConfig+0x100>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x6c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <TIM_OC2_SetConfig+0x104>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10d      	bne.n	8003efc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <TIM_OC2_SetConfig+0x100>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00f      	beq.n	8003f24 <TIM_OC2_SetConfig+0xb0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <TIM_OC2_SetConfig+0x104>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_OC2_SetConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <TIM_OC2_SetConfig+0x108>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_OC2_SetConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <TIM_OC2_SetConfig+0x10c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC2_SetConfig+0xb0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <TIM_OC2_SetConfig+0x110>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d113      	bne.n	8003f4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40013400 	.word	0x40013400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40014400 	.word	0x40014400
 8003f84:	40014800 	.word	0x40014800

08003f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a27      	ldr	r2, [pc, #156]	; (8004084 <TIM_OC3_SetConfig+0xfc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC3_SetConfig+0x6a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a26      	ldr	r2, [pc, #152]	; (8004088 <TIM_OC3_SetConfig+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10d      	bne.n	800400e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800400c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <TIM_OC3_SetConfig+0xfc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00f      	beq.n	8004036 <TIM_OC3_SetConfig+0xae>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <TIM_OC3_SetConfig+0x100>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_OC3_SetConfig+0xae>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1a      	ldr	r2, [pc, #104]	; (800408c <TIM_OC3_SetConfig+0x104>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_OC3_SetConfig+0xae>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <TIM_OC3_SetConfig+0x108>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_OC3_SetConfig+0xae>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <TIM_OC3_SetConfig+0x10c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d113      	bne.n	800405e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40013400 	.word	0x40013400
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	031b      	lsls	r3, r3, #12
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <TIM_OC4_SetConfig+0xc0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00f      	beq.n	800411c <TIM_OC4_SetConfig+0x84>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <TIM_OC4_SetConfig+0xc4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_OC4_SetConfig+0x84>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a16      	ldr	r2, [pc, #88]	; (8004160 <TIM_OC4_SetConfig+0xc8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_OC4_SetConfig+0x84>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <TIM_OC4_SetConfig+0xcc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC4_SetConfig+0x84>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a14      	ldr	r2, [pc, #80]	; (8004168 <TIM_OC4_SetConfig+0xd0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d109      	bne.n	8004130 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40013400 	.word	0x40013400
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800

0800416c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a17      	ldr	r2, [pc, #92]	; (8004220 <TIM_OC5_SetConfig+0xb4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_OC5_SetConfig+0x7a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <TIM_OC5_SetConfig+0xb8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_OC5_SetConfig+0x7a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <TIM_OC5_SetConfig+0xbc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_OC5_SetConfig+0x7a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <TIM_OC5_SetConfig+0xc0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC5_SetConfig+0x7a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <TIM_OC5_SetConfig+0xc4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d109      	bne.n	80041fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800427a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	051b      	lsls	r3, r3, #20
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <TIM_OC6_SetConfig+0xb8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00f      	beq.n	80042b0 <TIM_OC6_SetConfig+0x7c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <TIM_OC6_SetConfig+0xbc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_OC6_SetConfig+0x7c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <TIM_OC6_SetConfig+0xc0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_OC6_SetConfig+0x7c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <TIM_OC6_SetConfig+0xc4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC6_SetConfig+0x7c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a14      	ldr	r2, [pc, #80]	; (80042fc <TIM_OC6_SetConfig+0xc8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d109      	bne.n	80042c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	029b      	lsls	r3, r3, #10
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40013400 	.word	0x40013400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800

08004300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e068      	b.n	8004436 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800439e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01d      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d6:	d018      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10c      	bne.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	4313      	orrs	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40013400 	.word	0x40013400
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40014000 	.word	0x40014000

0800445c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e040      	b.n	800452c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fc fdc0 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f8c0 	bl	800465c <UART_SetConfig>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e022      	b.n	800452c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fb6c 	bl	8004bcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fbf3 	bl	8004d10 <UART_CheckIdleState>
 800452a:	4603      	mov	r3, r0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004548:	2b20      	cmp	r3, #32
 800454a:	f040 8082 	bne.w	8004652 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_UART_Transmit+0x26>
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07a      	b.n	8004654 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_UART_Transmit+0x38>
 8004568:	2302      	movs	r3, #2
 800456a:	e073      	b.n	8004654 <HAL_UART_Transmit+0x120>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2221      	movs	r2, #33	; 0x21
 8004580:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004582:	f7fc ff5b 	bl	800143c <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	88fa      	ldrh	r2, [r7, #6]
 8004594:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a0:	d108      	bne.n	80045b4 <HAL_UART_Transmit+0x80>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d104      	bne.n	80045b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e003      	b.n	80045bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80045c4:	e02d      	b.n	8004622 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fbe6 	bl	8004da2 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e039      	b.n	8004654 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	881a      	ldrh	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f2:	b292      	uxth	r2, r2
 80045f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	3302      	adds	r3, #2
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	e008      	b.n	8004610 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	b292      	uxth	r2, r2
 8004608:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3301      	adds	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cb      	bne.n	80045c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fbb2 	bl	8004da2 <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e005      	b.n	8004654 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800465c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004660:	b08a      	sub	sp, #40	; 0x28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	4313      	orrs	r3, r2
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4ba4      	ldr	r3, [pc, #656]	; (800491c <UART_SetConfig+0x2c0>)
 800468c:	4013      	ands	r3, r2
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004694:	430b      	orrs	r3, r1
 8004696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a99      	ldr	r2, [pc, #612]	; (8004920 <UART_SetConfig+0x2c4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	4313      	orrs	r3, r2
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a90      	ldr	r2, [pc, #576]	; (8004924 <UART_SetConfig+0x2c8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d126      	bne.n	8004734 <UART_SetConfig+0xd8>
 80046e6:	4b90      	ldr	r3, [pc, #576]	; (8004928 <UART_SetConfig+0x2cc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d81b      	bhi.n	800472c <UART_SetConfig+0xd0>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0xa0>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	0800470d 	.word	0x0800470d
 8004700:	0800471d 	.word	0x0800471d
 8004704:	08004715 	.word	0x08004715
 8004708:	08004725 	.word	0x08004725
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e116      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004714:	2302      	movs	r3, #2
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e112      	b.n	8004942 <UART_SetConfig+0x2e6>
 800471c:	2304      	movs	r3, #4
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e10e      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004724:	2308      	movs	r3, #8
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e10a      	b.n	8004942 <UART_SetConfig+0x2e6>
 800472c:	2310      	movs	r3, #16
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e106      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7c      	ldr	r2, [pc, #496]	; (800492c <UART_SetConfig+0x2d0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d138      	bne.n	80047b0 <UART_SetConfig+0x154>
 800473e:	4b7a      	ldr	r3, [pc, #488]	; (8004928 <UART_SetConfig+0x2cc>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b0c      	cmp	r3, #12
 800474a:	d82d      	bhi.n	80047a8 <UART_SetConfig+0x14c>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0xf8>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004789 	.word	0x08004789
 8004758:	080047a9 	.word	0x080047a9
 800475c:	080047a9 	.word	0x080047a9
 8004760:	080047a9 	.word	0x080047a9
 8004764:	08004799 	.word	0x08004799
 8004768:	080047a9 	.word	0x080047a9
 800476c:	080047a9 	.word	0x080047a9
 8004770:	080047a9 	.word	0x080047a9
 8004774:	08004791 	.word	0x08004791
 8004778:	080047a9 	.word	0x080047a9
 800477c:	080047a9 	.word	0x080047a9
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047a1 	.word	0x080047a1
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e0d8      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e0d4      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e0d0      	b.n	8004942 <UART_SetConfig+0x2e6>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e0cc      	b.n	8004942 <UART_SetConfig+0x2e6>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e0c8      	b.n	8004942 <UART_SetConfig+0x2e6>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a5e      	ldr	r2, [pc, #376]	; (8004930 <UART_SetConfig+0x2d4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d125      	bne.n	8004806 <UART_SetConfig+0x1aa>
 80047ba:	4b5b      	ldr	r3, [pc, #364]	; (8004928 <UART_SetConfig+0x2cc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d016      	beq.n	80047f6 <UART_SetConfig+0x19a>
 80047c8:	2b30      	cmp	r3, #48	; 0x30
 80047ca:	d818      	bhi.n	80047fe <UART_SetConfig+0x1a2>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d00a      	beq.n	80047e6 <UART_SetConfig+0x18a>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d814      	bhi.n	80047fe <UART_SetConfig+0x1a2>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <UART_SetConfig+0x182>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d008      	beq.n	80047ee <UART_SetConfig+0x192>
 80047dc:	e00f      	b.n	80047fe <UART_SetConfig+0x1a2>
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e4:	e0ad      	b.n	8004942 <UART_SetConfig+0x2e6>
 80047e6:	2302      	movs	r3, #2
 80047e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ec:	e0a9      	b.n	8004942 <UART_SetConfig+0x2e6>
 80047ee:	2304      	movs	r3, #4
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f4:	e0a5      	b.n	8004942 <UART_SetConfig+0x2e6>
 80047f6:	2308      	movs	r3, #8
 80047f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fc:	e0a1      	b.n	8004942 <UART_SetConfig+0x2e6>
 80047fe:	2310      	movs	r3, #16
 8004800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004804:	e09d      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a4a      	ldr	r2, [pc, #296]	; (8004934 <UART_SetConfig+0x2d8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d125      	bne.n	800485c <UART_SetConfig+0x200>
 8004810:	4b45      	ldr	r3, [pc, #276]	; (8004928 <UART_SetConfig+0x2cc>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800481a:	2bc0      	cmp	r3, #192	; 0xc0
 800481c:	d016      	beq.n	800484c <UART_SetConfig+0x1f0>
 800481e:	2bc0      	cmp	r3, #192	; 0xc0
 8004820:	d818      	bhi.n	8004854 <UART_SetConfig+0x1f8>
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d00a      	beq.n	800483c <UART_SetConfig+0x1e0>
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d814      	bhi.n	8004854 <UART_SetConfig+0x1f8>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <UART_SetConfig+0x1d8>
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d008      	beq.n	8004844 <UART_SetConfig+0x1e8>
 8004832:	e00f      	b.n	8004854 <UART_SetConfig+0x1f8>
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e082      	b.n	8004942 <UART_SetConfig+0x2e6>
 800483c:	2302      	movs	r3, #2
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e07e      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e07a      	b.n	8004942 <UART_SetConfig+0x2e6>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e076      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e072      	b.n	8004942 <UART_SetConfig+0x2e6>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a35      	ldr	r2, [pc, #212]	; (8004938 <UART_SetConfig+0x2dc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d12a      	bne.n	80048bc <UART_SetConfig+0x260>
 8004866:	4b30      	ldr	r3, [pc, #192]	; (8004928 <UART_SetConfig+0x2cc>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004874:	d01a      	beq.n	80048ac <UART_SetConfig+0x250>
 8004876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487a:	d81b      	bhi.n	80048b4 <UART_SetConfig+0x258>
 800487c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004880:	d00c      	beq.n	800489c <UART_SetConfig+0x240>
 8004882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004886:	d815      	bhi.n	80048b4 <UART_SetConfig+0x258>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <UART_SetConfig+0x238>
 800488c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004890:	d008      	beq.n	80048a4 <UART_SetConfig+0x248>
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x258>
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e052      	b.n	8004942 <UART_SetConfig+0x2e6>
 800489c:	2302      	movs	r3, #2
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e04e      	b.n	8004942 <UART_SetConfig+0x2e6>
 80048a4:	2304      	movs	r3, #4
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e04a      	b.n	8004942 <UART_SetConfig+0x2e6>
 80048ac:	2308      	movs	r3, #8
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e046      	b.n	8004942 <UART_SetConfig+0x2e6>
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e042      	b.n	8004942 <UART_SetConfig+0x2e6>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <UART_SetConfig+0x2c4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d13a      	bne.n	800493c <UART_SetConfig+0x2e0>
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <UART_SetConfig+0x2cc>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d4:	d01a      	beq.n	800490c <UART_SetConfig+0x2b0>
 80048d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048da:	d81b      	bhi.n	8004914 <UART_SetConfig+0x2b8>
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d00c      	beq.n	80048fc <UART_SetConfig+0x2a0>
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e6:	d815      	bhi.n	8004914 <UART_SetConfig+0x2b8>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <UART_SetConfig+0x298>
 80048ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f0:	d008      	beq.n	8004904 <UART_SetConfig+0x2a8>
 80048f2:	e00f      	b.n	8004914 <UART_SetConfig+0x2b8>
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fa:	e022      	b.n	8004942 <UART_SetConfig+0x2e6>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e01e      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e01a      	b.n	8004942 <UART_SetConfig+0x2e6>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	e016      	b.n	8004942 <UART_SetConfig+0x2e6>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491a:	e012      	b.n	8004942 <UART_SetConfig+0x2e6>
 800491c:	efff69f3 	.word	0xefff69f3
 8004920:	40008000 	.word	0x40008000
 8004924:	40013800 	.word	0x40013800
 8004928:	40021000 	.word	0x40021000
 800492c:	40004400 	.word	0x40004400
 8004930:	40004800 	.word	0x40004800
 8004934:	40004c00 	.word	0x40004c00
 8004938:	40005000 	.word	0x40005000
 800493c:	2310      	movs	r3, #16
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a9f      	ldr	r2, [pc, #636]	; (8004bc4 <UART_SetConfig+0x568>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d17a      	bne.n	8004a42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800494c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004950:	2b08      	cmp	r3, #8
 8004952:	d824      	bhi.n	800499e <UART_SetConfig+0x342>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0x300>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004981 	.word	0x08004981
 8004960:	0800499f 	.word	0x0800499f
 8004964:	08004989 	.word	0x08004989
 8004968:	0800499f 	.word	0x0800499f
 800496c:	0800498f 	.word	0x0800498f
 8004970:	0800499f 	.word	0x0800499f
 8004974:	0800499f 	.word	0x0800499f
 8004978:	0800499f 	.word	0x0800499f
 800497c:	08004997 	.word	0x08004997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fd fe5e 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004984:	61f8      	str	r0, [r7, #28]
        break;
 8004986:	e010      	b.n	80049aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004988:	4b8f      	ldr	r3, [pc, #572]	; (8004bc8 <UART_SetConfig+0x56c>)
 800498a:	61fb      	str	r3, [r7, #28]
        break;
 800498c:	e00d      	b.n	80049aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498e:	f7fd fdbf 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8004992:	61f8      	str	r0, [r7, #28]
        break;
 8004994:	e009      	b.n	80049aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499a:	61fb      	str	r3, [r7, #28]
        break;
 800499c:	e005      	b.n	80049aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80fb 	beq.w	8004ba8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4413      	add	r3, r2
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d305      	bcc.n	80049ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d903      	bls.n	80049d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049d4:	e0e8      	b.n	8004ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2200      	movs	r2, #0
 80049da:	461c      	mov	r4, r3
 80049dc:	4615      	mov	r5, r2
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	022b      	lsls	r3, r5, #8
 80049e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049ec:	0222      	lsls	r2, r4, #8
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	6849      	ldr	r1, [r1, #4]
 80049f2:	0849      	lsrs	r1, r1, #1
 80049f4:	2000      	movs	r0, #0
 80049f6:	4688      	mov	r8, r1
 80049f8:	4681      	mov	r9, r0
 80049fa:	eb12 0a08 	adds.w	sl, r2, r8
 80049fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a10:	4650      	mov	r0, sl
 8004a12:	4659      	mov	r1, fp
 8004a14:	f7fb fc2c 	bl	8000270 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a26:	d308      	bcc.n	8004a3a <UART_SetConfig+0x3de>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2e:	d204      	bcs.n	8004a3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	60da      	str	r2, [r3, #12]
 8004a38:	e0b6      	b.n	8004ba8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a40:	e0b2      	b.n	8004ba8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4a:	d15e      	bne.n	8004b0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d828      	bhi.n	8004aa6 <UART_SetConfig+0x44a>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x400>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aa7 	.word	0x08004aa7
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7fd fdde 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004a84:	61f8      	str	r0, [r7, #28]
        break;
 8004a86:	e014      	b.n	8004ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a88:	f7fd fdf0 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8004a8c:	61f8      	str	r0, [r7, #28]
        break;
 8004a8e:	e010      	b.n	8004ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b4d      	ldr	r3, [pc, #308]	; (8004bc8 <UART_SetConfig+0x56c>)
 8004a92:	61fb      	str	r3, [r7, #28]
        break;
 8004a94:	e00d      	b.n	8004ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fd fd3b 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8004a9a:	61f8      	str	r0, [r7, #28]
        break;
 8004a9c:	e009      	b.n	8004ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	61fb      	str	r3, [r7, #28]
        break;
 8004aa4:	e005      	b.n	8004ab2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d077      	beq.n	8004ba8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005a      	lsls	r2, r3, #1
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b0f      	cmp	r3, #15
 8004ad2:	d916      	bls.n	8004b02 <UART_SetConfig+0x4a6>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d212      	bcs.n	8004b02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f023 030f 	bic.w	r3, r3, #15
 8004ae4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	8afa      	ldrh	r2, [r7, #22]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e052      	b.n	8004ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b08:	e04e      	b.n	8004ba8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d827      	bhi.n	8004b62 <UART_SetConfig+0x506>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0x4bc>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	08004b63 	.word	0x08004b63
 8004b28:	08004b53 	.word	0x08004b53
 8004b2c:	08004b63 	.word	0x08004b63
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	08004b63 	.word	0x08004b63
 8004b38:	08004b5b 	.word	0x08004b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7fd fd80 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004b40:	61f8      	str	r0, [r7, #28]
        break;
 8004b42:	e014      	b.n	8004b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b44:	f7fd fd92 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8004b48:	61f8      	str	r0, [r7, #28]
        break;
 8004b4a:	e010      	b.n	8004b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <UART_SetConfig+0x56c>)
 8004b4e:	61fb      	str	r3, [r7, #28]
        break;
 8004b50:	e00d      	b.n	8004b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b52:	f7fd fcdd 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 8004b56:	61f8      	str	r0, [r7, #28]
        break;
 8004b58:	e009      	b.n	8004b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5e:	61fb      	str	r3, [r7, #28]
        break;
 8004b60:	e005      	b.n	8004b6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d019      	beq.n	8004ba8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	085a      	lsrs	r2, r3, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	441a      	add	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	d909      	bls.n	8004ba2 <UART_SetConfig+0x546>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d205      	bcs.n	8004ba2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e002      	b.n	8004ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3728      	adds	r7, #40	; 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40008000 	.word	0x40008000
 8004bc8:	00f42400 	.word	0x00f42400

08004bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cca:	d10a      	bne.n	8004ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d20:	f7fc fb8c 	bl	800143c <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d10e      	bne.n	8004d52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f82d 	bl	8004da2 <UART_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e023      	b.n	8004d9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d10e      	bne.n	8004d7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f817 	bl	8004da2 <UART_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e00d      	b.n	8004d9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b09c      	sub	sp, #112	; 0x70
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	4613      	mov	r3, r2
 8004db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db2:	e0a5      	b.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	f000 80a1 	beq.w	8004f00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fc fb3d 	bl	800143c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d13e      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004de8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004df4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004df8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e6      	bne.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3308      	adds	r3, #8
 8004e24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e26:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e5      	bne.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e067      	b.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d04f      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6e:	d147      	bne.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e6      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	613b      	str	r3, [r7, #16]
   return(result);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f023 0301 	bic.w	r3, r3, #1
 8004ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ecc:	623a      	str	r2, [r7, #32]
 8004ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	69f9      	ldr	r1, [r7, #28]
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e5      	bne.n	8004eac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e010      	b.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69da      	ldr	r2, [r3, #28]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	f43f af4a 	beq.w	8004db4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3770      	adds	r7, #112	; 0x70
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <__errno>:
 8004f2c:	4b01      	ldr	r3, [pc, #4]	; (8004f34 <__errno+0x8>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000010 	.word	0x20000010

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	; (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	; (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	; (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	; (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f000 ffae 	bl	8005eac <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	0800608c 	.word	0x0800608c
 8004f74:	0800608c 	.word	0x0800608c
 8004f78:	0800608c 	.word	0x0800608c
 8004f7c:	08006090 	.word	0x08006090

08004f80 <memset>:
 8004f80:	4402      	add	r2, r0
 8004f82:	4603      	mov	r3, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <iprintf>:
 8004f90:	b40f      	push	{r0, r1, r2, r3}
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <iprintf+0x2c>)
 8004f94:	b513      	push	{r0, r1, r4, lr}
 8004f96:	681c      	ldr	r4, [r3, #0]
 8004f98:	b124      	cbz	r4, 8004fa4 <iprintf+0x14>
 8004f9a:	69a3      	ldr	r3, [r4, #24]
 8004f9c:	b913      	cbnz	r3, 8004fa4 <iprintf+0x14>
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 f866 	bl	8005070 <__sinit>
 8004fa4:	ab05      	add	r3, sp, #20
 8004fa6:	9a04      	ldr	r2, [sp, #16]
 8004fa8:	68a1      	ldr	r1, [r4, #8]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 f9bd 	bl	800532c <_vfiprintf_r>
 8004fb2:	b002      	add	sp, #8
 8004fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb8:	b004      	add	sp, #16
 8004fba:	4770      	bx	lr
 8004fbc:	20000010 	.word	0x20000010

08004fc0 <std>:
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	b510      	push	{r4, lr}
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fce:	6083      	str	r3, [r0, #8]
 8004fd0:	8181      	strh	r1, [r0, #12]
 8004fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fd4:	81c2      	strh	r2, [r0, #14]
 8004fd6:	6183      	str	r3, [r0, #24]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	2208      	movs	r2, #8
 8004fdc:	305c      	adds	r0, #92	; 0x5c
 8004fde:	f7ff ffcf 	bl	8004f80 <memset>
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <std+0x38>)
 8004fe4:	6263      	str	r3, [r4, #36]	; 0x24
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <std+0x3c>)
 8004fe8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <std+0x40>)
 8004fec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <std+0x44>)
 8004ff0:	6224      	str	r4, [r4, #32]
 8004ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ff4:	bd10      	pop	{r4, pc}
 8004ff6:	bf00      	nop
 8004ff8:	080058d5 	.word	0x080058d5
 8004ffc:	080058f7 	.word	0x080058f7
 8005000:	0800592f 	.word	0x0800592f
 8005004:	08005953 	.word	0x08005953

08005008 <_cleanup_r>:
 8005008:	4901      	ldr	r1, [pc, #4]	; (8005010 <_cleanup_r+0x8>)
 800500a:	f000 b8af 	b.w	800516c <_fwalk_reent>
 800500e:	bf00      	nop
 8005010:	08005c2d 	.word	0x08005c2d

08005014 <__sfmoreglue>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	2268      	movs	r2, #104	; 0x68
 8005018:	1e4d      	subs	r5, r1, #1
 800501a:	4355      	muls	r5, r2
 800501c:	460e      	mov	r6, r1
 800501e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005022:	f000 f8e5 	bl	80051f0 <_malloc_r>
 8005026:	4604      	mov	r4, r0
 8005028:	b140      	cbz	r0, 800503c <__sfmoreglue+0x28>
 800502a:	2100      	movs	r1, #0
 800502c:	e9c0 1600 	strd	r1, r6, [r0]
 8005030:	300c      	adds	r0, #12
 8005032:	60a0      	str	r0, [r4, #8]
 8005034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005038:	f7ff ffa2 	bl	8004f80 <memset>
 800503c:	4620      	mov	r0, r4
 800503e:	bd70      	pop	{r4, r5, r6, pc}

08005040 <__sfp_lock_acquire>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__sfp_lock_acquire+0x8>)
 8005042:	f000 b8b3 	b.w	80051ac <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	2000022d 	.word	0x2000022d

0800504c <__sfp_lock_release>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__sfp_lock_release+0x8>)
 800504e:	f000 b8ae 	b.w	80051ae <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	2000022d 	.word	0x2000022d

08005058 <__sinit_lock_acquire>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__sinit_lock_acquire+0x8>)
 800505a:	f000 b8a7 	b.w	80051ac <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	2000022e 	.word	0x2000022e

08005064 <__sinit_lock_release>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__sinit_lock_release+0x8>)
 8005066:	f000 b8a2 	b.w	80051ae <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	2000022e 	.word	0x2000022e

08005070 <__sinit>:
 8005070:	b510      	push	{r4, lr}
 8005072:	4604      	mov	r4, r0
 8005074:	f7ff fff0 	bl	8005058 <__sinit_lock_acquire>
 8005078:	69a3      	ldr	r3, [r4, #24]
 800507a:	b11b      	cbz	r3, 8005084 <__sinit+0x14>
 800507c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005080:	f7ff bff0 	b.w	8005064 <__sinit_lock_release>
 8005084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005088:	6523      	str	r3, [r4, #80]	; 0x50
 800508a:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <__sinit+0x68>)
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <__sinit+0x6c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	62a2      	str	r2, [r4, #40]	; 0x28
 8005092:	42a3      	cmp	r3, r4
 8005094:	bf04      	itt	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	61a3      	streq	r3, [r4, #24]
 800509a:	4620      	mov	r0, r4
 800509c:	f000 f820 	bl	80050e0 <__sfp>
 80050a0:	6060      	str	r0, [r4, #4]
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 f81c 	bl	80050e0 <__sfp>
 80050a8:	60a0      	str	r0, [r4, #8]
 80050aa:	4620      	mov	r0, r4
 80050ac:	f000 f818 	bl	80050e0 <__sfp>
 80050b0:	2200      	movs	r2, #0
 80050b2:	60e0      	str	r0, [r4, #12]
 80050b4:	2104      	movs	r1, #4
 80050b6:	6860      	ldr	r0, [r4, #4]
 80050b8:	f7ff ff82 	bl	8004fc0 <std>
 80050bc:	68a0      	ldr	r0, [r4, #8]
 80050be:	2201      	movs	r2, #1
 80050c0:	2109      	movs	r1, #9
 80050c2:	f7ff ff7d 	bl	8004fc0 <std>
 80050c6:	68e0      	ldr	r0, [r4, #12]
 80050c8:	2202      	movs	r2, #2
 80050ca:	2112      	movs	r1, #18
 80050cc:	f7ff ff78 	bl	8004fc0 <std>
 80050d0:	2301      	movs	r3, #1
 80050d2:	61a3      	str	r3, [r4, #24]
 80050d4:	e7d2      	b.n	800507c <__sinit+0xc>
 80050d6:	bf00      	nop
 80050d8:	08005fec 	.word	0x08005fec
 80050dc:	08005009 	.word	0x08005009

080050e0 <__sfp>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	4607      	mov	r7, r0
 80050e4:	f7ff ffac 	bl	8005040 <__sfp_lock_acquire>
 80050e8:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <__sfp+0x84>)
 80050ea:	681e      	ldr	r6, [r3, #0]
 80050ec:	69b3      	ldr	r3, [r6, #24]
 80050ee:	b913      	cbnz	r3, 80050f6 <__sfp+0x16>
 80050f0:	4630      	mov	r0, r6
 80050f2:	f7ff ffbd 	bl	8005070 <__sinit>
 80050f6:	3648      	adds	r6, #72	; 0x48
 80050f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	d503      	bpl.n	8005108 <__sfp+0x28>
 8005100:	6833      	ldr	r3, [r6, #0]
 8005102:	b30b      	cbz	r3, 8005148 <__sfp+0x68>
 8005104:	6836      	ldr	r6, [r6, #0]
 8005106:	e7f7      	b.n	80050f8 <__sfp+0x18>
 8005108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800510c:	b9d5      	cbnz	r5, 8005144 <__sfp+0x64>
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <__sfp+0x88>)
 8005110:	60e3      	str	r3, [r4, #12]
 8005112:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005116:	6665      	str	r5, [r4, #100]	; 0x64
 8005118:	f000 f847 	bl	80051aa <__retarget_lock_init_recursive>
 800511c:	f7ff ff96 	bl	800504c <__sfp_lock_release>
 8005120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005128:	6025      	str	r5, [r4, #0]
 800512a:	61a5      	str	r5, [r4, #24]
 800512c:	2208      	movs	r2, #8
 800512e:	4629      	mov	r1, r5
 8005130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005134:	f7ff ff24 	bl	8004f80 <memset>
 8005138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800513c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005140:	4620      	mov	r0, r4
 8005142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005144:	3468      	adds	r4, #104	; 0x68
 8005146:	e7d9      	b.n	80050fc <__sfp+0x1c>
 8005148:	2104      	movs	r1, #4
 800514a:	4638      	mov	r0, r7
 800514c:	f7ff ff62 	bl	8005014 <__sfmoreglue>
 8005150:	4604      	mov	r4, r0
 8005152:	6030      	str	r0, [r6, #0]
 8005154:	2800      	cmp	r0, #0
 8005156:	d1d5      	bne.n	8005104 <__sfp+0x24>
 8005158:	f7ff ff78 	bl	800504c <__sfp_lock_release>
 800515c:	230c      	movs	r3, #12
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	e7ee      	b.n	8005140 <__sfp+0x60>
 8005162:	bf00      	nop
 8005164:	08005fec 	.word	0x08005fec
 8005168:	ffff0001 	.word	0xffff0001

0800516c <_fwalk_reent>:
 800516c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005170:	4606      	mov	r6, r0
 8005172:	4688      	mov	r8, r1
 8005174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005178:	2700      	movs	r7, #0
 800517a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800517e:	f1b9 0901 	subs.w	r9, r9, #1
 8005182:	d505      	bpl.n	8005190 <_fwalk_reent+0x24>
 8005184:	6824      	ldr	r4, [r4, #0]
 8005186:	2c00      	cmp	r4, #0
 8005188:	d1f7      	bne.n	800517a <_fwalk_reent+0xe>
 800518a:	4638      	mov	r0, r7
 800518c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005190:	89ab      	ldrh	r3, [r5, #12]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d907      	bls.n	80051a6 <_fwalk_reent+0x3a>
 8005196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800519a:	3301      	adds	r3, #1
 800519c:	d003      	beq.n	80051a6 <_fwalk_reent+0x3a>
 800519e:	4629      	mov	r1, r5
 80051a0:	4630      	mov	r0, r6
 80051a2:	47c0      	blx	r8
 80051a4:	4307      	orrs	r7, r0
 80051a6:	3568      	adds	r5, #104	; 0x68
 80051a8:	e7e9      	b.n	800517e <_fwalk_reent+0x12>

080051aa <__retarget_lock_init_recursive>:
 80051aa:	4770      	bx	lr

080051ac <__retarget_lock_acquire_recursive>:
 80051ac:	4770      	bx	lr

080051ae <__retarget_lock_release_recursive>:
 80051ae:	4770      	bx	lr

080051b0 <sbrk_aligned>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4e0e      	ldr	r6, [pc, #56]	; (80051ec <sbrk_aligned+0x3c>)
 80051b4:	460c      	mov	r4, r1
 80051b6:	6831      	ldr	r1, [r6, #0]
 80051b8:	4605      	mov	r5, r0
 80051ba:	b911      	cbnz	r1, 80051c2 <sbrk_aligned+0x12>
 80051bc:	f000 fb7a 	bl	80058b4 <_sbrk_r>
 80051c0:	6030      	str	r0, [r6, #0]
 80051c2:	4621      	mov	r1, r4
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 fb75 	bl	80058b4 <_sbrk_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d00a      	beq.n	80051e4 <sbrk_aligned+0x34>
 80051ce:	1cc4      	adds	r4, r0, #3
 80051d0:	f024 0403 	bic.w	r4, r4, #3
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d007      	beq.n	80051e8 <sbrk_aligned+0x38>
 80051d8:	1a21      	subs	r1, r4, r0
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 fb6a 	bl	80058b4 <_sbrk_r>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d101      	bne.n	80051e8 <sbrk_aligned+0x38>
 80051e4:	f04f 34ff 	mov.w	r4, #4294967295
 80051e8:	4620      	mov	r0, r4
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	20000234 	.word	0x20000234

080051f0 <_malloc_r>:
 80051f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	1ccd      	adds	r5, r1, #3
 80051f6:	f025 0503 	bic.w	r5, r5, #3
 80051fa:	3508      	adds	r5, #8
 80051fc:	2d0c      	cmp	r5, #12
 80051fe:	bf38      	it	cc
 8005200:	250c      	movcc	r5, #12
 8005202:	2d00      	cmp	r5, #0
 8005204:	4607      	mov	r7, r0
 8005206:	db01      	blt.n	800520c <_malloc_r+0x1c>
 8005208:	42a9      	cmp	r1, r5
 800520a:	d905      	bls.n	8005218 <_malloc_r+0x28>
 800520c:	230c      	movs	r3, #12
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	2600      	movs	r6, #0
 8005212:	4630      	mov	r0, r6
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	4e2e      	ldr	r6, [pc, #184]	; (80052d4 <_malloc_r+0xe4>)
 800521a:	f000 fdbb 	bl	8005d94 <__malloc_lock>
 800521e:	6833      	ldr	r3, [r6, #0]
 8005220:	461c      	mov	r4, r3
 8005222:	bb34      	cbnz	r4, 8005272 <_malloc_r+0x82>
 8005224:	4629      	mov	r1, r5
 8005226:	4638      	mov	r0, r7
 8005228:	f7ff ffc2 	bl	80051b0 <sbrk_aligned>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	4604      	mov	r4, r0
 8005230:	d14d      	bne.n	80052ce <_malloc_r+0xde>
 8005232:	6834      	ldr	r4, [r6, #0]
 8005234:	4626      	mov	r6, r4
 8005236:	2e00      	cmp	r6, #0
 8005238:	d140      	bne.n	80052bc <_malloc_r+0xcc>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	4631      	mov	r1, r6
 800523e:	4638      	mov	r0, r7
 8005240:	eb04 0803 	add.w	r8, r4, r3
 8005244:	f000 fb36 	bl	80058b4 <_sbrk_r>
 8005248:	4580      	cmp	r8, r0
 800524a:	d13a      	bne.n	80052c2 <_malloc_r+0xd2>
 800524c:	6821      	ldr	r1, [r4, #0]
 800524e:	3503      	adds	r5, #3
 8005250:	1a6d      	subs	r5, r5, r1
 8005252:	f025 0503 	bic.w	r5, r5, #3
 8005256:	3508      	adds	r5, #8
 8005258:	2d0c      	cmp	r5, #12
 800525a:	bf38      	it	cc
 800525c:	250c      	movcc	r5, #12
 800525e:	4629      	mov	r1, r5
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff ffa5 	bl	80051b0 <sbrk_aligned>
 8005266:	3001      	adds	r0, #1
 8005268:	d02b      	beq.n	80052c2 <_malloc_r+0xd2>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	442b      	add	r3, r5
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	e00e      	b.n	8005290 <_malloc_r+0xa0>
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	1b52      	subs	r2, r2, r5
 8005276:	d41e      	bmi.n	80052b6 <_malloc_r+0xc6>
 8005278:	2a0b      	cmp	r2, #11
 800527a:	d916      	bls.n	80052aa <_malloc_r+0xba>
 800527c:	1961      	adds	r1, r4, r5
 800527e:	42a3      	cmp	r3, r4
 8005280:	6025      	str	r5, [r4, #0]
 8005282:	bf18      	it	ne
 8005284:	6059      	strne	r1, [r3, #4]
 8005286:	6863      	ldr	r3, [r4, #4]
 8005288:	bf08      	it	eq
 800528a:	6031      	streq	r1, [r6, #0]
 800528c:	5162      	str	r2, [r4, r5]
 800528e:	604b      	str	r3, [r1, #4]
 8005290:	4638      	mov	r0, r7
 8005292:	f104 060b 	add.w	r6, r4, #11
 8005296:	f000 fd83 	bl	8005da0 <__malloc_unlock>
 800529a:	f026 0607 	bic.w	r6, r6, #7
 800529e:	1d23      	adds	r3, r4, #4
 80052a0:	1af2      	subs	r2, r6, r3
 80052a2:	d0b6      	beq.n	8005212 <_malloc_r+0x22>
 80052a4:	1b9b      	subs	r3, r3, r6
 80052a6:	50a3      	str	r3, [r4, r2]
 80052a8:	e7b3      	b.n	8005212 <_malloc_r+0x22>
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	bf0c      	ite	eq
 80052b0:	6032      	streq	r2, [r6, #0]
 80052b2:	605a      	strne	r2, [r3, #4]
 80052b4:	e7ec      	b.n	8005290 <_malloc_r+0xa0>
 80052b6:	4623      	mov	r3, r4
 80052b8:	6864      	ldr	r4, [r4, #4]
 80052ba:	e7b2      	b.n	8005222 <_malloc_r+0x32>
 80052bc:	4634      	mov	r4, r6
 80052be:	6876      	ldr	r6, [r6, #4]
 80052c0:	e7b9      	b.n	8005236 <_malloc_r+0x46>
 80052c2:	230c      	movs	r3, #12
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4638      	mov	r0, r7
 80052c8:	f000 fd6a 	bl	8005da0 <__malloc_unlock>
 80052cc:	e7a1      	b.n	8005212 <_malloc_r+0x22>
 80052ce:	6025      	str	r5, [r4, #0]
 80052d0:	e7de      	b.n	8005290 <_malloc_r+0xa0>
 80052d2:	bf00      	nop
 80052d4:	20000230 	.word	0x20000230

080052d8 <__sfputc_r>:
 80052d8:	6893      	ldr	r3, [r2, #8]
 80052da:	3b01      	subs	r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	b410      	push	{r4}
 80052e0:	6093      	str	r3, [r2, #8]
 80052e2:	da08      	bge.n	80052f6 <__sfputc_r+0x1e>
 80052e4:	6994      	ldr	r4, [r2, #24]
 80052e6:	42a3      	cmp	r3, r4
 80052e8:	db01      	blt.n	80052ee <__sfputc_r+0x16>
 80052ea:	290a      	cmp	r1, #10
 80052ec:	d103      	bne.n	80052f6 <__sfputc_r+0x1e>
 80052ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052f2:	f000 bb33 	b.w	800595c <__swbuf_r>
 80052f6:	6813      	ldr	r3, [r2, #0]
 80052f8:	1c58      	adds	r0, r3, #1
 80052fa:	6010      	str	r0, [r2, #0]
 80052fc:	7019      	strb	r1, [r3, #0]
 80052fe:	4608      	mov	r0, r1
 8005300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005304:	4770      	bx	lr

08005306 <__sfputs_r>:
 8005306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005308:	4606      	mov	r6, r0
 800530a:	460f      	mov	r7, r1
 800530c:	4614      	mov	r4, r2
 800530e:	18d5      	adds	r5, r2, r3
 8005310:	42ac      	cmp	r4, r5
 8005312:	d101      	bne.n	8005318 <__sfputs_r+0x12>
 8005314:	2000      	movs	r0, #0
 8005316:	e007      	b.n	8005328 <__sfputs_r+0x22>
 8005318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800531c:	463a      	mov	r2, r7
 800531e:	4630      	mov	r0, r6
 8005320:	f7ff ffda 	bl	80052d8 <__sfputc_r>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d1f3      	bne.n	8005310 <__sfputs_r+0xa>
 8005328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800532c <_vfiprintf_r>:
 800532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005330:	460d      	mov	r5, r1
 8005332:	b09d      	sub	sp, #116	; 0x74
 8005334:	4614      	mov	r4, r2
 8005336:	4698      	mov	r8, r3
 8005338:	4606      	mov	r6, r0
 800533a:	b118      	cbz	r0, 8005344 <_vfiprintf_r+0x18>
 800533c:	6983      	ldr	r3, [r0, #24]
 800533e:	b90b      	cbnz	r3, 8005344 <_vfiprintf_r+0x18>
 8005340:	f7ff fe96 	bl	8005070 <__sinit>
 8005344:	4b89      	ldr	r3, [pc, #548]	; (800556c <_vfiprintf_r+0x240>)
 8005346:	429d      	cmp	r5, r3
 8005348:	d11b      	bne.n	8005382 <_vfiprintf_r+0x56>
 800534a:	6875      	ldr	r5, [r6, #4]
 800534c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800534e:	07d9      	lsls	r1, r3, #31
 8005350:	d405      	bmi.n	800535e <_vfiprintf_r+0x32>
 8005352:	89ab      	ldrh	r3, [r5, #12]
 8005354:	059a      	lsls	r2, r3, #22
 8005356:	d402      	bmi.n	800535e <_vfiprintf_r+0x32>
 8005358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800535a:	f7ff ff27 	bl	80051ac <__retarget_lock_acquire_recursive>
 800535e:	89ab      	ldrh	r3, [r5, #12]
 8005360:	071b      	lsls	r3, r3, #28
 8005362:	d501      	bpl.n	8005368 <_vfiprintf_r+0x3c>
 8005364:	692b      	ldr	r3, [r5, #16]
 8005366:	b9eb      	cbnz	r3, 80053a4 <_vfiprintf_r+0x78>
 8005368:	4629      	mov	r1, r5
 800536a:	4630      	mov	r0, r6
 800536c:	f000 fb5a 	bl	8005a24 <__swsetup_r>
 8005370:	b1c0      	cbz	r0, 80053a4 <_vfiprintf_r+0x78>
 8005372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005374:	07dc      	lsls	r4, r3, #31
 8005376:	d50e      	bpl.n	8005396 <_vfiprintf_r+0x6a>
 8005378:	f04f 30ff 	mov.w	r0, #4294967295
 800537c:	b01d      	add	sp, #116	; 0x74
 800537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005382:	4b7b      	ldr	r3, [pc, #492]	; (8005570 <_vfiprintf_r+0x244>)
 8005384:	429d      	cmp	r5, r3
 8005386:	d101      	bne.n	800538c <_vfiprintf_r+0x60>
 8005388:	68b5      	ldr	r5, [r6, #8]
 800538a:	e7df      	b.n	800534c <_vfiprintf_r+0x20>
 800538c:	4b79      	ldr	r3, [pc, #484]	; (8005574 <_vfiprintf_r+0x248>)
 800538e:	429d      	cmp	r5, r3
 8005390:	bf08      	it	eq
 8005392:	68f5      	ldreq	r5, [r6, #12]
 8005394:	e7da      	b.n	800534c <_vfiprintf_r+0x20>
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	0598      	lsls	r0, r3, #22
 800539a:	d4ed      	bmi.n	8005378 <_vfiprintf_r+0x4c>
 800539c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800539e:	f7ff ff06 	bl	80051ae <__retarget_lock_release_recursive>
 80053a2:	e7e9      	b.n	8005378 <_vfiprintf_r+0x4c>
 80053a4:	2300      	movs	r3, #0
 80053a6:	9309      	str	r3, [sp, #36]	; 0x24
 80053a8:	2320      	movs	r3, #32
 80053aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80053b2:	2330      	movs	r3, #48	; 0x30
 80053b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005578 <_vfiprintf_r+0x24c>
 80053b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053bc:	f04f 0901 	mov.w	r9, #1
 80053c0:	4623      	mov	r3, r4
 80053c2:	469a      	mov	sl, r3
 80053c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053c8:	b10a      	cbz	r2, 80053ce <_vfiprintf_r+0xa2>
 80053ca:	2a25      	cmp	r2, #37	; 0x25
 80053cc:	d1f9      	bne.n	80053c2 <_vfiprintf_r+0x96>
 80053ce:	ebba 0b04 	subs.w	fp, sl, r4
 80053d2:	d00b      	beq.n	80053ec <_vfiprintf_r+0xc0>
 80053d4:	465b      	mov	r3, fp
 80053d6:	4622      	mov	r2, r4
 80053d8:	4629      	mov	r1, r5
 80053da:	4630      	mov	r0, r6
 80053dc:	f7ff ff93 	bl	8005306 <__sfputs_r>
 80053e0:	3001      	adds	r0, #1
 80053e2:	f000 80aa 	beq.w	800553a <_vfiprintf_r+0x20e>
 80053e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e8:	445a      	add	r2, fp
 80053ea:	9209      	str	r2, [sp, #36]	; 0x24
 80053ec:	f89a 3000 	ldrb.w	r3, [sl]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80a2 	beq.w	800553a <_vfiprintf_r+0x20e>
 80053f6:	2300      	movs	r3, #0
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005400:	f10a 0a01 	add.w	sl, sl, #1
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	9307      	str	r3, [sp, #28]
 8005408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800540c:	931a      	str	r3, [sp, #104]	; 0x68
 800540e:	4654      	mov	r4, sl
 8005410:	2205      	movs	r2, #5
 8005412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005416:	4858      	ldr	r0, [pc, #352]	; (8005578 <_vfiprintf_r+0x24c>)
 8005418:	f7fa feda 	bl	80001d0 <memchr>
 800541c:	9a04      	ldr	r2, [sp, #16]
 800541e:	b9d8      	cbnz	r0, 8005458 <_vfiprintf_r+0x12c>
 8005420:	06d1      	lsls	r1, r2, #27
 8005422:	bf44      	itt	mi
 8005424:	2320      	movmi	r3, #32
 8005426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800542a:	0713      	lsls	r3, r2, #28
 800542c:	bf44      	itt	mi
 800542e:	232b      	movmi	r3, #43	; 0x2b
 8005430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005434:	f89a 3000 	ldrb.w	r3, [sl]
 8005438:	2b2a      	cmp	r3, #42	; 0x2a
 800543a:	d015      	beq.n	8005468 <_vfiprintf_r+0x13c>
 800543c:	9a07      	ldr	r2, [sp, #28]
 800543e:	4654      	mov	r4, sl
 8005440:	2000      	movs	r0, #0
 8005442:	f04f 0c0a 	mov.w	ip, #10
 8005446:	4621      	mov	r1, r4
 8005448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800544c:	3b30      	subs	r3, #48	; 0x30
 800544e:	2b09      	cmp	r3, #9
 8005450:	d94e      	bls.n	80054f0 <_vfiprintf_r+0x1c4>
 8005452:	b1b0      	cbz	r0, 8005482 <_vfiprintf_r+0x156>
 8005454:	9207      	str	r2, [sp, #28]
 8005456:	e014      	b.n	8005482 <_vfiprintf_r+0x156>
 8005458:	eba0 0308 	sub.w	r3, r0, r8
 800545c:	fa09 f303 	lsl.w	r3, r9, r3
 8005460:	4313      	orrs	r3, r2
 8005462:	9304      	str	r3, [sp, #16]
 8005464:	46a2      	mov	sl, r4
 8005466:	e7d2      	b.n	800540e <_vfiprintf_r+0xe2>
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	1d19      	adds	r1, r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	9103      	str	r1, [sp, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	bfbb      	ittet	lt
 8005474:	425b      	neglt	r3, r3
 8005476:	f042 0202 	orrlt.w	r2, r2, #2
 800547a:	9307      	strge	r3, [sp, #28]
 800547c:	9307      	strlt	r3, [sp, #28]
 800547e:	bfb8      	it	lt
 8005480:	9204      	strlt	r2, [sp, #16]
 8005482:	7823      	ldrb	r3, [r4, #0]
 8005484:	2b2e      	cmp	r3, #46	; 0x2e
 8005486:	d10c      	bne.n	80054a2 <_vfiprintf_r+0x176>
 8005488:	7863      	ldrb	r3, [r4, #1]
 800548a:	2b2a      	cmp	r3, #42	; 0x2a
 800548c:	d135      	bne.n	80054fa <_vfiprintf_r+0x1ce>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	1d1a      	adds	r2, r3, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	9203      	str	r2, [sp, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	bfb8      	it	lt
 800549a:	f04f 33ff 	movlt.w	r3, #4294967295
 800549e:	3402      	adds	r4, #2
 80054a0:	9305      	str	r3, [sp, #20]
 80054a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005588 <_vfiprintf_r+0x25c>
 80054a6:	7821      	ldrb	r1, [r4, #0]
 80054a8:	2203      	movs	r2, #3
 80054aa:	4650      	mov	r0, sl
 80054ac:	f7fa fe90 	bl	80001d0 <memchr>
 80054b0:	b140      	cbz	r0, 80054c4 <_vfiprintf_r+0x198>
 80054b2:	2340      	movs	r3, #64	; 0x40
 80054b4:	eba0 000a 	sub.w	r0, r0, sl
 80054b8:	fa03 f000 	lsl.w	r0, r3, r0
 80054bc:	9b04      	ldr	r3, [sp, #16]
 80054be:	4303      	orrs	r3, r0
 80054c0:	3401      	adds	r4, #1
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c8:	482c      	ldr	r0, [pc, #176]	; (800557c <_vfiprintf_r+0x250>)
 80054ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ce:	2206      	movs	r2, #6
 80054d0:	f7fa fe7e 	bl	80001d0 <memchr>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d03f      	beq.n	8005558 <_vfiprintf_r+0x22c>
 80054d8:	4b29      	ldr	r3, [pc, #164]	; (8005580 <_vfiprintf_r+0x254>)
 80054da:	bb1b      	cbnz	r3, 8005524 <_vfiprintf_r+0x1f8>
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	3307      	adds	r3, #7
 80054e0:	f023 0307 	bic.w	r3, r3, #7
 80054e4:	3308      	adds	r3, #8
 80054e6:	9303      	str	r3, [sp, #12]
 80054e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ea:	443b      	add	r3, r7
 80054ec:	9309      	str	r3, [sp, #36]	; 0x24
 80054ee:	e767      	b.n	80053c0 <_vfiprintf_r+0x94>
 80054f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054f4:	460c      	mov	r4, r1
 80054f6:	2001      	movs	r0, #1
 80054f8:	e7a5      	b.n	8005446 <_vfiprintf_r+0x11a>
 80054fa:	2300      	movs	r3, #0
 80054fc:	3401      	adds	r4, #1
 80054fe:	9305      	str	r3, [sp, #20]
 8005500:	4619      	mov	r1, r3
 8005502:	f04f 0c0a 	mov.w	ip, #10
 8005506:	4620      	mov	r0, r4
 8005508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800550c:	3a30      	subs	r2, #48	; 0x30
 800550e:	2a09      	cmp	r2, #9
 8005510:	d903      	bls.n	800551a <_vfiprintf_r+0x1ee>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0c5      	beq.n	80054a2 <_vfiprintf_r+0x176>
 8005516:	9105      	str	r1, [sp, #20]
 8005518:	e7c3      	b.n	80054a2 <_vfiprintf_r+0x176>
 800551a:	fb0c 2101 	mla	r1, ip, r1, r2
 800551e:	4604      	mov	r4, r0
 8005520:	2301      	movs	r3, #1
 8005522:	e7f0      	b.n	8005506 <_vfiprintf_r+0x1da>
 8005524:	ab03      	add	r3, sp, #12
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	462a      	mov	r2, r5
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <_vfiprintf_r+0x258>)
 800552c:	a904      	add	r1, sp, #16
 800552e:	4630      	mov	r0, r6
 8005530:	f3af 8000 	nop.w
 8005534:	4607      	mov	r7, r0
 8005536:	1c78      	adds	r0, r7, #1
 8005538:	d1d6      	bne.n	80054e8 <_vfiprintf_r+0x1bc>
 800553a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800553c:	07d9      	lsls	r1, r3, #31
 800553e:	d405      	bmi.n	800554c <_vfiprintf_r+0x220>
 8005540:	89ab      	ldrh	r3, [r5, #12]
 8005542:	059a      	lsls	r2, r3, #22
 8005544:	d402      	bmi.n	800554c <_vfiprintf_r+0x220>
 8005546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005548:	f7ff fe31 	bl	80051ae <__retarget_lock_release_recursive>
 800554c:	89ab      	ldrh	r3, [r5, #12]
 800554e:	065b      	lsls	r3, r3, #25
 8005550:	f53f af12 	bmi.w	8005378 <_vfiprintf_r+0x4c>
 8005554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005556:	e711      	b.n	800537c <_vfiprintf_r+0x50>
 8005558:	ab03      	add	r3, sp, #12
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	462a      	mov	r2, r5
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <_vfiprintf_r+0x258>)
 8005560:	a904      	add	r1, sp, #16
 8005562:	4630      	mov	r0, r6
 8005564:	f000 f880 	bl	8005668 <_printf_i>
 8005568:	e7e4      	b.n	8005534 <_vfiprintf_r+0x208>
 800556a:	bf00      	nop
 800556c:	08006010 	.word	0x08006010
 8005570:	08006030 	.word	0x08006030
 8005574:	08005ff0 	.word	0x08005ff0
 8005578:	08006050 	.word	0x08006050
 800557c:	0800605a 	.word	0x0800605a
 8005580:	00000000 	.word	0x00000000
 8005584:	08005307 	.word	0x08005307
 8005588:	08006056 	.word	0x08006056

0800558c <_printf_common>:
 800558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	4616      	mov	r6, r2
 8005592:	4699      	mov	r9, r3
 8005594:	688a      	ldr	r2, [r1, #8]
 8005596:	690b      	ldr	r3, [r1, #16]
 8005598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800559c:	4293      	cmp	r3, r2
 800559e:	bfb8      	it	lt
 80055a0:	4613      	movlt	r3, r2
 80055a2:	6033      	str	r3, [r6, #0]
 80055a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055a8:	4607      	mov	r7, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	b10a      	cbz	r2, 80055b2 <_printf_common+0x26>
 80055ae:	3301      	adds	r3, #1
 80055b0:	6033      	str	r3, [r6, #0]
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	0699      	lsls	r1, r3, #26
 80055b6:	bf42      	ittt	mi
 80055b8:	6833      	ldrmi	r3, [r6, #0]
 80055ba:	3302      	addmi	r3, #2
 80055bc:	6033      	strmi	r3, [r6, #0]
 80055be:	6825      	ldr	r5, [r4, #0]
 80055c0:	f015 0506 	ands.w	r5, r5, #6
 80055c4:	d106      	bne.n	80055d4 <_printf_common+0x48>
 80055c6:	f104 0a19 	add.w	sl, r4, #25
 80055ca:	68e3      	ldr	r3, [r4, #12]
 80055cc:	6832      	ldr	r2, [r6, #0]
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	42ab      	cmp	r3, r5
 80055d2:	dc26      	bgt.n	8005622 <_printf_common+0x96>
 80055d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055d8:	1e13      	subs	r3, r2, #0
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	bf18      	it	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	0692      	lsls	r2, r2, #26
 80055e2:	d42b      	bmi.n	800563c <_printf_common+0xb0>
 80055e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055e8:	4649      	mov	r1, r9
 80055ea:	4638      	mov	r0, r7
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d01e      	beq.n	8005630 <_printf_common+0xa4>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	68e5      	ldr	r5, [r4, #12]
 80055f6:	6832      	ldr	r2, [r6, #0]
 80055f8:	f003 0306 	and.w	r3, r3, #6
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	bf08      	it	eq
 8005600:	1aad      	subeq	r5, r5, r2
 8005602:	68a3      	ldr	r3, [r4, #8]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	bf0c      	ite	eq
 8005608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800560c:	2500      	movne	r5, #0
 800560e:	4293      	cmp	r3, r2
 8005610:	bfc4      	itt	gt
 8005612:	1a9b      	subgt	r3, r3, r2
 8005614:	18ed      	addgt	r5, r5, r3
 8005616:	2600      	movs	r6, #0
 8005618:	341a      	adds	r4, #26
 800561a:	42b5      	cmp	r5, r6
 800561c:	d11a      	bne.n	8005654 <_printf_common+0xc8>
 800561e:	2000      	movs	r0, #0
 8005620:	e008      	b.n	8005634 <_printf_common+0xa8>
 8005622:	2301      	movs	r3, #1
 8005624:	4652      	mov	r2, sl
 8005626:	4649      	mov	r1, r9
 8005628:	4638      	mov	r0, r7
 800562a:	47c0      	blx	r8
 800562c:	3001      	adds	r0, #1
 800562e:	d103      	bne.n	8005638 <_printf_common+0xac>
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005638:	3501      	adds	r5, #1
 800563a:	e7c6      	b.n	80055ca <_printf_common+0x3e>
 800563c:	18e1      	adds	r1, r4, r3
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	2030      	movs	r0, #48	; 0x30
 8005642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005646:	4422      	add	r2, r4
 8005648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800564c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005650:	3302      	adds	r3, #2
 8005652:	e7c7      	b.n	80055e4 <_printf_common+0x58>
 8005654:	2301      	movs	r3, #1
 8005656:	4622      	mov	r2, r4
 8005658:	4649      	mov	r1, r9
 800565a:	4638      	mov	r0, r7
 800565c:	47c0      	blx	r8
 800565e:	3001      	adds	r0, #1
 8005660:	d0e6      	beq.n	8005630 <_printf_common+0xa4>
 8005662:	3601      	adds	r6, #1
 8005664:	e7d9      	b.n	800561a <_printf_common+0x8e>
	...

08005668 <_printf_i>:
 8005668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	7e0f      	ldrb	r7, [r1, #24]
 800566e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005670:	2f78      	cmp	r7, #120	; 0x78
 8005672:	4691      	mov	r9, r2
 8005674:	4680      	mov	r8, r0
 8005676:	460c      	mov	r4, r1
 8005678:	469a      	mov	sl, r3
 800567a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800567e:	d807      	bhi.n	8005690 <_printf_i+0x28>
 8005680:	2f62      	cmp	r7, #98	; 0x62
 8005682:	d80a      	bhi.n	800569a <_printf_i+0x32>
 8005684:	2f00      	cmp	r7, #0
 8005686:	f000 80d8 	beq.w	800583a <_printf_i+0x1d2>
 800568a:	2f58      	cmp	r7, #88	; 0x58
 800568c:	f000 80a3 	beq.w	80057d6 <_printf_i+0x16e>
 8005690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005698:	e03a      	b.n	8005710 <_printf_i+0xa8>
 800569a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800569e:	2b15      	cmp	r3, #21
 80056a0:	d8f6      	bhi.n	8005690 <_printf_i+0x28>
 80056a2:	a101      	add	r1, pc, #4	; (adr r1, 80056a8 <_printf_i+0x40>)
 80056a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056a8:	08005701 	.word	0x08005701
 80056ac:	08005715 	.word	0x08005715
 80056b0:	08005691 	.word	0x08005691
 80056b4:	08005691 	.word	0x08005691
 80056b8:	08005691 	.word	0x08005691
 80056bc:	08005691 	.word	0x08005691
 80056c0:	08005715 	.word	0x08005715
 80056c4:	08005691 	.word	0x08005691
 80056c8:	08005691 	.word	0x08005691
 80056cc:	08005691 	.word	0x08005691
 80056d0:	08005691 	.word	0x08005691
 80056d4:	08005821 	.word	0x08005821
 80056d8:	08005745 	.word	0x08005745
 80056dc:	08005803 	.word	0x08005803
 80056e0:	08005691 	.word	0x08005691
 80056e4:	08005691 	.word	0x08005691
 80056e8:	08005843 	.word	0x08005843
 80056ec:	08005691 	.word	0x08005691
 80056f0:	08005745 	.word	0x08005745
 80056f4:	08005691 	.word	0x08005691
 80056f8:	08005691 	.word	0x08005691
 80056fc:	0800580b 	.word	0x0800580b
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	1d1a      	adds	r2, r3, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	602a      	str	r2, [r5, #0]
 8005708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800570c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005710:	2301      	movs	r3, #1
 8005712:	e0a3      	b.n	800585c <_printf_i+0x1f4>
 8005714:	6820      	ldr	r0, [r4, #0]
 8005716:	6829      	ldr	r1, [r5, #0]
 8005718:	0606      	lsls	r6, r0, #24
 800571a:	f101 0304 	add.w	r3, r1, #4
 800571e:	d50a      	bpl.n	8005736 <_printf_i+0xce>
 8005720:	680e      	ldr	r6, [r1, #0]
 8005722:	602b      	str	r3, [r5, #0]
 8005724:	2e00      	cmp	r6, #0
 8005726:	da03      	bge.n	8005730 <_printf_i+0xc8>
 8005728:	232d      	movs	r3, #45	; 0x2d
 800572a:	4276      	negs	r6, r6
 800572c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005730:	485e      	ldr	r0, [pc, #376]	; (80058ac <_printf_i+0x244>)
 8005732:	230a      	movs	r3, #10
 8005734:	e019      	b.n	800576a <_printf_i+0x102>
 8005736:	680e      	ldr	r6, [r1, #0]
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800573e:	bf18      	it	ne
 8005740:	b236      	sxthne	r6, r6
 8005742:	e7ef      	b.n	8005724 <_printf_i+0xbc>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	1d19      	adds	r1, r3, #4
 800574a:	6029      	str	r1, [r5, #0]
 800574c:	0601      	lsls	r1, r0, #24
 800574e:	d501      	bpl.n	8005754 <_printf_i+0xec>
 8005750:	681e      	ldr	r6, [r3, #0]
 8005752:	e002      	b.n	800575a <_printf_i+0xf2>
 8005754:	0646      	lsls	r6, r0, #25
 8005756:	d5fb      	bpl.n	8005750 <_printf_i+0xe8>
 8005758:	881e      	ldrh	r6, [r3, #0]
 800575a:	4854      	ldr	r0, [pc, #336]	; (80058ac <_printf_i+0x244>)
 800575c:	2f6f      	cmp	r7, #111	; 0x6f
 800575e:	bf0c      	ite	eq
 8005760:	2308      	moveq	r3, #8
 8005762:	230a      	movne	r3, #10
 8005764:	2100      	movs	r1, #0
 8005766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800576a:	6865      	ldr	r5, [r4, #4]
 800576c:	60a5      	str	r5, [r4, #8]
 800576e:	2d00      	cmp	r5, #0
 8005770:	bfa2      	ittt	ge
 8005772:	6821      	ldrge	r1, [r4, #0]
 8005774:	f021 0104 	bicge.w	r1, r1, #4
 8005778:	6021      	strge	r1, [r4, #0]
 800577a:	b90e      	cbnz	r6, 8005780 <_printf_i+0x118>
 800577c:	2d00      	cmp	r5, #0
 800577e:	d04d      	beq.n	800581c <_printf_i+0x1b4>
 8005780:	4615      	mov	r5, r2
 8005782:	fbb6 f1f3 	udiv	r1, r6, r3
 8005786:	fb03 6711 	mls	r7, r3, r1, r6
 800578a:	5dc7      	ldrb	r7, [r0, r7]
 800578c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005790:	4637      	mov	r7, r6
 8005792:	42bb      	cmp	r3, r7
 8005794:	460e      	mov	r6, r1
 8005796:	d9f4      	bls.n	8005782 <_printf_i+0x11a>
 8005798:	2b08      	cmp	r3, #8
 800579a:	d10b      	bne.n	80057b4 <_printf_i+0x14c>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	07de      	lsls	r6, r3, #31
 80057a0:	d508      	bpl.n	80057b4 <_printf_i+0x14c>
 80057a2:	6923      	ldr	r3, [r4, #16]
 80057a4:	6861      	ldr	r1, [r4, #4]
 80057a6:	4299      	cmp	r1, r3
 80057a8:	bfde      	ittt	le
 80057aa:	2330      	movle	r3, #48	; 0x30
 80057ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057b4:	1b52      	subs	r2, r2, r5
 80057b6:	6122      	str	r2, [r4, #16]
 80057b8:	f8cd a000 	str.w	sl, [sp]
 80057bc:	464b      	mov	r3, r9
 80057be:	aa03      	add	r2, sp, #12
 80057c0:	4621      	mov	r1, r4
 80057c2:	4640      	mov	r0, r8
 80057c4:	f7ff fee2 	bl	800558c <_printf_common>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d14c      	bne.n	8005866 <_printf_i+0x1fe>
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295
 80057d0:	b004      	add	sp, #16
 80057d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d6:	4835      	ldr	r0, [pc, #212]	; (80058ac <_printf_i+0x244>)
 80057d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057dc:	6829      	ldr	r1, [r5, #0]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80057e4:	6029      	str	r1, [r5, #0]
 80057e6:	061d      	lsls	r5, r3, #24
 80057e8:	d514      	bpl.n	8005814 <_printf_i+0x1ac>
 80057ea:	07df      	lsls	r7, r3, #31
 80057ec:	bf44      	itt	mi
 80057ee:	f043 0320 	orrmi.w	r3, r3, #32
 80057f2:	6023      	strmi	r3, [r4, #0]
 80057f4:	b91e      	cbnz	r6, 80057fe <_printf_i+0x196>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f023 0320 	bic.w	r3, r3, #32
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	2310      	movs	r3, #16
 8005800:	e7b0      	b.n	8005764 <_printf_i+0xfc>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	f043 0320 	orr.w	r3, r3, #32
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	2378      	movs	r3, #120	; 0x78
 800580c:	4828      	ldr	r0, [pc, #160]	; (80058b0 <_printf_i+0x248>)
 800580e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005812:	e7e3      	b.n	80057dc <_printf_i+0x174>
 8005814:	0659      	lsls	r1, r3, #25
 8005816:	bf48      	it	mi
 8005818:	b2b6      	uxthmi	r6, r6
 800581a:	e7e6      	b.n	80057ea <_printf_i+0x182>
 800581c:	4615      	mov	r5, r2
 800581e:	e7bb      	b.n	8005798 <_printf_i+0x130>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	6826      	ldr	r6, [r4, #0]
 8005824:	6961      	ldr	r1, [r4, #20]
 8005826:	1d18      	adds	r0, r3, #4
 8005828:	6028      	str	r0, [r5, #0]
 800582a:	0635      	lsls	r5, r6, #24
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	d501      	bpl.n	8005834 <_printf_i+0x1cc>
 8005830:	6019      	str	r1, [r3, #0]
 8005832:	e002      	b.n	800583a <_printf_i+0x1d2>
 8005834:	0670      	lsls	r0, r6, #25
 8005836:	d5fb      	bpl.n	8005830 <_printf_i+0x1c8>
 8005838:	8019      	strh	r1, [r3, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	4615      	mov	r5, r2
 8005840:	e7ba      	b.n	80057b8 <_printf_i+0x150>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	1d1a      	adds	r2, r3, #4
 8005846:	602a      	str	r2, [r5, #0]
 8005848:	681d      	ldr	r5, [r3, #0]
 800584a:	6862      	ldr	r2, [r4, #4]
 800584c:	2100      	movs	r1, #0
 800584e:	4628      	mov	r0, r5
 8005850:	f7fa fcbe 	bl	80001d0 <memchr>
 8005854:	b108      	cbz	r0, 800585a <_printf_i+0x1f2>
 8005856:	1b40      	subs	r0, r0, r5
 8005858:	6060      	str	r0, [r4, #4]
 800585a:	6863      	ldr	r3, [r4, #4]
 800585c:	6123      	str	r3, [r4, #16]
 800585e:	2300      	movs	r3, #0
 8005860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005864:	e7a8      	b.n	80057b8 <_printf_i+0x150>
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	462a      	mov	r2, r5
 800586a:	4649      	mov	r1, r9
 800586c:	4640      	mov	r0, r8
 800586e:	47d0      	blx	sl
 8005870:	3001      	adds	r0, #1
 8005872:	d0ab      	beq.n	80057cc <_printf_i+0x164>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	079b      	lsls	r3, r3, #30
 8005878:	d413      	bmi.n	80058a2 <_printf_i+0x23a>
 800587a:	68e0      	ldr	r0, [r4, #12]
 800587c:	9b03      	ldr	r3, [sp, #12]
 800587e:	4298      	cmp	r0, r3
 8005880:	bfb8      	it	lt
 8005882:	4618      	movlt	r0, r3
 8005884:	e7a4      	b.n	80057d0 <_printf_i+0x168>
 8005886:	2301      	movs	r3, #1
 8005888:	4632      	mov	r2, r6
 800588a:	4649      	mov	r1, r9
 800588c:	4640      	mov	r0, r8
 800588e:	47d0      	blx	sl
 8005890:	3001      	adds	r0, #1
 8005892:	d09b      	beq.n	80057cc <_printf_i+0x164>
 8005894:	3501      	adds	r5, #1
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	9903      	ldr	r1, [sp, #12]
 800589a:	1a5b      	subs	r3, r3, r1
 800589c:	42ab      	cmp	r3, r5
 800589e:	dcf2      	bgt.n	8005886 <_printf_i+0x21e>
 80058a0:	e7eb      	b.n	800587a <_printf_i+0x212>
 80058a2:	2500      	movs	r5, #0
 80058a4:	f104 0619 	add.w	r6, r4, #25
 80058a8:	e7f5      	b.n	8005896 <_printf_i+0x22e>
 80058aa:	bf00      	nop
 80058ac:	08006061 	.word	0x08006061
 80058b0:	08006072 	.word	0x08006072

080058b4 <_sbrk_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4d06      	ldr	r5, [pc, #24]	; (80058d0 <_sbrk_r+0x1c>)
 80058b8:	2300      	movs	r3, #0
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	f7fb fcda 	bl	8001278 <_sbrk>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_sbrk_r+0x1a>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_sbrk_r+0x1a>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	20000238 	.word	0x20000238

080058d4 <__sread>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	460c      	mov	r4, r1
 80058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058dc:	f000 fab2 	bl	8005e44 <_read_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	bfab      	itete	ge
 80058e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058e6:	89a3      	ldrhlt	r3, [r4, #12]
 80058e8:	181b      	addge	r3, r3, r0
 80058ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ee:	bfac      	ite	ge
 80058f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80058f2:	81a3      	strhlt	r3, [r4, #12]
 80058f4:	bd10      	pop	{r4, pc}

080058f6 <__swrite>:
 80058f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fa:	461f      	mov	r7, r3
 80058fc:	898b      	ldrh	r3, [r1, #12]
 80058fe:	05db      	lsls	r3, r3, #23
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	4616      	mov	r6, r2
 8005906:	d505      	bpl.n	8005914 <__swrite+0x1e>
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	2302      	movs	r3, #2
 800590e:	2200      	movs	r2, #0
 8005910:	f000 f9c8 	bl	8005ca4 <_lseek_r>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800591a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	4632      	mov	r2, r6
 8005922:	463b      	mov	r3, r7
 8005924:	4628      	mov	r0, r5
 8005926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	f000 b869 	b.w	8005a00 <_write_r>

0800592e <__sseek>:
 800592e:	b510      	push	{r4, lr}
 8005930:	460c      	mov	r4, r1
 8005932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005936:	f000 f9b5 	bl	8005ca4 <_lseek_r>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	bf15      	itete	ne
 8005940:	6560      	strne	r0, [r4, #84]	; 0x54
 8005942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800594a:	81a3      	strheq	r3, [r4, #12]
 800594c:	bf18      	it	ne
 800594e:	81a3      	strhne	r3, [r4, #12]
 8005950:	bd10      	pop	{r4, pc}

08005952 <__sclose>:
 8005952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005956:	f000 b8d3 	b.w	8005b00 <_close_r>
	...

0800595c <__swbuf_r>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	460e      	mov	r6, r1
 8005960:	4614      	mov	r4, r2
 8005962:	4605      	mov	r5, r0
 8005964:	b118      	cbz	r0, 800596e <__swbuf_r+0x12>
 8005966:	6983      	ldr	r3, [r0, #24]
 8005968:	b90b      	cbnz	r3, 800596e <__swbuf_r+0x12>
 800596a:	f7ff fb81 	bl	8005070 <__sinit>
 800596e:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <__swbuf_r+0x98>)
 8005970:	429c      	cmp	r4, r3
 8005972:	d12b      	bne.n	80059cc <__swbuf_r+0x70>
 8005974:	686c      	ldr	r4, [r5, #4]
 8005976:	69a3      	ldr	r3, [r4, #24]
 8005978:	60a3      	str	r3, [r4, #8]
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	071a      	lsls	r2, r3, #28
 800597e:	d52f      	bpl.n	80059e0 <__swbuf_r+0x84>
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	b36b      	cbz	r3, 80059e0 <__swbuf_r+0x84>
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	1ac0      	subs	r0, r0, r3
 800598a:	6963      	ldr	r3, [r4, #20]
 800598c:	b2f6      	uxtb	r6, r6
 800598e:	4283      	cmp	r3, r0
 8005990:	4637      	mov	r7, r6
 8005992:	dc04      	bgt.n	800599e <__swbuf_r+0x42>
 8005994:	4621      	mov	r1, r4
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f948 	bl	8005c2c <_fflush_r>
 800599c:	bb30      	cbnz	r0, 80059ec <__swbuf_r+0x90>
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	60a3      	str	r3, [r4, #8]
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	701e      	strb	r6, [r3, #0]
 80059ac:	6963      	ldr	r3, [r4, #20]
 80059ae:	3001      	adds	r0, #1
 80059b0:	4283      	cmp	r3, r0
 80059b2:	d004      	beq.n	80059be <__swbuf_r+0x62>
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	07db      	lsls	r3, r3, #31
 80059b8:	d506      	bpl.n	80059c8 <__swbuf_r+0x6c>
 80059ba:	2e0a      	cmp	r6, #10
 80059bc:	d104      	bne.n	80059c8 <__swbuf_r+0x6c>
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f933 	bl	8005c2c <_fflush_r>
 80059c6:	b988      	cbnz	r0, 80059ec <__swbuf_r+0x90>
 80059c8:	4638      	mov	r0, r7
 80059ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <__swbuf_r+0x9c>)
 80059ce:	429c      	cmp	r4, r3
 80059d0:	d101      	bne.n	80059d6 <__swbuf_r+0x7a>
 80059d2:	68ac      	ldr	r4, [r5, #8]
 80059d4:	e7cf      	b.n	8005976 <__swbuf_r+0x1a>
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <__swbuf_r+0xa0>)
 80059d8:	429c      	cmp	r4, r3
 80059da:	bf08      	it	eq
 80059dc:	68ec      	ldreq	r4, [r5, #12]
 80059de:	e7ca      	b.n	8005976 <__swbuf_r+0x1a>
 80059e0:	4621      	mov	r1, r4
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 f81e 	bl	8005a24 <__swsetup_r>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d0cb      	beq.n	8005984 <__swbuf_r+0x28>
 80059ec:	f04f 37ff 	mov.w	r7, #4294967295
 80059f0:	e7ea      	b.n	80059c8 <__swbuf_r+0x6c>
 80059f2:	bf00      	nop
 80059f4:	08006010 	.word	0x08006010
 80059f8:	08006030 	.word	0x08006030
 80059fc:	08005ff0 	.word	0x08005ff0

08005a00 <_write_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d07      	ldr	r5, [pc, #28]	; (8005a20 <_write_r+0x20>)
 8005a04:	4604      	mov	r4, r0
 8005a06:	4608      	mov	r0, r1
 8005a08:	4611      	mov	r1, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	602a      	str	r2, [r5, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f7fb fbe1 	bl	80011d6 <_write>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_write_r+0x1e>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_write_r+0x1e>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	20000238 	.word	0x20000238

08005a24 <__swsetup_r>:
 8005a24:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <__swsetup_r+0xcc>)
 8005a26:	b570      	push	{r4, r5, r6, lr}
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	b125      	cbz	r5, 8005a3a <__swsetup_r+0x16>
 8005a30:	69ab      	ldr	r3, [r5, #24]
 8005a32:	b913      	cbnz	r3, 8005a3a <__swsetup_r+0x16>
 8005a34:	4628      	mov	r0, r5
 8005a36:	f7ff fb1b 	bl	8005070 <__sinit>
 8005a3a:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <__swsetup_r+0xd0>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d10f      	bne.n	8005a60 <__swsetup_r+0x3c>
 8005a40:	686c      	ldr	r4, [r5, #4]
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a48:	0719      	lsls	r1, r3, #28
 8005a4a:	d42c      	bmi.n	8005aa6 <__swsetup_r+0x82>
 8005a4c:	06dd      	lsls	r5, r3, #27
 8005a4e:	d411      	bmi.n	8005a74 <__swsetup_r+0x50>
 8005a50:	2309      	movs	r3, #9
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	e03e      	b.n	8005ade <__swsetup_r+0xba>
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <__swsetup_r+0xd4>)
 8005a62:	429c      	cmp	r4, r3
 8005a64:	d101      	bne.n	8005a6a <__swsetup_r+0x46>
 8005a66:	68ac      	ldr	r4, [r5, #8]
 8005a68:	e7eb      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <__swsetup_r+0xd8>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	bf08      	it	eq
 8005a70:	68ec      	ldreq	r4, [r5, #12]
 8005a72:	e7e6      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a74:	0758      	lsls	r0, r3, #29
 8005a76:	d512      	bpl.n	8005a9e <__swsetup_r+0x7a>
 8005a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7a:	b141      	cbz	r1, 8005a8e <__swsetup_r+0x6a>
 8005a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a80:	4299      	cmp	r1, r3
 8005a82:	d002      	beq.n	8005a8a <__swsetup_r+0x66>
 8005a84:	4630      	mov	r0, r6
 8005a86:	f000 f991 	bl	8005dac <_free_r>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6063      	str	r3, [r4, #4]
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f043 0308 	orr.w	r3, r3, #8
 8005aa4:	81a3      	strh	r3, [r4, #12]
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	b94b      	cbnz	r3, 8005abe <__swsetup_r+0x9a>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab4:	d003      	beq.n	8005abe <__swsetup_r+0x9a>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f000 f92b 	bl	8005d14 <__smakebuf_r>
 8005abe:	89a0      	ldrh	r0, [r4, #12]
 8005ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac4:	f010 0301 	ands.w	r3, r0, #1
 8005ac8:	d00a      	beq.n	8005ae0 <__swsetup_r+0xbc>
 8005aca:	2300      	movs	r3, #0
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	6963      	ldr	r3, [r4, #20]
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	61a3      	str	r3, [r4, #24]
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b943      	cbnz	r3, 8005aea <__swsetup_r+0xc6>
 8005ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005adc:	d1ba      	bne.n	8005a54 <__swsetup_r+0x30>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	0781      	lsls	r1, r0, #30
 8005ae2:	bf58      	it	pl
 8005ae4:	6963      	ldrpl	r3, [r4, #20]
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	e7f4      	b.n	8005ad4 <__swsetup_r+0xb0>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e7f7      	b.n	8005ade <__swsetup_r+0xba>
 8005aee:	bf00      	nop
 8005af0:	20000010 	.word	0x20000010
 8005af4:	08006010 	.word	0x08006010
 8005af8:	08006030 	.word	0x08006030
 8005afc:	08005ff0 	.word	0x08005ff0

08005b00 <_close_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d06      	ldr	r5, [pc, #24]	; (8005b1c <_close_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	f7fb fb7f 	bl	800120e <_close>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_close_r+0x1a>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_close_r+0x1a>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	20000238 	.word	0x20000238

08005b20 <__sflush_r>:
 8005b20:	898a      	ldrh	r2, [r1, #12]
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b26:	4605      	mov	r5, r0
 8005b28:	0710      	lsls	r0, r2, #28
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	d458      	bmi.n	8005be0 <__sflush_r+0xc0>
 8005b2e:	684b      	ldr	r3, [r1, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dc05      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	dc02      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d0f9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b4c:	682f      	ldr	r7, [r5, #0]
 8005b4e:	602b      	str	r3, [r5, #0]
 8005b50:	d032      	beq.n	8005bb8 <__sflush_r+0x98>
 8005b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	075a      	lsls	r2, r3, #29
 8005b58:	d505      	bpl.n	8005b66 <__sflush_r+0x46>
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	1ac0      	subs	r0, r0, r3
 8005b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b60:	b10b      	cbz	r3, 8005b66 <__sflush_r+0x46>
 8005b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b64:	1ac0      	subs	r0, r0, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b6c:	6a21      	ldr	r1, [r4, #32]
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b0      	blx	r6
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	d106      	bne.n	8005b86 <__sflush_r+0x66>
 8005b78:	6829      	ldr	r1, [r5, #0]
 8005b7a:	291d      	cmp	r1, #29
 8005b7c:	d82c      	bhi.n	8005bd8 <__sflush_r+0xb8>
 8005b7e:	4a2a      	ldr	r2, [pc, #168]	; (8005c28 <__sflush_r+0x108>)
 8005b80:	40ca      	lsrs	r2, r1
 8005b82:	07d6      	lsls	r6, r2, #31
 8005b84:	d528      	bpl.n	8005bd8 <__sflush_r+0xb8>
 8005b86:	2200      	movs	r2, #0
 8005b88:	6062      	str	r2, [r4, #4]
 8005b8a:	04d9      	lsls	r1, r3, #19
 8005b8c:	6922      	ldr	r2, [r4, #16]
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	d504      	bpl.n	8005b9c <__sflush_r+0x7c>
 8005b92:	1c42      	adds	r2, r0, #1
 8005b94:	d101      	bne.n	8005b9a <__sflush_r+0x7a>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	b903      	cbnz	r3, 8005b9c <__sflush_r+0x7c>
 8005b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b9e:	602f      	str	r7, [r5, #0]
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	d0ca      	beq.n	8005b3a <__sflush_r+0x1a>
 8005ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	d002      	beq.n	8005bb2 <__sflush_r+0x92>
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 f8fd 	bl	8005dac <_free_r>
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb6:	e7c1      	b.n	8005b3c <__sflush_r+0x1c>
 8005bb8:	6a21      	ldr	r1, [r4, #32]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b0      	blx	r6
 8005bc0:	1c41      	adds	r1, r0, #1
 8005bc2:	d1c7      	bne.n	8005b54 <__sflush_r+0x34>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c4      	beq.n	8005b54 <__sflush_r+0x34>
 8005bca:	2b1d      	cmp	r3, #29
 8005bcc:	d001      	beq.n	8005bd2 <__sflush_r+0xb2>
 8005bce:	2b16      	cmp	r3, #22
 8005bd0:	d101      	bne.n	8005bd6 <__sflush_r+0xb6>
 8005bd2:	602f      	str	r7, [r5, #0]
 8005bd4:	e7b1      	b.n	8005b3a <__sflush_r+0x1a>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e7ad      	b.n	8005b3c <__sflush_r+0x1c>
 8005be0:	690f      	ldr	r7, [r1, #16]
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	d0a9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005be6:	0793      	lsls	r3, r2, #30
 8005be8:	680e      	ldr	r6, [r1, #0]
 8005bea:	bf08      	it	eq
 8005bec:	694b      	ldreq	r3, [r1, #20]
 8005bee:	600f      	str	r7, [r1, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	eba6 0807 	sub.w	r8, r6, r7
 8005bf8:	608b      	str	r3, [r1, #8]
 8005bfa:	f1b8 0f00 	cmp.w	r8, #0
 8005bfe:	dd9c      	ble.n	8005b3a <__sflush_r+0x1a>
 8005c00:	6a21      	ldr	r1, [r4, #32]
 8005c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c04:	4643      	mov	r3, r8
 8005c06:	463a      	mov	r2, r7
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b0      	blx	r6
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	dc06      	bgt.n	8005c1e <__sflush_r+0xfe>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	e78e      	b.n	8005b3c <__sflush_r+0x1c>
 8005c1e:	4407      	add	r7, r0
 8005c20:	eba8 0800 	sub.w	r8, r8, r0
 8005c24:	e7e9      	b.n	8005bfa <__sflush_r+0xda>
 8005c26:	bf00      	nop
 8005c28:	20400001 	.word	0x20400001

08005c2c <_fflush_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	690b      	ldr	r3, [r1, #16]
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b913      	cbnz	r3, 8005c3c <_fflush_r+0x10>
 8005c36:	2500      	movs	r5, #0
 8005c38:	4628      	mov	r0, r5
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	b118      	cbz	r0, 8005c46 <_fflush_r+0x1a>
 8005c3e:	6983      	ldr	r3, [r0, #24]
 8005c40:	b90b      	cbnz	r3, 8005c46 <_fflush_r+0x1a>
 8005c42:	f7ff fa15 	bl	8005070 <__sinit>
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <_fflush_r+0x6c>)
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	d11b      	bne.n	8005c84 <_fflush_r+0x58>
 8005c4c:	686c      	ldr	r4, [r5, #4]
 8005c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ef      	beq.n	8005c36 <_fflush_r+0xa>
 8005c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c58:	07d0      	lsls	r0, r2, #31
 8005c5a:	d404      	bmi.n	8005c66 <_fflush_r+0x3a>
 8005c5c:	0599      	lsls	r1, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_fflush_r+0x3a>
 8005c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c62:	f7ff faa3 	bl	80051ac <__retarget_lock_acquire_recursive>
 8005c66:	4628      	mov	r0, r5
 8005c68:	4621      	mov	r1, r4
 8005c6a:	f7ff ff59 	bl	8005b20 <__sflush_r>
 8005c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c70:	07da      	lsls	r2, r3, #31
 8005c72:	4605      	mov	r5, r0
 8005c74:	d4e0      	bmi.n	8005c38 <_fflush_r+0xc>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	059b      	lsls	r3, r3, #22
 8005c7a:	d4dd      	bmi.n	8005c38 <_fflush_r+0xc>
 8005c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c7e:	f7ff fa96 	bl	80051ae <__retarget_lock_release_recursive>
 8005c82:	e7d9      	b.n	8005c38 <_fflush_r+0xc>
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <_fflush_r+0x70>)
 8005c86:	429c      	cmp	r4, r3
 8005c88:	d101      	bne.n	8005c8e <_fflush_r+0x62>
 8005c8a:	68ac      	ldr	r4, [r5, #8]
 8005c8c:	e7df      	b.n	8005c4e <_fflush_r+0x22>
 8005c8e:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <_fflush_r+0x74>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	bf08      	it	eq
 8005c94:	68ec      	ldreq	r4, [r5, #12]
 8005c96:	e7da      	b.n	8005c4e <_fflush_r+0x22>
 8005c98:	08006010 	.word	0x08006010
 8005c9c:	08006030 	.word	0x08006030
 8005ca0:	08005ff0 	.word	0x08005ff0

08005ca4 <_lseek_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	; (8005cc4 <_lseek_r+0x20>)
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	602a      	str	r2, [r5, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7fb fad2 	bl	800125c <_lseek>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_lseek_r+0x1e>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_lseek_r+0x1e>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	20000238 	.word	0x20000238

08005cc8 <__swhatbuf_r>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	b096      	sub	sp, #88	; 0x58
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	da08      	bge.n	8005cec <__swhatbuf_r+0x24>
 8005cda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	061a      	lsls	r2, r3, #24
 8005ce4:	d410      	bmi.n	8005d08 <__swhatbuf_r+0x40>
 8005ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cea:	e00e      	b.n	8005d0a <__swhatbuf_r+0x42>
 8005cec:	466a      	mov	r2, sp
 8005cee:	f000 f8bb 	bl	8005e68 <_fstat_r>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	dbf1      	blt.n	8005cda <__swhatbuf_r+0x12>
 8005cf6:	9a01      	ldr	r2, [sp, #4]
 8005cf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d00:	425a      	negs	r2, r3
 8005d02:	415a      	adcs	r2, r3
 8005d04:	602a      	str	r2, [r5, #0]
 8005d06:	e7ee      	b.n	8005ce6 <__swhatbuf_r+0x1e>
 8005d08:	2340      	movs	r3, #64	; 0x40
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	b016      	add	sp, #88	; 0x58
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d14 <__smakebuf_r>:
 8005d14:	898b      	ldrh	r3, [r1, #12]
 8005d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d18:	079d      	lsls	r5, r3, #30
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	d507      	bpl.n	8005d30 <__smakebuf_r+0x1c>
 8005d20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	6123      	str	r3, [r4, #16]
 8005d28:	2301      	movs	r3, #1
 8005d2a:	6163      	str	r3, [r4, #20]
 8005d2c:	b002      	add	sp, #8
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	ab01      	add	r3, sp, #4
 8005d32:	466a      	mov	r2, sp
 8005d34:	f7ff ffc8 	bl	8005cc8 <__swhatbuf_r>
 8005d38:	9900      	ldr	r1, [sp, #0]
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff fa57 	bl	80051f0 <_malloc_r>
 8005d42:	b948      	cbnz	r0, 8005d58 <__smakebuf_r+0x44>
 8005d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d48:	059a      	lsls	r2, r3, #22
 8005d4a:	d4ef      	bmi.n	8005d2c <__smakebuf_r+0x18>
 8005d4c:	f023 0303 	bic.w	r3, r3, #3
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	e7e3      	b.n	8005d20 <__smakebuf_r+0xc>
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <__smakebuf_r+0x7c>)
 8005d5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	6020      	str	r0, [r4, #0]
 8005d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	9b00      	ldr	r3, [sp, #0]
 8005d68:	6163      	str	r3, [r4, #20]
 8005d6a:	9b01      	ldr	r3, [sp, #4]
 8005d6c:	6120      	str	r0, [r4, #16]
 8005d6e:	b15b      	cbz	r3, 8005d88 <__smakebuf_r+0x74>
 8005d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d74:	4630      	mov	r0, r6
 8005d76:	f000 f889 	bl	8005e8c <_isatty_r>
 8005d7a:	b128      	cbz	r0, 8005d88 <__smakebuf_r+0x74>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	89a0      	ldrh	r0, [r4, #12]
 8005d8a:	4305      	orrs	r5, r0
 8005d8c:	81a5      	strh	r5, [r4, #12]
 8005d8e:	e7cd      	b.n	8005d2c <__smakebuf_r+0x18>
 8005d90:	08005009 	.word	0x08005009

08005d94 <__malloc_lock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <__malloc_lock+0x8>)
 8005d96:	f7ff ba09 	b.w	80051ac <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	2000022c 	.word	0x2000022c

08005da0 <__malloc_unlock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__malloc_unlock+0x8>)
 8005da2:	f7ff ba04 	b.w	80051ae <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	2000022c 	.word	0x2000022c

08005dac <_free_r>:
 8005dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d044      	beq.n	8005e3c <_free_r+0x90>
 8005db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db6:	9001      	str	r0, [sp, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f1a1 0404 	sub.w	r4, r1, #4
 8005dbe:	bfb8      	it	lt
 8005dc0:	18e4      	addlt	r4, r4, r3
 8005dc2:	f7ff ffe7 	bl	8005d94 <__malloc_lock>
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <_free_r+0x94>)
 8005dc8:	9801      	ldr	r0, [sp, #4]
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	b933      	cbnz	r3, 8005ddc <_free_r+0x30>
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	6014      	str	r4, [r2, #0]
 8005dd2:	b003      	add	sp, #12
 8005dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dd8:	f7ff bfe2 	b.w	8005da0 <__malloc_unlock>
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d908      	bls.n	8005df2 <_free_r+0x46>
 8005de0:	6825      	ldr	r5, [r4, #0]
 8005de2:	1961      	adds	r1, r4, r5
 8005de4:	428b      	cmp	r3, r1
 8005de6:	bf01      	itttt	eq
 8005de8:	6819      	ldreq	r1, [r3, #0]
 8005dea:	685b      	ldreq	r3, [r3, #4]
 8005dec:	1949      	addeq	r1, r1, r5
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	e7ed      	b.n	8005dce <_free_r+0x22>
 8005df2:	461a      	mov	r2, r3
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	b10b      	cbz	r3, 8005dfc <_free_r+0x50>
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d9fa      	bls.n	8005df2 <_free_r+0x46>
 8005dfc:	6811      	ldr	r1, [r2, #0]
 8005dfe:	1855      	adds	r5, r2, r1
 8005e00:	42a5      	cmp	r5, r4
 8005e02:	d10b      	bne.n	8005e1c <_free_r+0x70>
 8005e04:	6824      	ldr	r4, [r4, #0]
 8005e06:	4421      	add	r1, r4
 8005e08:	1854      	adds	r4, r2, r1
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	d1e0      	bne.n	8005dd2 <_free_r+0x26>
 8005e10:	681c      	ldr	r4, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	6053      	str	r3, [r2, #4]
 8005e16:	4421      	add	r1, r4
 8005e18:	6011      	str	r1, [r2, #0]
 8005e1a:	e7da      	b.n	8005dd2 <_free_r+0x26>
 8005e1c:	d902      	bls.n	8005e24 <_free_r+0x78>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	6003      	str	r3, [r0, #0]
 8005e22:	e7d6      	b.n	8005dd2 <_free_r+0x26>
 8005e24:	6825      	ldr	r5, [r4, #0]
 8005e26:	1961      	adds	r1, r4, r5
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	bf04      	itt	eq
 8005e2c:	6819      	ldreq	r1, [r3, #0]
 8005e2e:	685b      	ldreq	r3, [r3, #4]
 8005e30:	6063      	str	r3, [r4, #4]
 8005e32:	bf04      	itt	eq
 8005e34:	1949      	addeq	r1, r1, r5
 8005e36:	6021      	streq	r1, [r4, #0]
 8005e38:	6054      	str	r4, [r2, #4]
 8005e3a:	e7ca      	b.n	8005dd2 <_free_r+0x26>
 8005e3c:	b003      	add	sp, #12
 8005e3e:	bd30      	pop	{r4, r5, pc}
 8005e40:	20000230 	.word	0x20000230

08005e44 <_read_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d07      	ldr	r5, [pc, #28]	; (8005e64 <_read_r+0x20>)
 8005e48:	4604      	mov	r4, r0
 8005e4a:	4608      	mov	r0, r1
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f7fb f9a2 	bl	800119c <_read>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_read_r+0x1e>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_read_r+0x1e>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	20000238 	.word	0x20000238

08005e68 <_fstat_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d07      	ldr	r5, [pc, #28]	; (8005e88 <_fstat_r+0x20>)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	f7fb f9d6 	bl	8001226 <_fstat>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d102      	bne.n	8005e84 <_fstat_r+0x1c>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	b103      	cbz	r3, 8005e84 <_fstat_r+0x1c>
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
 8005e86:	bf00      	nop
 8005e88:	20000238 	.word	0x20000238

08005e8c <_isatty_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d06      	ldr	r5, [pc, #24]	; (8005ea8 <_isatty_r+0x1c>)
 8005e90:	2300      	movs	r3, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	f7fb f9d5 	bl	8001246 <_isatty>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_isatty_r+0x1a>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_isatty_r+0x1a>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	20000238 	.word	0x20000238

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
