
IdanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800bcf8  0800bcf8  0001bcf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c340  0800c340  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c340  0800c340  0001c340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c348  0800c348  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c348  0800c348  0001c348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800c350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  20000200  0800c54c  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  0800c54c  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c28e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403d  00000000  00000000  0003c4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  000404f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00041c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfd4  00000000  00000000  00043168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5df  00000000  00000000  0006f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109d84  00000000  00000000  0008b71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019549f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  001954f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcdc 	.word	0x0800bcdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800bcdc 	.word	0x0800bcdc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b992 	b.w	8000f04 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f824 	bl	8000c34 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fd09 	bl	8000618 <__aeabi_dmul>
 8000c06:	f000 f97f 	bl	8000f08 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc8a 	bl	8000524 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fd00 	bl	8000618 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb42 	bl	80002a8 <__aeabi_dsub>
 8000c24:	f000 f970 	bl	8000f08 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9d08      	ldr	r5, [sp, #32]
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	468e      	mov	lr, r1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d14d      	bne.n	8000cde <__udivmoddi4+0xaa>
 8000c42:	428a      	cmp	r2, r1
 8000c44:	4694      	mov	ip, r2
 8000c46:	d969      	bls.n	8000d1c <__udivmoddi4+0xe8>
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	b152      	cbz	r2, 8000c64 <__udivmoddi4+0x30>
 8000c4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c52:	f1c2 0120 	rsb	r1, r2, #32
 8000c56:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c62:	4094      	lsls	r4, r2
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	0c21      	lsrs	r1, r4, #16
 8000c6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c6e:	fa1f f78c 	uxth.w	r7, ip
 8000c72:	fb08 e316 	mls	r3, r8, r6, lr
 8000c76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7a:	fb06 f107 	mul.w	r1, r6, r7
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x64>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 811f 	bcs.w	8000ecc <__udivmoddi4+0x298>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 811c 	bls.w	8000ecc <__udivmoddi4+0x298>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 f707 	mul.w	r7, r0, r7
 8000cac:	42a7      	cmp	r7, r4
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x92>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb8:	f080 810a 	bcs.w	8000ed0 <__udivmoddi4+0x29c>
 8000cbc:	42a7      	cmp	r7, r4
 8000cbe:	f240 8107 	bls.w	8000ed0 <__udivmoddi4+0x29c>
 8000cc2:	4464      	add	r4, ip
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	1be4      	subs	r4, r4, r7
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa4>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xc2>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80ef 	beq.w	8000ec6 <__udivmoddi4+0x292>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x160>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd4>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80f9 	bhi.w	8000efa <__udivmoddi4+0x2c6>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	469e      	mov	lr, r3
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa4>
 8000d16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xec>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 8092 	bne.w	8000e4e <__udivmoddi4+0x21a>
 8000d2a:	eba1 010c 	sub.w	r1, r1, ip
 8000d2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d32:	fa1f fe8c 	uxth.w	lr, ip
 8000d36:	2601      	movs	r6, #1
 8000d38:	0c20      	lsrs	r0, r4, #16
 8000d3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d46:	fb0e f003 	mul.w	r0, lr, r3
 8000d4a:	4288      	cmp	r0, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x12c>
 8000d4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x12a>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f200 80cb 	bhi.w	8000ef4 <__udivmoddi4+0x2c0>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d68:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d70:	fb0e fe00 	mul.w	lr, lr, r0
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x156>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x154>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f200 80bb 	bhi.w	8000efe <__udivmoddi4+0x2ca>
 8000d88:	4608      	mov	r0, r1
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x9a>
 8000d94:	f1c6 0720 	rsb	r7, r6, #32
 8000d98:	40b3      	lsls	r3, r6
 8000d9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da2:	fa20 f407 	lsr.w	r4, r0, r7
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	431c      	orrs	r4, r3
 8000dac:	40f9      	lsrs	r1, r7
 8000dae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db2:	fa00 f306 	lsl.w	r3, r0, r6
 8000db6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dba:	0c20      	lsrs	r0, r4, #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b8>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ddc:	f080 8088 	bcs.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de0:	4288      	cmp	r0, r1
 8000de2:	f240 8085 	bls.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1a09      	subs	r1, r1, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df4:	fb09 1110 	mls	r1, r9, r0, r1
 8000df8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e00:	458e      	cmp	lr, r1
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1e2>
 8000e04:	eb1c 0101 	adds.w	r1, ip, r1
 8000e08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e0c:	d26c      	bcs.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e0e:	458e      	cmp	lr, r1
 8000e10:	d96a      	bls.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4461      	add	r1, ip
 8000e16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e1e:	eba1 010e 	sub.w	r1, r1, lr
 8000e22:	42a1      	cmp	r1, r4
 8000e24:	46c8      	mov	r8, r9
 8000e26:	46a6      	mov	lr, r4
 8000e28:	d356      	bcc.n	8000ed8 <__udivmoddi4+0x2a4>
 8000e2a:	d053      	beq.n	8000ed4 <__udivmoddi4+0x2a0>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x212>
 8000e2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e32:	eb61 010e 	sbc.w	r1, r1, lr
 8000e36:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e3e:	40f1      	lsrs	r1, r6
 8000e40:	431f      	orrs	r7, r3
 8000e42:	e9c5 7100 	strd	r7, r1, [r5]
 8000e46:	2600      	movs	r6, #0
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1c2 0320 	rsb	r3, r2, #32
 8000e52:	40d8      	lsrs	r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5c:	4091      	lsls	r1, r2
 8000e5e:	4301      	orrs	r1, r0
 8000e60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e70:	0c0b      	lsrs	r3, r1, #16
 8000e72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e76:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7a:	429e      	cmp	r6, r3
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x260>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8a:	d22f      	bcs.n	8000eec <__udivmoddi4+0x2b8>
 8000e8c:	429e      	cmp	r6, r3
 8000e8e:	d92d      	bls.n	8000eec <__udivmoddi4+0x2b8>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1b9b      	subs	r3, r3, r6
 8000e96:	b289      	uxth	r1, r1
 8000e98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x28a>
 8000eac:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb4:	d216      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d914      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eba:	3e02      	subs	r6, #2
 8000ebc:	4461      	add	r1, ip
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec4:	e738      	b.n	8000d38 <__udivmoddi4+0x104>
 8000ec6:	462e      	mov	r6, r5
 8000ec8:	4628      	mov	r0, r5
 8000eca:	e705      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	e6e3      	b.n	8000c98 <__udivmoddi4+0x64>
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	e6f8      	b.n	8000cc6 <__udivmoddi4+0x92>
 8000ed4:	454b      	cmp	r3, r9
 8000ed6:	d2a9      	bcs.n	8000e2c <__udivmoddi4+0x1f8>
 8000ed8:	ebb9 0802 	subs.w	r8, r9, r2
 8000edc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	e7a3      	b.n	8000e2c <__udivmoddi4+0x1f8>
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	e7ea      	b.n	8000ebe <__udivmoddi4+0x28a>
 8000ee8:	4620      	mov	r0, r4
 8000eea:	e794      	b.n	8000e16 <__udivmoddi4+0x1e2>
 8000eec:	4640      	mov	r0, r8
 8000eee:	e7d1      	b.n	8000e94 <__udivmoddi4+0x260>
 8000ef0:	46d0      	mov	r8, sl
 8000ef2:	e77b      	b.n	8000dec <__udivmoddi4+0x1b8>
 8000ef4:	3b02      	subs	r3, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	e732      	b.n	8000d60 <__udivmoddi4+0x12c>
 8000efa:	4630      	mov	r0, r6
 8000efc:	e709      	b.n	8000d12 <__udivmoddi4+0xde>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e742      	b.n	8000d8a <__udivmoddi4+0x156>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_d2uiz>:
 8000f08:	004a      	lsls	r2, r1, #1
 8000f0a:	d211      	bcs.n	8000f30 <__aeabi_d2uiz+0x28>
 8000f0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f10:	d211      	bcs.n	8000f36 <__aeabi_d2uiz+0x2e>
 8000f12:	d50d      	bpl.n	8000f30 <__aeabi_d2uiz+0x28>
 8000f14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f1c:	d40e      	bmi.n	8000f3c <__aeabi_d2uiz+0x34>
 8000f1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f3a:	d102      	bne.n	8000f42 <__aeabi_d2uiz+0x3a>
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	4770      	bx	lr
 8000f42:	f04f 0000 	mov.w	r0, #0
 8000f46:	4770      	bx	lr

08000f48 <Button_init>:
extern  TIM_HandleTypeDef htim3;



void Button_init(Button* button, ButtonName name, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	461a      	mov	r2, r3
 8000f54:	460b      	mov	r3, r1
 8000f56:	72fb      	strb	r3, [r7, #11]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	813b      	strh	r3, [r7, #8]
	button->name = name;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	7afa      	ldrb	r2, [r7, #11]
 8000f60:	701a      	strb	r2, [r3, #0]
	button->gpioPort = gpioPort;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
	button->gpioPin = gpioPin;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	893a      	ldrh	r2, [r7, #8]
 8000f6c:	811a      	strh	r2, [r3, #8]
	button->pressTime = 0;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
	button->btState=BUTTON_STATE_NONE;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	741a      	strb	r2, [r3, #16]
	button->waitToSecondPress=0;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
	button->counter=0;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <Button_getState>:


ButtonState  Button_getState(Button* bt)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return bt->btState;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7c1b      	ldrb	r3, [r3, #16]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <Button_changeStateToNone>:

void Button_changeStateToNone(Button *bt)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	bt->btState=BUTTON_STATE_NONE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	741a      	strb	r2, [r3, #16]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <Button_onInterrupt>:

void Button_onInterrupt(Button* button, uint16_t pin)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
	if (pin == button->gpioPin) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	891b      	ldrh	r3, [r3, #8]
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d134      	bne.n	8001044 <Button_onInterrupt+0x80>
		if (HAL_GPIO_ReadPin(button->gpioPort, button->gpioPin) == 0) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	891b      	ldrh	r3, [r3, #8]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f004 f80b 	bl	8005000 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d104      	bne.n	8000ffa <Button_onInterrupt+0x36>
			button->pressTime = myClock.tickCount;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <Button_onInterrupt+0x88>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
			}

		}

	}
}
 8000ff8:	e024      	b.n	8001044 <Button_onInterrupt+0x80>
			button->counter=0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
			if (myClock.tickCount - button->pressTime > LONG_PRESS_MS) {
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <Button_onInterrupt+0x88>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800100e:	d903      	bls.n	8001018 <Button_onInterrupt+0x54>
				button->btState=BUTTON_STATE_LONG_PRESS;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	741a      	strb	r2, [r3, #16]
}
 8001016:	e015      	b.n	8001044 <Button_onInterrupt+0x80>
			else if (button->waitToSecondPress) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00a      	beq.n	8001036 <Button_onInterrupt+0x72>
				MainTimer_unRegister(Button_timerInterrupt, button);
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <Button_onInterrupt+0x8c>)
 8001024:	f000 ff30 	bl	8001e88 <MainTimer_unRegister>
				button->btState=BUTTON_STATE_DOUBLE_PRESS;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	741a      	strb	r2, [r3, #16]
				button->waitToSecondPress=0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
}
 8001034:	e006      	b.n	8001044 <Button_onInterrupt+0x80>
				MainTimer_registerCallback(Button_timerInterrupt, button);
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <Button_onInterrupt+0x8c>)
 800103a:	f000 fee9 	bl	8001e10 <MainTimer_registerCallback>
				button->waitToSecondPress = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	619a      	str	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000224 	.word	0x20000224
 8001050:	08001055 	.word	0x08001055

08001054 <Button_timerInterrupt>:

void Button_timerInterrupt(void* obj)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	Button* button=(Button*)obj;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60fb      	str	r3, [r7, #12]
	if(button->waitToSecondPress){
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <Button_timerInterrupt+0x3c>
		button->counter++;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	615a      	str	r2, [r3, #20]
		if(button->counter>300){
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800107a:	dd09      	ble.n	8001090 <Button_timerInterrupt+0x3c>
			MainTimer_unRegister(Button_timerInterrupt, button);
 800107c:	68f9      	ldr	r1, [r7, #12]
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <Button_timerInterrupt+0x44>)
 8001080:	f000 ff02 	bl	8001e88 <MainTimer_unRegister>
			button->btState=BUTTON_STATE_PRESS;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2201      	movs	r2, #1
 8001088:	741a      	strb	r2, [r3, #16]
			button->waitToSecondPress=0;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
		}
	}
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08001055 	.word	0x08001055

0800109c <Buzzer_init>:
		NOTE_1_F, NOTE_1_G, NOTE_1_G, NOTE_1_G};
static const int _lengths[] = {LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_2};
static const int _len=sizeof(_notes)/sizeof(_notes[_index]);

void Buzzer_init(Buzzer * buzzer)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

	buzzer->counter=0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
	buzzer->maxCounter=1000/_lengths[0];
 80010aa:	2304      	movs	r3, #4
 80010ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	605a      	str	r2, [r3, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	721a      	strb	r2, [r3, #8]

}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <Buzzer_interrupt>:


void Buzzer_interrupt(void* obj)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	Buzzer* buzzer=(Buzzer*)obj;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
	if(buzzer->bzState !=BUZZER_STATE_ON){
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	7a1b      	ldrb	r3, [r3, #8]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d14a      	bne.n	8001176 <Buzzer_interrupt+0xaa>
		return;
	}

	buzzer->counter++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	601a      	str	r2, [r3, #0]
	if (buzzer->counter < buzzer->maxCounter) {
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	db41      	blt.n	800117a <Buzzer_interrupt+0xae>
		return;
	}
	_reload=(100000/_notes[_index])-1;
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <Buzzer_interrupt+0xbc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <Buzzer_interrupt+0xc0>)
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	4a23      	ldr	r2, [pc, #140]	; (8001190 <Buzzer_interrupt+0xc4>)
 8001102:	fb92 f3f3 	sdiv	r3, r2, r3
 8001106:	3b01      	subs	r3, #1
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <Buzzer_interrupt+0xc8>)
 800110a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <Buzzer_interrupt+0xcc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, _reload);
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <Buzzer_interrupt+0xc8>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <Buzzer_interrupt+0xcc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <Buzzer_interrupt+0xc8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <Buzzer_interrupt+0xcc>)
 8001126:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, _reload/2);
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <Buzzer_interrupt+0xc8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0fda      	lsrs	r2, r3, #31
 800112e:	4413      	add	r3, r2
 8001130:	105b      	asrs	r3, r3, #1
 8001132:	461a      	mov	r2, r3
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <Buzzer_interrupt+0xcc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

	if(_index==(_len-1)){
 800113a:	230d      	movs	r3, #13
 800113c:	1e5a      	subs	r2, r3, #1
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <Buzzer_interrupt+0xbc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d103      	bne.n	800114e <Buzzer_interrupt+0x82>
		_index=0;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <Buzzer_interrupt+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e004      	b.n	8001158 <Buzzer_interrupt+0x8c>
	}
	else{
		_index++;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <Buzzer_interrupt+0xbc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <Buzzer_interrupt+0xbc>)
 8001156:	6013      	str	r3, [r2, #0]
	}

	buzzer->maxCounter=1000/_lengths[_index];
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <Buzzer_interrupt+0xbc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <Buzzer_interrupt+0xd0>)
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001166:	fb92 f2f3 	sdiv	r2, r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	605a      	str	r2, [r3, #4]
	buzzer->counter=0;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e002      	b.n	800117c <Buzzer_interrupt+0xb0>
		return;
 8001176:	bf00      	nop
 8001178:	e000      	b.n	800117c <Buzzer_interrupt+0xb0>
		return;
 800117a:	bf00      	nop

}
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000021c 	.word	0x2000021c
 800118c:	0800be9c 	.word	0x0800be9c
 8001190:	000186a0 	.word	0x000186a0
 8001194:	20000220 	.word	0x20000220
 8001198:	20000778 	.word	0x20000778
 800119c:	0800bed0 	.word	0x0800bed0

080011a0 <Buzzer_changeToOn>:

void Buzzer_changeToOn(Buzzer * buzzer)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_ON;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	721a      	strb	r2, [r3, #8]

}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <Buzzer_changeToOff>:

void Buzzer_changeToOff(Buzzer * buzzer)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	721a      	strb	r2, [r3, #8]

}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <Buzzer_reset>:


void Buzzer_reset()
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	_index=0;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <Buzzer_reset+0x14>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]

}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	2000021c 	.word	0x2000021c

080011ec <Buzzer_stop>:

void Buzzer_stop(Buzzer* buzzer)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	Buzzer_changeToOff(buzzer);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ffe0 	bl	80011ba <Buzzer_changeToOff>
	MainTimer_unRegister(Buzzer_interrupt, buzzer);
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <Buzzer_stop+0x2c>)
 80011fe:	f000 fe43 	bl	8001e88 <MainTimer_unRegister>
	HAL_TIM_Base_Stop(&htim3);
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <Buzzer_stop+0x30>)
 8001204:	f005 fb3e 	bl	8006884 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001208:	2100      	movs	r1, #0
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <Buzzer_stop+0x30>)
 800120c:	f005 fd30 	bl	8006c70 <HAL_TIM_PWM_Stop>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	080010cd 	.word	0x080010cd
 800121c:	20000778 	.word	0x20000778

08001220 <Buzzer_start>:

void Buzzer_start(Buzzer* buzzer)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	Buzzer_changeToOn(buzzer);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffb9 	bl	80011a0 <Buzzer_changeToOn>
	MainTimer_registerCallback(Buzzer_interrupt,buzzer);
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <Buzzer_start+0x2c>)
 8001232:	f000 fded 	bl	8001e10 <MainTimer_registerCallback>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001236:	2100      	movs	r1, #0
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <Buzzer_start+0x30>)
 800123a:	f005 fc13 	bl	8006a64 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <Buzzer_start+0x30>)
 8001240:	f005 fab8 	bl	80067b4 <HAL_TIM_Base_Start>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	080010cd 	.word	0x080010cd
 8001250:	20000778 	.word	0x20000778

08001254 <cmdLedOn>:
#include "Dht.h"
#include "Flash.h"
#include <stdlib.h>

static void cmdLedOn(void* obj, char* params)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	(void)params;
	Led* led = (Led*)obj;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]
	Led_On(led);
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 fce4 	bl	8001c30 <Led_On>

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <cmdLedOff>:
static void cmdLedOff(void* obj, char* params)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	(void)params;
	Led* led = (Led*)obj;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]
	Led_Off(led);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 fcf0 	bl	8001c64 <Led_Off>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <cmdLedBlink>:

static void cmdLedBlink(void* obj, char* params)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	Led* led = (Led*)obj;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]
	Led_Blink(led, atoi(params));
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f007 fa31 	bl	8008702 <atoi>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 fcf7 	bl	8001c98 <Led_Blink>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <cmdLedBrightness>:
static void cmdLedBrightness(void* obj, char* params)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
	Led* led = (Led*)obj;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60fb      	str	r3, [r7, #12]
	Led_Brightness(led, atoi(params));
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f007 fa1e 	bl	8008702 <atoi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4619      	mov	r1, r3
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 fd04 	bl	8001cd8 <Led_Brightness>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <cmdBuzzerStart>:

static void cmdBuzzerStart(void* obj, char* params)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	Buzzer* buzzer=(Buzzer*)obj;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]
	Buzzer_start(buzzer);
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff ff9a 	bl	8001220 <Buzzer_start>

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <cmdBuzzerStop>:
static void cmdBuzzerStop(void* obj, char* params)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	Buzzer* buzzer=(Buzzer*)obj;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]
	Buzzer_stop(buzzer);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff72 	bl	80011ec <Buzzer_stop>
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <cmdPrintFlash>:
static void cmdPrintFlash(void* obj, char* params)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	Flash* flash = (Flash*)obj;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]
	Flash_print(flash);
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 fb80 	bl	8001a24 <Flash_print>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <Cli_init>:

void Cli_init(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	Communication_register("blueOn", &cmdLedOn, &ledB);
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <Cli_init+0x78>)
 8001332:	491d      	ldr	r1, [pc, #116]	; (80013a8 <Cli_init+0x7c>)
 8001334:	481d      	ldr	r0, [pc, #116]	; (80013ac <Cli_init+0x80>)
 8001336:	f000 f95b 	bl	80015f0 <Communication_register>
	Communication_register("blueOff", &cmdLedOff, &ledB);
 800133a:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <Cli_init+0x78>)
 800133c:	491c      	ldr	r1, [pc, #112]	; (80013b0 <Cli_init+0x84>)
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <Cli_init+0x88>)
 8001340:	f000 f956 	bl	80015f0 <Communication_register>
	Communication_register("blueBlink", &cmdLedBlink, &ledB);
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <Cli_init+0x78>)
 8001346:	491c      	ldr	r1, [pc, #112]	; (80013b8 <Cli_init+0x8c>)
 8001348:	481c      	ldr	r0, [pc, #112]	; (80013bc <Cli_init+0x90>)
 800134a:	f000 f951 	bl	80015f0 <Communication_register>
	Communication_register("blueBrightness", &cmdLedBrightness, &ledB);
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <Cli_init+0x78>)
 8001350:	491b      	ldr	r1, [pc, #108]	; (80013c0 <Cli_init+0x94>)
 8001352:	481c      	ldr	r0, [pc, #112]	; (80013c4 <Cli_init+0x98>)
 8001354:	f000 f94c 	bl	80015f0 <Communication_register>

	Communication_register("redOn", &cmdLedOn, &ledR);
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <Cli_init+0x9c>)
 800135a:	4913      	ldr	r1, [pc, #76]	; (80013a8 <Cli_init+0x7c>)
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <Cli_init+0xa0>)
 800135e:	f000 f947 	bl	80015f0 <Communication_register>
	Communication_register("redOff", &cmdLedOff, &ledR);
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <Cli_init+0x9c>)
 8001364:	4912      	ldr	r1, [pc, #72]	; (80013b0 <Cli_init+0x84>)
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <Cli_init+0xa4>)
 8001368:	f000 f942 	bl	80015f0 <Communication_register>
	Communication_register("redBlink", &cmdLedBlink, &ledR);
 800136c:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <Cli_init+0x9c>)
 800136e:	4912      	ldr	r1, [pc, #72]	; (80013b8 <Cli_init+0x8c>)
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <Cli_init+0xa8>)
 8001372:	f000 f93d 	bl	80015f0 <Communication_register>
	Communication_register("redBrightness", &cmdLedBrightness, &ledR);
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <Cli_init+0x9c>)
 8001378:	4911      	ldr	r1, [pc, #68]	; (80013c0 <Cli_init+0x94>)
 800137a:	4817      	ldr	r0, [pc, #92]	; (80013d8 <Cli_init+0xac>)
 800137c:	f000 f938 	bl	80015f0 <Communication_register>

	Communication_register("buzzerStart", &cmdBuzzerStart, &bz1);
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <Cli_init+0xb0>)
 8001382:	4917      	ldr	r1, [pc, #92]	; (80013e0 <Cli_init+0xb4>)
 8001384:	4817      	ldr	r0, [pc, #92]	; (80013e4 <Cli_init+0xb8>)
 8001386:	f000 f933 	bl	80015f0 <Communication_register>
	Communication_register("buzzerStop", &cmdBuzzerStop, &bz1);
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <Cli_init+0xb0>)
 800138c:	4916      	ldr	r1, [pc, #88]	; (80013e8 <Cli_init+0xbc>)
 800138e:	4817      	ldr	r0, [pc, #92]	; (80013ec <Cli_init+0xc0>)
 8001390:	f000 f92e 	bl	80015f0 <Communication_register>
	Communication_register("printFlash", &cmdPrintFlash, &flash);
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <Cli_init+0xc4>)
 8001396:	4917      	ldr	r1, [pc, #92]	; (80013f4 <Cli_init+0xc8>)
 8001398:	4817      	ldr	r0, [pc, #92]	; (80013f8 <Cli_init+0xcc>)
 800139a:	f000 f929 	bl	80015f0 <Communication_register>

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000660 	.word	0x20000660
 80013a8:	08001255 	.word	0x08001255
 80013ac:	0800bcf8 	.word	0x0800bcf8
 80013b0:	08001271 	.word	0x08001271
 80013b4:	0800bd00 	.word	0x0800bd00
 80013b8:	0800128d 	.word	0x0800128d
 80013bc:	0800bd08 	.word	0x0800bd08
 80013c0:	080012b3 	.word	0x080012b3
 80013c4:	0800bd14 	.word	0x0800bd14
 80013c8:	20000674 	.word	0x20000674
 80013cc:	0800bd24 	.word	0x0800bd24
 80013d0:	0800bd2c 	.word	0x0800bd2c
 80013d4:	0800bd34 	.word	0x0800bd34
 80013d8:	0800bd40 	.word	0x0800bd40
 80013dc:	200006c0 	.word	0x200006c0
 80013e0:	080012d9 	.word	0x080012d9
 80013e4:	0800bd50 	.word	0x0800bd50
 80013e8:	080012f5 	.word	0x080012f5
 80013ec:	0800bd5c 	.word	0x0800bd5c
 80013f0:	20000700 	.word	0x20000700
 80013f4:	08001311 	.word	0x08001311
 80013f8:	0800bd68 	.word	0x0800bd68

080013fc <Clock_init>:
#include "Clock.h"

Clock myClock;

void Clock_init()
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	myClock.tickCount=0;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <Clock_init+0x14>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	20000224 	.word	0x20000224

08001414 <Communication_task>:
static int _CommandArrLen=0;



 int Communication_task()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 800141a:	1db9      	adds	r1, r7, #6
 800141c:	230a      	movs	r3, #10
 800141e:	2201      	movs	r2, #1
 8001420:	4844      	ldr	r0, [pc, #272]	; (8001534 <Communication_task+0x120>)
 8001422:	f006 fc35 	bl	8007c90 <HAL_UART_Receive>
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <Communication_task+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001430:	4b40      	ldr	r3, [pc, #256]	; (8001534 <Communication_task+0x120>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d011      	beq.n	8001462 <Communication_task+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <Communication_task+0x120>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2208      	movs	r2, #8
 8001444:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 8001446:	e00c      	b.n	8001462 <Communication_task+0x4e>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 8001448:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <Communication_task+0x124>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	493a      	ldr	r1, [pc, #232]	; (8001538 <Communication_task+0x124>)
 8001450:	600a      	str	r2, [r1, #0]
 8001452:	4a3a      	ldr	r2, [pc, #232]	; (800153c <Communication_task+0x128>)
 8001454:	1899      	adds	r1, r3, r2
 8001456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145a:	2201      	movs	r2, #1
 800145c:	4835      	ldr	r0, [pc, #212]	; (8001534 <Communication_task+0x120>)
 800145e:	f006 fb83 	bl	8007b68 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 8001462:	4b35      	ldr	r3, [pc, #212]	; (8001538 <Communication_task+0x124>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <Communication_task+0x12c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbec      	blt.n	8001448 <Communication_task+0x34>
		}

		return 0;
 800146e:	2300      	movs	r3, #0
 8001470:	e05c      	b.n	800152c <Communication_task+0x118>
	}

	if (ch == '\r' || ch == '\n')
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	2b0d      	cmp	r3, #13
 8001476:	d010      	beq.n	800149a <Communication_task+0x86>
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d127      	bne.n	80014ce <Communication_task+0xba>
	{
		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 800147e:	e00c      	b.n	800149a <Communication_task+0x86>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <Communication_task+0x124>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	492c      	ldr	r1, [pc, #176]	; (8001538 <Communication_task+0x124>)
 8001488:	600a      	str	r2, [r1, #0]
 800148a:	4a2c      	ldr	r2, [pc, #176]	; (800153c <Communication_task+0x128>)
 800148c:	1899      	adds	r1, r3, r2
 800148e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001492:	2201      	movs	r2, #1
 8001494:	4827      	ldr	r0, [pc, #156]	; (8001534 <Communication_task+0x120>)
 8001496:	f006 fb67 	bl	8007b68 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <Communication_task+0x124>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <Communication_task+0x12c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbec      	blt.n	8001480 <Communication_task+0x6c>
		}

		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80014a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014aa:	2202      	movs	r2, #2
 80014ac:	4925      	ldr	r1, [pc, #148]	; (8001544 <Communication_task+0x130>)
 80014ae:	4821      	ldr	r0, [pc, #132]	; (8001534 <Communication_task+0x120>)
 80014b0:	f006 fb5a 	bl	8007b68 <HAL_UART_Transmit>

		_cmdbuffer[_cmdcount] = 0;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <Communication_task+0x12c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a20      	ldr	r2, [pc, #128]	; (800153c <Communication_task+0x128>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	54d1      	strb	r1, [r2, r3]
		_cmdcount = 0;
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <Communication_task+0x12c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
		_cmdprint = 0;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <Communication_task+0x124>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

		// command is ready
		return 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e02e      	b.n	800152c <Communication_task+0x118>
	}
	else if (ch == '\b')
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d118      	bne.n	8001506 <Communication_task+0xf2>
	{
		char bs[] = "\b \b";
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <Communication_task+0x134>)
 80014d6:	603b      	str	r3, [r7, #0]
		_cmdcount--;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <Communication_task+0x12c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <Communication_task+0x12c>)
 80014e0:	6013      	str	r3, [r2, #0]
		_cmdprint--;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <Communication_task+0x124>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <Communication_task+0x124>)
 80014ea:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)bs, strlen(bs), 0xFFFF);
 80014ec:	463b      	mov	r3, r7
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe78 	bl	80001e4 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4639      	mov	r1, r7
 80014fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <Communication_task+0x120>)
 8001500:	f006 fb32 	bl	8007b68 <HAL_UART_Transmit>
 8001504:	e011      	b.n	800152a <Communication_task+0x116>
	}
	else
	{
		if (_cmdcount >= MAX_BUFFER_LENGTH)
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <Communication_task+0x12c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b63      	cmp	r3, #99	; 0x63
 800150c:	dd05      	ble.n	800151a <Communication_task+0x106>
		{
			_cmdcount = 0;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <Communication_task+0x12c>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
			_cmdprint = 0;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <Communication_task+0x124>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
		}

		_cmdbuffer[_cmdcount++] = ch;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <Communication_task+0x12c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <Communication_task+0x12c>)
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	79b9      	ldrb	r1, [r7, #6]
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <Communication_task+0x128>)
 8001528:	54d1      	strb	r1, [r2, r3]
	}

	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000085c 	.word	0x2000085c
 8001538:	20000290 	.word	0x20000290
 800153c:	20000228 	.word	0x20000228
 8001540:	2000028c 	.word	0x2000028c
 8001544:	0800bd74 	.word	0x0800bd74
 8001548:	00082008 	.word	0x00082008

0800154c <Communication_handle>:

 void Communication_handle()
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b08d      	sub	sp, #52	; 0x34
 8001550:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[20];

	int params = sscanf((const char*)_cmdbuffer, "%s %s", cmd, param);
 8001552:	463b      	mov	r3, r7
 8001554:	f107 0214 	add.w	r2, r7, #20
 8001558:	4920      	ldr	r1, [pc, #128]	; (80015dc <Communication_handle+0x90>)
 800155a:	4821      	ldr	r0, [pc, #132]	; (80015e0 <Communication_handle+0x94>)
 800155c:	f007 fe0e 	bl	800917c <siscanf>
 8001560:	62b8      	str	r0, [r7, #40]	; 0x28

	if (params == 0)
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	d035      	beq.n	80015d4 <Communication_handle+0x88>
	{
		return;
	}
	for(int i=0;i<_CommandArrLen;i++){
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156c:	e029      	b.n	80015c2 <Communication_handle+0x76>
		if(strcmp(cmd,_commandsArr[i].commandName) == 0){
 800156e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <Communication_handle+0x98>)
 800157a:	441a      	add	r2, r3
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fe24 	bl	80001d0 <strcmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d116      	bne.n	80015bc <Communication_handle+0x70>
			_commandsArr[i].func(_commandsArr[i].object, param);
 800158e:	4915      	ldr	r1, [pc, #84]	; (80015e4 <Communication_handle+0x98>)
 8001590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3314      	adds	r3, #20
 800159e:	681c      	ldr	r4, [r3, #0]
 80015a0:	4910      	ldr	r1, [pc, #64]	; (80015e4 <Communication_handle+0x98>)
 80015a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3318      	adds	r3, #24
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	463a      	mov	r2, r7
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	47a0      	blx	r4
			return;
 80015ba:	e00c      	b.n	80015d6 <Communication_handle+0x8a>
	for(int i=0;i<_CommandArrLen;i++){
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015be:	3301      	adds	r3, #1
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <Communication_handle+0x9c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbd0      	blt.n	800156e <Communication_handle+0x22>
		}

	}
	printf("Invalid command\r\n");
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <Communication_handle+0xa0>)
 80015ce:	f007 fdcd 	bl	800916c <puts>
 80015d2:	e000      	b.n	80015d6 <Communication_handle+0x8a>
		return;
 80015d4:	bf00      	nop

}
 80015d6:	3734      	adds	r7, #52	; 0x34
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	0800bd78 	.word	0x0800bd78
 80015e0:	20000228 	.word	0x20000228
 80015e4:	20000294 	.word	0x20000294
 80015e8:	200004c4 	.word	0x200004c4
 80015ec:	0800bd80 	.word	0x0800bd80

080015f0 <Communication_register>:

void Communication_register(char* commandName, HandlerFunc func,void* object)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]

	strncpy(_commandsArr[_CommandArrLen].commandName, commandName, 20);
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <Communication_register+0x64>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <Communication_register+0x68>)
 800160a:	4413      	add	r3, r2
 800160c:	2214      	movs	r2, #20
 800160e:	68f9      	ldr	r1, [r7, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	f007 fe24 	bl	800925e <strncpy>
	_commandsArr[_CommandArrLen].func=func;
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <Communication_register+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	490f      	ldr	r1, [pc, #60]	; (8001658 <Communication_register+0x68>)
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3314      	adds	r3, #20
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	601a      	str	r2, [r3, #0]
	_commandsArr[_CommandArrLen].object=object;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <Communication_register+0x64>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4909      	ldr	r1, [pc, #36]	; (8001658 <Communication_register+0x68>)
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3318      	adds	r3, #24
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	601a      	str	r2, [r3, #0]
	_CommandArrLen++;
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <Communication_register+0x64>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a02      	ldr	r2, [pc, #8]	; (8001654 <Communication_register+0x64>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200004c4 	.word	0x200004c4
 8001658:	20000294 	.word	0x20000294

0800165c <Dht_init>:

#define MAX_TIME_COUNTER 19

void* memset(void* s, int c, int n);
static int _startCount=0;
void Dht_init(Dht* dht,GPIO_TypeDef* gpioPort,  uint32_t gpioPin){
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	dht->gpioPort=gpioPort;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	601a      	str	r2, [r3, #0]
	dht->gpioPin=gpioPin;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	605a      	str	r2, [r3, #4]
	dht->timeCounter=0;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <insertValue>:


static void insertValue(Dht* dht){
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	dht->humidity=(double)dht->bytesArr[0]+((double)dht->bytesArr[1])/10;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7f5b      	ldrb	r3, [r3, #29]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_ui2d>
 800169a:	4604      	mov	r4, r0
 800169c:	460d      	mov	r5, r1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7f9b      	ldrb	r3, [r3, #30]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff3e 	bl	8000524 <__aeabi_ui2d>
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <insertValue+0x90>)
 80016ae:	f7ff f8dd 	bl	800086c <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fdf7 	bl	80002ac <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dht->temperature=(double)dht->bytesArr[2]+((double)dht->bytesArr[3])/10;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7fdb      	ldrb	r3, [r3, #31]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff29 	bl	8000524 <__aeabi_ui2d>
 80016d2:	4604      	mov	r4, r0
 80016d4:	460d      	mov	r5, r1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff21 	bl	8000524 <__aeabi_ui2d>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <insertValue+0x90>)
 80016e8:	f7ff f8c0 	bl	800086c <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fdda 	bl	80002ac <__adddf3>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dht->sum=(int)dht->bytesArr[4];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bdb0      	pop	{r4, r5, r7, pc}
 8001716:	bf00      	nop
 8001718:	40240000 	.word	0x40240000

0800171c <Dht_onGpioInterrupt>:


void Dht_onGpioInterrupt(Dht* dht,uint32_t pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	if(pin != dht->gpioPin)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d179      	bne.n	8001824 <Dht_onGpioInterrupt+0x108>
	{
		return;
	}
	DhtState dhtState=dht->dhtState;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7f1b      	ldrb	r3, [r3, #28]
 8001734:	73fb      	strb	r3, [r7, #15]
	switch(dhtState){
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d876      	bhi.n	800182a <Dht_onGpioInterrupt+0x10e>
 800173c:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <Dht_onGpioInterrupt+0x28>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001755 	.word	0x08001755
 8001748:	0800175d 	.word	0x0800175d
 800174c:	08001783 	.word	0x08001783
 8001750:	0800181d 	.word	0x0800181d
	case DHT_STATE_AWAITING_RESPONSE_START:
		dht->dhtState=DHT_STATE_AWAITING_RESPONSE_END;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	771a      	strb	r2, [r3, #28]
		break;
 800175a:	e066      	b.n	800182a <Dht_onGpioInterrupt+0x10e>
	case DHT_STATE_AWAITING_RESPONSE_END:
		__HAL_TIM_SET_COUNTER(&htim16,0);
 800175c:	4b34      	ldr	r3, [pc, #208]	; (8001830 <Dht_onGpioInterrupt+0x114>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
		dht->dhtState=DHT_STATE_RECEIVING_BITS;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	771a      	strb	r2, [r3, #28]
		memset(dht->bytesArr,0,sizeof(dht->bytesArr));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	331d      	adds	r3, #29
 800176e:	2205      	movs	r2, #5
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f007 f802 	bl	800877c <memset>
		dht->bitCounter=0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8001780:	e053      	b.n	800182a <Dht_onGpioInterrupt+0x10e>
	case DHT_STATE_RECEIVING_BITS:
		dht->bytesArr[dht->bitCounter/8] <<= 1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4611      	mov	r1, r2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	440b      	add	r3, r1
 8001792:	7f5b      	ldrb	r3, [r3, #29]
 8001794:	4611      	mov	r1, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	440b      	add	r3, r1
 800179e:	775a      	strb	r2, [r3, #29]
		if(__HAL_TIM_GET_COUNTER(&htim16)>=100){
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <Dht_onGpioInterrupt+0x114>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2b63      	cmp	r3, #99	; 0x63
 80017a8:	d90f      	bls.n	80017ca <Dht_onGpioInterrupt+0xae>
			dht->bytesArr[dht->bitCounter/8] |= 1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4611      	mov	r1, r2
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	440b      	add	r3, r1
 80017ba:	7f5b      	ldrb	r3, [r3, #29]
 80017bc:	4611      	mov	r1, r2
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	440b      	add	r3, r1
 80017c8:	775a      	strb	r2, [r3, #29]
		}
		dht->bitCounter++;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		__HAL_TIM_SET_COUNTER(&htim16,0);
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <Dht_onGpioInterrupt+0x114>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
		if(dht->bitCounter==40){
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017e8:	2b28      	cmp	r3, #40	; 0x28
 80017ea:	d11d      	bne.n	8001828 <Dht_onGpioInterrupt+0x10c>
			dht->humidity=0;
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			dht->temperature=0;
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c1 2302 	strd	r2, r3, [r1, #8]
			dht->sum=0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
			insertValue(dht);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ff3a 	bl	8001688 <insertValue>
			dht->dhtState=DHT_STATE_DATA_RECIVED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	771a      	strb	r2, [r3, #28]
		}
		break;
 800181a:	e005      	b.n	8001828 <Dht_onGpioInterrupt+0x10c>
	case DHT_STATE_DATA_RECIVED:
		HAL_TIM_Base_Stop(&htim16);
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <Dht_onGpioInterrupt+0x114>)
 800181e:	f005 f831 	bl	8006884 <HAL_TIM_Base_Stop>
		break;
 8001822:	e002      	b.n	800182a <Dht_onGpioInterrupt+0x10e>
		return;
 8001824:	bf00      	nop
 8001826:	e000      	b.n	800182a <Dht_onGpioInterrupt+0x10e>
		break;
 8001828:	bf00      	nop
	}

}
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000810 	.word	0x20000810

08001834 <Dht_onTimerInterrupt>:
void Dht_onTimerInterrupt(void* obj)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	Dht* dht=(Dht*)obj;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	61fb      	str	r3, [r7, #28]
	if(_startCount==1){
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <Dht_onTimerInterrupt+0x8c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <Dht_onTimerInterrupt+0x24>
		dht->timeCounter++;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	}
	if(dht->timeCounter>=MAX_TIME_COUNTER){
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800185e:	2b12      	cmp	r3, #18
 8001860:	d929      	bls.n	80018b6 <Dht_onTimerInterrupt+0x82>
		HAL_GPIO_WritePin(dht->gpioPort, dht->gpioPin, 1);
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	b29b      	uxth	r3, r3
 800186c:	2201      	movs	r2, #1
 800186e:	4619      	mov	r1, r3
 8001870:	f003 fbde 	bl	8005030 <HAL_GPIO_WritePin>
		dht->timeCounter=0;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		GPIO_InitTypeDef gpioInitStruct;
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800187c:	2017      	movs	r0, #23
 800187e:	f002 ff05 	bl	800468c <HAL_NVIC_EnableIRQ>
		gpioInitStruct.Pin = dht->gpioPin;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60bb      	str	r3, [r7, #8]
		gpioInitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
		gpioInitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001890:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(dht->gpioPort, &gpioInitStruct);
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f107 0208 	add.w	r2, r7, #8
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fa05 	bl	8004cac <HAL_GPIO_Init>
		MainTimer_unRegister(Dht_onTimerInterrupt, dht);
 80018a2:	69f9      	ldr	r1, [r7, #28]
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <Dht_onTimerInterrupt+0x90>)
 80018a6:	f000 faef 	bl	8001e88 <MainTimer_unRegister>
		_startCount=0;
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <Dht_onTimerInterrupt+0x8c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

		dht->dhtState = DHT_STATE_AWAITING_RESPONSE_START;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2200      	movs	r2, #0
 80018b4:	771a      	strb	r2, [r3, #28]
	}
}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200004c8 	.word	0x200004c8
 80018c4:	08001835 	.word	0x08001835

080018c8 <Dht_readAsync>:

void Dht_readAsync(Dht* dht)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	MainTimer_registerCallback(Dht_onTimerInterrupt, dht);
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4817      	ldr	r0, [pc, #92]	; (8001930 <Dht_readAsync+0x68>)
 80018d4:	f000 fa9c 	bl	8001e10 <MainTimer_registerCallback>
	GPIO_InitTypeDef gpioInitStruct;
	gpioInitStruct.Pin = dht->gpioPin;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	60fb      	str	r3, [r7, #12]
	gpioInitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	613b      	str	r3, [r7, #16]
	gpioInitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
	gpioInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(dht->gpioPort, &gpioInitStruct);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f107 020c 	add.w	r2, r7, #12
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 f9d9 	bl	8004cac <HAL_GPIO_Init>
	HAL_TIM_Base_Start(&htim16);
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <Dht_readAsync+0x6c>)
 80018fc:	f004 ff5a 	bl	80067b4 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(dht->gpioPort, dht->gpioPin, 0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	b29b      	uxth	r3, r3
 800190a:	2200      	movs	r2, #0
 800190c:	4619      	mov	r1, r3
 800190e:	f003 fb8f 	bl	8005030 <HAL_GPIO_WritePin>
	dht->timeCounter=0;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	_startCount=1;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <Dht_readAsync+0x70>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim16,0);
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <Dht_readAsync+0x6c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	08001835 	.word	0x08001835
 8001934:	20000810 	.word	0x20000810
 8001938:	200004c8 	.word	0x200004c8

0800193c <Dht_hasData>:

int Dht_hasData(Dht* dht)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if(dht->dhtState==DHT_STATE_DATA_RECIVED){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7f1b      	ldrb	r3, [r3, #28]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d101      	bne.n	8001950 <Dht_hasData+0x14>
		return 1;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <Dht_hasData+0x16>
	}
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <Dht_changeStateToResStart>:

void Dht_changeStateToResStart(Dht* dht)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	dht->dhtState=DHT_STATE_AWAITING_RESPONSE_START;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	771a      	strb	r2, [r3, #28]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <Dht_getTemperature>:
double Dht_getTemperature(Dht* dht)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	return dht->temperature;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001986:	ec43 2b17 	vmov	d7, r2, r3

}
 800198a:	eeb0 0a47 	vmov.f32	s0, s14
 800198e:	eef0 0a67 	vmov.f32	s1, s15
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <Dht_getHumidity>:
double Dht_getHumidity(Dht* dht)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	return dht->humidity;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019aa:	ec43 2b17 	vmov	d7, r2, r3

}
 80019ae:	eeb0 0a47 	vmov.f32	s0, s14
 80019b2:	eef0 0a67 	vmov.f32	s1, s15
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <Dht_getSum>:
int Dht_getSum(Dht* dht)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	return dht->sum;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]

}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <Flash_init>:
//static uint32_t ind = 0;
//static uint64_t temp;
//static FlashState flashState=FLASH_STATE_NONE;

void Flash_init(Flash* flash)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	flash->data.counter = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
	flash->state = FLASH_STATE_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
	flash->isErase = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
	flash->address = 0x08080000;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <Flash_init+0x2c>)
 80019f6:	60da      	str	r2, [r3, #12]
			flash->address = i;
			break;
		}
	}*/

}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	08080000 	.word	0x08080000

08001a08 <erase>:
void erase(FLASH_EraseInitTypeDef *pEraseInit)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8001a10:	f002 ffa4 	bl	800495c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase_IT(pEraseInit);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f003 f82f 	bl	8004a78 <HAL_FLASHEx_Erase_IT>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <Flash_print>:


void Flash_print(Flash* flash)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	for(int i=0x08080000;i<flash->address;i+=8){
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <Flash_print+0x40>)
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00e      	b.n	8001a50 <Flash_print+0x2c>
		uint32_t printTemp = *(uint32_t *)(i);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
		uint32_t printTime = *(uint32_t *)(i+4);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]
		printf("The temperature is: %ld and the time is: %ld\r\n",printTemp,printTime);
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	6939      	ldr	r1, [r7, #16]
 8001a44:	4808      	ldr	r0, [pc, #32]	; (8001a68 <Flash_print+0x44>)
 8001a46:	f007 fb0b 	bl	8009060 <iprintf>
	for(int i=0x08080000;i<flash->address;i+=8){
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d8eb      	bhi.n	8001a32 <Flash_print+0xe>

	}



}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	08080000 	.word	0x08080000
 8001a68:	0800bd94 	.word	0x0800bd94

08001a6c <Flash_myInterruptHandler>:
	memcpy(text,data,dataSize);
	erase(&flash);
}

void Flash_myInterruptHandler(Flash* flash)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if(flash->state==FLASH_STATE_ERASE){
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d12b      	bne.n	8001ad4 <Flash_myInterruptHandler+0x68>
		/*HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *(uint64_t *)(text));
		ind+=8;*/
		flash->state=FLASH_STATE_PROGRAM;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
		flash->isErase = 0;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]

		flash->data.temp = (uint64_t)Dht_getTemperature(&dht);
 8001a88:	4819      	ldr	r0, [pc, #100]	; (8001af0 <Flash_myInterruptHandler+0x84>)
 8001a8a:	f7ff ff75 	bl	8001978 <Dht_getTemperature>
 8001a8e:	ec53 2b10 	vmov	r2, r3, d0
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f8af 	bl	8000bf8 <__aeabi_d2ulz>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	605a      	str	r2, [r3, #4]
		flash->data.counter = (uint64_t)HAL_GetTick();
 8001aa2:	f001 f98d 	bl	8002dc0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
		uint64_t data =  *(uint64_t *)&flash->data;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_DOUBLEWORD, flash->address, (data));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68d9      	ldr	r1, [r3, #12]
 8001abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f002 fe07 	bl	80046d4 <HAL_FLASH_Program_IT>
		flash->address+=8;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
		HAL_FLASH_Lock();


		//}
	}
}
 8001ad2:	e008      	b.n	8001ae6 <Flash_myInterruptHandler+0x7a>
	else if(flash->state==FLASH_STATE_PROGRAM){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d104      	bne.n	8001ae6 <Flash_myInterruptHandler+0x7a>
		flash->state=FLASH_STATE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Lock();
 8001ae2:	f002 ff5d 	bl	80049a0 <HAL_FLASH_Lock>
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200006d8 	.word	0x200006d8

08001af4 <checkAddress>:
void checkAddress(Flash* flash)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef flashErase;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
	flashErase.Banks = FLASH_BANK_2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
	flashErase.NbPages = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
	if(flash->address == 0x08080000 || flash->address == 0x08081000)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <checkAddress+0xd0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d004      	beq.n	8001b1c <checkAddress+0x28>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4a2c      	ldr	r2, [pc, #176]	; (8001bc8 <checkAddress+0xd4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <checkAddress+0x4c>
	{
		flash->address = 0x08080000;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <checkAddress+0xd0>)
 8001b20:	60da      	str	r2, [r3, #12]
		flashErase.Page = 256;
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	613b      	str	r3, [r7, #16]
		flash->isErase = 1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	611a      	str	r2, [r3, #16]
		flash->state = FLASH_STATE_ERASE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
		erase(&flashErase);
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff65 	bl	8001a08 <erase>
 8001b3e:	e012      	b.n	8001b66 <checkAddress+0x72>

	}
	else if(flash->address == 0x08080800)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <checkAddress+0xd8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10d      	bne.n	8001b66 <checkAddress+0x72>
	{
		flash->isErase = 1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	611a      	str	r2, [r3, #16]
		flashErase.Page = 257;
 8001b50:	f240 1301 	movw	r3, #257	; 0x101
 8001b54:	613b      	str	r3, [r7, #16]
		flash->state = FLASH_STATE_ERASE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
		erase(&flashErase);
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff51 	bl	8001a08 <erase>
	}
	if(!flash->isErase){
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d126      	bne.n	8001bbc <checkAddress+0xc8>
		HAL_FLASH_Unlock();
 8001b6e:	f002 fef5 	bl	800495c <HAL_FLASH_Unlock>

		flash->data.temp = (uint64_t)Dht_getTemperature(&dht);
 8001b72:	4817      	ldr	r0, [pc, #92]	; (8001bd0 <checkAddress+0xdc>)
 8001b74:	f7ff ff00 	bl	8001978 <Dht_getTemperature>
 8001b78:	ec53 2b10 	vmov	r2, r3, d0
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7ff f83a 	bl	8000bf8 <__aeabi_d2ulz>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]
		flash->data.counter = (uint64_t)HAL_GetTick();
 8001b8c:	f001 f918 	bl	8002dc0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
		uint64_t data =  *(uint64_t *)&flash->data;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_DOUBLEWORD, flash->address, (data));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68d9      	ldr	r1, [r3, #12]
 8001ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001baa:	2000      	movs	r0, #0
 8001bac:	f002 fd92 	bl	80046d4 <HAL_FLASH_Program_IT>
		flash->address+=8;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f103 0208 	add.w	r2, r3, #8
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]
	}

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	08080000 	.word	0x08080000
 8001bc8:	08081000 	.word	0x08081000
 8001bcc:	08080800 	.word	0x08080800
 8001bd0:	200006d8 	.word	0x200006d8

08001bd4 <Flash_timerInterrupt>:
void Flash_timerInterrupt(Flash* flash)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	flash->data.counter++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	609a      	str	r2, [r3, #8]
	if(flash->data.counter>=1000){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bee:	d305      	bcc.n	8001bfc <Flash_timerInterrupt+0x28>
		checkAddress(flash);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff7f 	bl	8001af4 <checkAddress>
		flash->data.counter = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <Led_init>:
#include "Led.h"
#include "MainTimer.h"
#define MAX_BRIGHNESS_LEVEL 10

void Led_init(Led* led, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
	led->gpioPort = gpioPort;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
	led->gpioPin = gpioPin;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	821a      	strh	r2, [r3, #16]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <Led_On>:

void Led_On(Led* led)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	MainTimer_unRegister(Led_OnTimerInterrupt, led);
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <Led_On+0x30>)
 8001c3c:	f000 f924 	bl	8001e88 <MainTimer_unRegister>
	led->state = STATE_FULL;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68d8      	ldr	r0, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	8a1b      	ldrh	r3, [r3, #16]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4619      	mov	r1, r3
 8001c52:	f003 f9ed 	bl	8005030 <HAL_GPIO_WritePin>


}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	08001d11 	.word	0x08001d11

08001c64 <Led_Off>:

void Led_Off(Led* led)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	MainTimer_unRegister(Led_OnTimerInterrupt, led);
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <Led_Off+0x30>)
 8001c70:	f000 f90a 	bl	8001e88 <MainTimer_unRegister>
	led->state = STATE_OFF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68d8      	ldr	r0, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8a1b      	ldrh	r3, [r3, #16]
 8001c82:	2200      	movs	r2, #0
 8001c84:	4619      	mov	r1, r3
 8001c86:	f003 f9d3 	bl	8005030 <HAL_GPIO_WritePin>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	08001d11 	.word	0x08001d11

08001c98 <Led_Blink>:

void Led_Blink(Led* led, int period)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
	MainTimer_registerCallback(Led_OnTimerInterrupt, led);
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <Led_Blink+0x3c>)
 8001ca6:	f000 f8b3 	bl	8001e10 <MainTimer_registerCallback>
	led->state = STATE_BLINK;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	701a      	strb	r2, [r3, #0]
	led->counter = 0;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
	led->maxCounter = period;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68d8      	ldr	r0, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	8a1b      	ldrh	r3, [r3, #16]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f003 f9b2 	bl	8005030 <HAL_GPIO_WritePin>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	08001d11 	.word	0x08001d11

08001cd8 <Led_Brightness>:

void Led_Brightness(Led* led ,int level)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	if (level < 0 || level > 10) {
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0c      	blt.n	8001d02 <Led_Brightness+0x2a>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b0a      	cmp	r3, #10
 8001cec:	dc09      	bgt.n	8001d02 <Led_Brightness+0x2a>
		return;
	}
	led->state = STATE_BRIGHTNESS;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	701a      	strb	r2, [r3, #0]
	led->counter=0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
	led->maxCounter=level;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	e000      	b.n	8001d04 <Led_Brightness+0x2c>
		return;
 8001d02:	bf00      	nop
}
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <Led_OnTimerInterrupt>:

void Led_OnTimerInterrupt(void* obj)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	Led* led=(Led*)obj;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]
	if (led->state == STATE_BLINK) {
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d115      	bne.n	8001d50 <Led_OnTimerInterrupt+0x40>
		led->counter++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]
		if (led->counter == led->maxCounter) {
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d10a      	bne.n	8001d50 <Led_OnTimerInterrupt+0x40>
			HAL_GPIO_TogglePin(led->gpioPort, led->gpioPin);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8a1b      	ldrh	r3, [r3, #16]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f003 f98b 	bl	8005060 <HAL_GPIO_TogglePin>
			led->counter = 0;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
		}
	}

	if(led->state==STATE_BRIGHTNESS){
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d12a      	bne.n	8001dae <Led_OnTimerInterrupt+0x9e>
		if(led->counter==0){
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d108      	bne.n	8001d72 <Led_OnTimerInterrupt+0x62>
			HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 1);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68d8      	ldr	r0, [r3, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8a1b      	ldrh	r3, [r3, #16]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f003 f960 	bl	8005030 <HAL_GPIO_WritePin>
 8001d70:	e00d      	b.n	8001d8e <Led_OnTimerInterrupt+0x7e>
		}
		else if(led->counter==led->maxCounter){
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d107      	bne.n	8001d8e <Led_OnTimerInterrupt+0x7e>
			HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68d8      	ldr	r0, [r3, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8a1b      	ldrh	r3, [r3, #16]
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f003 f951 	bl	8005030 <HAL_GPIO_WritePin>
		}
		led->counter=(led->counter+1)%MAX_BRIGHNESS_LEVEL;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <Led_OnTimerInterrupt+0xa8>)
 8001d96:	fb83 2301 	smull	r2, r3, r3, r1
 8001d9a:	109a      	asrs	r2, r3, #2
 8001d9c:	17cb      	asrs	r3, r1, #31
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	1aca      	subs	r2, r1, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	605a      	str	r2, [r3, #4]
	}
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	66666667 	.word	0x66666667

08001dbc <LightSensor_init>:
 */

#include "LightSensor.h"

void LightSensor_init(LightSensor *ltsensor,ADC_HandleTypeDef* hadc,uint32_t max)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	ltsensor->hadc=hadc;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	601a      	str	r2, [r3, #0]
	ltsensor->max=max;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LightSensor_adcInterrupt>:


void LightSensor_adcInterrupt(LightSensor *ltsensor)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	uint32_t lt=HAL_ADC_GetValue(ltsensor->hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fc71 	bl	80036d4 <HAL_ADC_GetValue>
 8001df2:	60f8      	str	r0, [r7, #12]
	ltsensor->val=((ltsensor->max) * lt + (4096/2) ) /4096;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e02:	0b1a      	lsrs	r2, r3, #12
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]

}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <MainTimer_registerCallback>:
}Command;
static int _lenArr=0;
static Command _commandsArr[MAX_COMMANDS];

 void MainTimer_registerCallback(MainTimerFunc func,void* object)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	 for(int i=0;i<_lenArr;i++){
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e011      	b.n	8001e44 <MainTimer_registerCallback+0x34>
		 if(_commandsArr[i].func==func && _commandsArr[i].object==object){
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <MainTimer_registerCallback+0x70>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d107      	bne.n	8001e3e <MainTimer_registerCallback+0x2e>
 8001e2e:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <MainTimer_registerCallback+0x70>)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d01a      	beq.n	8001e74 <MainTimer_registerCallback+0x64>
	 for(int i=0;i<_lenArr;i++){
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MainTimer_registerCallback+0x74>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	dbe8      	blt.n	8001e20 <MainTimer_registerCallback+0x10>
			 return;
		 }
	 }
	_commandsArr[_lenArr].func=func;
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <MainTimer_registerCallback+0x74>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	490b      	ldr	r1, [pc, #44]	; (8001e80 <MainTimer_registerCallback+0x70>)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	_commandsArr[_lenArr].object=object;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <MainTimer_registerCallback+0x74>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <MainTimer_registerCallback+0x70>)
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	605a      	str	r2, [r3, #4]
	_lenArr++;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MainTimer_registerCallback+0x74>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <MainTimer_registerCallback+0x74>)
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e000      	b.n	8001e76 <MainTimer_registerCallback+0x66>
			 return;
 8001e74:	bf00      	nop
}
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	200004d0 	.word	0x200004d0
 8001e84:	200004cc 	.word	0x200004cc

08001e88 <MainTimer_unRegister>:
 void MainTimer_unRegister(MainTimerFunc func,void* object)
 {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	 for(int i=0;i<_lenArr;i++){
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e02d      	b.n	8001ef4 <MainTimer_unRegister+0x6c>
	 	if(_commandsArr[i].func==func && _commandsArr[i].object==object){
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <MainTimer_unRegister+0x80>)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d123      	bne.n	8001eee <MainTimer_unRegister+0x66>
 8001ea6:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <MainTimer_unRegister+0x80>)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d11b      	bne.n	8001eee <MainTimer_unRegister+0x66>
	 		_commandsArr[i].func=_commandsArr[_lenArr-1].func;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MainTimer_unRegister+0x84>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <MainTimer_unRegister+0x80>)
 8001ebe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001ec2:	4911      	ldr	r1, [pc, #68]	; (8001f08 <MainTimer_unRegister+0x80>)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	 		_commandsArr[i].object=_commandsArr[_lenArr-1].object;
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MainTimer_unRegister+0x84>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <MainTimer_unRegister+0x80>)
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	490b      	ldr	r1, [pc, #44]	; (8001f08 <MainTimer_unRegister+0x80>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	605a      	str	r2, [r3, #4]
	 		_lenArr--;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MainTimer_unRegister+0x84>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <MainTimer_unRegister+0x84>)
 8001eea:	6013      	str	r3, [r2, #0]
	 		return;
 8001eec:	e007      	b.n	8001efe <MainTimer_unRegister+0x76>
	 for(int i=0;i<_lenArr;i++){
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <MainTimer_unRegister+0x84>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbcc      	blt.n	8001e98 <MainTimer_unRegister+0x10>
	 	}

	 }
 }
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	200004d0 	.word	0x200004d0
 8001f0c:	200004cc 	.word	0x200004cc

08001f10 <HAL_TIM_PeriodElapsedCallback>:

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 	if(htim==&htim6){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d11d      	bne.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x4c>
 		for(int i=0;i<_lenArr;i++){
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e00d      	b.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x32>

 			_commandsArr[i].func(_commandsArr[i].object);
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001f2e:	490e      	ldr	r1, [pc, #56]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4790      	blx	r2
 		for(int i=0;i<_lenArr;i++){
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbec      	blt.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x16>
 		}
 		myClock.tickCount++;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001f54:	6013      	str	r3, [r2, #0]
 		Flash_timerInterrupt(&flash);
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001f58:	f7ff fe3c 	bl	8001bd4 <Flash_timerInterrupt>
 	}
 }
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200007c4 	.word	0x200007c4
 8001f68:	200004d0 	.word	0x200004d0
 8001f6c:	200004cc 	.word	0x200004cc
 8001f70:	20000224 	.word	0x20000224
 8001f74:	20000700 	.word	0x20000700

08001f78 <MyMain>:
Dht dht;

FLASH_EraseInitTypeDef pEraseInit;
Flash flash;

void MyMain(){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
	Led_init(&ledB, LED1_GPIO_Port, LED1_Pin);
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001f84:	4871      	ldr	r0, [pc, #452]	; (800214c <MyMain+0x1d4>)
 8001f86:	f7ff fe3d 	bl	8001c04 <Led_init>
	Led_init(&ledR, LED2_GPIO_Port, LED2_Pin);
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001f90:	486f      	ldr	r0, [pc, #444]	; (8002150 <MyMain+0x1d8>)
 8001f92:	f7ff fe37 	bl	8001c04 <Led_init>

	Button_init(&buttonSw1, BTN_SW1, SW1_GPIO_Port,  SW1_Pin);
 8001f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	486c      	ldr	r0, [pc, #432]	; (8002154 <MyMain+0x1dc>)
 8001fa2:	f7fe ffd1 	bl	8000f48 <Button_init>
	Button_init(&buttonSw2, BTN_SW2, SW2_GPIO_Port, SW2_Pin);
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	; (8002158 <MyMain+0x1e0>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	486b      	ldr	r0, [pc, #428]	; (800215c <MyMain+0x1e4>)
 8001fae:	f7fe ffcb 	bl	8000f48 <Button_init>

	LightSensor_init(&lts1, &hadc2, 10);
 8001fb2:	220a      	movs	r2, #10
 8001fb4:	496a      	ldr	r1, [pc, #424]	; (8002160 <MyMain+0x1e8>)
 8001fb6:	486b      	ldr	r0, [pc, #428]	; (8002164 <MyMain+0x1ec>)
 8001fb8:	f7ff ff00 	bl	8001dbc <LightSensor_init>


	Clock_init();
 8001fbc:	f7ff fa1e 	bl	80013fc <Clock_init>

	Buzzer_init(&bz1);
 8001fc0:	4869      	ldr	r0, [pc, #420]	; (8002168 <MyMain+0x1f0>)
 8001fc2:	f7ff f86b 	bl	800109c <Buzzer_init>

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fc6:	2036      	movs	r0, #54	; 0x36
 8001fc8:	f002 fb60 	bl	800468c <HAL_NVIC_EnableIRQ>



	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fcc:	2012      	movs	r0, #18
 8001fce:	f002 fb5d 	bl	800468c <HAL_NVIC_EnableIRQ>
	HAL_ADC_Start_IT(&hadc2);
 8001fd2:	4863      	ldr	r0, [pc, #396]	; (8002160 <MyMain+0x1e8>)
 8001fd4:	f001 fa4c 	bl	8003470 <HAL_ADC_Start_IT>
	//ledBlink(&ledB, 500);
	//ledOn(&ledB);

	ButtonState SW1State;
	ButtonState SW2State;
	Cli_init();
 8001fd8:	f7ff f9a8 	bl	800132c <Cli_init>
	Dht_init(&dht, DHT11_GPIO_Port,  DHT11_Pin);
 8001fdc:	2220      	movs	r2, #32
 8001fde:	495e      	ldr	r1, [pc, #376]	; (8002158 <MyMain+0x1e0>)
 8001fe0:	4862      	ldr	r0, [pc, #392]	; (800216c <MyMain+0x1f4>)
 8001fe2:	f7ff fb3b 	bl	800165c <Dht_init>
	Dht_readAsync(&dht);
 8001fe6:	4861      	ldr	r0, [pc, #388]	; (800216c <MyMain+0x1f4>)
 8001fe8:	f7ff fc6e 	bl	80018c8 <Dht_readAsync>

	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001fec:	2004      	movs	r0, #4
 8001fee:	f002 fb4d 	bl	800468c <HAL_NVIC_EnableIRQ>


	//static char data[24] = "interrupt flash!!";
	//Flash_write((0x08080000), data, 24);
	Flash_init(&flash);
 8001ff2:	485f      	ldr	r0, [pc, #380]	; (8002170 <MyMain+0x1f8>)
 8001ff4:	f7ff fcf0 	bl	80019d8 <Flash_init>

	HAL_TIM_Base_Start_IT(&htim6);
 8001ff8:	485e      	ldr	r0, [pc, #376]	; (8002174 <MyMain+0x1fc>)
 8001ffa:	f004 fc6b 	bl	80068d4 <HAL_TIM_Base_Start_IT>
	while(1){
		if(Dht_hasData(&dht)){
 8001ffe:	485b      	ldr	r0, [pc, #364]	; (800216c <MyMain+0x1f4>)
 8002000:	f7ff fc9c 	bl	800193c <Dht_hasData>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01a      	beq.n	8002040 <MyMain+0xc8>
			printf("The humidity is: %.2lf\r\n",Dht_getHumidity(&dht));
 800200a:	4858      	ldr	r0, [pc, #352]	; (800216c <MyMain+0x1f4>)
 800200c:	f7ff fcc6 	bl	800199c <Dht_getHumidity>
 8002010:	ec53 2b10 	vmov	r2, r3, d0
 8002014:	4858      	ldr	r0, [pc, #352]	; (8002178 <MyMain+0x200>)
 8002016:	f007 f823 	bl	8009060 <iprintf>
			printf("The temperature is: %.2lf\r\n",Dht_getTemperature(&dht));
 800201a:	4854      	ldr	r0, [pc, #336]	; (800216c <MyMain+0x1f4>)
 800201c:	f7ff fcac 	bl	8001978 <Dht_getTemperature>
 8002020:	ec53 2b10 	vmov	r2, r3, d0
 8002024:	4855      	ldr	r0, [pc, #340]	; (800217c <MyMain+0x204>)
 8002026:	f007 f81b 	bl	8009060 <iprintf>
			printf("The sum is: %d\r\n",Dht_getSum(&dht));
 800202a:	4850      	ldr	r0, [pc, #320]	; (800216c <MyMain+0x1f4>)
 800202c:	f7ff fcc8 	bl	80019c0 <Dht_getSum>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	4852      	ldr	r0, [pc, #328]	; (8002180 <MyMain+0x208>)
 8002036:	f007 f813 	bl	8009060 <iprintf>
			Dht_changeStateToResStart(&dht);
 800203a:	484c      	ldr	r0, [pc, #304]	; (800216c <MyMain+0x1f4>)
 800203c:	f7ff fc8f 	bl	800195e <Dht_changeStateToResStart>

		}
		if (Communication_task())
 8002040:	f7ff f9e8 	bl	8001414 <Communication_task>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MyMain+0xd6>
		{
			Communication_handle();
 800204a:	f7ff fa7f 	bl	800154c <Communication_handle>
		}



		SW1State=Button_getState(&buttonSw1);
 800204e:	4841      	ldr	r0, [pc, #260]	; (8002154 <MyMain+0x1dc>)
 8002050:	f7fe ff9f 	bl	8000f92 <Button_getState>
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]


		if(SW1State!=BUTTON_STATE_NONE){
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d032      	beq.n	80020c4 <MyMain+0x14c>
			switch(SW1State){
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d830      	bhi.n	80020c6 <MyMain+0x14e>
 8002064:	a201      	add	r2, pc, #4	; (adr r2, 800206c <MyMain+0xf4>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	080020c7 	.word	0x080020c7
 8002070:	0800207d 	.word	0x0800207d
 8002074:	08002097 	.word	0x08002097
 8002078:	080020a5 	.word	0x080020a5
			case BUTTON_STATE_PRESS:
				//HAL_TIM_Base_Stop_IT(&htim6);
				Buzzer_stop(&bz1);
 800207c:	483a      	ldr	r0, [pc, #232]	; (8002168 <MyMain+0x1f0>)
 800207e:	f7ff f8b5 	bl	80011ec <Buzzer_stop>
				printf("SW1 short press\n\r");
 8002082:	4840      	ldr	r0, [pc, #256]	; (8002184 <MyMain+0x20c>)
 8002084:	f006 ffec 	bl	8009060 <iprintf>
				Button_changeStateToNone(&buttonSw1);
 8002088:	4832      	ldr	r0, [pc, #200]	; (8002154 <MyMain+0x1dc>)
 800208a:	f7fe ff8e 	bl	8000faa <Button_changeStateToNone>
				Buzzer_changeToOff(&bz1);
 800208e:	4836      	ldr	r0, [pc, #216]	; (8002168 <MyMain+0x1f0>)
 8002090:	f7ff f893 	bl	80011ba <Buzzer_changeToOff>
				break;
 8002094:	e017      	b.n	80020c6 <MyMain+0x14e>

			case BUTTON_STATE_LONG_PRESS:

				//HAL_TIM_Base_Start_IT(&htim6);
				//Buzzer_start(&bz1);
				printf("SW1 long press\n\r");
 8002096:	483c      	ldr	r0, [pc, #240]	; (8002188 <MyMain+0x210>)
 8002098:	f006 ffe2 	bl	8009060 <iprintf>
				Button_changeStateToNone(&buttonSw1);
 800209c:	482d      	ldr	r0, [pc, #180]	; (8002154 <MyMain+0x1dc>)
 800209e:	f7fe ff84 	bl	8000faa <Button_changeStateToNone>
				//Buzzer_changeToOn(&bz1);
				break;
 80020a2:	e010      	b.n	80020c6 <MyMain+0x14e>

			case BUTTON_STATE_DOUBLE_PRESS:
				printf("SW1 double press\n\r");
 80020a4:	4839      	ldr	r0, [pc, #228]	; (800218c <MyMain+0x214>)
 80020a6:	f006 ffdb 	bl	8009060 <iprintf>
				Led_Blink(&ledB, 100);
 80020aa:	2164      	movs	r1, #100	; 0x64
 80020ac:	4827      	ldr	r0, [pc, #156]	; (800214c <MyMain+0x1d4>)
 80020ae:	f7ff fdf3 	bl	8001c98 <Led_Blink>
				Led_Blink(&ledR, 500);
 80020b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020b6:	4826      	ldr	r0, [pc, #152]	; (8002150 <MyMain+0x1d8>)
 80020b8:	f7ff fdee 	bl	8001c98 <Led_Blink>
				Button_changeStateToNone(&buttonSw1);
 80020bc:	4825      	ldr	r0, [pc, #148]	; (8002154 <MyMain+0x1dc>)
 80020be:	f7fe ff74 	bl	8000faa <Button_changeStateToNone>
			case BUTTON_STATE_NONE:
				break;
 80020c2:	e000      	b.n	80020c6 <MyMain+0x14e>

			}
		}
 80020c4:	bf00      	nop

		SW2State=Button_getState(&buttonSw2);
 80020c6:	4825      	ldr	r0, [pc, #148]	; (800215c <MyMain+0x1e4>)
 80020c8:	f7fe ff63 	bl	8000f92 <Button_getState>
 80020cc:	4603      	mov	r3, r0
 80020ce:	71bb      	strb	r3, [r7, #6]
		if(SW2State!=BUTTON_STATE_NONE){
 80020d0:	79bb      	ldrb	r3, [r7, #6]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d037      	beq.n	8002146 <MyMain+0x1ce>
			switch(SW2State){
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d890      	bhi.n	8001ffe <MyMain+0x86>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <MyMain+0x16c>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	08001fff 	.word	0x08001fff
 80020e8:	080020f5 	.word	0x080020f5
 80020ec:	0800210f 	.word	0x0800210f
 80020f0:	08002129 	.word	0x08002129
			case BUTTON_STATE_PRESS:
				Led_On(&ledR);
 80020f4:	4816      	ldr	r0, [pc, #88]	; (8002150 <MyMain+0x1d8>)
 80020f6:	f7ff fd9b 	bl	8001c30 <Led_On>
				Led_On(&ledB);
 80020fa:	4814      	ldr	r0, [pc, #80]	; (800214c <MyMain+0x1d4>)
 80020fc:	f7ff fd98 	bl	8001c30 <Led_On>
				printf("SW2 short press\n\r");
 8002100:	4823      	ldr	r0, [pc, #140]	; (8002190 <MyMain+0x218>)
 8002102:	f006 ffad 	bl	8009060 <iprintf>
				Button_changeStateToNone(&buttonSw2);
 8002106:	4815      	ldr	r0, [pc, #84]	; (800215c <MyMain+0x1e4>)
 8002108:	f7fe ff4f 	bl	8000faa <Button_changeStateToNone>
				break;
 800210c:	e01c      	b.n	8002148 <MyMain+0x1d0>
			case BUTTON_STATE_LONG_PRESS:

				Led_Off(&ledR);
 800210e:	4810      	ldr	r0, [pc, #64]	; (8002150 <MyMain+0x1d8>)
 8002110:	f7ff fda8 	bl	8001c64 <Led_Off>
				Led_Off(&ledB);
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <MyMain+0x1d4>)
 8002116:	f7ff fda5 	bl	8001c64 <Led_Off>
				printf("SW2 long press\n\r");
 800211a:	481e      	ldr	r0, [pc, #120]	; (8002194 <MyMain+0x21c>)
 800211c:	f006 ffa0 	bl	8009060 <iprintf>
				Button_changeStateToNone(&buttonSw2);
 8002120:	480e      	ldr	r0, [pc, #56]	; (800215c <MyMain+0x1e4>)
 8002122:	f7fe ff42 	bl	8000faa <Button_changeStateToNone>
				break;
 8002126:	e00f      	b.n	8002148 <MyMain+0x1d0>

			case BUTTON_STATE_DOUBLE_PRESS:
				Led_Brightness(&ledR, 2);
 8002128:	2102      	movs	r1, #2
 800212a:	4809      	ldr	r0, [pc, #36]	; (8002150 <MyMain+0x1d8>)
 800212c:	f7ff fdd4 	bl	8001cd8 <Led_Brightness>
				Led_Brightness(&ledB, 5);
 8002130:	2105      	movs	r1, #5
 8002132:	4806      	ldr	r0, [pc, #24]	; (800214c <MyMain+0x1d4>)
 8002134:	f7ff fdd0 	bl	8001cd8 <Led_Brightness>
				printf("SW2 double press\n\r");
 8002138:	4817      	ldr	r0, [pc, #92]	; (8002198 <MyMain+0x220>)
 800213a:	f006 ff91 	bl	8009060 <iprintf>
				Button_changeStateToNone(&buttonSw2);
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <MyMain+0x1e4>)
 8002140:	f7fe ff33 	bl	8000faa <Button_changeStateToNone>
				break;
 8002144:	e000      	b.n	8002148 <MyMain+0x1d0>
			case BUTTON_STATE_NONE:
				break;

			}

		}
 8002146:	bf00      	nop
		if(Dht_hasData(&dht)){
 8002148:	e759      	b.n	8001ffe <MyMain+0x86>
 800214a:	bf00      	nop
 800214c:	20000660 	.word	0x20000660
 8002150:	20000674 	.word	0x20000674
 8002154:	20000688 	.word	0x20000688
 8002158:	48000400 	.word	0x48000400
 800215c:	200006a4 	.word	0x200006a4
 8002160:	20000714 	.word	0x20000714
 8002164:	200006cc 	.word	0x200006cc
 8002168:	200006c0 	.word	0x200006c0
 800216c:	200006d8 	.word	0x200006d8
 8002170:	20000700 	.word	0x20000700
 8002174:	200007c4 	.word	0x200007c4
 8002178:	0800bdc4 	.word	0x0800bdc4
 800217c:	0800bde0 	.word	0x0800bde0
 8002180:	0800bdfc 	.word	0x0800bdfc
 8002184:	0800be10 	.word	0x0800be10
 8002188:	0800be24 	.word	0x0800be24
 800218c:	0800be38 	.word	0x0800be38
 8002190:	0800be4c 	.word	0x0800be4c
 8002194:	0800be60 	.word	0x0800be60
 8002198:	0800be74 	.word	0x0800be74

0800219c <HAL_GPIO_EXTI_Callback>:

	}

}
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
	Button_onInterrupt(&buttonSw1, pin);
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4809      	ldr	r0, [pc, #36]	; (80021d0 <HAL_GPIO_EXTI_Callback+0x34>)
 80021ac:	f7fe ff0a 	bl	8000fc4 <Button_onInterrupt>
	Button_onInterrupt(&buttonSw2, pin);
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	4619      	mov	r1, r3
 80021b4:	4807      	ldr	r0, [pc, #28]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80021b6:	f7fe ff05 	bl	8000fc4 <Button_onInterrupt>
	Buzzer_reset();
 80021ba:	f7ff f80b 	bl	80011d4 <Buzzer_reset>
	Dht_onGpioInterrupt(&dht,pin);
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	4619      	mov	r1, r3
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80021c4:	f7ff faaa 	bl	800171c <Dht_onGpioInterrupt>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000688 	.word	0x20000688
 80021d4:	200006a4 	.word	0x200006a4
 80021d8:	200006d8 	.word	0x200006d8

080021dc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	LightSensor_adcInterrupt(&lts1);
 80021e4:	4803      	ldr	r0, [pc, #12]	; (80021f4 <HAL_ADC_ConvCpltCallback+0x18>)
 80021e6:	f7ff fdfb 	bl	8001de0 <LightSensor_adcInterrupt>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200006cc 	.word	0x200006cc

080021f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021fc:	f000 fd70 	bl	8002ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002200:	f000 f80f 	bl	8002222 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002204:	f000 f9aa 	bl	800255c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002208:	f000 f978 	bl	80024fc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800220c:	f000 f8be 	bl	800238c <MX_TIM3_Init>
  MX_TIM6_Init();
 8002210:	f000 f918 	bl	8002444 <MX_TIM6_Init>
  MX_ADC2_Init();
 8002214:	f000 f856 	bl	80022c4 <MX_ADC2_Init>
  MX_TIM16_Init();
 8002218:	f000 f94a 	bl	80024b0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MyMain();
 800221c:	f7ff feac 	bl	8001f78 <MyMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002220:	e7fe      	b.n	8002220 <main+0x28>

08002222 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b096      	sub	sp, #88	; 0x58
 8002226:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2244      	movs	r2, #68	; 0x44
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f006 faa3 	bl	800877c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002236:	463b      	mov	r3, r7
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002244:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002248:	f002 ff4a 	bl	80050e0 <HAL_PWREx_ControlVoltageScaling>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002252:	f000 fa3f 	bl	80026d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002256:	2302      	movs	r3, #2
 8002258:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800225a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800225e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002260:	2310      	movs	r3, #16
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002264:	2302      	movs	r3, #2
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002268:	2302      	movs	r3, #2
 800226a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800226c:	2301      	movs	r3, #1
 800226e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002270:	230a      	movs	r3, #10
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002274:	2307      	movs	r3, #7
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002278:	2302      	movs	r3, #2
 800227a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800227c:	2302      	movs	r3, #2
 800227e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4618      	mov	r0, r3
 8002286:	f002 ff81 	bl	800518c <HAL_RCC_OscConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002290:	f000 fa20 	bl	80026d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002294:	230f      	movs	r3, #15
 8002296:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002298:	2303      	movs	r3, #3
 800229a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022a8:	463b      	mov	r3, r7
 80022aa:	2104      	movs	r1, #4
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fb49 	bl	8005944 <HAL_RCC_ClockConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022b8:	f000 fa0c 	bl	80026d4 <Error_Handler>
  }
}
 80022bc:	bf00      	nop
 80022be:	3758      	adds	r7, #88	; 0x58
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ca:	463b      	mov	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <MX_ADC2_Init+0xbc>)
 80022dc:	4a29      	ldr	r2, [pc, #164]	; (8002384 <MX_ADC2_Init+0xc0>)
 80022de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <MX_ADC2_Init+0xbc>)
 80022e2:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80022e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <MX_ADC2_Init+0xbc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <MX_ADC2_Init+0xbc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <MX_ADC2_Init+0xbc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <MX_ADC2_Init+0xbc>)
 80022fc:	2204      	movs	r2, #4
 80022fe:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <MX_ADC2_Init+0xbc>)
 8002302:	2200      	movs	r2, #0
 8002304:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <MX_ADC2_Init+0xbc>)
 8002308:	2201      	movs	r2, #1
 800230a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <MX_ADC2_Init+0xbc>)
 800230e:	2201      	movs	r2, #1
 8002310:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <MX_ADC2_Init+0xbc>)
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <MX_ADC2_Init+0xbc>)
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_ADC2_Init+0xbc>)
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_ADC2_Init+0xbc>)
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_ADC2_Init+0xbc>)
 8002330:	2200      	movs	r2, #0
 8002332:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_ADC2_Init+0xbc>)
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800233c:	4810      	ldr	r0, [pc, #64]	; (8002380 <MX_ADC2_Init+0xbc>)
 800233e:	f000 ff41 	bl	80031c4 <HAL_ADC_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002348:	f000 f9c4 	bl	80026d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800234c:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <MX_ADC2_Init+0xc4>)
 800234e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002350:	2306      	movs	r3, #6
 8002352:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002358:	237f      	movs	r3, #127	; 0x7f
 800235a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800235c:	2304      	movs	r3, #4
 800235e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_ADC2_Init+0xbc>)
 800236a:	f001 fbef 	bl	8003b4c <HAL_ADC_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8002374:	f000 f9ae 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000714 	.word	0x20000714
 8002384:	50040100 	.word	0x50040100
 8002388:	19200040 	.word	0x19200040

0800238c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239e:	463b      	mov	r3, r7
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
 80023ac:	615a      	str	r2, [r3, #20]
 80023ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <MX_TIM3_Init+0xb0>)
 80023b2:	4a23      	ldr	r2, [pc, #140]	; (8002440 <MX_TIM3_Init+0xb4>)
 80023b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <MX_TIM3_Init+0xb0>)
 80023b8:	f240 321f 	movw	r2, #799	; 0x31f
 80023bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <MX_TIM3_Init+0xb0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 382;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <MX_TIM3_Init+0xb0>)
 80023c6:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80023ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <MX_TIM3_Init+0xb0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_TIM3_Init+0xb0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023d8:	4818      	ldr	r0, [pc, #96]	; (800243c <MX_TIM3_Init+0xb0>)
 80023da:	f004 faeb 	bl	80069b4 <HAL_TIM_PWM_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80023e4:	f000 f976 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4811      	ldr	r0, [pc, #68]	; (800243c <MX_TIM3_Init+0xb0>)
 80023f8:	f005 fac2 	bl	8007980 <HAL_TIMEx_MasterConfigSynchronization>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002402:	f000 f967 	bl	80026d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002406:	2360      	movs	r3, #96	; 0x60
 8002408:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 191;
 800240a:	23bf      	movs	r3, #191	; 0xbf
 800240c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002416:	463b      	mov	r3, r7
 8002418:	2200      	movs	r2, #0
 800241a:	4619      	mov	r1, r3
 800241c:	4807      	ldr	r0, [pc, #28]	; (800243c <MX_TIM3_Init+0xb0>)
 800241e:	f004 fddd 	bl	8006fdc <HAL_TIM_PWM_ConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002428:	f000 f954 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800242c:	4803      	ldr	r0, [pc, #12]	; (800243c <MX_TIM3_Init+0xb0>)
 800242e:	f000 fa51 	bl	80028d4 <HAL_TIM_MspPostInit>

}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000778 	.word	0x20000778
 8002440:	40000400 	.word	0x40000400

08002444 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_TIM6_Init+0x64>)
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <MX_TIM6_Init+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <MX_TIM6_Init+0x64>)
 800245c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002460:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_TIM6_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_TIM6_Init+0x64>)
 800246a:	220a      	movs	r2, #10
 800246c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_TIM6_Init+0x64>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <MX_TIM6_Init+0x64>)
 8002476:	f004 f945 	bl	8006704 <HAL_TIM_Base_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002480:	f000 f928 	bl	80026d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_TIM6_Init+0x64>)
 8002492:	f005 fa75 	bl	8007980 <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800249c:	f000 f91a 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200007c4 	.word	0x200007c4
 80024ac:	40001000 	.word	0x40001000

080024b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <MX_TIM16_Init+0x48>)
 80024b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024bc:	224f      	movs	r2, #79	; 0x4f
 80024be:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80024e0:	4804      	ldr	r0, [pc, #16]	; (80024f4 <MX_TIM16_Init+0x44>)
 80024e2:	f004 f90f 	bl	8006704 <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80024ec:	f000 f8f2 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000810 	.word	0x20000810
 80024f8:	40014400 	.word	0x40014400

080024fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <MX_USART2_UART_Init+0x5c>)
 8002504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800250c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_USART2_UART_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002522:	220c      	movs	r2, #12
 8002524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_USART2_UART_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_USART2_UART_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_USART2_UART_Init+0x58>)
 8002540:	f005 fac4 	bl	8007acc <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800254a:	f000 f8c3 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000085c 	.word	0x2000085c
 8002558:	40004400 	.word	0x40004400

0800255c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	4b4c      	ldr	r3, [pc, #304]	; (80026a4 <MX_GPIO_Init+0x148>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <MX_GPIO_Init+0x148>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257e:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <MX_GPIO_Init+0x148>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800258a:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <MX_GPIO_Init+0x148>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	4a45      	ldr	r2, [pc, #276]	; (80026a4 <MX_GPIO_Init+0x148>)
 8002590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <MX_GPIO_Init+0x148>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <MX_GPIO_Init+0x148>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4a3f      	ldr	r2, [pc, #252]	; (80026a4 <MX_GPIO_Init+0x148>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <MX_GPIO_Init+0x148>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <MX_GPIO_Init+0x148>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <MX_GPIO_Init+0x148>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c6:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <MX_GPIO_Init+0x148>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2160      	movs	r1, #96	; 0x60
 80025d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025da:	f002 fd29 	bl	8005030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	482c      	ldr	r0, [pc, #176]	; (80026a8 <MX_GPIO_Init+0x14c>)
 80025f6:	f002 fb59 	bl	8004cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80025fa:	2360      	movs	r3, #96	; 0x60
 80025fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002614:	f002 fb4a 	bl	8004cac <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8002618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800261e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002632:	f002 fb3b 	bl	8004cac <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8002636:	2308      	movs	r3, #8
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800263a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800263e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4818      	ldr	r0, [pc, #96]	; (80026ac <MX_GPIO_Init+0x150>)
 800264c:	f002 fb2e 	bl	8004cac <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002650:	2320      	movs	r3, #32
 8002652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002654:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4811      	ldr	r0, [pc, #68]	; (80026ac <MX_GPIO_Init+0x150>)
 8002666:	f002 fb21 	bl	8004cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2009      	movs	r0, #9
 8002670:	f001 ffef 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002674:	2009      	movs	r0, #9
 8002676:	f002 f809 	bl	800468c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2017      	movs	r0, #23
 8002680:	f001 ffe7 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002684:	2017      	movs	r0, #23
 8002686:	f002 f801 	bl	800468c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	2028      	movs	r0, #40	; 0x28
 8002690:	f001 ffdf 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002694:	2028      	movs	r0, #40	; 0x28
 8002696:	f001 fff9 	bl	800468c <HAL_NVIC_EnableIRQ>

}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	; 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	48000800 	.word	0x48000800
 80026ac:	48000400 	.word	0x48000400

080026b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80026b8:	1d39      	adds	r1, r7, #4
 80026ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026be:	2201      	movs	r2, #1
 80026c0:	4803      	ldr	r0, [pc, #12]	; (80026d0 <__io_putchar+0x20>)
 80026c2:	f005 fa51 	bl	8007b68 <HAL_UART_Transmit>

  return ch;
 80026c6:	687b      	ldr	r3, [r7, #4]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000085c 	.word	0x2000085c

080026d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d8:	b672      	cpsid	i
}
 80026da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026dc:	e7fe      	b.n	80026dc <Error_Handler+0x8>
	...

080026e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_MspInit+0x50>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_MspInit+0x50>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6613      	str	r3, [r2, #96]	; 0x60
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_MspInit+0x50>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_MspInit+0x50>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_MspInit+0x50>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_MspInit+0x50>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	2004      	movs	r0, #4
 800271c:	f001 ff99 	bl	8004652 <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002720:	2004      	movs	r0, #4
 8002722:	f001 ffb3 	bl	800468c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0ac      	sub	sp, #176	; 0xb0
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2288      	movs	r2, #136	; 0x88
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f006 f811 	bl	800877c <memset>
  if(hadc->Instance==ADC2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2b      	ldr	r2, [pc, #172]	; (800280c <HAL_ADC_MspInit+0xd8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d14f      	bne.n	8002804 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002768:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800276a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800276e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800277a:	2308      	movs	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800277e:	2307      	movs	r3, #7
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002782:	2302      	movs	r3, #2
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002786:	2302      	movs	r3, #2
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800278a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4618      	mov	r0, r3
 8002796:	f003 faf9 	bl	8005d8c <HAL_RCCEx_PeriphCLKConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80027a0:	f7ff ff98 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_ADC_MspInit+0xdc>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_ADC_MspInit+0xdc>)
 80027aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_ADC_MspInit+0xdc>)
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_ADC_MspInit+0xdc>)
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	4a13      	ldr	r2, [pc, #76]	; (8002810 <HAL_ADC_MspInit+0xdc>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_ADC_MspInit+0xdc>)
 80027ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027da:	230b      	movs	r3, #11
 80027dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027ea:	4619      	mov	r1, r3
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f0:	f002 fa5c 	bl	8004cac <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2012      	movs	r0, #18
 80027fa:	f001 ff2a 	bl	8004652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80027fe:	2012      	movs	r0, #18
 8002800:	f001 ff44 	bl	800468c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002804:	bf00      	nop
 8002806:	37b0      	adds	r7, #176	; 0xb0
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	50040100 	.word	0x50040100
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_TIM_PWM_MspInit+0x44>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d113      	bne.n	800284e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <HAL_TIM_PWM_MspInit+0x48>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a0c      	ldr	r2, [pc, #48]	; (800285c <HAL_TIM_PWM_MspInit+0x48>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_TIM_PWM_MspInit+0x48>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	201d      	movs	r0, #29
 8002844:	f001 ff05 	bl	8004652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002848:	201d      	movs	r0, #29
 800284a:	f001 ff1f 	bl	800468c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40000400 	.word	0x40000400
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_TIM_Base_MspInit+0x68>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d114      	bne.n	800289c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_TIM_Base_MspInit+0x6c>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_TIM_Base_MspInit+0x6c>)
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_TIM_Base_MspInit+0x6c>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2036      	movs	r0, #54	; 0x36
 8002890:	f001 fedf 	bl	8004652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002894:	2036      	movs	r0, #54	; 0x36
 8002896:	f001 fef9 	bl	800468c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800289a:	e010      	b.n	80028be <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <HAL_TIM_Base_MspInit+0x70>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10b      	bne.n	80028be <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_TIM_Base_MspInit+0x6c>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_TIM_Base_MspInit+0x6c>)
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	6613      	str	r3, [r2, #96]	; 0x60
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_TIM_Base_MspInit+0x6c>)
 80028b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40001000 	.word	0x40001000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40014400 	.word	0x40014400

080028d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_TIM_MspPostInit+0x64>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d11b      	bne.n	800292e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_TIM_MspPostInit+0x68>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIM_MspPostInit+0x68>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_TIM_MspPostInit+0x68>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800290e:	2310      	movs	r3, #16
 8002910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800291e:	2302      	movs	r3, #2
 8002920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_TIM_MspPostInit+0x6c>)
 800292a:	f002 f9bf 	bl	8004cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800292e:	bf00      	nop
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40000400 	.word	0x40000400
 800293c:	40021000 	.word	0x40021000
 8002940:	48000400 	.word	0x48000400

08002944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0ac      	sub	sp, #176	; 0xb0
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2288      	movs	r2, #136	; 0x88
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f005 ff09 	bl	800877c <memset>
  if(huart->Instance==USART2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <HAL_UART_MspInit+0xb0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d13b      	bne.n	80029ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002974:	2302      	movs	r3, #2
 8002976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002978:	2300      	movs	r3, #0
 800297a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fa03 	bl	8005d8c <HAL_RCCEx_PeriphCLKConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800298c:	f7ff fea2 	bl	80026d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 8002996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299a:	6593      	str	r3, [r2, #88]	; 0x58
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029c0:	230c      	movs	r3, #12
 80029c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029d8:	2307      	movs	r3, #7
 80029da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e8:	f002 f960 	bl	8004cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029ec:	bf00      	nop
 80029ee:	37b0      	adds	r7, #176	; 0xb0
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40004400 	.word	0x40004400
 80029f8:	40021000 	.word	0x40021000

080029fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <NMI_Handler+0x4>

08002a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <HardFault_Handler+0x4>

08002a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <MemManage_Handler+0x4>

08002a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <BusFault_Handler+0x4>

08002a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <UsageFault_Handler+0x4>

08002a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a48:	f000 f9a6 	bl	8002d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002a54:	f001 fe96 	bl	8004784 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  	 Flash_myInterruptHandler(&flash);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <FLASH_IRQHandler+0x14>)
 8002a5a:	f7ff f807 	bl	8001a6c <Flash_myInterruptHandler>
  /* USER CODE END FLASH_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000700 	.word	0x20000700

08002a68 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8002a6c:	2008      	movs	r0, #8
 8002a6e:	f002 fb11 	bl	8005094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <ADC1_2_IRQHandler+0x10>)
 8002a7e:	f000 fe37 	bl	80036f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000714 	.word	0x20000714

08002a8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DHT11_Pin);
 8002a90:	2020      	movs	r0, #32
 8002a92:	f002 faff 	bl	8005094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <TIM3_IRQHandler+0x10>)
 8002aa2:	f004 f97b 	bl	8006d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000778 	.word	0x20000778

08002ab0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8002ab4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ab8:	f002 faec 	bl	8005094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002abc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ac0:	f002 fae8 	bl	8005094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <TIM6_DAC_IRQHandler+0x10>)
 8002ace:	f004 f965 	bl	8006d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200007c4 	.word	0x200007c4

08002adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
	return 1;
 8002ae0:	2301      	movs	r3, #1
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_kill>:

int _kill(int pid, int sig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002af6:	f005 fe09 	bl	800870c <__errno>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2216      	movs	r2, #22
 8002afe:	601a      	str	r2, [r3, #0]
	return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_exit>:

void _exit (int status)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffe7 	bl	8002aec <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b1e:	e7fe      	b.n	8002b1e <_exit+0x12>

08002b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e00a      	b.n	8002b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b32:	f3af 8000 	nop.w
 8002b36:	4601      	mov	r1, r0
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	60ba      	str	r2, [r7, #8]
 8002b3e:	b2ca      	uxtb	r2, r1
 8002b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3301      	adds	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	dbf0      	blt.n	8002b32 <_read+0x12>
	}

return len;
 8002b50:	687b      	ldr	r3, [r7, #4]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e009      	b.n	8002b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	60ba      	str	r2, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fd9b 	bl	80026b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dbf1      	blt.n	8002b6c <_write+0x12>
	}
	return len;
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_close>:

int _close(int file)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bba:	605a      	str	r2, [r3, #4]
	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_isatty>:

int _isatty(int file)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	return 0;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f005 fd6e 	bl	800870c <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20018000 	.word	0x20018000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	200008e0 	.word	0x200008e0
 8002c64:	200008f8 	.word	0x200008f8

08002c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <SystemInit+0x20>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <SystemInit+0x20>)
 8002c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif


}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c90:	f7ff ffea 	bl	8002c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c96:	490d      	ldr	r1, [pc, #52]	; (8002ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <LoopForever+0xe>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca6:	428c      	cmp	r4, r1

  bcc CopyDataInit
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cac:	4c0a      	ldr	r4, [pc, #40]	; (8002cd8 <LoopForever+0x16>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cba:	f005 fd2d 	bl	8008718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cbe:	f7ff fa9b 	bl	80021f8 <main>

08002cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cc2:	e7fe      	b.n	8002cc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ccc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002cd0:	0800c350 	.word	0x0800c350
  ldr r2, =_sbss
 8002cd4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002cd8:	200008f8 	.word	0x200008f8

08002cdc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC3_IRQHandler>
	...

08002ce0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_Init+0x3c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <HAL_Init+0x3c>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	f001 fca0 	bl	800463c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f000 f80f 	bl	8002d20 <HAL_InitTick>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	71fb      	strb	r3, [r7, #7]
 8002d0c:	e001      	b.n	8002d12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d0e:	f7ff fce7 	bl	80026e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d12:	79fb      	ldrb	r3, [r7, #7]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40022000 	.word	0x40022000

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_InitTick+0x6c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_InitTick+0x70>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_InitTick+0x6c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fcb6 	bl	80046bc <HAL_SYSTICK_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d809      	bhi.n	8002d70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f001 fc75 	bl	8004652 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d68:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_InitTick+0x74>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e007      	b.n	8002d80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	e004      	b.n	8002d80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e001      	b.n	8002d80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_IncTick+0x20>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x24>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <HAL_IncTick+0x24>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	200008e4 	.word	0x200008e4

08002dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_GetTick+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	200008e4 	.word	0x200008e4

08002dd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <LL_ADC_SetOffset+0x44>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	03fff000 	.word	0x03fff000

08002e88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3360      	adds	r3, #96	; 0x60
 8002e96:	461a      	mov	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3360      	adds	r3, #96	; 0x60
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3330      	adds	r3, #48	; 0x30
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	4413      	add	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]



  MODIFY_REG(*preg,
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	211f      	movs	r1, #31
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0e9b      	lsrs	r3, r3, #26
 8002f48:	f003 011f 	and.w	r1, r3, #31
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	431a      	orrs	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f5c:	bf00      	nop
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f80:	2300      	movs	r3, #0

}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	0e5b      	lsrs	r3, r3, #25
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	4413      	add	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	0d1b      	lsrs	r3, r3, #20
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2107      	movs	r1, #7
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0d1b      	lsrs	r3, r3, #20
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0318 	and.w	r3, r3, #24
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003008:	40d9      	lsrs	r1, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	400b      	ands	r3, r1
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	431a      	orrs	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	0007ffff 	.word	0x0007ffff

0800302c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 031f 	and.w	r3, r3, #31
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6093      	str	r3, [r2, #8]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309c:	d101      	bne.n	80030a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <LL_ADC_IsEnabled+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_IsEnabled+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800315e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d101      	bne.n	800318e <LL_ADC_REG_IsConversionOngoing+0x18>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d101      	bne.n	80031b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e136      	b.n	800344c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff faa1 	bl	8002734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff3f 	bl	8003088 <LL_ADC_IsDeepPowerDownEnabled>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff25 	bl	8003064 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff5a 	bl	80030d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d115      	bne.n	8003256 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff ff3e 	bl	80030b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003234:	4b87      	ldr	r3, [pc, #540]	; (8003454 <HAL_ADC_Init+0x290>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	4a87      	ldr	r2, [pc, #540]	; (8003458 <HAL_ADC_Init+0x294>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003248:	e002      	b.n	8003250 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f9      	bne.n	800324a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff3c 	bl	80030d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f043 0210 	orr.w	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff75 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 800328c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80cf 	bne.w	800343a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80cb 	bne.w	800343a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032ac:	f043 0202 	orr.w	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff35 	bl	8003128 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032c4:	4865      	ldr	r0, [pc, #404]	; (800345c <HAL_ADC_Init+0x298>)
 80032c6:	f7ff ff2f 	bl	8003128 <LL_ADC_IsEnabled>
 80032ca:	4604      	mov	r4, r0
 80032cc:	4864      	ldr	r0, [pc, #400]	; (8003460 <HAL_ADC_Init+0x29c>)
 80032ce:	f7ff ff2b 	bl	8003128 <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	431c      	orrs	r4, r3
 80032d6:	4863      	ldr	r0, [pc, #396]	; (8003464 <HAL_ADC_Init+0x2a0>)
 80032d8:	f7ff ff26 	bl	8003128 <LL_ADC_IsEnabled>
 80032dc:	4603      	mov	r3, r0
 80032de:	4323      	orrs	r3, r4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4619      	mov	r1, r3
 80032ea:	485f      	ldr	r0, [pc, #380]	; (8003468 <HAL_ADC_Init+0x2a4>)
 80032ec:	f7ff fd74 	bl	8002dd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7e5b      	ldrb	r3, [r3, #25]
 80032f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003300:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003306:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d106      	bne.n	800332c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	3b01      	subs	r3, #1
 8003324:	045b      	lsls	r3, r3, #17
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_ADC_Init+0x2a8>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	430b      	orrs	r3, r1
 800335a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff08 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 8003366:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff15 	bl	800319c <LL_ADC_INJ_IsConversionOngoing>
 8003372:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d13d      	bne.n	80033f6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d13a      	bne.n	80033f6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003384:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800338c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	69b9      	ldr	r1, [r7, #24]
 80033a6:	430b      	orrs	r3, r1
 80033a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d118      	bne.n	80033e6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033be:	f023 0304 	bic.w	r3, r3, #4
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033d6:	430a      	orrs	r2, r1
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	611a      	str	r2, [r3, #16]
 80033e4:	e007      	b.n	80033f6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10c      	bne.n	8003418 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f023 010f 	bic.w	r1, r3, #15
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	1e5a      	subs	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
 8003416:	e007      	b.n	8003428 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 020f 	bic.w	r2, r2, #15
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	f023 0303 	bic.w	r3, r3, #3
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
 8003438:	e007      	b.n	800344a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f043 0210 	orr.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800344a:	7ffb      	ldrb	r3, [r7, #31]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3724      	adds	r7, #36	; 0x24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	20000000 	.word	0x20000000
 8003458:	053e2d63 	.word	0x053e2d63
 800345c:	50040000 	.word	0x50040000
 8003460:	50040100 	.word	0x50040100
 8003464:	50040200 	.word	0x50040200
 8003468:	50040300 	.word	0x50040300
 800346c:	fff0c007 	.word	0xfff0c007

08003470 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003478:	4893      	ldr	r0, [pc, #588]	; (80036c8 <HAL_ADC_Start_IT+0x258>)
 800347a:	f7ff fdd7 	bl	800302c <LL_ADC_GetMultimode>
 800347e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fe76 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 8111 	bne.w	80036b4 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_Start_IT+0x30>
 800349c:	2302      	movs	r3, #2
 800349e:	e10e      	b.n	80036be <HAL_ADC_Start_IT+0x24e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 ff3f 	bl	800432c <ADC_Enable>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 80f8 	bne.w	80036aa <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7e      	ldr	r2, [pc, #504]	; (80036cc <HAL_ADC_Start_IT+0x25c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d002      	beq.n	80034de <HAL_ADC_Start_IT+0x6e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e000      	b.n	80034e0 <HAL_ADC_Start_IT+0x70>
 80034de:	4b7c      	ldr	r3, [pc, #496]	; (80036d0 <HAL_ADC_Start_IT+0x260>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d002      	beq.n	80034ee <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350a:	f023 0206 	bic.w	r2, r3, #6
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	659a      	str	r2, [r3, #88]	; 0x58
 8003512:	e002      	b.n	800351a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	221c      	movs	r2, #28
 8003520:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 021c 	bic.w	r2, r2, #28
 8003538:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b08      	cmp	r3, #8
 8003540:	d108      	bne.n	8003554 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0208 	orr.w	r2, r2, #8
 8003550:	605a      	str	r2, [r3, #4]
          break;
 8003552:	e008      	b.n	8003566 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0204 	orr.w	r2, r2, #4
 8003562:	605a      	str	r2, [r3, #4]
          break;
 8003564:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0210 	orr.w	r2, r2, #16
 800357c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_ADC_Start_IT+0x25c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d002      	beq.n	800358e <HAL_ADC_Start_IT+0x11e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	e000      	b.n	8003590 <HAL_ADC_Start_IT+0x120>
 800358e:	4b50      	ldr	r3, [pc, #320]	; (80036d0 <HAL_ADC_Start_IT+0x260>)
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4293      	cmp	r3, r2
 8003596:	d008      	beq.n	80035aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d002      	beq.n	80035aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b09      	cmp	r3, #9
 80035a8:	d13b      	bne.n	8003622 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d02d      	beq.n	8003614 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d110      	bne.n	80035f2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0220 	bic.w	r2, r2, #32
 80035de:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ee:	605a      	str	r2, [r3, #4]
              break;
 80035f0:	e011      	b.n	8003616 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003600:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0220 	orr.w	r2, r2, #32
 8003610:	605a      	str	r2, [r3, #4]
              break;
 8003612:	e000      	b.n	8003616 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8003614:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fd97 	bl	800314e <LL_ADC_REG_StartConversion>
 8003620:	e04c      	b.n	80036bc <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a26      	ldr	r2, [pc, #152]	; (80036cc <HAL_ADC_Start_IT+0x25c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d002      	beq.n	800363e <HAL_ADC_Start_IT+0x1ce>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	e000      	b.n	8003640 <HAL_ADC_Start_IT+0x1d0>
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <HAL_ADC_Start_IT+0x260>)
 8003640:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d035      	beq.n	80036ba <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003656:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b08      	cmp	r3, #8
 8003664:	d110      	bne.n	8003688 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0220 	bic.w	r2, r2, #32
 8003674:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003684:	605a      	str	r2, [r3, #4]
              break;
 8003686:	e019      	b.n	80036bc <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003696:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	605a      	str	r2, [r3, #4]
              break;
 80036a8:	e008      	b.n	80036bc <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80036b2:	e003      	b.n	80036bc <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
 80036b6:	75fb      	strb	r3, [r7, #23]
 80036b8:	e000      	b.n	80036bc <HAL_ADC_Start_IT+0x24c>
        }
 80036ba:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	50040300 	.word	0x50040300
 80036cc:	50040100 	.word	0x50040100
 80036d0:	50040000 	.word	0x50040000

080036d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800370c:	4882      	ldr	r0, [pc, #520]	; (8003918 <HAL_ADC_IRQHandler+0x228>)
 800370e:	f7ff fc8d 	bl	800302c <LL_ADC_GetMultimode>
 8003712:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d017      	beq.n	800374e <HAL_ADC_IRQHandler+0x5e>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d012      	beq.n	800374e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fea1 	bl	8004488 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2202      	movs	r2, #2
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_ADC_IRQHandler+0x72>
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8083 	beq.w	8003874 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d07d      	beq.n	8003874 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fba8 	bl	8002eea <LL_ADC_REG_IsTriggerSourceSWStart>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d062      	beq.n	8003866 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_ADC_IRQHandler+0x22c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d002      	beq.n	80037b0 <HAL_ADC_IRQHandler+0xc0>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	e000      	b.n	80037b2 <HAL_ADC_IRQHandler+0xc2>
 80037b0:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <HAL_ADC_IRQHandler+0x230>)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d008      	beq.n	80037cc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d002      	beq.n	80037cc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d104      	bne.n	80037d6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	e00c      	b.n	80037f0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a50      	ldr	r2, [pc, #320]	; (800391c <HAL_ADC_IRQHandler+0x22c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d002      	beq.n	80037e6 <HAL_ADC_IRQHandler+0xf6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	e000      	b.n	80037e8 <HAL_ADC_IRQHandler+0xf8>
 80037e6:	4b4e      	ldr	r3, [pc, #312]	; (8003920 <HAL_ADC_IRQHandler+0x230>)
 80037e8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d135      	bne.n	8003866 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d12e      	bne.n	8003866 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fcb2 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11a      	bne.n	800384e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 020c 	bic.w	r2, r2, #12
 8003826:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d112      	bne.n	8003866 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
 800384c:	e00b      	b.n	8003866 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe fcb8 	bl	80021dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	220c      	movs	r2, #12
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_ADC_IRQHandler+0x198>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 809f 	beq.w	80039d2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8099 	beq.w	80039d2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fb53 	bl	8002f68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80038c2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fb0e 	bl	8002eea <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ce:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_ADC_IRQHandler+0x22c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d002      	beq.n	80038e0 <HAL_ADC_IRQHandler+0x1f0>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	e000      	b.n	80038e2 <HAL_ADC_IRQHandler+0x1f2>
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_ADC_IRQHandler+0x230>)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d008      	beq.n	80038fc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d002      	beq.n	80038fc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b07      	cmp	r3, #7
 80038fa:	d104      	bne.n	8003906 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	e013      	b.n	800392e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_ADC_IRQHandler+0x22c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_ADC_IRQHandler+0x234>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	e007      	b.n	8003926 <HAL_ADC_IRQHandler+0x236>
 8003916:	bf00      	nop
 8003918:	50040300 	.word	0x50040300
 800391c:	50040100 	.word	0x50040100
 8003920:	50040000 	.word	0x50040000
 8003924:	4b7d      	ldr	r3, [pc, #500]	; (8003b1c <HAL_ADC_IRQHandler+0x42c>)
 8003926:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d047      	beq.n	80039c4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_ADC_IRQHandler+0x25e>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d03f      	beq.n	80039c4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	d13a      	bne.n	80039c4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d133      	bne.n	80039c4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d12e      	bne.n	80039c4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fc16 	bl	800319c <LL_ADC_INJ_IsConversionOngoing>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11a      	bne.n	80039ac <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003984:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d112      	bne.n	80039c4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
 80039aa:	e00b      	b.n	80039c4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f043 0210 	orr.w	r2, r3, #16
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fd37 	bl	8004438 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2260      	movs	r2, #96	; 0x60
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d011      	beq.n	8003a00 <HAL_ADC_IRQHandler+0x310>
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f896 	bl	8003b24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2280      	movs	r2, #128	; 0x80
 80039fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <HAL_ADC_IRQHandler+0x340>
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fd1d 	bl	8004460 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x370>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fd0f 	bl	8004474 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d036      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x3e8>
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d031      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a80:	e014      	b.n	8003aac <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a88:	4825      	ldr	r0, [pc, #148]	; (8003b20 <HAL_ADC_IRQHandler+0x430>)
 8003a8a:	f7ff fadd 	bl	8003048 <LL_ADC_GetMultiDMATransfer>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00b      	beq.n	8003aac <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003a94:	2301      	movs	r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
 8003a98:	e008      	b.n	8003aac <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	f043 0202 	orr.w	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f834 	bl	8003b38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x424>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f043 0208 	orr.w	r2, r3, #8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fc9c 	bl	800444c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	50040000 	.word	0x50040000
 8003b20:	50040300 	.word	0x50040300

08003b24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0b6      	sub	sp, #216	; 0xd8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x22>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e3c7      	b.n	80042fe <HAL_ADC_ConfigChannel+0x7b2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fafb 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 83a8 	bne.w	80042d8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d824      	bhi.n	8003bda <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	3b02      	subs	r3, #2
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d81b      	bhi.n	8003bd2 <HAL_ADC_ConfigChannel+0x86>
 8003b9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_ADC_ConfigChannel+0x54>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc9 	.word	0x08003bc9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	605a      	str	r2, [r3, #4]
          break;
 8003bb6:	e011      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2212      	movs	r2, #18
 8003bbc:	605a      	str	r2, [r3, #4]
          break;
 8003bbe:	e00d      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2218      	movs	r2, #24
 8003bc4:	605a      	str	r2, [r3, #4]
          break;
 8003bc6:	e009      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bce:	605a      	str	r2, [r3, #4]
          break;
 8003bd0:	e004      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2206      	movs	r2, #6
 8003bd6:	605a      	str	r2, [r3, #4]
          break;
 8003bd8:	e000      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003bda:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	f7ff f991 	bl	8002f10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fabf 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 8003bf8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff facb 	bl	800319c <LL_ADC_INJ_IsConversionOngoing>
 8003c06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 81a6 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f040 81a1 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7ff f9af 	bl	8002f8e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00a      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6919      	ldr	r1, [r3, #16]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c62:	f7ff f8ed 	bl	8002e40 <LL_ADC_SetOffset>
 8003c66:	e17b      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff f90a 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x148>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff f8ff 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	0e9b      	lsrs	r3, r3, #26
 8003c8e:	f003 021f 	and.w	r2, r3, #31
 8003c92:	e01e      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x186>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f8f4 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	e004      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003cc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x19e>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	0e9b      	lsrs	r3, r3, #26
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	e018      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x1d0>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003d06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003d0e:	2320      	movs	r3, #32
 8003d10:	e004      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d106      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff f8c3 	bl	8002eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2101      	movs	r1, #1
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff f8a7 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x20e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff f89c 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003d50:	4603      	mov	r3, r0
 8003d52:	0e9b      	lsrs	r3, r3, #26
 8003d54:	f003 021f 	and.w	r2, r3, #31
 8003d58:	e01e      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x24c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff f891 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e004      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x264>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e9b      	lsrs	r3, r3, #26
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	e018      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x296>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e004      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d106      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f860 	bl	8002eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f844 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x2d4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff f839 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	f003 021f 	and.w	r2, r3, #31
 8003e1e:	e01e      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x312>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff f82e 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003e4e:	2320      	movs	r3, #32
 8003e50:	e004      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x32a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0e9b      	lsrs	r3, r3, #26
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	e016      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x358>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003e96:	2320      	movs	r3, #32
 8003e98:	e004      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d106      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe ffff 	bl	8002eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2103      	movs	r1, #3
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe ffe3 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x396>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2103      	movs	r1, #3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe ffd8 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	0e9b      	lsrs	r3, r3, #26
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	e017      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x3c6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe ffcd 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003efc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x3de>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	0e9b      	lsrs	r3, r3, #26
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	e011      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x402>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e003      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d106      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	2103      	movs	r1, #3
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe ffaa 	bl	8002eb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff f8df 	bl	8003128 <LL_ADC_IsEnabled>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f040 813f 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f7ff f830 	bl	8002fe4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a8e      	ldr	r2, [pc, #568]	; (80041c4 <HAL_ADC_ConfigChannel+0x678>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f040 8130 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x46c>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	0e9b      	lsrs	r3, r3, #26
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	bf94      	ite	ls
 8003fb0:	2301      	movls	r3, #1
 8003fb2:	2300      	movhi	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e019      	b.n	8003fec <HAL_ADC_ConfigChannel+0x4a0>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fc8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	e003      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2b09      	cmp	r3, #9
 8003fe4:	bf94      	ite	ls
 8003fe6:	2301      	movls	r3, #1
 8003fe8:	2300      	movhi	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d079      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <HAL_ADC_ConfigChannel+0x4c0>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	069b      	lsls	r3, r3, #26
 8004006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800400a:	e015      	b.n	8004038 <HAL_ADC_ConfigChannel+0x4ec>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800401a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800401e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e003      	b.n	8004030 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	3301      	adds	r3, #1
 8004032:	069b      	lsls	r3, r3, #26
 8004034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x50c>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0e9b      	lsrs	r3, r3, #26
 800404a:	3301      	adds	r3, #1
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	e017      	b.n	8004088 <HAL_ADC_ConfigChannel+0x53c>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004068:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e003      	b.n	800407c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	ea42 0103 	orr.w	r1, r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x562>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	0e9b      	lsrs	r3, r3, #26
 800409e:	3301      	adds	r3, #1
 80040a0:	f003 021f 	and.w	r2, r3, #31
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	051b      	lsls	r3, r3, #20
 80040ac:	e018      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x594>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80040c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e003      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040e0:	430b      	orrs	r3, r1
 80040e2:	e080      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x5b4>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	069b      	lsls	r3, r3, #26
 80040fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fe:	e015      	b.n	800412c <HAL_ADC_ConfigChannel+0x5e0>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004118:	2320      	movs	r3, #32
 800411a:	e003      	b.n	8004124 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	3301      	adds	r3, #1
 8004126:	069b      	lsls	r3, r3, #26
 8004128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_ADC_ConfigChannel+0x600>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	3301      	adds	r3, #1
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	e017      	b.n	800417c <HAL_ADC_ConfigChannel+0x630>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	61fb      	str	r3, [r7, #28]
  return result;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004164:	2320      	movs	r3, #32
 8004166:	e003      	b.n	8004170 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	3301      	adds	r3, #1
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2101      	movs	r1, #1
 8004178:	fa01 f303 	lsl.w	r3, r1, r3
 800417c:	ea42 0103 	orr.w	r1, r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x65c>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0e9b      	lsrs	r3, r3, #26
 8004192:	3301      	adds	r3, #1
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	3b1e      	subs	r3, #30
 80041a0:	051b      	lsls	r3, r3, #20
 80041a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041a6:	e01d      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x698>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	613b      	str	r3, [r7, #16]
  return result;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d103      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e005      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x684>
 80041c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 021f 	and.w	r2, r3, #31
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	3b1e      	subs	r3, #30
 80041de:	051b      	lsls	r3, r3, #20
 80041e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e4:	430b      	orrs	r3, r1
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	6892      	ldr	r2, [r2, #8]
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fe fecf 	bl	8002f8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b44      	ldr	r3, [pc, #272]	; (8004308 <HAL_ADC_ConfigChannel+0x7bc>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d07a      	beq.n	80042f2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041fc:	4843      	ldr	r0, [pc, #268]	; (800430c <HAL_ADC_ConfigChannel+0x7c0>)
 80041fe:	f7fe fe11 	bl	8002e24 <LL_ADC_GetCommonPathInternalCh>
 8004202:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a41      	ldr	r2, [pc, #260]	; (8004310 <HAL_ADC_ConfigChannel+0x7c4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d12c      	bne.n	800426a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d126      	bne.n	800426a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <HAL_ADC_ConfigChannel+0x7c8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_ADC_ConfigChannel+0x6e4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3b      	ldr	r2, [pc, #236]	; (8004318 <HAL_ADC_ConfigChannel+0x7cc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d15d      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004238:	4619      	mov	r1, r3
 800423a:	4834      	ldr	r0, [pc, #208]	; (800430c <HAL_ADC_ConfigChannel+0x7c0>)
 800423c:	f7fe fddf 	bl	8002dfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_ADC_ConfigChannel+0x7d0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	4a36      	ldr	r2, [pc, #216]	; (8004320 <HAL_ADC_ConfigChannel+0x7d4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800425a:	e002      	b.n	8004262 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b01      	subs	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f9      	bne.n	800425c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004268:	e040      	b.n	80042ec <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <HAL_ADC_ConfigChannel+0x7d8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d118      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x75a>
 8004274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d112      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <HAL_ADC_ConfigChannel+0x7c8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_ADC_ConfigChannel+0x748>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a22      	ldr	r2, [pc, #136]	; (8004318 <HAL_ADC_ConfigChannel+0x7cc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d12d      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429c:	4619      	mov	r1, r3
 800429e:	481b      	ldr	r0, [pc, #108]	; (800430c <HAL_ADC_ConfigChannel+0x7c0>)
 80042a0:	f7fe fdad 	bl	8002dfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042a4:	e024      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <HAL_ADC_ConfigChannel+0x7dc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d120      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d11a      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a14      	ldr	r2, [pc, #80]	; (8004314 <HAL_ADC_ConfigChannel+0x7c8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d115      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042ce:	4619      	mov	r1, r3
 80042d0:	480e      	ldr	r0, [pc, #56]	; (800430c <HAL_ADC_ConfigChannel+0x7c0>)
 80042d2:	f7fe fd94 	bl	8002dfe <LL_ADC_SetCommonPathInternalCh>
 80042d6:	e00c      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80042ea:	e002      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80042fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80042fe:	4618      	mov	r0, r3
 8004300:	37d8      	adds	r7, #216	; 0xd8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	80080000 	.word	0x80080000
 800430c:	50040300 	.word	0x50040300
 8004310:	c7520000 	.word	0xc7520000
 8004314:	50040000 	.word	0x50040000
 8004318:	50040200 	.word	0x50040200
 800431c:	20000000 	.word	0x20000000
 8004320:	053e2d63 	.word	0x053e2d63
 8004324:	cb840000 	.word	0xcb840000
 8004328:	80000001 	.word	0x80000001

0800432c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fef3 	bl	8003128 <LL_ADC_IsEnabled>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d169      	bne.n	800441c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <ADC_Enable+0xfc>)
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f043 0210 	orr.w	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e055      	b.n	800441e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fec2 	bl	8003100 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800437c:	482b      	ldr	r0, [pc, #172]	; (800442c <ADC_Enable+0x100>)
 800437e:	f7fe fd51 	bl	8002e24 <LL_ADC_GetCommonPathInternalCh>
 8004382:	4603      	mov	r3, r0
 8004384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d013      	beq.n	80043b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <ADC_Enable+0x104>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	4a28      	ldr	r2, [pc, #160]	; (8004434 <ADC_Enable+0x108>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80043a6:	e002      	b.n	80043ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f9      	bne.n	80043a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043b4:	f7fe fd04 	bl	8002dc0 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043ba:	e028      	b.n	800440e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe feb1 	bl	8003128 <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fe95 	bl	8003100 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043d6:	f7fe fcf3 	bl	8002dc0 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d914      	bls.n	800440e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d00d      	beq.n	800440e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f043 0210 	orr.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f043 0201 	orr.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e007      	b.n	800441e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d1cf      	bne.n	80043bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	8000003f 	.word	0x8000003f
 800442c:	50040300 	.word	0x50040300
 8004430:	20000000 	.word	0x20000000
 8004434:	053e2d63 	.word	0x053e2d63

08004438 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <__NVIC_SetPriorityGrouping+0x44>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b8:	4013      	ands	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ce:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <__NVIC_SetPriorityGrouping+0x44>)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	60d3      	str	r3, [r2, #12]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <__NVIC_GetPriorityGrouping+0x18>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	f003 0307 	and.w	r3, r3, #7
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	2b00      	cmp	r3, #0
 8004510:	db0b      	blt.n	800452a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	f003 021f 	and.w	r2, r3, #31
 8004518:	4907      	ldr	r1, [pc, #28]	; (8004538 <__NVIC_EnableIRQ+0x38>)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2001      	movs	r0, #1
 8004522:	fa00 f202 	lsl.w	r2, r0, r2
 8004526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000e100 	.word	0xe000e100

0800453c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	6039      	str	r1, [r7, #0]
 8004546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454c:	2b00      	cmp	r3, #0
 800454e:	db0a      	blt.n	8004566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	490c      	ldr	r1, [pc, #48]	; (8004588 <__NVIC_SetPriority+0x4c>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	0112      	lsls	r2, r2, #4
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	440b      	add	r3, r1
 8004560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004564:	e00a      	b.n	800457c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4908      	ldr	r1, [pc, #32]	; (800458c <__NVIC_SetPriority+0x50>)
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	3b04      	subs	r3, #4
 8004574:	0112      	lsls	r2, r2, #4
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	440b      	add	r3, r1
 800457a:	761a      	strb	r2, [r3, #24]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000e100 	.word	0xe000e100
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	; 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f1c3 0307 	rsb	r3, r3, #7
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	bf28      	it	cs
 80045ae:	2304      	movcs	r3, #4
 80045b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3304      	adds	r3, #4
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d902      	bls.n	80045c0 <NVIC_EncodePriority+0x30>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3b03      	subs	r3, #3
 80045be:	e000      	b.n	80045c2 <NVIC_EncodePriority+0x32>
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c4:	f04f 32ff 	mov.w	r2, #4294967295
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43da      	mvns	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	401a      	ands	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d8:	f04f 31ff 	mov.w	r1, #4294967295
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	43d9      	mvns	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e8:	4313      	orrs	r3, r2
         );
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004608:	d301      	bcc.n	800460e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800460a:	2301      	movs	r3, #1
 800460c:	e00f      	b.n	800462e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <SysTick_Config+0x40>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004616:	210f      	movs	r1, #15
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	f7ff ff8e 	bl	800453c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <SysTick_Config+0x40>)
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <SysTick_Config+0x40>)
 8004628:	2207      	movs	r2, #7
 800462a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	e000e010 	.word	0xe000e010

0800463c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff29 	bl	800449c <__NVIC_SetPriorityGrouping>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	4603      	mov	r3, r0
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004664:	f7ff ff3e 	bl	80044e4 <__NVIC_GetPriorityGrouping>
 8004668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7ff ff8e 	bl	8004590 <NVIC_EncodePriority>
 8004674:	4602      	mov	r2, r0
 8004676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff5d 	bl	800453c <__NVIC_SetPriority>
}
 8004682:	bf00      	nop
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
	printf("d\r\n");
 8004696:	4807      	ldr	r0, [pc, #28]	; (80046b4 <HAL_NVIC_EnableIRQ+0x28>)
 8004698:	f004 fd68 	bl	800916c <puts>
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  printf("n\r\n");
 800469c:	4806      	ldr	r0, [pc, #24]	; (80046b8 <HAL_NVIC_EnableIRQ+0x2c>)
 800469e:	f004 fd65 	bl	800916c <puts>
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff2a 	bl	8004500 <__NVIC_EnableIRQ>
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	0800be88 	.word	0x0800be88
 80046b8:	0800be8c 	.word	0x0800be8c

080046bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff97 	bl	80045f8 <SysTick_Config>
 80046ca:	4603      	mov	r3, r0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_FLASH_Program_IT>:
  *                are stored the data for the row fast program
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046e6:	4b25      	ldr	r3, [pc, #148]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_FLASH_Program_IT+0x1e>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e040      	b.n	8004774 <HAL_FLASH_Program_IT+0xa0>
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]

  /* Deactivate the data cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_FLASH_Program_IT+0xac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_FLASH_Program_IT+0x4a>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_FLASH_Program_IT+0xac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_FLASH_Program_IT+0xac>)
 8004710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004714:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004716:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 8004718:	2202      	movs	r2, #2
 800471a:	771a      	strb	r2, [r3, #28]
 800471c:	e002      	b.n	8004724 <HAL_FLASH_Program_IT+0x50>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
  }

  /* Set internal variables used by the IRQ handler */
  if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d103      	bne.n	8004732 <HAL_FLASH_Program_IT+0x5e>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
 800472a:	4b14      	ldr	r3, [pc, #80]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 800472c:	2204      	movs	r2, #4
 800472e:	721a      	strb	r2, [r3, #8]
 8004730:	e002      	b.n	8004738 <HAL_FLASH_Program_IT+0x64>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 8004734:	2203      	movs	r2, #3
 8004736:	721a      	strb	r2, [r3, #8]
  }
  pFlash.Address = Address;
 8004738:	4a10      	ldr	r2, [pc, #64]	; (800477c <HAL_FLASH_Program_IT+0xa8>)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	60d3      	str	r3, [r2, #12]

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_FLASH_Program_IT+0xac>)
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <HAL_FLASH_Program_IT+0xac>)
 8004744:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004748:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_FLASH_Program_IT+0x88>
  {
    /* Program double-word (64-bit) at a specified address */
    FLASH_Program_DoubleWord(Address, Data);
 8004750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004754:	68b8      	ldr	r0, [r7, #8]
 8004756:	f000 f933 	bl	80049c0 <FLASH_Program_DoubleWord>
 800475a:	e00a      	b.n	8004772 <HAL_FLASH_Program_IT+0x9e>
  }
  else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d002      	beq.n	8004768 <HAL_FLASH_Program_IT+0x94>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d104      	bne.n	8004772 <HAL_FLASH_Program_IT+0x9e>
  {
    /* Fast program a 32 row double-word (64-bit) at a specified address */
    FLASH_Program_Fast(Address, (uint32_t)Data);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	f000 f94d 	bl	8004a0c <FLASH_Program_Fast>
  else
  {
    /* Nothing to do */
  }

  return status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	2000000c 	.word	0x2000000c
 8004780:	40022000 	.word	0x40022000

08004784 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 800478a:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4a67      	ldr	r2, [pc, #412]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 8004790:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004794:	f023 0307 	bic.w	r3, r3, #7
 8004798:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 800479a:	4b64      	ldr	r3, [pc, #400]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4a63      	ldr	r2, [pc, #396]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 80047a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047a4:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 80047a6:	4b62      	ldr	r3, [pc, #392]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80047a8:	7a1b      	ldrb	r3, [r3, #8]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d105      	bne.n	80047bc <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 80047b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ba:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80047bc:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d045      	beq.n	800485a <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80047ce:	4b58      	ldr	r3, [pc, #352]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	4a56      	ldr	r2, [pc, #344]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80047d8:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_FLASH_IRQHandler+0x70>
 80047e4:	4b51      	ldr	r3, [pc, #324]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80047ee:	494f      	ldr	r1, [pc, #316]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	618b      	str	r3, [r1, #24]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_FLASH_IRQHandler+0x84>
 80047fe:	4a4b      	ldr	r2, [pc, #300]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004806:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8004808:	f000 fa06 	bl	8004c18 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 800480c:	4b48      	ldr	r3, [pc, #288]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800480e:	7a1b      	ldrb	r3, [r3, #8]
 8004810:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8004818:	4b45      	ldr	r3, [pc, #276]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f893 	bl	8004948 <HAL_FLASH_OperationErrorCallback>
 8004822:	e017      	b.n	8004854 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d105      	bne.n	8004836 <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f88a 	bl	8004948 <HAL_FLASH_OperationErrorCallback>
 8004834:	e00e      	b.n	8004854 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8004836:	7afb      	ldrb	r3, [r7, #11]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d002      	beq.n	8004842 <HAL_FLASH_IRQHandler+0xbe>
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	2b04      	cmp	r3, #4
 8004840:	d105      	bne.n	800484e <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8004842:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f87e 	bl	8004948 <HAL_FLASH_OperationErrorCallback>
 800484c:	e002      	b.n	8004854 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 800484e:	2000      	movs	r0, #0
 8004850:	f000 f87a 	bl	8004948 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004854:	4b36      	ldr	r3, [pc, #216]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 8004856:	2200      	movs	r2, #0
 8004858:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 800485a:	4b34      	ldr	r3, [pc, #208]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d04f      	beq.n	8004906 <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004866:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 8004868:	2201      	movs	r2, #1
 800486a:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 800486c:	4b30      	ldr	r3, [pc, #192]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800486e:	7a1b      	ldrb	r3, [r3, #8]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d12b      	bne.n	80048ce <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004876:	4b2e      	ldr	r3, [pc, #184]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	3b01      	subs	r3, #1
 800487c:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800487e:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f851 	bl	8004934 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8004892:	4b27      	ldr	r3, [pc, #156]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	3301      	adds	r3, #1
 8004898:	4a25      	ldr	r2, [pc, #148]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800489a:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f97f 	bl	8004bac <FLASH_PageErase>
 80048ae:	e02a      	b.n	8004906 <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295
 80048b6:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80048be:	f000 f9ab 	bl	8004c18 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 80048c2:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f834 	bl	8004934 <HAL_FLASH_EndOfOperationCallback>
 80048cc:	e01b      	b.n	8004906 <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 80048ce:	f000 f9a3 	bl	8004c18 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 80048d2:	4b17      	ldr	r3, [pc, #92]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80048d4:	7a1b      	ldrb	r3, [r3, #8]
 80048d6:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 80048d8:	7afb      	ldrb	r3, [r7, #11]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d105      	bne.n	80048ea <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f826 	bl	8004934 <HAL_FLASH_EndOfOperationCallback>
 80048e8:	e00a      	b.n	8004900 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 80048ea:	7afb      	ldrb	r3, [r7, #11]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d002      	beq.n	80048f6 <HAL_FLASH_IRQHandler+0x172>
 80048f0:	7afb      	ldrb	r3, [r7, #11]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d104      	bne.n	8004900 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f81a 	bl	8004934 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 8004902:	2200      	movs	r2, #0
 8004904:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 8004908:	7a1b      	ldrb	r3, [r3, #8]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d108      	bne.n	8004922 <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	4a05      	ldr	r2, [pc, #20]	; (800492c <HAL_FLASH_IRQHandler+0x1a8>)
 8004916:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800491a:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <HAL_FLASH_IRQHandler+0x1ac>)
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
  }
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40022000 	.word	0x40022000
 8004930:	2000000c 	.word	0x2000000c

08004934 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_FLASH_Unlock+0x38>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	da0b      	bge.n	8004986 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800496e:	4b09      	ldr	r3, [pc, #36]	; (8004994 <HAL_FLASH_Unlock+0x38>)
 8004970:	4a09      	ldr	r2, [pc, #36]	; (8004998 <HAL_FLASH_Unlock+0x3c>)
 8004972:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_FLASH_Unlock+0x38>)
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <HAL_FLASH_Unlock+0x40>)
 8004978:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_FLASH_Unlock+0x38>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	da01      	bge.n	8004986 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004986:	79fb      	ldrb	r3, [r7, #7]
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40022000 	.word	0x40022000
 8004998:	45670123 	.word	0x45670123
 800499c:	cdef89ab 	.word	0xcdef89ab

080049a0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_FLASH_Lock+0x1c>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	4a04      	ldr	r2, [pc, #16]	; (80049bc <HAL_FLASH_Lock+0x1c>)
 80049aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ae:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40022000 	.word	0x40022000

080049c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <FLASH_Program_DoubleWord+0x48>)
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <FLASH_Program_DoubleWord+0x48>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80049de:	f3bf 8f6f 	isb	sy
}
 80049e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80049e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	000a      	movs	r2, r1
 80049f2:	2300      	movs	r3, #0
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	3104      	adds	r1, #4
 80049f8:	4613      	mov	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40022000 	.word	0x40022000

08004a0c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004a22:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <FLASH_Program_Fast+0x68>)
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <FLASH_Program_Fast+0x68>)
 8004a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a34:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a38:	b672      	cpsid	i
}
 8004a3a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	3304      	adds	r3, #4
 8004a48:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004a50:	7ffb      	ldrb	r3, [r7, #31]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ef      	bne.n	8004a3c <FLASH_Program_Fast+0x30>
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004a68:	bf00      	nop
 8004a6a:	3724      	adds	r7, #36	; 0x24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	40022000 	.word	0x40022000

08004a78 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a84:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_FLASHEx_Erase_IT+0x18>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e05d      	b.n	8004b4c <HAL_FLASHEx_Erase_IT+0xd4>
 8004a90:	4b30      	ldr	r3, [pc, #192]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a96:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Deactivate the cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <HAL_FLASHEx_Erase_IT+0x58>
  {
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_FLASHEx_Erase_IT+0x50>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ab4:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004abe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	771a      	strb	r2, [r3, #28]
 8004ac6:	e016      	b.n	8004af6 <HAL_FLASHEx_Erase_IT+0x7e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	771a      	strb	r2, [r3, #28]
 8004ace:	e012      	b.n	8004af6 <HAL_FLASHEx_Erase_IT+0x7e>
    }
  }
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_FLASHEx_Erase_IT+0x78>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004adc:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae6:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004aea:	2202      	movs	r2, #2
 8004aec:	771a      	strb	r2, [r3, #28]
 8004aee:	e002      	b.n	8004af6 <HAL_FLASHEx_Erase_IT+0x7e>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004af0:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	771a      	strb	r2, [r3, #28]
  }

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004afc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004b00:	6153      	str	r3, [r2, #20]

  pFlash.Bank = pEraseInit->Banks;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004b08:	6113      	str	r3, [r2, #16]

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d108      	bne.n	8004b24 <HAL_FLASHEx_Erase_IT+0xac>
  {
    /* Mass erase to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004b14:	2202      	movs	r2, #2
 8004b16:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f81d 	bl	8004b5c <FLASH_MassErase>
 8004b22:	e012      	b.n	8004b4a <HAL_FLASHEx_Erase_IT+0xd2>
  }
  else
  {
    /* Erase by page to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004b30:	6193      	str	r3, [r2, #24]
    pFlash.Page = pEraseInit->Page;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004b38:	6153      	str	r3, [r2, #20]

    /*Erase 1st page and wait for IT */
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 f831 	bl	8004bac <FLASH_PageErase>
  }

  return status;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	40022000 	.word	0x40022000

08004b5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <FLASH_MassErase+0x4c>)
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <FLASH_MassErase+0x4c>)
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8004b84:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <FLASH_MassErase+0x4c>)
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <FLASH_MassErase+0x4c>)
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <FLASH_MassErase+0x4c>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <FLASH_MassErase+0x4c>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	6153      	str	r3, [r2, #20]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40022000 	.word	0x40022000

08004bac <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004bc0:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bca:	6153      	str	r3, [r2, #20]
 8004bcc:	e005      	b.n	8004bda <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bd8:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004bea:	490a      	ldr	r1, [pc, #40]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <FLASH_PageErase+0x68>)
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <FLASH_PageErase+0x68>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c06:	6153      	str	r3, [r2, #20]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40022000 	.word	0x40022000

08004c18 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <FLASH_FlushCaches+0x8c>)
 8004c20:	7f1b      	ldrb	r3, [r3, #28]
 8004c22:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d002      	beq.n	8004c30 <FLASH_FlushCaches+0x18>
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d117      	bne.n	8004c60 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1c      	ldr	r2, [pc, #112]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c3a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c52:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c54:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c5e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d002      	beq.n	8004c6c <FLASH_FlushCaches+0x54>
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d111      	bne.n	8004c90 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a07      	ldr	r2, [pc, #28]	; (8004ca8 <FLASH_FlushCaches+0x90>)
 8004c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c8e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004c90:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <FLASH_FlushCaches+0x8c>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	771a      	strb	r2, [r3, #28]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	2000000c 	.word	0x2000000c
 8004ca8:	40022000 	.word	0x40022000

08004cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cba:	e17f      	b.n	8004fbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8171 	beq.w	8004fb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d005      	beq.n	8004cec <HAL_GPIO_Init+0x40>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d130      	bne.n	8004d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d22:	2201      	movs	r2, #1
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	f003 0201 	and.w	r2, r3, #1
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d118      	bne.n	8004d8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004d60:	2201      	movs	r2, #1
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f003 0201 	and.w	r2, r3, #1
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d017      	beq.n	8004dc8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	2203      	movs	r2, #3
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d123      	bne.n	8004e1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	08da      	lsrs	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3208      	adds	r2, #8
 8004ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	220f      	movs	r2, #15
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	08da      	lsrs	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3208      	adds	r2, #8
 8004e16:	6939      	ldr	r1, [r7, #16]
 8004e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	2203      	movs	r2, #3
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0203 	and.w	r2, r3, #3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80ac 	beq.w	8004fb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	; (8004fdc <HAL_GPIO_Init+0x330>)
 8004e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e62:	4a5e      	ldr	r2, [pc, #376]	; (8004fdc <HAL_GPIO_Init+0x330>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6613      	str	r3, [r2, #96]	; 0x60
 8004e6a:	4b5c      	ldr	r3, [pc, #368]	; (8004fdc <HAL_GPIO_Init+0x330>)
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e76:	4a5a      	ldr	r2, [pc, #360]	; (8004fe0 <HAL_GPIO_Init+0x334>)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4013      	ands	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ea0:	d025      	beq.n	8004eee <HAL_GPIO_Init+0x242>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a4f      	ldr	r2, [pc, #316]	; (8004fe4 <HAL_GPIO_Init+0x338>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <HAL_GPIO_Init+0x23e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a4e      	ldr	r2, [pc, #312]	; (8004fe8 <HAL_GPIO_Init+0x33c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d019      	beq.n	8004ee6 <HAL_GPIO_Init+0x23a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4d      	ldr	r2, [pc, #308]	; (8004fec <HAL_GPIO_Init+0x340>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0x236>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4c      	ldr	r2, [pc, #304]	; (8004ff0 <HAL_GPIO_Init+0x344>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_GPIO_Init+0x232>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4b      	ldr	r2, [pc, #300]	; (8004ff4 <HAL_GPIO_Init+0x348>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <HAL_GPIO_Init+0x22e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4a      	ldr	r2, [pc, #296]	; (8004ff8 <HAL_GPIO_Init+0x34c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GPIO_Init+0x22a>
 8004ed2:	2306      	movs	r3, #6
 8004ed4:	e00c      	b.n	8004ef0 <HAL_GPIO_Init+0x244>
 8004ed6:	2307      	movs	r3, #7
 8004ed8:	e00a      	b.n	8004ef0 <HAL_GPIO_Init+0x244>
 8004eda:	2305      	movs	r3, #5
 8004edc:	e008      	b.n	8004ef0 <HAL_GPIO_Init+0x244>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	e006      	b.n	8004ef0 <HAL_GPIO_Init+0x244>
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e004      	b.n	8004ef0 <HAL_GPIO_Init+0x244>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e002      	b.n	8004ef0 <HAL_GPIO_Init+0x244>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_GPIO_Init+0x244>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	f002 0203 	and.w	r2, r2, #3
 8004ef6:	0092      	lsls	r2, r2, #2
 8004ef8:	4093      	lsls	r3, r2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f00:	4937      	ldr	r1, [pc, #220]	; (8004fe0 <HAL_GPIO_Init+0x334>)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	3302      	adds	r3, #2
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f32:	4a32      	ldr	r2, [pc, #200]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f38:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4013      	ands	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f5c:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f86:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fb0:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <HAL_GPIO_Init+0x350>)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f47f ae78 	bne.w	8004cbc <HAL_GPIO_Init+0x10>
  }
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	48000400 	.word	0x48000400
 8004fe8:	48000800 	.word	0x48000800
 8004fec:	48000c00 	.word	0x48000c00
 8004ff0:	48001000 	.word	0x48001000
 8004ff4:	48001400 	.word	0x48001400
 8004ff8:	48001800 	.word	0x48001800
 8004ffc:	40010400 	.word	0x40010400

08005000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	887b      	ldrh	r3, [r7, #2]
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	e001      	b.n	8005022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005022:	7bfb      	ldrb	r3, [r7, #15]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
 800503c:	4613      	mov	r3, r2
 800503e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005040:	787b      	ldrb	r3, [r7, #1]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005046:	887a      	ldrh	r2, [r7, #2]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800504c:	e002      	b.n	8005054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4013      	ands	r3, r2
 8005078:	041a      	lsls	r2, r3, #16
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	43d9      	mvns	r1, r3
 800507e:	887b      	ldrh	r3, [r7, #2]
 8005080:	400b      	ands	r3, r1
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050aa:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fd f872 	bl	800219c <HAL_GPIO_EXTI_Callback>
  }
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40010400 	.word	0x40010400

080050c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <HAL_PWREx_GetVoltageRange+0x18>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40007000 	.word	0x40007000

080050e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ee:	d130      	bne.n	8005152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80050f0:	4b23      	ldr	r3, [pc, #140]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fc:	d038      	beq.n	8005170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050fe:	4b20      	ldr	r3, [pc, #128]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800510c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2232      	movs	r2, #50	; 0x32
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0c9b      	lsrs	r3, r3, #18
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005124:	e002      	b.n	800512c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3b01      	subs	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d102      	bne.n	8005140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f2      	bne.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d110      	bne.n	8005170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e00f      	b.n	8005172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515e:	d007      	beq.n	8005170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005168:	4a05      	ldr	r2, [pc, #20]	; (8005180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800516a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800516e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40007000 	.word	0x40007000
 8005184:	20000000 	.word	0x20000000
 8005188:	431bde83 	.word	0x431bde83

0800518c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e3ca      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519e:	4b97      	ldr	r3, [pc, #604]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a8:	4b94      	ldr	r3, [pc, #592]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80e4 	beq.w	8005388 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_RCC_OscConfig+0x4a>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	f040 808b 	bne.w	80052e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f040 8087 	bne.w	80052e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051d6:	4b89      	ldr	r3, [pc, #548]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RCC_OscConfig+0x62>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e3a2      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	4b82      	ldr	r3, [pc, #520]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_RCC_OscConfig+0x7c>
 80051fe:	4b7f      	ldr	r3, [pc, #508]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005206:	e005      	b.n	8005214 <HAL_RCC_OscConfig+0x88>
 8005208:	4b7c      	ldr	r3, [pc, #496]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520e:	091b      	lsrs	r3, r3, #4
 8005210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005214:	4293      	cmp	r3, r2
 8005216:	d223      	bcs.n	8005260 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fd55 	bl	8005ccc <RCC_SetFlashLatencyFromMSIRange>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e383      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800522c:	4b73      	ldr	r3, [pc, #460]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a72      	ldr	r2, [pc, #456]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005232:	f043 0308 	orr.w	r3, r3, #8
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	4b70      	ldr	r3, [pc, #448]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	496d      	ldr	r1, [pc, #436]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800524a:	4b6c      	ldr	r3, [pc, #432]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	4968      	ldr	r1, [pc, #416]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800525a:	4313      	orrs	r3, r2
 800525c:	604b      	str	r3, [r1, #4]
 800525e:	e025      	b.n	80052ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005260:	4b66      	ldr	r3, [pc, #408]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a65      	ldr	r2, [pc, #404]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005266:	f043 0308 	orr.w	r3, r3, #8
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b63      	ldr	r3, [pc, #396]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	4960      	ldr	r1, [pc, #384]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800527e:	4b5f      	ldr	r3, [pc, #380]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	495b      	ldr	r1, [pc, #364]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800528e:	4313      	orrs	r3, r2
 8005290:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fd15 	bl	8005ccc <RCC_SetFlashLatencyFromMSIRange>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e343      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ac:	f000 fc4a 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b52      	ldr	r3, [pc, #328]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	4950      	ldr	r1, [pc, #320]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
 80052c8:	4a4e      	ldr	r2, [pc, #312]	; (8005404 <HAL_RCC_OscConfig+0x278>)
 80052ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052cc:	4b4e      	ldr	r3, [pc, #312]	; (8005408 <HAL_RCC_OscConfig+0x27c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fd fd25 	bl	8002d20 <HAL_InitTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d052      	beq.n	8005386 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	e327      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d032      	beq.n	8005352 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052ec:	4b43      	ldr	r3, [pc, #268]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a42      	ldr	r2, [pc, #264]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052f8:	f7fd fd62 	bl	8002dc0 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005300:	f7fd fd5e 	bl	8002dc0 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e310      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005312:	4b3a      	ldr	r3, [pc, #232]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800531e:	4b37      	ldr	r3, [pc, #220]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a36      	ldr	r2, [pc, #216]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4b34      	ldr	r3, [pc, #208]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4931      	ldr	r1, [pc, #196]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800533c:	4b2f      	ldr	r3, [pc, #188]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	492c      	ldr	r1, [pc, #176]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]
 8005350:	e01a      	b.n	8005388 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005352:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a29      	ldr	r2, [pc, #164]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800535e:	f7fd fd2f 	bl	8002dc0 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005366:	f7fd fd2b 	bl	8002dc0 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e2dd      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005378:	4b20      	ldr	r3, [pc, #128]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0x1da>
 8005384:	e000      	b.n	8005388 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005386:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d074      	beq.n	800547e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b08      	cmp	r3, #8
 8005398:	d005      	beq.n	80053a6 <HAL_RCC_OscConfig+0x21a>
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d10e      	bne.n	80053be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d10b      	bne.n	80053be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a6:	4b15      	ldr	r3, [pc, #84]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d064      	beq.n	800547c <HAL_RCC_OscConfig+0x2f0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d160      	bne.n	800547c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e2ba      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCC_OscConfig+0x24a>
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a0b      	ldr	r2, [pc, #44]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e026      	b.n	8005424 <HAL_RCC_OscConfig+0x298>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053de:	d115      	bne.n	800540c <HAL_RCC_OscConfig+0x280>
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a05      	ldr	r2, [pc, #20]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80053e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a02      	ldr	r2, [pc, #8]	; (80053fc <HAL_RCC_OscConfig+0x270>)
 80053f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e014      	b.n	8005424 <HAL_RCC_OscConfig+0x298>
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	0800bf04 	.word	0x0800bf04
 8005404:	20000000 	.word	0x20000000
 8005408:	20000004 	.word	0x20000004
 800540c:	4ba0      	ldr	r3, [pc, #640]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a9f      	ldr	r2, [pc, #636]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4b9d      	ldr	r3, [pc, #628]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a9c      	ldr	r2, [pc, #624]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800541e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d013      	beq.n	8005454 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fd fcc8 	bl	8002dc0 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd fcc4 	bl	8002dc0 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e276      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005446:	4b92      	ldr	r3, [pc, #584]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0x2a8>
 8005452:	e014      	b.n	800547e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd fcb4 	bl	8002dc0 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545c:	f7fd fcb0 	bl	8002dc0 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e262      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800546e:	4b88      	ldr	r3, [pc, #544]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x2d0>
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d060      	beq.n	800554c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d005      	beq.n	800549c <HAL_RCC_OscConfig+0x310>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b0c      	cmp	r3, #12
 8005494:	d119      	bne.n	80054ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d116      	bne.n	80054ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800549c:	4b7c      	ldr	r3, [pc, #496]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_OscConfig+0x328>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e23f      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b4:	4b76      	ldr	r3, [pc, #472]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	061b      	lsls	r3, r3, #24
 80054c2:	4973      	ldr	r1, [pc, #460]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c8:	e040      	b.n	800554c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d023      	beq.n	800551a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d2:	4b6f      	ldr	r3, [pc, #444]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a6e      	ldr	r2, [pc, #440]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fd fc6f 	bl	8002dc0 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e6:	f7fd fc6b 	bl	8002dc0 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e21d      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054f8:	4b65      	ldr	r3, [pc, #404]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005504:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	495f      	ldr	r1, [pc, #380]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]
 8005518:	e018      	b.n	800554c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551a:	4b5d      	ldr	r3, [pc, #372]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5c      	ldr	r2, [pc, #368]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fd fc4b 	bl	8002dc0 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552e:	f7fd fc47 	bl	8002dc0 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e1f9      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005540:	4b53      	ldr	r3, [pc, #332]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d03c      	beq.n	80055d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01c      	beq.n	800559a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005560:	4b4b      	ldr	r3, [pc, #300]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005566:	4a4a      	ldr	r2, [pc, #296]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fd fc26 	bl	8002dc0 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fd fc22 	bl	8002dc0 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1d4      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800558c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ef      	beq.n	8005578 <HAL_RCC_OscConfig+0x3ec>
 8005598:	e01b      	b.n	80055d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800559a:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800559c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a0:	4a3b      	ldr	r2, [pc, #236]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055aa:	f7fd fc09 	bl	8002dc0 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b2:	f7fd fc05 	bl	8002dc0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1b7      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055c4:	4b32      	ldr	r3, [pc, #200]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80055c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1ef      	bne.n	80055b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80a6 	beq.w	800572c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e0:	2300      	movs	r3, #0
 80055e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055e4:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6593      	str	r3, [r2, #88]	; 0x58
 80055fc:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005608:	2301      	movs	r3, #1
 800560a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560c:	4b21      	ldr	r3, [pc, #132]	; (8005694 <HAL_RCC_OscConfig+0x508>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d118      	bne.n	800564a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005618:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <HAL_RCC_OscConfig+0x508>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <HAL_RCC_OscConfig+0x508>)
 800561e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005624:	f7fd fbcc 	bl	8002dc0 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562c:	f7fd fbc8 	bl	8002dc0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e17a      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <HAL_RCC_OscConfig+0x508>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d108      	bne.n	8005664 <HAL_RCC_OscConfig+0x4d8>
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005658:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005662:	e029      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b05      	cmp	r3, #5
 800566a:	d115      	bne.n	8005698 <HAL_RCC_OscConfig+0x50c>
 800566c:	4b08      	ldr	r3, [pc, #32]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	4a07      	ldr	r2, [pc, #28]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005674:	f043 0304 	orr.w	r3, r3, #4
 8005678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	4a03      	ldr	r2, [pc, #12]	; (8005690 <HAL_RCC_OscConfig+0x504>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800568c:	e014      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000
 8005694:	40007000 	.word	0x40007000
 8005698:	4b9c      	ldr	r3, [pc, #624]	; (800590c <HAL_RCC_OscConfig+0x780>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	4a9b      	ldr	r2, [pc, #620]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056a8:	4b98      	ldr	r3, [pc, #608]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ae:	4a97      	ldr	r2, [pc, #604]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d016      	beq.n	80056ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7fd fb7e 	bl	8002dc0 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c6:	e00a      	b.n	80056de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c8:	f7fd fb7a 	bl	8002dc0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e12a      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056de:	4b8b      	ldr	r3, [pc, #556]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ed      	beq.n	80056c8 <HAL_RCC_OscConfig+0x53c>
 80056ec:	e015      	b.n	800571a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fd fb67 	bl	8002dc0 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056f4:	e00a      	b.n	800570c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f7fd fb63 	bl	8002dc0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f241 3288 	movw	r2, #5000	; 0x1388
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e113      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800570c:	4b7f      	ldr	r3, [pc, #508]	; (800590c <HAL_RCC_OscConfig+0x780>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1ed      	bne.n	80056f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571a:	7ffb      	ldrb	r3, [r7, #31]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d105      	bne.n	800572c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005720:	4b7a      	ldr	r3, [pc, #488]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	4a79      	ldr	r2, [pc, #484]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80fe 	beq.w	8005932 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	2b02      	cmp	r3, #2
 800573c:	f040 80d0 	bne.w	80058e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005740:	4b72      	ldr	r3, [pc, #456]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f003 0203 	and.w	r2, r3, #3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d130      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	3b01      	subs	r3, #1
 8005760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d127      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d11f      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005780:	2a07      	cmp	r2, #7
 8005782:	bf14      	ite	ne
 8005784:	2201      	movne	r2, #1
 8005786:	2200      	moveq	r2, #0
 8005788:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800578a:	4293      	cmp	r3, r2
 800578c:	d113      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	3b01      	subs	r3, #1
 800579c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800579e:	429a      	cmp	r2, r3
 80057a0:	d109      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	3b01      	subs	r3, #1
 80057b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d06e      	beq.n	8005894 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d069      	beq.n	8005890 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057bc:	4b53      	ldr	r3, [pc, #332]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057c8:	4b50      	ldr	r3, [pc, #320]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0ad      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057d8:	4b4c      	ldr	r3, [pc, #304]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a4b      	ldr	r2, [pc, #300]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80057de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057e4:	f7fd faec 	bl	8002dc0 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fd fae8 	bl	8002dc0 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e09a      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057fe:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800580a:	4b40      	ldr	r3, [pc, #256]	; (800590c <HAL_RCC_OscConfig+0x780>)
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	4b40      	ldr	r3, [pc, #256]	; (8005910 <HAL_RCC_OscConfig+0x784>)
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800581a:	3a01      	subs	r2, #1
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	4311      	orrs	r1, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005824:	0212      	lsls	r2, r2, #8
 8005826:	4311      	orrs	r1, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800582c:	0852      	lsrs	r2, r2, #1
 800582e:	3a01      	subs	r2, #1
 8005830:	0552      	lsls	r2, r2, #21
 8005832:	4311      	orrs	r1, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005838:	0852      	lsrs	r2, r2, #1
 800583a:	3a01      	subs	r2, #1
 800583c:	0652      	lsls	r2, r2, #25
 800583e:	4311      	orrs	r1, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005844:	0912      	lsrs	r2, r2, #4
 8005846:	0452      	lsls	r2, r2, #17
 8005848:	430a      	orrs	r2, r1
 800584a:	4930      	ldr	r1, [pc, #192]	; (800590c <HAL_RCC_OscConfig+0x780>)
 800584c:	4313      	orrs	r3, r2
 800584e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005850:	4b2e      	ldr	r3, [pc, #184]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2d      	ldr	r2, [pc, #180]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800585a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_RCC_OscConfig+0x780>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a2a      	ldr	r2, [pc, #168]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005868:	f7fd faaa 	bl	8002dc0 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005870:	f7fd faa6 	bl	8002dc0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e058      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800588e:	e050      	b.n	8005932 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e04f      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005894:	4b1d      	ldr	r3, [pc, #116]	; (800590c <HAL_RCC_OscConfig+0x780>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d148      	bne.n	8005932 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058a0:	4b1a      	ldr	r3, [pc, #104]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80058a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a16      	ldr	r2, [pc, #88]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058b8:	f7fd fa82 	bl	8002dc0 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c0:	f7fd fa7e 	bl	8002dc0 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e030      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d2:	4b0e      	ldr	r3, [pc, #56]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x734>
 80058de:	e028      	b.n	8005932 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d023      	beq.n	800592e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <HAL_RCC_OscConfig+0x780>)
 80058ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f2:	f7fd fa65 	bl	8002dc0 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f8:	e00c      	b.n	8005914 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058fa:	f7fd fa61 	bl	8002dc0 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d905      	bls.n	8005914 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e013      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
 800590c:	40021000 	.word	0x40021000
 8005910:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_RCC_OscConfig+0x7b0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1ec      	bne.n	80058fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCC_OscConfig+0x7b0>)
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	4905      	ldr	r1, [pc, #20]	; (800593c <HAL_RCC_OscConfig+0x7b0>)
 8005926:	4b06      	ldr	r3, [pc, #24]	; (8005940 <HAL_RCC_OscConfig+0x7b4>)
 8005928:	4013      	ands	r3, r2
 800592a:	60cb      	str	r3, [r1, #12]
 800592c:	e001      	b.n	8005932 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40021000 	.word	0x40021000
 8005940:	feeefffc 	.word	0xfeeefffc

08005944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0e7      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005958:	4b75      	ldr	r3, [pc, #468]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d910      	bls.n	8005988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b72      	ldr	r3, [pc, #456]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 0207 	bic.w	r2, r3, #7
 800596e:	4970      	ldr	r1, [pc, #448]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b6e      	ldr	r3, [pc, #440]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0cf      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d908      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a4:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4960      	ldr	r1, [pc, #384]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04c      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ca:	4b5a      	ldr	r3, [pc, #360]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d121      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0a6      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d107      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e2:	4b54      	ldr	r3, [pc, #336]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d115      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e09a      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059fa:	4b4e      	ldr	r3, [pc, #312]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e08e      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a0a:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e086      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a1a:	4b46      	ldr	r3, [pc, #280]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4943      	ldr	r1, [pc, #268]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a2c:	f7fd f9c8 	bl	8002dc0 <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a34:	f7fd f9c4 	bl	8002dc0 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e06e      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	4b3a      	ldr	r3, [pc, #232]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 020c 	and.w	r2, r3, #12
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1eb      	bne.n	8005a34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d010      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d208      	bcs.n	8005a8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a78:	4b2e      	ldr	r3, [pc, #184]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	492b      	ldr	r1, [pc, #172]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a8a:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d210      	bcs.n	8005aba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 0207 	bic.w	r2, r3, #7
 8005aa0:	4923      	ldr	r1, [pc, #140]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_RCC_ClockConfig+0x1ec>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e036      	b.n	8005b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4918      	ldr	r1, [pc, #96]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4910      	ldr	r1, [pc, #64]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af8:	f000 f824 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	091b      	lsrs	r3, r3, #4
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	490b      	ldr	r1, [pc, #44]	; (8005b38 <HAL_RCC_ClockConfig+0x1f4>)
 8005b0a:	5ccb      	ldrb	r3, [r1, r3]
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b18:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <HAL_RCC_ClockConfig+0x1fc>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fd f8ff 	bl	8002d20 <HAL_InitTick>
 8005b22:	4603      	mov	r3, r0
 8005b24:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b26:	7afb      	ldrb	r3, [r7, #11]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40021000 	.word	0x40021000
 8005b38:	0800bf04 	.word	0x0800bf04
 8005b3c:	20000000 	.word	0x20000000
 8005b40:	20000004 	.word	0x20000004

08005b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b52:	4b3e      	ldr	r3, [pc, #248]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x34>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d121      	bne.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d11e      	bne.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b78:	4b34      	ldr	r3, [pc, #208]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b84:	4b31      	ldr	r3, [pc, #196]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e005      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b94:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bb4:	e00a      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d102      	bne.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bbc:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e004      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bc8:	4b23      	ldr	r3, [pc, #140]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d134      	bne.n	8005c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0xa6>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d003      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8005be8:	e005      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005bea:	4b1a      	ldr	r3, [pc, #104]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bec:	617b      	str	r3, [r7, #20]
      break;
 8005bee:	e005      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005bf0:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bf2:	617b      	str	r3, [r7, #20]
      break;
 8005bf4:	e002      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	617b      	str	r3, [r7, #20]
      break;
 8005bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	091b      	lsrs	r3, r3, #4
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	3301      	adds	r3, #1
 8005c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	fb03 f202 	mul.w	r2, r3, r2
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	0e5b      	lsrs	r3, r3, #25
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3724      	adds	r7, #36	; 0x24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	0800bf1c 	.word	0x0800bf1c
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	007a1200 	.word	0x007a1200

08005c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000000 	.word	0x20000000

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4904      	ldr	r1, [pc, #16]	; (8005c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	0800bf14 	.word	0x0800bf14

08005ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ca4:	f7ff ffda 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0adb      	lsrs	r3, r3, #11
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4904      	ldr	r1, [pc, #16]	; (8005cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cb6:	5ccb      	ldrb	r3, [r1, r3]
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	0800bf14 	.word	0x0800bf14

08005ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005cd8:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ce4:	f7ff f9ee 	bl	80050c4 <HAL_PWREx_GetVoltageRange>
 8005ce8:	6178      	str	r0, [r7, #20]
 8005cea:	e014      	b.n	8005d16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf0:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf8:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d04:	f7ff f9de 	bl	80050c4 <HAL_PWREx_GetVoltageRange>
 8005d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d0a:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d10b      	bne.n	8005d36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b80      	cmp	r3, #128	; 0x80
 8005d22:	d919      	bls.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2ba0      	cmp	r3, #160	; 0xa0
 8005d28:	d902      	bls.n	8005d30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e013      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d30:	2301      	movs	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	e010      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b80      	cmp	r3, #128	; 0x80
 8005d3a:	d902      	bls.n	8005d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	e00a      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d102      	bne.n	8005d4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d48:	2302      	movs	r3, #2
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	e004      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b70      	cmp	r3, #112	; 0x70
 8005d52:	d101      	bne.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d54:	2301      	movs	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 0207 	bic.w	r2, r3, #7
 8005d60:	4909      	ldr	r1, [pc, #36]	; (8005d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d68:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d001      	beq.n	8005d7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40022000 	.word	0x40022000

08005d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d94:	2300      	movs	r3, #0
 8005d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d041      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005db0:	d02a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005db2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005db6:	d824      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dbc:	d008      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dc2:	d81e      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dce:	e018      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dd0:	4b86      	ldr	r3, [pc, #536]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a85      	ldr	r2, [pc, #532]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ddc:	e015      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fabb 	bl	8006360 <RCCEx_PLLSAI1_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dee:	e00c      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3320      	adds	r3, #32
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fba6 	bl	8006548 <RCCEx_PLLSAI2_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e00:	e003      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	74fb      	strb	r3, [r7, #19]
      break;
 8005e06:	e000      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0a:	7cfb      	ldrb	r3, [r7, #19]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e10:	4b76      	ldr	r3, [pc, #472]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e1e:	4973      	ldr	r1, [pc, #460]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e26:	e001      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d041      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e40:	d02a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e46:	d824      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e4c:	d008      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e52:	d81e      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e5c:	d010      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e5e:	e018      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e60:	4b62      	ldr	r3, [pc, #392]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a61      	ldr	r2, [pc, #388]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e6c:	e015      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fa73 	bl	8006360 <RCCEx_PLLSAI1_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e7e:	e00c      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3320      	adds	r3, #32
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fb5e 	bl	8006548 <RCCEx_PLLSAI2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e90:	e003      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	74fb      	strb	r3, [r7, #19]
      break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9a:	7cfb      	ldrb	r3, [r7, #19]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ea0:	4b52      	ldr	r3, [pc, #328]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eae:	494f      	ldr	r1, [pc, #316]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eb6:	e001      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7cfb      	ldrb	r3, [r7, #19]
 8005eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80a0 	beq.w	800600a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee4:	4b41      	ldr	r3, [pc, #260]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee8:	4a40      	ldr	r2, [pc, #256]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eee:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef0:	4b3e      	ldr	r3, [pc, #248]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efc:	2301      	movs	r3, #1
 8005efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f00:	4b3b      	ldr	r3, [pc, #236]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a3a      	ldr	r2, [pc, #232]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f0c:	f7fc ff58 	bl	8002dc0 <HAL_GetTick>
 8005f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f12:	e009      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f14:	f7fc ff54 	bl	8002dc0 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d902      	bls.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	74fb      	strb	r3, [r7, #19]
        break;
 8005f26:	e005      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f28:	4b31      	ldr	r3, [pc, #196]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ef      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d15c      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01f      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d019      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f58:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f64:	4b21      	ldr	r3, [pc, #132]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	4a20      	ldr	r2, [pc, #128]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f74:	4b1d      	ldr	r3, [pc, #116]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f84:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f96:	f7fc ff13 	bl	8002dc0 <HAL_GetTick>
 8005f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9c:	e00b      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f7fc ff0f 	bl	8002dc0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d902      	bls.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8005fb4:	e006      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ec      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fca:	4b08      	ldr	r3, [pc, #32]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fda:	4904      	ldr	r1, [pc, #16]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fe2:	e009      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	74bb      	strb	r3, [r7, #18]
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ff8:	7c7b      	ldrb	r3, [r7, #17]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffe:	4b9e      	ldr	r3, [pc, #632]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006002:	4a9d      	ldr	r2, [pc, #628]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006016:	4b98      	ldr	r3, [pc, #608]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 0203 	bic.w	r2, r3, #3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	4994      	ldr	r1, [pc, #592]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006038:	4b8f      	ldr	r3, [pc, #572]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 020c 	bic.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	498c      	ldr	r1, [pc, #560]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800605a:	4b87      	ldr	r3, [pc, #540]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	4983      	ldr	r1, [pc, #524]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800607c:	4b7e      	ldr	r3, [pc, #504]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	497b      	ldr	r1, [pc, #492]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800609e:	4b76      	ldr	r3, [pc, #472]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ac:	4972      	ldr	r1, [pc, #456]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060c0:	4b6d      	ldr	r3, [pc, #436]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	496a      	ldr	r1, [pc, #424]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e2:	4b65      	ldr	r3, [pc, #404]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	4961      	ldr	r1, [pc, #388]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006104:	4b5c      	ldr	r3, [pc, #368]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006112:	4959      	ldr	r1, [pc, #356]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006126:	4b54      	ldr	r3, [pc, #336]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	4950      	ldr	r1, [pc, #320]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006148:	4b4b      	ldr	r3, [pc, #300]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	4948      	ldr	r1, [pc, #288]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800616a:	4b43      	ldr	r3, [pc, #268]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	493f      	ldr	r1, [pc, #252]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d028      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619a:	4937      	ldr	r1, [pc, #220]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061aa:	d106      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ac:	4b32      	ldr	r3, [pc, #200]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a31      	ldr	r2, [pc, #196]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	e011      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061c2:	d10c      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2101      	movs	r1, #1
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f8c8 	bl	8006360 <RCCEx_PLLSAI1_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80061da:	7cfb      	ldrb	r3, [r7, #19]
 80061dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d028      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	491f      	ldr	r1, [pc, #124]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006208:	d106      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006214:	60d3      	str	r3, [r2, #12]
 8006216:	e011      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006220:	d10c      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2101      	movs	r1, #1
 8006228:	4618      	mov	r0, r3
 800622a:	f000 f899 	bl	8006360 <RCCEx_PLLSAI1_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006232:	7cfb      	ldrb	r3, [r7, #19]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02b      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006256:	4908      	ldr	r1, [pc, #32]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006266:	d109      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a02      	ldr	r2, [pc, #8]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006272:	60d3      	str	r3, [r2, #12]
 8006274:	e014      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006284:	d10c      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3304      	adds	r3, #4
 800628a:	2101      	movs	r1, #1
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f867 	bl	8006360 <RCCEx_PLLSAI1_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006296:	7cfb      	ldrb	r3, [r7, #19]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d02f      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062ac:	4b2b      	ldr	r3, [pc, #172]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ba:	4928      	ldr	r1, [pc, #160]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3304      	adds	r3, #4
 80062d0:	2102      	movs	r1, #2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f844 	bl	8006360 <RCCEx_PLLSAI1_Config>
 80062d8:	4603      	mov	r3, r0
 80062da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d014      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062e2:	7cfb      	ldrb	r3, [r7, #19]
 80062e4:	74bb      	strb	r3, [r7, #18]
 80062e6:	e011      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f0:	d10c      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3320      	adds	r3, #32
 80062f6:	2102      	movs	r1, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f925 	bl	8006548 <RCCEx_PLLSAI2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006302:	7cfb      	ldrb	r3, [r7, #19]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006308:	7cfb      	ldrb	r3, [r7, #19]
 800630a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006318:	4b10      	ldr	r3, [pc, #64]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006326:	490d      	ldr	r1, [pc, #52]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800633a:	4b08      	ldr	r3, [pc, #32]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800634a:	4904      	ldr	r1, [pc, #16]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006352:	7cbb      	ldrb	r3, [r7, #18]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40021000 	.word	0x40021000

08006360 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800636e:	4b75      	ldr	r3, [pc, #468]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d018      	beq.n	80063ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800637a:	4b72      	ldr	r3, [pc, #456]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0203 	and.w	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d10d      	bne.n	80063a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
       ||
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006392:	4b6c      	ldr	r3, [pc, #432]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	091b      	lsrs	r3, r3, #4
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
       ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d047      	beq.n	8006436 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
 80063aa:	e044      	b.n	8006436 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d018      	beq.n	80063e6 <RCCEx_PLLSAI1_Config+0x86>
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d825      	bhi.n	8006404 <RCCEx_PLLSAI1_Config+0xa4>
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d002      	beq.n	80063c2 <RCCEx_PLLSAI1_Config+0x62>
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d009      	beq.n	80063d4 <RCCEx_PLLSAI1_Config+0x74>
 80063c0:	e020      	b.n	8006404 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063c2:	4b60      	ldr	r3, [pc, #384]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d11d      	bne.n	800640a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063d2:	e01a      	b.n	800640a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063d4:	4b5b      	ldr	r3, [pc, #364]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d116      	bne.n	800640e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063e4:	e013      	b.n	800640e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063e6:	4b57      	ldr	r3, [pc, #348]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10f      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063f2:	4b54      	ldr	r3, [pc, #336]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006402:	e006      	b.n	8006412 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
      break;
 8006408:	e004      	b.n	8006414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006412:	bf00      	nop
    }

    if(status == HAL_OK)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10d      	bne.n	8006436 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800641a:	4b4a      	ldr	r3, [pc, #296]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	3b01      	subs	r3, #1
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	430b      	orrs	r3, r1
 8006430:	4944      	ldr	r1, [pc, #272]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006432:	4313      	orrs	r3, r2
 8006434:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d17d      	bne.n	8006538 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800643c:	4b41      	ldr	r3, [pc, #260]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a40      	ldr	r2, [pc, #256]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006448:	f7fc fcba 	bl	8002dc0 <HAL_GetTick>
 800644c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800644e:	e009      	b.n	8006464 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006450:	f7fc fcb6 	bl	8002dc0 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d902      	bls.n	8006464 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	73fb      	strb	r3, [r7, #15]
        break;
 8006462:	e005      	b.n	8006470 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006464:	4b37      	ldr	r3, [pc, #220]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1ef      	bne.n	8006450 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d160      	bne.n	8006538 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d111      	bne.n	80064a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800647c:	4b31      	ldr	r3, [pc, #196]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6892      	ldr	r2, [r2, #8]
 800648c:	0211      	lsls	r1, r2, #8
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68d2      	ldr	r2, [r2, #12]
 8006492:	0912      	lsrs	r2, r2, #4
 8006494:	0452      	lsls	r2, r2, #17
 8006496:	430a      	orrs	r2, r1
 8006498:	492a      	ldr	r1, [pc, #168]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800649a:	4313      	orrs	r3, r2
 800649c:	610b      	str	r3, [r1, #16]
 800649e:	e027      	b.n	80064f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d112      	bne.n	80064cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80064ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6892      	ldr	r2, [r2, #8]
 80064b6:	0211      	lsls	r1, r2, #8
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6912      	ldr	r2, [r2, #16]
 80064bc:	0852      	lsrs	r2, r2, #1
 80064be:	3a01      	subs	r2, #1
 80064c0:	0552      	lsls	r2, r2, #21
 80064c2:	430a      	orrs	r2, r1
 80064c4:	491f      	ldr	r1, [pc, #124]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	610b      	str	r3, [r1, #16]
 80064ca:	e011      	b.n	80064f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064cc:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6892      	ldr	r2, [r2, #8]
 80064dc:	0211      	lsls	r1, r2, #8
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6952      	ldr	r2, [r2, #20]
 80064e2:	0852      	lsrs	r2, r2, #1
 80064e4:	3a01      	subs	r2, #1
 80064e6:	0652      	lsls	r2, r2, #25
 80064e8:	430a      	orrs	r2, r1
 80064ea:	4916      	ldr	r1, [pc, #88]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064f0:	4b14      	ldr	r3, [pc, #80]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a13      	ldr	r2, [pc, #76]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fc:	f7fc fc60 	bl	8002dc0 <HAL_GetTick>
 8006500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006502:	e009      	b.n	8006518 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006504:	f7fc fc5c 	bl	8002dc0 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d902      	bls.n	8006518 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	73fb      	strb	r3, [r7, #15]
          break;
 8006516:	e005      	b.n	8006524 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0ef      	beq.n	8006504 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	4904      	ldr	r1, [pc, #16]	; (8006544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006534:	4313      	orrs	r3, r2
 8006536:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40021000 	.word	0x40021000

08006548 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006556:	4b6a      	ldr	r3, [pc, #424]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d018      	beq.n	8006594 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006562:	4b67      	ldr	r3, [pc, #412]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0203 	and.w	r2, r3, #3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d10d      	bne.n	800658e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
       ||
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800657a:	4b61      	ldr	r3, [pc, #388]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
       ||
 800658a:	429a      	cmp	r2, r3
 800658c:	d047      	beq.n	800661e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	e044      	b.n	800661e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d018      	beq.n	80065ce <RCCEx_PLLSAI2_Config+0x86>
 800659c:	2b03      	cmp	r3, #3
 800659e:	d825      	bhi.n	80065ec <RCCEx_PLLSAI2_Config+0xa4>
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d002      	beq.n	80065aa <RCCEx_PLLSAI2_Config+0x62>
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d009      	beq.n	80065bc <RCCEx_PLLSAI2_Config+0x74>
 80065a8:	e020      	b.n	80065ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065aa:	4b55      	ldr	r3, [pc, #340]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11d      	bne.n	80065f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ba:	e01a      	b.n	80065f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065bc:	4b50      	ldr	r3, [pc, #320]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d116      	bne.n	80065f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065cc:	e013      	b.n	80065f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ce:	4b4c      	ldr	r3, [pc, #304]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10f      	bne.n	80065fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065da:	4b49      	ldr	r3, [pc, #292]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d109      	bne.n	80065fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ea:	e006      	b.n	80065fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
      break;
 80065f0:	e004      	b.n	80065fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065f2:	bf00      	nop
 80065f4:	e002      	b.n	80065fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10d      	bne.n	800661e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006602:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6819      	ldr	r1, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	3b01      	subs	r3, #1
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	430b      	orrs	r3, r1
 8006618:	4939      	ldr	r1, [pc, #228]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800661a:	4313      	orrs	r3, r2
 800661c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d167      	bne.n	80066f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006624:	4b36      	ldr	r3, [pc, #216]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a35      	ldr	r2, [pc, #212]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800662a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006630:	f7fc fbc6 	bl	8002dc0 <HAL_GetTick>
 8006634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006636:	e009      	b.n	800664c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006638:	f7fc fbc2 	bl	8002dc0 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d902      	bls.n	800664c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	73fb      	strb	r3, [r7, #15]
        break;
 800664a:	e005      	b.n	8006658 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800664c:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ef      	bne.n	8006638 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d14a      	bne.n	80066f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d111      	bne.n	8006688 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006664:	4b26      	ldr	r3, [pc, #152]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800666c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6892      	ldr	r2, [r2, #8]
 8006674:	0211      	lsls	r1, r2, #8
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68d2      	ldr	r2, [r2, #12]
 800667a:	0912      	lsrs	r2, r2, #4
 800667c:	0452      	lsls	r2, r2, #17
 800667e:	430a      	orrs	r2, r1
 8006680:	491f      	ldr	r1, [pc, #124]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006682:	4313      	orrs	r3, r2
 8006684:	614b      	str	r3, [r1, #20]
 8006686:	e011      	b.n	80066ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006688:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006690:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6892      	ldr	r2, [r2, #8]
 8006698:	0211      	lsls	r1, r2, #8
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6912      	ldr	r2, [r2, #16]
 800669e:	0852      	lsrs	r2, r2, #1
 80066a0:	3a01      	subs	r2, #1
 80066a2:	0652      	lsls	r2, r2, #25
 80066a4:	430a      	orrs	r2, r1
 80066a6:	4916      	ldr	r1, [pc, #88]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066ac:	4b14      	ldr	r3, [pc, #80]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a13      	ldr	r2, [pc, #76]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b8:	f7fc fb82 	bl	8002dc0 <HAL_GetTick>
 80066bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066be:	e009      	b.n	80066d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066c0:	f7fc fb7e 	bl	8002dc0 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d902      	bls.n	80066d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	73fb      	strb	r3, [r7, #15]
          break;
 80066d2:	e005      	b.n	80066e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0ef      	beq.n	80066c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	4904      	ldr	r1, [pc, #16]	; (8006700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000

08006704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e049      	b.n	80067aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fc f898 	bl	8002860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fd86 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d001      	beq.n	80067cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e047      	b.n	800685c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a23      	ldr	r2, [pc, #140]	; (8006868 <HAL_TIM_Base_Start+0xb4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d01d      	beq.n	800681a <HAL_TIM_Base_Start+0x66>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e6:	d018      	beq.n	800681a <HAL_TIM_Base_Start+0x66>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1f      	ldr	r2, [pc, #124]	; (800686c <HAL_TIM_Base_Start+0xb8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_TIM_Base_Start+0x66>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1e      	ldr	r2, [pc, #120]	; (8006870 <HAL_TIM_Base_Start+0xbc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_TIM_Base_Start+0x66>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <HAL_TIM_Base_Start+0xc0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_TIM_Base_Start+0x66>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <HAL_TIM_Base_Start+0xc4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIM_Base_Start+0x66>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a19      	ldr	r2, [pc, #100]	; (800687c <HAL_TIM_Base_Start+0xc8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d115      	bne.n	8006846 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <HAL_TIM_Base_Start+0xcc>)
 8006822:	4013      	ands	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b06      	cmp	r3, #6
 800682a:	d015      	beq.n	8006858 <HAL_TIM_Base_Start+0xa4>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006832:	d011      	beq.n	8006858 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006844:	e008      	b.n	8006858 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e000      	b.n	800685a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006858:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40012c00 	.word	0x40012c00
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40013400 	.word	0x40013400
 800687c:	40014000 	.word	0x40014000
 8006880:	00010007 	.word	0x00010007

08006884 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	f241 1311 	movw	r3, #4369	; 0x1111
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10f      	bne.n	80068bc <HAL_TIM_Base_Stop+0x38>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	f240 4344 	movw	r3, #1092	; 0x444
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d107      	bne.n	80068bc <HAL_TIM_Base_Stop+0x38>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d001      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e04f      	b.n	800698c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a23      	ldr	r2, [pc, #140]	; (8006998 <HAL_TIM_Base_Start_IT+0xc4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01d      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x76>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d018      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x76>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1f      	ldr	r2, [pc, #124]	; (800699c <HAL_TIM_Base_Start_IT+0xc8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x76>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00e      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x76>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x76>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <HAL_TIM_Base_Start_IT+0x76>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a19      	ldr	r2, [pc, #100]	; (80069ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d115      	bne.n	8006976 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006952:	4013      	ands	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b06      	cmp	r3, #6
 800695a:	d015      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0xb4>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006962:	d011      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	e008      	b.n	8006988 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e000      	b.n	800698a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40013400 	.word	0x40013400
 80069ac:	40014000 	.word	0x40014000
 80069b0:	00010007 	.word	0x00010007

080069b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e049      	b.n	8006a5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fb ff1a 	bl	8002814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f000 fc2e 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <HAL_TIM_PWM_Start+0x24>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	bf14      	ite	ne
 8006a80:	2301      	movne	r3, #1
 8006a82:	2300      	moveq	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	e03c      	b.n	8006b02 <HAL_TIM_PWM_Start+0x9e>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d109      	bne.n	8006aa2 <HAL_TIM_PWM_Start+0x3e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	bf14      	ite	ne
 8006a9a:	2301      	movne	r3, #1
 8006a9c:	2300      	moveq	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	e02f      	b.n	8006b02 <HAL_TIM_PWM_Start+0x9e>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d109      	bne.n	8006abc <HAL_TIM_PWM_Start+0x58>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	e022      	b.n	8006b02 <HAL_TIM_PWM_Start+0x9e>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b0c      	cmp	r3, #12
 8006ac0:	d109      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0x72>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	bf14      	ite	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	2300      	moveq	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	e015      	b.n	8006b02 <HAL_TIM_PWM_Start+0x9e>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b10      	cmp	r3, #16
 8006ada:	d109      	bne.n	8006af0 <HAL_TIM_PWM_Start+0x8c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	e008      	b.n	8006b02 <HAL_TIM_PWM_Start+0x9e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e09c      	b.n	8006c44 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_PWM_Start+0xb6>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b18:	e023      	b.n	8006b62 <HAL_TIM_PWM_Start+0xfe>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start+0xc6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b28:	e01b      	b.n	8006b62 <HAL_TIM_PWM_Start+0xfe>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xd6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b38:	e013      	b.n	8006b62 <HAL_TIM_PWM_Start+0xfe>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b0c      	cmp	r3, #12
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_PWM_Start+0xe6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b48:	e00b      	b.n	8006b62 <HAL_TIM_PWM_Start+0xfe>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_PWM_Start+0xf6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b58:	e003      	b.n	8006b62 <HAL_TIM_PWM_Start+0xfe>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2201      	movs	r2, #1
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fee2 	bl	8007934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a35      	ldr	r2, [pc, #212]	; (8006c4c <HAL_TIM_PWM_Start+0x1e8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d013      	beq.n	8006ba2 <HAL_TIM_PWM_Start+0x13e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a34      	ldr	r2, [pc, #208]	; (8006c50 <HAL_TIM_PWM_Start+0x1ec>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00e      	beq.n	8006ba2 <HAL_TIM_PWM_Start+0x13e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a32      	ldr	r2, [pc, #200]	; (8006c54 <HAL_TIM_PWM_Start+0x1f0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d009      	beq.n	8006ba2 <HAL_TIM_PWM_Start+0x13e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a31      	ldr	r2, [pc, #196]	; (8006c58 <HAL_TIM_PWM_Start+0x1f4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d004      	beq.n	8006ba2 <HAL_TIM_PWM_Start+0x13e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2f      	ldr	r2, [pc, #188]	; (8006c5c <HAL_TIM_PWM_Start+0x1f8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_PWM_Start+0x142>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <HAL_TIM_PWM_Start+0x144>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a22      	ldr	r2, [pc, #136]	; (8006c4c <HAL_TIM_PWM_Start+0x1e8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01d      	beq.n	8006c02 <HAL_TIM_PWM_Start+0x19e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bce:	d018      	beq.n	8006c02 <HAL_TIM_PWM_Start+0x19e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a22      	ldr	r2, [pc, #136]	; (8006c60 <HAL_TIM_PWM_Start+0x1fc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_TIM_PWM_Start+0x19e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a21      	ldr	r2, [pc, #132]	; (8006c64 <HAL_TIM_PWM_Start+0x200>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_TIM_PWM_Start+0x19e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <HAL_TIM_PWM_Start+0x204>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_TIM_PWM_Start+0x19e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <HAL_TIM_PWM_Start+0x1ec>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_TIM_PWM_Start+0x19e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a15      	ldr	r2, [pc, #84]	; (8006c54 <HAL_TIM_PWM_Start+0x1f0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d115      	bne.n	8006c2e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <HAL_TIM_PWM_Start+0x208>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b06      	cmp	r3, #6
 8006c12:	d015      	beq.n	8006c40 <HAL_TIM_PWM_Start+0x1dc>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1a:	d011      	beq.n	8006c40 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c2c:	e008      	b.n	8006c40 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e000      	b.n	8006c42 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	40013400 	.word	0x40013400
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400
 8006c5c:	40014800 	.word	0x40014800
 8006c60:	40000400 	.word	0x40000400
 8006c64:	40000800 	.word	0x40000800
 8006c68:	40000c00 	.word	0x40000c00
 8006c6c:	00010007 	.word	0x00010007

08006c70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fe56 	bl	8007934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3e      	ldr	r2, [pc, #248]	; (8006d88 <HAL_TIM_PWM_Stop+0x118>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_TIM_PWM_Stop+0x4a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3d      	ldr	r2, [pc, #244]	; (8006d8c <HAL_TIM_PWM_Stop+0x11c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_TIM_PWM_Stop+0x4a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3b      	ldr	r2, [pc, #236]	; (8006d90 <HAL_TIM_PWM_Stop+0x120>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_TIM_PWM_Stop+0x4a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3a      	ldr	r2, [pc, #232]	; (8006d94 <HAL_TIM_PWM_Stop+0x124>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_TIM_PWM_Stop+0x4a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a38      	ldr	r2, [pc, #224]	; (8006d98 <HAL_TIM_PWM_Stop+0x128>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_PWM_Stop+0x4e>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_TIM_PWM_Stop+0x50>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d017      	beq.n	8006cf4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6a1a      	ldr	r2, [r3, #32]
 8006cca:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <HAL_TIM_PWM_Stop+0x84>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	f240 4344 	movw	r3, #1092	; 0x444
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d107      	bne.n	8006cf4 <HAL_TIM_PWM_Stop+0x84>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cfe:	4013      	ands	r3, r2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10f      	bne.n	8006d24 <HAL_TIM_PWM_Stop+0xb4>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_PWM_Stop+0xb4>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_TIM_PWM_Stop+0xc4>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d32:	e023      	b.n	8006d7c <HAL_TIM_PWM_Stop+0x10c>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d104      	bne.n	8006d44 <HAL_TIM_PWM_Stop+0xd4>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d42:	e01b      	b.n	8006d7c <HAL_TIM_PWM_Stop+0x10c>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d104      	bne.n	8006d54 <HAL_TIM_PWM_Stop+0xe4>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d52:	e013      	b.n	8006d7c <HAL_TIM_PWM_Stop+0x10c>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b0c      	cmp	r3, #12
 8006d58:	d104      	bne.n	8006d64 <HAL_TIM_PWM_Stop+0xf4>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d62:	e00b      	b.n	8006d7c <HAL_TIM_PWM_Stop+0x10c>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d104      	bne.n	8006d74 <HAL_TIM_PWM_Stop+0x104>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d72:	e003      	b.n	8006d7c <HAL_TIM_PWM_Stop+0x10c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40013400 	.word	0x40013400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800

08006d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d122      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d11b      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0202 	mvn.w	r2, #2
 8006dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa1a 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006de4:	e005      	b.n	8006df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa0c 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fa1d 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d122      	bne.n	8006e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d11b      	bne.n	8006e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0204 	mvn.w	r2, #4
 8006e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9f0 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f9e2 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f9f3 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d122      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d11b      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0208 	mvn.w	r2, #8
 8006e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2204      	movs	r2, #4
 8006e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f9c6 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006e8c:	e005      	b.n	8006e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f9b8 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f9c9 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d122      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d11b      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0210 	mvn.w	r2, #16
 8006ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f99c 	bl	8007218 <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f98e 	bl	8007204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f99f 	bl	800722c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d10e      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d107      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0201 	mvn.w	r2, #1
 8006f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fa fff8 	bl	8001f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d10e      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f38:	2b80      	cmp	r3, #128	; 0x80
 8006f3a:	d107      	bne.n	8006f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fdac 	bl	8007aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5a:	d10e      	bne.n	8006f7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f66:	2b80      	cmp	r3, #128	; 0x80
 8006f68:	d107      	bne.n	8006f7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fd9f 	bl	8007ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d10e      	bne.n	8006fa6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d107      	bne.n	8006fa6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f94d 	bl	8007240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d10e      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d107      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f06f 0220 	mvn.w	r2, #32
 8006fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fd5f 	bl	8007a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e0ff      	b.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b14      	cmp	r3, #20
 8007006:	f200 80f0 	bhi.w	80071ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800700a:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	08007065 	.word	0x08007065
 8007014:	080071eb 	.word	0x080071eb
 8007018:	080071eb 	.word	0x080071eb
 800701c:	080071eb 	.word	0x080071eb
 8007020:	080070a5 	.word	0x080070a5
 8007024:	080071eb 	.word	0x080071eb
 8007028:	080071eb 	.word	0x080071eb
 800702c:	080071eb 	.word	0x080071eb
 8007030:	080070e7 	.word	0x080070e7
 8007034:	080071eb 	.word	0x080071eb
 8007038:	080071eb 	.word	0x080071eb
 800703c:	080071eb 	.word	0x080071eb
 8007040:	08007127 	.word	0x08007127
 8007044:	080071eb 	.word	0x080071eb
 8007048:	080071eb 	.word	0x080071eb
 800704c:	080071eb 	.word	0x080071eb
 8007050:	08007169 	.word	0x08007169
 8007054:	080071eb 	.word	0x080071eb
 8007058:	080071eb 	.word	0x080071eb
 800705c:	080071eb 	.word	0x080071eb
 8007060:	080071a9 	.word	0x080071a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f98c 	bl	8007388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0208 	orr.w	r2, r2, #8
 800707e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0204 	bic.w	r2, r2, #4
 800708e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6999      	ldr	r1, [r3, #24]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	619a      	str	r2, [r3, #24]
      break;
 80070a2:	e0a5      	b.n	80071f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f9fc 	bl	80074a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6999      	ldr	r1, [r3, #24]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	021a      	lsls	r2, r3, #8
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	619a      	str	r2, [r3, #24]
      break;
 80070e4:	e084      	b.n	80071f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fa65 	bl	80075bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0208 	orr.w	r2, r2, #8
 8007100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0204 	bic.w	r2, r2, #4
 8007110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69d9      	ldr	r1, [r3, #28]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	61da      	str	r2, [r3, #28]
      break;
 8007124:	e064      	b.n	80071f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	4618      	mov	r0, r3
 800712e:	f000 facd 	bl	80076cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69d9      	ldr	r1, [r3, #28]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	021a      	lsls	r2, r3, #8
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	61da      	str	r2, [r3, #28]
      break;
 8007166:	e043      	b.n	80071f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fb16 	bl	80077a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0208 	orr.w	r2, r2, #8
 8007182:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0204 	bic.w	r2, r2, #4
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071a6:	e023      	b.n	80071f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fb5a 	bl	8007868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	021a      	lsls	r2, r3, #8
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071e8:	e002      	b.n	80071f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
      break;
 80071ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop

08007204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a40      	ldr	r2, [pc, #256]	; (8007368 <TIM_Base_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007272:	d00f      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a3d      	ldr	r2, [pc, #244]	; (800736c <TIM_Base_SetConfig+0x118>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00b      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a3c      	ldr	r2, [pc, #240]	; (8007370 <TIM_Base_SetConfig+0x11c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a3b      	ldr	r2, [pc, #236]	; (8007374 <TIM_Base_SetConfig+0x120>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0x40>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a3a      	ldr	r2, [pc, #232]	; (8007378 <TIM_Base_SetConfig+0x124>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d108      	bne.n	80072a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2f      	ldr	r2, [pc, #188]	; (8007368 <TIM_Base_SetConfig+0x114>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01f      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d01b      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2c      	ldr	r2, [pc, #176]	; (800736c <TIM_Base_SetConfig+0x118>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d017      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2b      	ldr	r2, [pc, #172]	; (8007370 <TIM_Base_SetConfig+0x11c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <TIM_Base_SetConfig+0x120>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00f      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a29      	ldr	r2, [pc, #164]	; (8007378 <TIM_Base_SetConfig+0x124>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a28      	ldr	r2, [pc, #160]	; (800737c <TIM_Base_SetConfig+0x128>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a27      	ldr	r2, [pc, #156]	; (8007380 <TIM_Base_SetConfig+0x12c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_Base_SetConfig+0x9a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a26      	ldr	r2, [pc, #152]	; (8007384 <TIM_Base_SetConfig+0x130>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a10      	ldr	r2, [pc, #64]	; (8007368 <TIM_Base_SetConfig+0x114>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00f      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a12      	ldr	r2, [pc, #72]	; (8007378 <TIM_Base_SetConfig+0x124>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00b      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a11      	ldr	r2, [pc, #68]	; (800737c <TIM_Base_SetConfig+0x128>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d007      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a10      	ldr	r2, [pc, #64]	; (8007380 <TIM_Base_SetConfig+0x12c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d003      	beq.n	800734c <TIM_Base_SetConfig+0xf8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a0f      	ldr	r2, [pc, #60]	; (8007384 <TIM_Base_SetConfig+0x130>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d103      	bne.n	8007354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	615a      	str	r2, [r3, #20]
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40013400 	.word	0x40013400
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800

08007388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f023 0201 	bic.w	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f023 0302 	bic.w	r3, r3, #2
 80073d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <TIM_OC1_SetConfig+0x10c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00f      	beq.n	8007408 <TIM_OC1_SetConfig+0x80>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a2b      	ldr	r2, [pc, #172]	; (8007498 <TIM_OC1_SetConfig+0x110>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_OC1_SetConfig+0x80>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a2a      	ldr	r2, [pc, #168]	; (800749c <TIM_OC1_SetConfig+0x114>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_OC1_SetConfig+0x80>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <TIM_OC1_SetConfig+0x118>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_OC1_SetConfig+0x80>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <TIM_OC1_SetConfig+0x11c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d10c      	bne.n	8007422 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f023 0308 	bic.w	r3, r3, #8
 800740e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <TIM_OC1_SetConfig+0x10c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00f      	beq.n	800744a <TIM_OC1_SetConfig+0xc2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <TIM_OC1_SetConfig+0x110>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00b      	beq.n	800744a <TIM_OC1_SetConfig+0xc2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a19      	ldr	r2, [pc, #100]	; (800749c <TIM_OC1_SetConfig+0x114>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d007      	beq.n	800744a <TIM_OC1_SetConfig+0xc2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <TIM_OC1_SetConfig+0x118>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d003      	beq.n	800744a <TIM_OC1_SetConfig+0xc2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a17      	ldr	r2, [pc, #92]	; (80074a4 <TIM_OC1_SetConfig+0x11c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d111      	bne.n	800746e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	621a      	str	r2, [r3, #32]
}
 8007488:	bf00      	nop
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40013400 	.word	0x40013400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800

080074a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f023 0210 	bic.w	r2, r3, #16
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0320 	bic.w	r3, r3, #32
 80074f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a28      	ldr	r2, [pc, #160]	; (80075a8 <TIM_OC2_SetConfig+0x100>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC2_SetConfig+0x6c>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a27      	ldr	r2, [pc, #156]	; (80075ac <TIM_OC2_SetConfig+0x104>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d10d      	bne.n	8007530 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800751a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <TIM_OC2_SetConfig+0x100>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00f      	beq.n	8007558 <TIM_OC2_SetConfig+0xb0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1c      	ldr	r2, [pc, #112]	; (80075ac <TIM_OC2_SetConfig+0x104>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00b      	beq.n	8007558 <TIM_OC2_SetConfig+0xb0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <TIM_OC2_SetConfig+0x108>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d007      	beq.n	8007558 <TIM_OC2_SetConfig+0xb0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <TIM_OC2_SetConfig+0x10c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_OC2_SetConfig+0xb0>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <TIM_OC2_SetConfig+0x110>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d113      	bne.n	8007580 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800755e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	621a      	str	r2, [r3, #32]
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40012c00 	.word	0x40012c00
 80075ac:	40013400 	.word	0x40013400
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40014400 	.word	0x40014400
 80075b8:	40014800 	.word	0x40014800

080075bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <TIM_OC3_SetConfig+0xfc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_OC3_SetConfig+0x6a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a26      	ldr	r2, [pc, #152]	; (80076bc <TIM_OC3_SetConfig+0x100>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d10d      	bne.n	8007642 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800762c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <TIM_OC3_SetConfig+0xfc>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00f      	beq.n	800766a <TIM_OC3_SetConfig+0xae>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <TIM_OC3_SetConfig+0x100>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00b      	beq.n	800766a <TIM_OC3_SetConfig+0xae>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <TIM_OC3_SetConfig+0x104>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d007      	beq.n	800766a <TIM_OC3_SetConfig+0xae>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <TIM_OC3_SetConfig+0x108>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_OC3_SetConfig+0xae>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <TIM_OC3_SetConfig+0x10c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d113      	bne.n	8007692 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	621a      	str	r2, [r3, #32]
}
 80076ac:	bf00      	nop
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400
 80076c8:	40014800 	.word	0x40014800

080076cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800771a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	031b      	lsls	r3, r3, #12
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <TIM_OC4_SetConfig+0xc0>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00f      	beq.n	8007750 <TIM_OC4_SetConfig+0x84>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <TIM_OC4_SetConfig+0xc4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00b      	beq.n	8007750 <TIM_OC4_SetConfig+0x84>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a16      	ldr	r2, [pc, #88]	; (8007794 <TIM_OC4_SetConfig+0xc8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d007      	beq.n	8007750 <TIM_OC4_SetConfig+0x84>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <TIM_OC4_SetConfig+0xcc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC4_SetConfig+0x84>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <TIM_OC4_SetConfig+0xd0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d109      	bne.n	8007764 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	019b      	lsls	r3, r3, #6
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40013400 	.word	0x40013400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800

080077a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a17      	ldr	r2, [pc, #92]	; (8007854 <TIM_OC5_SetConfig+0xb4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00f      	beq.n	800781a <TIM_OC5_SetConfig+0x7a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a16      	ldr	r2, [pc, #88]	; (8007858 <TIM_OC5_SetConfig+0xb8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00b      	beq.n	800781a <TIM_OC5_SetConfig+0x7a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a15      	ldr	r2, [pc, #84]	; (800785c <TIM_OC5_SetConfig+0xbc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d007      	beq.n	800781a <TIM_OC5_SetConfig+0x7a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a14      	ldr	r2, [pc, #80]	; (8007860 <TIM_OC5_SetConfig+0xc0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_OC5_SetConfig+0x7a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a13      	ldr	r2, [pc, #76]	; (8007864 <TIM_OC5_SetConfig+0xc4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d109      	bne.n	800782e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	621a      	str	r2, [r3, #32]
}
 8007848:	bf00      	nop
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40013400 	.word	0x40013400
 800785c:	40014000 	.word	0x40014000
 8007860:	40014400 	.word	0x40014400
 8007864:	40014800 	.word	0x40014800

08007868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	051b      	lsls	r3, r3, #20
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a18      	ldr	r2, [pc, #96]	; (8007920 <TIM_OC6_SetConfig+0xb8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00f      	beq.n	80078e4 <TIM_OC6_SetConfig+0x7c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a17      	ldr	r2, [pc, #92]	; (8007924 <TIM_OC6_SetConfig+0xbc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00b      	beq.n	80078e4 <TIM_OC6_SetConfig+0x7c>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a16      	ldr	r2, [pc, #88]	; (8007928 <TIM_OC6_SetConfig+0xc0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d007      	beq.n	80078e4 <TIM_OC6_SetConfig+0x7c>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a15      	ldr	r2, [pc, #84]	; (800792c <TIM_OC6_SetConfig+0xc4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC6_SetConfig+0x7c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a14      	ldr	r2, [pc, #80]	; (8007930 <TIM_OC6_SetConfig+0xc8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d109      	bne.n	80078f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40014000 	.word	0x40014000
 800792c:	40014400 	.word	0x40014400
 8007930:	40014800 	.word	0x40014800

08007934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	2201      	movs	r2, #1
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a1a      	ldr	r2, [r3, #32]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	43db      	mvns	r3, r3
 8007956:	401a      	ands	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a1a      	ldr	r2, [r3, #32]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	fa01 f303 	lsl.w	r3, r1, r3
 800796c:	431a      	orrs	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007994:	2302      	movs	r3, #2
 8007996:	e068      	b.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a2e      	ldr	r2, [pc, #184]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d004      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a2d      	ldr	r2, [pc, #180]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d108      	bne.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d01d      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0a:	d018      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1a      	ldr	r2, [pc, #104]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a18      	ldr	r2, [pc, #96]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a13      	ldr	r2, [pc, #76]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d10c      	bne.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40000800 	.word	0x40000800
 8007a88:	40000c00 	.word	0x40000c00
 8007a8c:	40014000 	.word	0x40014000

08007a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e040      	b.n	8007b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fa ff28 	bl	8002944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2224      	movs	r2, #36	; 0x24
 8007af8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0201 	bic.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f992 	bl	8007e34 <UART_SetConfig>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d101      	bne.n	8007b1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e022      	b.n	8007b60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fc3e 	bl	80083a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fcc5 	bl	80084e8 <UART_CheckIdleState>
 8007b5e:	4603      	mov	r3, r0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	4613      	mov	r3, r2
 8007b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	f040 8082 	bne.w	8007c86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_UART_Transmit+0x26>
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e07a      	b.n	8007c88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UART_Transmit+0x38>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e073      	b.n	8007c88 <HAL_UART_Transmit+0x120>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2221      	movs	r2, #33	; 0x21
 8007bb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bb6:	f7fb f903 	bl	8002dc0 <HAL_GetTick>
 8007bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	88fa      	ldrh	r2, [r7, #6]
 8007bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd4:	d108      	bne.n	8007be8 <HAL_UART_Transmit+0x80>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	e003      	b.n	8007bf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bec:	2300      	movs	r3, #0
 8007bee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007bf8:	e02d      	b.n	8007c56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2200      	movs	r2, #0
 8007c02:	2180      	movs	r1, #128	; 0x80
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fcb8 	bl	800857a <UART_WaitOnFlagUntilTimeout>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e039      	b.n	8007c88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	881a      	ldrh	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c26:	b292      	uxth	r2, r2
 8007c28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	e008      	b.n	8007c44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	781a      	ldrb	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	b292      	uxth	r2, r2
 8007c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	3301      	adds	r3, #1
 8007c42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1cb      	bne.n	8007bfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2140      	movs	r1, #64	; 0x40
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 fc84 	bl	800857a <UART_WaitOnFlagUntilTimeout>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e005      	b.n	8007c88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e000      	b.n	8007c88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3720      	adds	r7, #32
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	f040 80bf 	bne.w	8007e28 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_UART_Receive+0x26>
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e0b7      	b.n	8007e2a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_UART_Receive+0x38>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e0b0      	b.n	8007e2a <HAL_UART_Receive+0x19a>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2222      	movs	r2, #34	; 0x22
 8007cdc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ce4:	f7fb f86c 	bl	8002dc0 <HAL_GetTick>
 8007ce8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	88fa      	ldrh	r2, [r7, #6]
 8007cee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	88fa      	ldrh	r2, [r7, #6]
 8007cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d02:	d10e      	bne.n	8007d22 <HAL_UART_Receive+0x92>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <HAL_UART_Receive+0x88>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d16:	e02d      	b.n	8007d74 <HAL_UART_Receive+0xe4>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	22ff      	movs	r2, #255	; 0xff
 8007d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d20:	e028      	b.n	8007d74 <HAL_UART_Receive+0xe4>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10d      	bne.n	8007d46 <HAL_UART_Receive+0xb6>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <HAL_UART_Receive+0xac>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	22ff      	movs	r2, #255	; 0xff
 8007d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d3a:	e01b      	b.n	8007d74 <HAL_UART_Receive+0xe4>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	227f      	movs	r2, #127	; 0x7f
 8007d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d44:	e016      	b.n	8007d74 <HAL_UART_Receive+0xe4>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d4e:	d10d      	bne.n	8007d6c <HAL_UART_Receive+0xdc>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <HAL_UART_Receive+0xd2>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	227f      	movs	r2, #127	; 0x7f
 8007d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d60:	e008      	b.n	8007d74 <HAL_UART_Receive+0xe4>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	223f      	movs	r2, #63	; 0x3f
 8007d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d6a:	e003      	b.n	8007d74 <HAL_UART_Receive+0xe4>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d7a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d108      	bne.n	8007d98 <HAL_UART_Receive+0x108>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	e003      	b.n	8007da0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007da8:	e033      	b.n	8007e12 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2120      	movs	r1, #32
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fbe0 	bl	800857a <UART_WaitOnFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e032      	b.n	8007e2a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10c      	bne.n	8007de4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	8a7b      	ldrh	r3, [r7, #18]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	3302      	adds	r3, #2
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	e00d      	b.n	8007e00 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	8a7b      	ldrh	r3, [r7, #18]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	4013      	ands	r3, r2
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1c5      	bne.n	8007daa <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2220      	movs	r2, #32
 8007e22:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e000      	b.n	8007e2a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007e28:	2302      	movs	r3, #2
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3720      	adds	r7, #32
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e38:	b08a      	sub	sp, #40	; 0x28
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4ba4      	ldr	r3, [pc, #656]	; (80080f4 <UART_SetConfig+0x2c0>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a99      	ldr	r2, [pc, #612]	; (80080f8 <UART_SetConfig+0x2c4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a90      	ldr	r2, [pc, #576]	; (80080fc <UART_SetConfig+0x2c8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d126      	bne.n	8007f0c <UART_SetConfig+0xd8>
 8007ebe:	4b90      	ldr	r3, [pc, #576]	; (8008100 <UART_SetConfig+0x2cc>)
 8007ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d81b      	bhi.n	8007f04 <UART_SetConfig+0xd0>
 8007ecc:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <UART_SetConfig+0xa0>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007ee5 	.word	0x08007ee5
 8007ed8:	08007ef5 	.word	0x08007ef5
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	08007efd 	.word	0x08007efd
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eea:	e116      	b.n	800811a <UART_SetConfig+0x2e6>
 8007eec:	2302      	movs	r3, #2
 8007eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ef2:	e112      	b.n	800811a <UART_SetConfig+0x2e6>
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007efa:	e10e      	b.n	800811a <UART_SetConfig+0x2e6>
 8007efc:	2308      	movs	r3, #8
 8007efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f02:	e10a      	b.n	800811a <UART_SetConfig+0x2e6>
 8007f04:	2310      	movs	r3, #16
 8007f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f0a:	e106      	b.n	800811a <UART_SetConfig+0x2e6>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a7c      	ldr	r2, [pc, #496]	; (8008104 <UART_SetConfig+0x2d0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d138      	bne.n	8007f88 <UART_SetConfig+0x154>
 8007f16:	4b7a      	ldr	r3, [pc, #488]	; (8008100 <UART_SetConfig+0x2cc>)
 8007f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1c:	f003 030c 	and.w	r3, r3, #12
 8007f20:	2b0c      	cmp	r3, #12
 8007f22:	d82d      	bhi.n	8007f80 <UART_SetConfig+0x14c>
 8007f24:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <UART_SetConfig+0xf8>)
 8007f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2a:	bf00      	nop
 8007f2c:	08007f61 	.word	0x08007f61
 8007f30:	08007f81 	.word	0x08007f81
 8007f34:	08007f81 	.word	0x08007f81
 8007f38:	08007f81 	.word	0x08007f81
 8007f3c:	08007f71 	.word	0x08007f71
 8007f40:	08007f81 	.word	0x08007f81
 8007f44:	08007f81 	.word	0x08007f81
 8007f48:	08007f81 	.word	0x08007f81
 8007f4c:	08007f69 	.word	0x08007f69
 8007f50:	08007f81 	.word	0x08007f81
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	08007f81 	.word	0x08007f81
 8007f5c:	08007f79 	.word	0x08007f79
 8007f60:	2300      	movs	r3, #0
 8007f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f66:	e0d8      	b.n	800811a <UART_SetConfig+0x2e6>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f6e:	e0d4      	b.n	800811a <UART_SetConfig+0x2e6>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f76:	e0d0      	b.n	800811a <UART_SetConfig+0x2e6>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f7e:	e0cc      	b.n	800811a <UART_SetConfig+0x2e6>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f86:	e0c8      	b.n	800811a <UART_SetConfig+0x2e6>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a5e      	ldr	r2, [pc, #376]	; (8008108 <UART_SetConfig+0x2d4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d125      	bne.n	8007fde <UART_SetConfig+0x1aa>
 8007f92:	4b5b      	ldr	r3, [pc, #364]	; (8008100 <UART_SetConfig+0x2cc>)
 8007f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f9c:	2b30      	cmp	r3, #48	; 0x30
 8007f9e:	d016      	beq.n	8007fce <UART_SetConfig+0x19a>
 8007fa0:	2b30      	cmp	r3, #48	; 0x30
 8007fa2:	d818      	bhi.n	8007fd6 <UART_SetConfig+0x1a2>
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d00a      	beq.n	8007fbe <UART_SetConfig+0x18a>
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d814      	bhi.n	8007fd6 <UART_SetConfig+0x1a2>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <UART_SetConfig+0x182>
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d008      	beq.n	8007fc6 <UART_SetConfig+0x192>
 8007fb4:	e00f      	b.n	8007fd6 <UART_SetConfig+0x1a2>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fbc:	e0ad      	b.n	800811a <UART_SetConfig+0x2e6>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fc4:	e0a9      	b.n	800811a <UART_SetConfig+0x2e6>
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fcc:	e0a5      	b.n	800811a <UART_SetConfig+0x2e6>
 8007fce:	2308      	movs	r3, #8
 8007fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd4:	e0a1      	b.n	800811a <UART_SetConfig+0x2e6>
 8007fd6:	2310      	movs	r3, #16
 8007fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fdc:	e09d      	b.n	800811a <UART_SetConfig+0x2e6>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a4a      	ldr	r2, [pc, #296]	; (800810c <UART_SetConfig+0x2d8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d125      	bne.n	8008034 <UART_SetConfig+0x200>
 8007fe8:	4b45      	ldr	r3, [pc, #276]	; (8008100 <UART_SetConfig+0x2cc>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ff4:	d016      	beq.n	8008024 <UART_SetConfig+0x1f0>
 8007ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ff8:	d818      	bhi.n	800802c <UART_SetConfig+0x1f8>
 8007ffa:	2b80      	cmp	r3, #128	; 0x80
 8007ffc:	d00a      	beq.n	8008014 <UART_SetConfig+0x1e0>
 8007ffe:	2b80      	cmp	r3, #128	; 0x80
 8008000:	d814      	bhi.n	800802c <UART_SetConfig+0x1f8>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <UART_SetConfig+0x1d8>
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d008      	beq.n	800801c <UART_SetConfig+0x1e8>
 800800a:	e00f      	b.n	800802c <UART_SetConfig+0x1f8>
 800800c:	2300      	movs	r3, #0
 800800e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008012:	e082      	b.n	800811a <UART_SetConfig+0x2e6>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800801a:	e07e      	b.n	800811a <UART_SetConfig+0x2e6>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008022:	e07a      	b.n	800811a <UART_SetConfig+0x2e6>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802a:	e076      	b.n	800811a <UART_SetConfig+0x2e6>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008032:	e072      	b.n	800811a <UART_SetConfig+0x2e6>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a35      	ldr	r2, [pc, #212]	; (8008110 <UART_SetConfig+0x2dc>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d12a      	bne.n	8008094 <UART_SetConfig+0x260>
 800803e:	4b30      	ldr	r3, [pc, #192]	; (8008100 <UART_SetConfig+0x2cc>)
 8008040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800804c:	d01a      	beq.n	8008084 <UART_SetConfig+0x250>
 800804e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008052:	d81b      	bhi.n	800808c <UART_SetConfig+0x258>
 8008054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008058:	d00c      	beq.n	8008074 <UART_SetConfig+0x240>
 800805a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800805e:	d815      	bhi.n	800808c <UART_SetConfig+0x258>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <UART_SetConfig+0x238>
 8008064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008068:	d008      	beq.n	800807c <UART_SetConfig+0x248>
 800806a:	e00f      	b.n	800808c <UART_SetConfig+0x258>
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008072:	e052      	b.n	800811a <UART_SetConfig+0x2e6>
 8008074:	2302      	movs	r3, #2
 8008076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800807a:	e04e      	b.n	800811a <UART_SetConfig+0x2e6>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008082:	e04a      	b.n	800811a <UART_SetConfig+0x2e6>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800808a:	e046      	b.n	800811a <UART_SetConfig+0x2e6>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008092:	e042      	b.n	800811a <UART_SetConfig+0x2e6>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <UART_SetConfig+0x2c4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d13a      	bne.n	8008114 <UART_SetConfig+0x2e0>
 800809e:	4b18      	ldr	r3, [pc, #96]	; (8008100 <UART_SetConfig+0x2cc>)
 80080a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080ac:	d01a      	beq.n	80080e4 <UART_SetConfig+0x2b0>
 80080ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080b2:	d81b      	bhi.n	80080ec <UART_SetConfig+0x2b8>
 80080b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b8:	d00c      	beq.n	80080d4 <UART_SetConfig+0x2a0>
 80080ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080be:	d815      	bhi.n	80080ec <UART_SetConfig+0x2b8>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <UART_SetConfig+0x298>
 80080c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c8:	d008      	beq.n	80080dc <UART_SetConfig+0x2a8>
 80080ca:	e00f      	b.n	80080ec <UART_SetConfig+0x2b8>
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d2:	e022      	b.n	800811a <UART_SetConfig+0x2e6>
 80080d4:	2302      	movs	r3, #2
 80080d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080da:	e01e      	b.n	800811a <UART_SetConfig+0x2e6>
 80080dc:	2304      	movs	r3, #4
 80080de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e2:	e01a      	b.n	800811a <UART_SetConfig+0x2e6>
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ea:	e016      	b.n	800811a <UART_SetConfig+0x2e6>
 80080ec:	2310      	movs	r3, #16
 80080ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080f2:	e012      	b.n	800811a <UART_SetConfig+0x2e6>
 80080f4:	efff69f3 	.word	0xefff69f3
 80080f8:	40008000 	.word	0x40008000
 80080fc:	40013800 	.word	0x40013800
 8008100:	40021000 	.word	0x40021000
 8008104:	40004400 	.word	0x40004400
 8008108:	40004800 	.word	0x40004800
 800810c:	40004c00 	.word	0x40004c00
 8008110:	40005000 	.word	0x40005000
 8008114:	2310      	movs	r3, #16
 8008116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a9f      	ldr	r2, [pc, #636]	; (800839c <UART_SetConfig+0x568>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d17a      	bne.n	800821a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008128:	2b08      	cmp	r3, #8
 800812a:	d824      	bhi.n	8008176 <UART_SetConfig+0x342>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <UART_SetConfig+0x300>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008159 	.word	0x08008159
 8008138:	08008177 	.word	0x08008177
 800813c:	08008161 	.word	0x08008161
 8008140:	08008177 	.word	0x08008177
 8008144:	08008167 	.word	0x08008167
 8008148:	08008177 	.word	0x08008177
 800814c:	08008177 	.word	0x08008177
 8008150:	08008177 	.word	0x08008177
 8008154:	0800816f 	.word	0x0800816f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008158:	f7fd fd8c 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 800815c:	61f8      	str	r0, [r7, #28]
        break;
 800815e:	e010      	b.n	8008182 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008160:	4b8f      	ldr	r3, [pc, #572]	; (80083a0 <UART_SetConfig+0x56c>)
 8008162:	61fb      	str	r3, [r7, #28]
        break;
 8008164:	e00d      	b.n	8008182 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008166:	f7fd fced 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 800816a:	61f8      	str	r0, [r7, #28]
        break;
 800816c:	e009      	b.n	8008182 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800816e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008172:	61fb      	str	r3, [r7, #28]
        break;
 8008174:	e005      	b.n	8008182 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008180:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80fb 	beq.w	8008380 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	4413      	add	r3, r2
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	429a      	cmp	r2, r3
 8008198:	d305      	bcc.n	80081a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d903      	bls.n	80081ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081ac:	e0e8      	b.n	8008380 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	2200      	movs	r2, #0
 80081b2:	461c      	mov	r4, r3
 80081b4:	4615      	mov	r5, r2
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	022b      	lsls	r3, r5, #8
 80081c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80081c4:	0222      	lsls	r2, r4, #8
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	6849      	ldr	r1, [r1, #4]
 80081ca:	0849      	lsrs	r1, r1, #1
 80081cc:	2000      	movs	r0, #0
 80081ce:	4688      	mov	r8, r1
 80081d0:	4681      	mov	r9, r0
 80081d2:	eb12 0a08 	adds.w	sl, r2, r8
 80081d6:	eb43 0b09 	adc.w	fp, r3, r9
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e8:	4650      	mov	r0, sl
 80081ea:	4659      	mov	r1, fp
 80081ec:	f7f8 fcec 	bl	8000bc8 <__aeabi_uldivmod>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4613      	mov	r3, r2
 80081f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081fe:	d308      	bcc.n	8008212 <UART_SetConfig+0x3de>
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008206:	d204      	bcs.n	8008212 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	60da      	str	r2, [r3, #12]
 8008210:	e0b6      	b.n	8008380 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008218:	e0b2      	b.n	8008380 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008222:	d15e      	bne.n	80082e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008228:	2b08      	cmp	r3, #8
 800822a:	d828      	bhi.n	800827e <UART_SetConfig+0x44a>
 800822c:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <UART_SetConfig+0x400>)
 800822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008232:	bf00      	nop
 8008234:	08008259 	.word	0x08008259
 8008238:	08008261 	.word	0x08008261
 800823c:	08008269 	.word	0x08008269
 8008240:	0800827f 	.word	0x0800827f
 8008244:	0800826f 	.word	0x0800826f
 8008248:	0800827f 	.word	0x0800827f
 800824c:	0800827f 	.word	0x0800827f
 8008250:	0800827f 	.word	0x0800827f
 8008254:	08008277 	.word	0x08008277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008258:	f7fd fd0c 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 800825c:	61f8      	str	r0, [r7, #28]
        break;
 800825e:	e014      	b.n	800828a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008260:	f7fd fd1e 	bl	8005ca0 <HAL_RCC_GetPCLK2Freq>
 8008264:	61f8      	str	r0, [r7, #28]
        break;
 8008266:	e010      	b.n	800828a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008268:	4b4d      	ldr	r3, [pc, #308]	; (80083a0 <UART_SetConfig+0x56c>)
 800826a:	61fb      	str	r3, [r7, #28]
        break;
 800826c:	e00d      	b.n	800828a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826e:	f7fd fc69 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8008272:	61f8      	str	r0, [r7, #28]
        break;
 8008274:	e009      	b.n	800828a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827a:	61fb      	str	r3, [r7, #28]
        break;
 800827c:	e005      	b.n	800828a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d077      	beq.n	8008380 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	005a      	lsls	r2, r3, #1
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	441a      	add	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b0f      	cmp	r3, #15
 80082aa:	d916      	bls.n	80082da <UART_SetConfig+0x4a6>
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b2:	d212      	bcs.n	80082da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f023 030f 	bic.w	r3, r3, #15
 80082bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	8afb      	ldrh	r3, [r7, #22]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	8afa      	ldrh	r2, [r7, #22]
 80082d6:	60da      	str	r2, [r3, #12]
 80082d8:	e052      	b.n	8008380 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082e0:	e04e      	b.n	8008380 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d827      	bhi.n	800833a <UART_SetConfig+0x506>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <UART_SetConfig+0x4bc>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008315 	.word	0x08008315
 80082f4:	0800831d 	.word	0x0800831d
 80082f8:	08008325 	.word	0x08008325
 80082fc:	0800833b 	.word	0x0800833b
 8008300:	0800832b 	.word	0x0800832b
 8008304:	0800833b 	.word	0x0800833b
 8008308:	0800833b 	.word	0x0800833b
 800830c:	0800833b 	.word	0x0800833b
 8008310:	08008333 	.word	0x08008333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008314:	f7fd fcae 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8008318:	61f8      	str	r0, [r7, #28]
        break;
 800831a:	e014      	b.n	8008346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800831c:	f7fd fcc0 	bl	8005ca0 <HAL_RCC_GetPCLK2Freq>
 8008320:	61f8      	str	r0, [r7, #28]
        break;
 8008322:	e010      	b.n	8008346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008324:	4b1e      	ldr	r3, [pc, #120]	; (80083a0 <UART_SetConfig+0x56c>)
 8008326:	61fb      	str	r3, [r7, #28]
        break;
 8008328:	e00d      	b.n	8008346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800832a:	f7fd fc0b 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 800832e:	61f8      	str	r0, [r7, #28]
        break;
 8008330:	e009      	b.n	8008346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008336:	61fb      	str	r3, [r7, #28]
        break;
 8008338:	e005      	b.n	8008346 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008344:	bf00      	nop
    }

    if (pclk != 0U)
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d019      	beq.n	8008380 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	085a      	lsrs	r2, r3, #1
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	fbb2 f3f3 	udiv	r3, r2, r3
 800835e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2b0f      	cmp	r3, #15
 8008364:	d909      	bls.n	800837a <UART_SetConfig+0x546>
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836c:	d205      	bcs.n	800837a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60da      	str	r2, [r3, #12]
 8008378:	e002      	b.n	8008380 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800838c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008390:	4618      	mov	r0, r3
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800839a:	bf00      	nop
 800839c:	40008000 	.word	0x40008000
 80083a0:	00f42400 	.word	0x00f42400

080083a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	f003 0310 	and.w	r3, r3, #16
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01a      	beq.n	80084ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a2:	d10a      	bne.n	80084ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	605a      	str	r2, [r3, #4]
  }
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084f8:	f7fa fc62 	bl	8002dc0 <HAL_GetTick>
 80084fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b08      	cmp	r3, #8
 800850a:	d10e      	bne.n	800852a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800850c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f82d 	bl	800857a <UART_WaitOnFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e023      	b.n	8008572 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b04      	cmp	r3, #4
 8008536:	d10e      	bne.n	8008556 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f817 	bl	800857a <UART_WaitOnFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e00d      	b.n	8008572 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b09c      	sub	sp, #112	; 0x70
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858a:	e0a5      	b.n	80086d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800858c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	f000 80a1 	beq.w	80086d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008596:	f7fa fc13 	bl	8002dc0 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d302      	bcc.n	80085ac <UART_WaitOnFlagUntilTimeout+0x32>
 80085a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d13e      	bne.n	800862a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085c0:	667b      	str	r3, [r7, #100]	; 0x64
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e6      	bne.n	80085ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	663b      	str	r3, [r7, #96]	; 0x60
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8008600:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800860c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e5      	bne.n	80085de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2220      	movs	r2, #32
 800861c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e067      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d04f      	beq.n	80086d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008646:	d147      	bne.n	80086d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008650:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
 8008672:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e6      	bne.n	8008652 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	613b      	str	r3, [r7, #16]
   return(result);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	66bb      	str	r3, [r7, #104]	; 0x68
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3308      	adds	r3, #8
 80086a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086a4:	623a      	str	r2, [r7, #32]
 80086a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	69f9      	ldr	r1, [r7, #28]
 80086aa:	6a3a      	ldr	r2, [r7, #32]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e5      	bne.n	8008684 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2220      	movs	r2, #32
 80086c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e010      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69da      	ldr	r2, [r3, #28]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4013      	ands	r3, r2
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	bf0c      	ite	eq
 80086e8:	2301      	moveq	r3, #1
 80086ea:	2300      	movne	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	461a      	mov	r2, r3
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	f43f af4a 	beq.w	800858c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3770      	adds	r7, #112	; 0x70
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <atoi>:
 8008702:	220a      	movs	r2, #10
 8008704:	2100      	movs	r1, #0
 8008706:	f000 be41 	b.w	800938c <strtol>
	...

0800870c <__errno>:
 800870c:	4b01      	ldr	r3, [pc, #4]	; (8008714 <__errno+0x8>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	2000002c 	.word	0x2000002c

08008718 <__libc_init_array>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	4d0d      	ldr	r5, [pc, #52]	; (8008750 <__libc_init_array+0x38>)
 800871c:	4c0d      	ldr	r4, [pc, #52]	; (8008754 <__libc_init_array+0x3c>)
 800871e:	1b64      	subs	r4, r4, r5
 8008720:	10a4      	asrs	r4, r4, #2
 8008722:	2600      	movs	r6, #0
 8008724:	42a6      	cmp	r6, r4
 8008726:	d109      	bne.n	800873c <__libc_init_array+0x24>
 8008728:	4d0b      	ldr	r5, [pc, #44]	; (8008758 <__libc_init_array+0x40>)
 800872a:	4c0c      	ldr	r4, [pc, #48]	; (800875c <__libc_init_array+0x44>)
 800872c:	f003 fad6 	bl	800bcdc <_init>
 8008730:	1b64      	subs	r4, r4, r5
 8008732:	10a4      	asrs	r4, r4, #2
 8008734:	2600      	movs	r6, #0
 8008736:	42a6      	cmp	r6, r4
 8008738:	d105      	bne.n	8008746 <__libc_init_array+0x2e>
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008740:	4798      	blx	r3
 8008742:	3601      	adds	r6, #1
 8008744:	e7ee      	b.n	8008724 <__libc_init_array+0xc>
 8008746:	f855 3b04 	ldr.w	r3, [r5], #4
 800874a:	4798      	blx	r3
 800874c:	3601      	adds	r6, #1
 800874e:	e7f2      	b.n	8008736 <__libc_init_array+0x1e>
 8008750:	0800c348 	.word	0x0800c348
 8008754:	0800c348 	.word	0x0800c348
 8008758:	0800c348 	.word	0x0800c348
 800875c:	0800c34c 	.word	0x0800c34c

08008760 <memcpy>:
 8008760:	440a      	add	r2, r1
 8008762:	4291      	cmp	r1, r2
 8008764:	f100 33ff 	add.w	r3, r0, #4294967295
 8008768:	d100      	bne.n	800876c <memcpy+0xc>
 800876a:	4770      	bx	lr
 800876c:	b510      	push	{r4, lr}
 800876e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008776:	4291      	cmp	r1, r2
 8008778:	d1f9      	bne.n	800876e <memcpy+0xe>
 800877a:	bd10      	pop	{r4, pc}

0800877c <memset>:
 800877c:	4402      	add	r2, r0
 800877e:	4603      	mov	r3, r0
 8008780:	4293      	cmp	r3, r2
 8008782:	d100      	bne.n	8008786 <memset+0xa>
 8008784:	4770      	bx	lr
 8008786:	f803 1b01 	strb.w	r1, [r3], #1
 800878a:	e7f9      	b.n	8008780 <memset+0x4>

0800878c <__cvt>:
 800878c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	ec55 4b10 	vmov	r4, r5, d0
 8008794:	2d00      	cmp	r5, #0
 8008796:	460e      	mov	r6, r1
 8008798:	4619      	mov	r1, r3
 800879a:	462b      	mov	r3, r5
 800879c:	bfbb      	ittet	lt
 800879e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087a2:	461d      	movlt	r5, r3
 80087a4:	2300      	movge	r3, #0
 80087a6:	232d      	movlt	r3, #45	; 0x2d
 80087a8:	700b      	strb	r3, [r1, #0]
 80087aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087b0:	4691      	mov	r9, r2
 80087b2:	f023 0820 	bic.w	r8, r3, #32
 80087b6:	bfbc      	itt	lt
 80087b8:	4622      	movlt	r2, r4
 80087ba:	4614      	movlt	r4, r2
 80087bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087c0:	d005      	beq.n	80087ce <__cvt+0x42>
 80087c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087c6:	d100      	bne.n	80087ca <__cvt+0x3e>
 80087c8:	3601      	adds	r6, #1
 80087ca:	2102      	movs	r1, #2
 80087cc:	e000      	b.n	80087d0 <__cvt+0x44>
 80087ce:	2103      	movs	r1, #3
 80087d0:	ab03      	add	r3, sp, #12
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	ab02      	add	r3, sp, #8
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	ec45 4b10 	vmov	d0, r4, r5
 80087dc:	4653      	mov	r3, sl
 80087de:	4632      	mov	r2, r6
 80087e0:	f000 ff4e 	bl	8009680 <_dtoa_r>
 80087e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087e8:	4607      	mov	r7, r0
 80087ea:	d102      	bne.n	80087f2 <__cvt+0x66>
 80087ec:	f019 0f01 	tst.w	r9, #1
 80087f0:	d022      	beq.n	8008838 <__cvt+0xac>
 80087f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087f6:	eb07 0906 	add.w	r9, r7, r6
 80087fa:	d110      	bne.n	800881e <__cvt+0x92>
 80087fc:	783b      	ldrb	r3, [r7, #0]
 80087fe:	2b30      	cmp	r3, #48	; 0x30
 8008800:	d10a      	bne.n	8008818 <__cvt+0x8c>
 8008802:	2200      	movs	r2, #0
 8008804:	2300      	movs	r3, #0
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f8 f96d 	bl	8000ae8 <__aeabi_dcmpeq>
 800880e:	b918      	cbnz	r0, 8008818 <__cvt+0x8c>
 8008810:	f1c6 0601 	rsb	r6, r6, #1
 8008814:	f8ca 6000 	str.w	r6, [sl]
 8008818:	f8da 3000 	ldr.w	r3, [sl]
 800881c:	4499      	add	r9, r3
 800881e:	2200      	movs	r2, #0
 8008820:	2300      	movs	r3, #0
 8008822:	4620      	mov	r0, r4
 8008824:	4629      	mov	r1, r5
 8008826:	f7f8 f95f 	bl	8000ae8 <__aeabi_dcmpeq>
 800882a:	b108      	cbz	r0, 8008830 <__cvt+0xa4>
 800882c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008830:	2230      	movs	r2, #48	; 0x30
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	454b      	cmp	r3, r9
 8008836:	d307      	bcc.n	8008848 <__cvt+0xbc>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800883c:	1bdb      	subs	r3, r3, r7
 800883e:	4638      	mov	r0, r7
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	b004      	add	sp, #16
 8008844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008848:	1c59      	adds	r1, r3, #1
 800884a:	9103      	str	r1, [sp, #12]
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e7f0      	b.n	8008832 <__cvt+0xa6>

08008850 <__exponent>:
 8008850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008852:	4603      	mov	r3, r0
 8008854:	2900      	cmp	r1, #0
 8008856:	bfb8      	it	lt
 8008858:	4249      	neglt	r1, r1
 800885a:	f803 2b02 	strb.w	r2, [r3], #2
 800885e:	bfb4      	ite	lt
 8008860:	222d      	movlt	r2, #45	; 0x2d
 8008862:	222b      	movge	r2, #43	; 0x2b
 8008864:	2909      	cmp	r1, #9
 8008866:	7042      	strb	r2, [r0, #1]
 8008868:	dd2a      	ble.n	80088c0 <__exponent+0x70>
 800886a:	f10d 0407 	add.w	r4, sp, #7
 800886e:	46a4      	mov	ip, r4
 8008870:	270a      	movs	r7, #10
 8008872:	46a6      	mov	lr, r4
 8008874:	460a      	mov	r2, r1
 8008876:	fb91 f6f7 	sdiv	r6, r1, r7
 800887a:	fb07 1516 	mls	r5, r7, r6, r1
 800887e:	3530      	adds	r5, #48	; 0x30
 8008880:	2a63      	cmp	r2, #99	; 0x63
 8008882:	f104 34ff 	add.w	r4, r4, #4294967295
 8008886:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800888a:	4631      	mov	r1, r6
 800888c:	dcf1      	bgt.n	8008872 <__exponent+0x22>
 800888e:	3130      	adds	r1, #48	; 0x30
 8008890:	f1ae 0502 	sub.w	r5, lr, #2
 8008894:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008898:	1c44      	adds	r4, r0, #1
 800889a:	4629      	mov	r1, r5
 800889c:	4561      	cmp	r1, ip
 800889e:	d30a      	bcc.n	80088b6 <__exponent+0x66>
 80088a0:	f10d 0209 	add.w	r2, sp, #9
 80088a4:	eba2 020e 	sub.w	r2, r2, lr
 80088a8:	4565      	cmp	r5, ip
 80088aa:	bf88      	it	hi
 80088ac:	2200      	movhi	r2, #0
 80088ae:	4413      	add	r3, r2
 80088b0:	1a18      	subs	r0, r3, r0
 80088b2:	b003      	add	sp, #12
 80088b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80088be:	e7ed      	b.n	800889c <__exponent+0x4c>
 80088c0:	2330      	movs	r3, #48	; 0x30
 80088c2:	3130      	adds	r1, #48	; 0x30
 80088c4:	7083      	strb	r3, [r0, #2]
 80088c6:	70c1      	strb	r1, [r0, #3]
 80088c8:	1d03      	adds	r3, r0, #4
 80088ca:	e7f1      	b.n	80088b0 <__exponent+0x60>

080088cc <_printf_float>:
 80088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	ed2d 8b02 	vpush	{d8}
 80088d4:	b08d      	sub	sp, #52	; 0x34
 80088d6:	460c      	mov	r4, r1
 80088d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80088dc:	4616      	mov	r6, r2
 80088de:	461f      	mov	r7, r3
 80088e0:	4605      	mov	r5, r0
 80088e2:	f001 fe73 	bl	800a5cc <_localeconv_r>
 80088e6:	f8d0 a000 	ldr.w	sl, [r0]
 80088ea:	4650      	mov	r0, sl
 80088ec:	f7f7 fc7a 	bl	80001e4 <strlen>
 80088f0:	2300      	movs	r3, #0
 80088f2:	930a      	str	r3, [sp, #40]	; 0x28
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	9305      	str	r3, [sp, #20]
 80088f8:	f8d8 3000 	ldr.w	r3, [r8]
 80088fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008900:	3307      	adds	r3, #7
 8008902:	f023 0307 	bic.w	r3, r3, #7
 8008906:	f103 0208 	add.w	r2, r3, #8
 800890a:	f8c8 2000 	str.w	r2, [r8]
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008916:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800891a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	f8cd 8018 	str.w	r8, [sp, #24]
 8008924:	ee08 0a10 	vmov	s16, r0
 8008928:	4b9f      	ldr	r3, [pc, #636]	; (8008ba8 <_printf_float+0x2dc>)
 800892a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800892e:	f04f 32ff 	mov.w	r2, #4294967295
 8008932:	f7f8 f90b 	bl	8000b4c <__aeabi_dcmpun>
 8008936:	bb88      	cbnz	r0, 800899c <_printf_float+0xd0>
 8008938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800893c:	4b9a      	ldr	r3, [pc, #616]	; (8008ba8 <_printf_float+0x2dc>)
 800893e:	f04f 32ff 	mov.w	r2, #4294967295
 8008942:	f7f8 f8e5 	bl	8000b10 <__aeabi_dcmple>
 8008946:	bb48      	cbnz	r0, 800899c <_printf_float+0xd0>
 8008948:	2200      	movs	r2, #0
 800894a:	2300      	movs	r3, #0
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	f7f8 f8d4 	bl	8000afc <__aeabi_dcmplt>
 8008954:	b110      	cbz	r0, 800895c <_printf_float+0x90>
 8008956:	232d      	movs	r3, #45	; 0x2d
 8008958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800895c:	4b93      	ldr	r3, [pc, #588]	; (8008bac <_printf_float+0x2e0>)
 800895e:	4894      	ldr	r0, [pc, #592]	; (8008bb0 <_printf_float+0x2e4>)
 8008960:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008964:	bf94      	ite	ls
 8008966:	4698      	movls	r8, r3
 8008968:	4680      	movhi	r8, r0
 800896a:	2303      	movs	r3, #3
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	f023 0204 	bic.w	r2, r3, #4
 8008974:	6022      	str	r2, [r4, #0]
 8008976:	f04f 0900 	mov.w	r9, #0
 800897a:	9700      	str	r7, [sp, #0]
 800897c:	4633      	mov	r3, r6
 800897e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008980:	4621      	mov	r1, r4
 8008982:	4628      	mov	r0, r5
 8008984:	f000 f9d8 	bl	8008d38 <_printf_common>
 8008988:	3001      	adds	r0, #1
 800898a:	f040 8090 	bne.w	8008aae <_printf_float+0x1e2>
 800898e:	f04f 30ff 	mov.w	r0, #4294967295
 8008992:	b00d      	add	sp, #52	; 0x34
 8008994:	ecbd 8b02 	vpop	{d8}
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	4642      	mov	r2, r8
 800899e:	464b      	mov	r3, r9
 80089a0:	4640      	mov	r0, r8
 80089a2:	4649      	mov	r1, r9
 80089a4:	f7f8 f8d2 	bl	8000b4c <__aeabi_dcmpun>
 80089a8:	b140      	cbz	r0, 80089bc <_printf_float+0xf0>
 80089aa:	464b      	mov	r3, r9
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bfbc      	itt	lt
 80089b0:	232d      	movlt	r3, #45	; 0x2d
 80089b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089b6:	487f      	ldr	r0, [pc, #508]	; (8008bb4 <_printf_float+0x2e8>)
 80089b8:	4b7f      	ldr	r3, [pc, #508]	; (8008bb8 <_printf_float+0x2ec>)
 80089ba:	e7d1      	b.n	8008960 <_printf_float+0x94>
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089c2:	9206      	str	r2, [sp, #24]
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	d13f      	bne.n	8008a48 <_printf_float+0x17c>
 80089c8:	2306      	movs	r3, #6
 80089ca:	6063      	str	r3, [r4, #4]
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	6861      	ldr	r1, [r4, #4]
 80089d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80089d4:	2300      	movs	r3, #0
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	ab0a      	add	r3, sp, #40	; 0x28
 80089da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80089de:	ab09      	add	r3, sp, #36	; 0x24
 80089e0:	ec49 8b10 	vmov	d0, r8, r9
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089ec:	4628      	mov	r0, r5
 80089ee:	f7ff fecd 	bl	800878c <__cvt>
 80089f2:	9b06      	ldr	r3, [sp, #24]
 80089f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f6:	2b47      	cmp	r3, #71	; 0x47
 80089f8:	4680      	mov	r8, r0
 80089fa:	d108      	bne.n	8008a0e <_printf_float+0x142>
 80089fc:	1cc8      	adds	r0, r1, #3
 80089fe:	db02      	blt.n	8008a06 <_printf_float+0x13a>
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	4299      	cmp	r1, r3
 8008a04:	dd41      	ble.n	8008a8a <_printf_float+0x1be>
 8008a06:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a0a:	fa5f fb8b 	uxtb.w	fp, fp
 8008a0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a12:	d820      	bhi.n	8008a56 <_printf_float+0x18a>
 8008a14:	3901      	subs	r1, #1
 8008a16:	465a      	mov	r2, fp
 8008a18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8008a1e:	f7ff ff17 	bl	8008850 <__exponent>
 8008a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a24:	1813      	adds	r3, r2, r0
 8008a26:	2a01      	cmp	r2, #1
 8008a28:	4681      	mov	r9, r0
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	dc02      	bgt.n	8008a34 <_printf_float+0x168>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	07d2      	lsls	r2, r2, #31
 8008a32:	d501      	bpl.n	8008a38 <_printf_float+0x16c>
 8008a34:	3301      	adds	r3, #1
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d09c      	beq.n	800897a <_printf_float+0xae>
 8008a40:	232d      	movs	r3, #45	; 0x2d
 8008a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a46:	e798      	b.n	800897a <_printf_float+0xae>
 8008a48:	9a06      	ldr	r2, [sp, #24]
 8008a4a:	2a47      	cmp	r2, #71	; 0x47
 8008a4c:	d1be      	bne.n	80089cc <_printf_float+0x100>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1bc      	bne.n	80089cc <_printf_float+0x100>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e7b9      	b.n	80089ca <_printf_float+0xfe>
 8008a56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a5a:	d118      	bne.n	8008a8e <_printf_float+0x1c2>
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	6863      	ldr	r3, [r4, #4]
 8008a60:	dd0b      	ble.n	8008a7a <_printf_float+0x1ae>
 8008a62:	6121      	str	r1, [r4, #16]
 8008a64:	b913      	cbnz	r3, 8008a6c <_printf_float+0x1a0>
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	07d0      	lsls	r0, r2, #31
 8008a6a:	d502      	bpl.n	8008a72 <_printf_float+0x1a6>
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	440b      	add	r3, r1
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a74:	f04f 0900 	mov.w	r9, #0
 8008a78:	e7de      	b.n	8008a38 <_printf_float+0x16c>
 8008a7a:	b913      	cbnz	r3, 8008a82 <_printf_float+0x1b6>
 8008a7c:	6822      	ldr	r2, [r4, #0]
 8008a7e:	07d2      	lsls	r2, r2, #31
 8008a80:	d501      	bpl.n	8008a86 <_printf_float+0x1ba>
 8008a82:	3302      	adds	r3, #2
 8008a84:	e7f4      	b.n	8008a70 <_printf_float+0x1a4>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e7f2      	b.n	8008a70 <_printf_float+0x1a4>
 8008a8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a90:	4299      	cmp	r1, r3
 8008a92:	db05      	blt.n	8008aa0 <_printf_float+0x1d4>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	6121      	str	r1, [r4, #16]
 8008a98:	07d8      	lsls	r0, r3, #31
 8008a9a:	d5ea      	bpl.n	8008a72 <_printf_float+0x1a6>
 8008a9c:	1c4b      	adds	r3, r1, #1
 8008a9e:	e7e7      	b.n	8008a70 <_printf_float+0x1a4>
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	bfd4      	ite	le
 8008aa4:	f1c1 0202 	rsble	r2, r1, #2
 8008aa8:	2201      	movgt	r2, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	e7e0      	b.n	8008a70 <_printf_float+0x1a4>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	055a      	lsls	r2, r3, #21
 8008ab2:	d407      	bmi.n	8008ac4 <_printf_float+0x1f8>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	4642      	mov	r2, r8
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d12c      	bne.n	8008b1c <_printf_float+0x250>
 8008ac2:	e764      	b.n	800898e <_printf_float+0xc2>
 8008ac4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ac8:	f240 80e0 	bls.w	8008c8c <_printf_float+0x3c0>
 8008acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f7f8 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d034      	beq.n	8008b46 <_printf_float+0x27a>
 8008adc:	4a37      	ldr	r2, [pc, #220]	; (8008bbc <_printf_float+0x2f0>)
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	f43f af51 	beq.w	800898e <_printf_float+0xc2>
 8008aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008af0:	429a      	cmp	r2, r3
 8008af2:	db02      	blt.n	8008afa <_printf_float+0x22e>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	07d8      	lsls	r0, r3, #31
 8008af8:	d510      	bpl.n	8008b1c <_printf_float+0x250>
 8008afa:	ee18 3a10 	vmov	r3, s16
 8008afe:	4652      	mov	r2, sl
 8008b00:	4631      	mov	r1, r6
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f af41 	beq.w	800898e <_printf_float+0xc2>
 8008b0c:	f04f 0800 	mov.w	r8, #0
 8008b10:	f104 091a 	add.w	r9, r4, #26
 8008b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b16:	3b01      	subs	r3, #1
 8008b18:	4543      	cmp	r3, r8
 8008b1a:	dc09      	bgt.n	8008b30 <_printf_float+0x264>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	079b      	lsls	r3, r3, #30
 8008b20:	f100 8105 	bmi.w	8008d2e <_printf_float+0x462>
 8008b24:	68e0      	ldr	r0, [r4, #12]
 8008b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b28:	4298      	cmp	r0, r3
 8008b2a:	bfb8      	it	lt
 8008b2c:	4618      	movlt	r0, r3
 8008b2e:	e730      	b.n	8008992 <_printf_float+0xc6>
 8008b30:	2301      	movs	r3, #1
 8008b32:	464a      	mov	r2, r9
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	f43f af27 	beq.w	800898e <_printf_float+0xc2>
 8008b40:	f108 0801 	add.w	r8, r8, #1
 8008b44:	e7e6      	b.n	8008b14 <_printf_float+0x248>
 8008b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	dc39      	bgt.n	8008bc0 <_printf_float+0x2f4>
 8008b4c:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <_printf_float+0x2f0>)
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f af19 	beq.w	800898e <_printf_float+0xc2>
 8008b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b60:	4313      	orrs	r3, r2
 8008b62:	d102      	bne.n	8008b6a <_printf_float+0x29e>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d5d8      	bpl.n	8008b1c <_printf_float+0x250>
 8008b6a:	ee18 3a10 	vmov	r3, s16
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f af09 	beq.w	800898e <_printf_float+0xc2>
 8008b7c:	f04f 0900 	mov.w	r9, #0
 8008b80:	f104 0a1a 	add.w	sl, r4, #26
 8008b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b86:	425b      	negs	r3, r3
 8008b88:	454b      	cmp	r3, r9
 8008b8a:	dc01      	bgt.n	8008b90 <_printf_float+0x2c4>
 8008b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8e:	e792      	b.n	8008ab6 <_printf_float+0x1ea>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4652      	mov	r2, sl
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f aef7 	beq.w	800898e <_printf_float+0xc2>
 8008ba0:	f109 0901 	add.w	r9, r9, #1
 8008ba4:	e7ee      	b.n	8008b84 <_printf_float+0x2b8>
 8008ba6:	bf00      	nop
 8008ba8:	7fefffff 	.word	0x7fefffff
 8008bac:	0800bf50 	.word	0x0800bf50
 8008bb0:	0800bf54 	.word	0x0800bf54
 8008bb4:	0800bf5c 	.word	0x0800bf5c
 8008bb8:	0800bf58 	.word	0x0800bf58
 8008bbc:	0800c2e1 	.word	0x0800c2e1
 8008bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	bfa8      	it	ge
 8008bc8:	461a      	movge	r2, r3
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	4691      	mov	r9, r2
 8008bce:	dc37      	bgt.n	8008c40 <_printf_float+0x374>
 8008bd0:	f04f 0b00 	mov.w	fp, #0
 8008bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bd8:	f104 021a 	add.w	r2, r4, #26
 8008bdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bde:	9305      	str	r3, [sp, #20]
 8008be0:	eba3 0309 	sub.w	r3, r3, r9
 8008be4:	455b      	cmp	r3, fp
 8008be6:	dc33      	bgt.n	8008c50 <_printf_float+0x384>
 8008be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bec:	429a      	cmp	r2, r3
 8008bee:	db3b      	blt.n	8008c68 <_printf_float+0x39c>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	07da      	lsls	r2, r3, #31
 8008bf4:	d438      	bmi.n	8008c68 <_printf_float+0x39c>
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf8:	9a05      	ldr	r2, [sp, #20]
 8008bfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bfc:	1a9a      	subs	r2, r3, r2
 8008bfe:	eba3 0901 	sub.w	r9, r3, r1
 8008c02:	4591      	cmp	r9, r2
 8008c04:	bfa8      	it	ge
 8008c06:	4691      	movge	r9, r2
 8008c08:	f1b9 0f00 	cmp.w	r9, #0
 8008c0c:	dc35      	bgt.n	8008c7a <_printf_float+0x3ae>
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c16:	f104 0a1a 	add.w	sl, r4, #26
 8008c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	eba3 0309 	sub.w	r3, r3, r9
 8008c24:	4543      	cmp	r3, r8
 8008c26:	f77f af79 	ble.w	8008b1c <_printf_float+0x250>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f aeaa 	beq.w	800898e <_printf_float+0xc2>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	e7ec      	b.n	8008c1a <_printf_float+0x34e>
 8008c40:	4613      	mov	r3, r2
 8008c42:	4631      	mov	r1, r6
 8008c44:	4642      	mov	r2, r8
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d1c0      	bne.n	8008bd0 <_printf_float+0x304>
 8008c4e:	e69e      	b.n	800898e <_printf_float+0xc2>
 8008c50:	2301      	movs	r3, #1
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	9205      	str	r2, [sp, #20]
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f43f ae97 	beq.w	800898e <_printf_float+0xc2>
 8008c60:	9a05      	ldr	r2, [sp, #20]
 8008c62:	f10b 0b01 	add.w	fp, fp, #1
 8008c66:	e7b9      	b.n	8008bdc <_printf_float+0x310>
 8008c68:	ee18 3a10 	vmov	r3, s16
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1be      	bne.n	8008bf6 <_printf_float+0x32a>
 8008c78:	e689      	b.n	800898e <_printf_float+0xc2>
 8008c7a:	9a05      	ldr	r2, [sp, #20]
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	4442      	add	r2, r8
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	d1c1      	bne.n	8008c0e <_printf_float+0x342>
 8008c8a:	e680      	b.n	800898e <_printf_float+0xc2>
 8008c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c8e:	2a01      	cmp	r2, #1
 8008c90:	dc01      	bgt.n	8008c96 <_printf_float+0x3ca>
 8008c92:	07db      	lsls	r3, r3, #31
 8008c94:	d538      	bpl.n	8008d08 <_printf_float+0x43c>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4642      	mov	r2, r8
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f ae74 	beq.w	800898e <_printf_float+0xc2>
 8008ca6:	ee18 3a10 	vmov	r3, s16
 8008caa:	4652      	mov	r2, sl
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f ae6b 	beq.w	800898e <_printf_float+0xc2>
 8008cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f7f7 ff12 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cc4:	b9d8      	cbnz	r0, 8008cfe <_printf_float+0x432>
 8008cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc8:	f108 0201 	add.w	r2, r8, #1
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	4631      	mov	r1, r6
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b8      	blx	r7
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d10e      	bne.n	8008cf6 <_printf_float+0x42a>
 8008cd8:	e659      	b.n	800898e <_printf_float+0xc2>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4652      	mov	r2, sl
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f43f ae52 	beq.w	800898e <_printf_float+0xc2>
 8008cea:	f108 0801 	add.w	r8, r8, #1
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	4543      	cmp	r3, r8
 8008cf4:	dcf1      	bgt.n	8008cda <_printf_float+0x40e>
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cfc:	e6dc      	b.n	8008ab8 <_printf_float+0x1ec>
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	f104 0a1a 	add.w	sl, r4, #26
 8008d06:	e7f2      	b.n	8008cee <_printf_float+0x422>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4642      	mov	r2, r8
 8008d0c:	e7df      	b.n	8008cce <_printf_float+0x402>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	464a      	mov	r2, r9
 8008d12:	4631      	mov	r1, r6
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f43f ae38 	beq.w	800898e <_printf_float+0xc2>
 8008d1e:	f108 0801 	add.w	r8, r8, #1
 8008d22:	68e3      	ldr	r3, [r4, #12]
 8008d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d26:	1a5b      	subs	r3, r3, r1
 8008d28:	4543      	cmp	r3, r8
 8008d2a:	dcf0      	bgt.n	8008d0e <_printf_float+0x442>
 8008d2c:	e6fa      	b.n	8008b24 <_printf_float+0x258>
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	f104 0919 	add.w	r9, r4, #25
 8008d36:	e7f4      	b.n	8008d22 <_printf_float+0x456>

08008d38 <_printf_common>:
 8008d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	4699      	mov	r9, r3
 8008d40:	688a      	ldr	r2, [r1, #8]
 8008d42:	690b      	ldr	r3, [r1, #16]
 8008d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	bfb8      	it	lt
 8008d4c:	4613      	movlt	r3, r2
 8008d4e:	6033      	str	r3, [r6, #0]
 8008d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d54:	4607      	mov	r7, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b10a      	cbz	r2, 8008d5e <_printf_common+0x26>
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	6033      	str	r3, [r6, #0]
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	0699      	lsls	r1, r3, #26
 8008d62:	bf42      	ittt	mi
 8008d64:	6833      	ldrmi	r3, [r6, #0]
 8008d66:	3302      	addmi	r3, #2
 8008d68:	6033      	strmi	r3, [r6, #0]
 8008d6a:	6825      	ldr	r5, [r4, #0]
 8008d6c:	f015 0506 	ands.w	r5, r5, #6
 8008d70:	d106      	bne.n	8008d80 <_printf_common+0x48>
 8008d72:	f104 0a19 	add.w	sl, r4, #25
 8008d76:	68e3      	ldr	r3, [r4, #12]
 8008d78:	6832      	ldr	r2, [r6, #0]
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	42ab      	cmp	r3, r5
 8008d7e:	dc26      	bgt.n	8008dce <_printf_common+0x96>
 8008d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d84:	1e13      	subs	r3, r2, #0
 8008d86:	6822      	ldr	r2, [r4, #0]
 8008d88:	bf18      	it	ne
 8008d8a:	2301      	movne	r3, #1
 8008d8c:	0692      	lsls	r2, r2, #26
 8008d8e:	d42b      	bmi.n	8008de8 <_printf_common+0xb0>
 8008d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d94:	4649      	mov	r1, r9
 8008d96:	4638      	mov	r0, r7
 8008d98:	47c0      	blx	r8
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d01e      	beq.n	8008ddc <_printf_common+0xa4>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	68e5      	ldr	r5, [r4, #12]
 8008da2:	6832      	ldr	r2, [r6, #0]
 8008da4:	f003 0306 	and.w	r3, r3, #6
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	bf08      	it	eq
 8008dac:	1aad      	subeq	r5, r5, r2
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	6922      	ldr	r2, [r4, #16]
 8008db2:	bf0c      	ite	eq
 8008db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db8:	2500      	movne	r5, #0
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	bfc4      	itt	gt
 8008dbe:	1a9b      	subgt	r3, r3, r2
 8008dc0:	18ed      	addgt	r5, r5, r3
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	341a      	adds	r4, #26
 8008dc6:	42b5      	cmp	r5, r6
 8008dc8:	d11a      	bne.n	8008e00 <_printf_common+0xc8>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	e008      	b.n	8008de0 <_printf_common+0xa8>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	47c0      	blx	r8
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d103      	bne.n	8008de4 <_printf_common+0xac>
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de4:	3501      	adds	r5, #1
 8008de6:	e7c6      	b.n	8008d76 <_printf_common+0x3e>
 8008de8:	18e1      	adds	r1, r4, r3
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	2030      	movs	r0, #48	; 0x30
 8008dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008df2:	4422      	add	r2, r4
 8008df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dfc:	3302      	adds	r3, #2
 8008dfe:	e7c7      	b.n	8008d90 <_printf_common+0x58>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4622      	mov	r2, r4
 8008e04:	4649      	mov	r1, r9
 8008e06:	4638      	mov	r0, r7
 8008e08:	47c0      	blx	r8
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d0e6      	beq.n	8008ddc <_printf_common+0xa4>
 8008e0e:	3601      	adds	r6, #1
 8008e10:	e7d9      	b.n	8008dc6 <_printf_common+0x8e>
	...

08008e14 <_printf_i>:
 8008e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e18:	7e0f      	ldrb	r7, [r1, #24]
 8008e1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e1c:	2f78      	cmp	r7, #120	; 0x78
 8008e1e:	4691      	mov	r9, r2
 8008e20:	4680      	mov	r8, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	469a      	mov	sl, r3
 8008e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e2a:	d807      	bhi.n	8008e3c <_printf_i+0x28>
 8008e2c:	2f62      	cmp	r7, #98	; 0x62
 8008e2e:	d80a      	bhi.n	8008e46 <_printf_i+0x32>
 8008e30:	2f00      	cmp	r7, #0
 8008e32:	f000 80d8 	beq.w	8008fe6 <_printf_i+0x1d2>
 8008e36:	2f58      	cmp	r7, #88	; 0x58
 8008e38:	f000 80a3 	beq.w	8008f82 <_printf_i+0x16e>
 8008e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e44:	e03a      	b.n	8008ebc <_printf_i+0xa8>
 8008e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e4a:	2b15      	cmp	r3, #21
 8008e4c:	d8f6      	bhi.n	8008e3c <_printf_i+0x28>
 8008e4e:	a101      	add	r1, pc, #4	; (adr r1, 8008e54 <_printf_i+0x40>)
 8008e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e54:	08008ead 	.word	0x08008ead
 8008e58:	08008ec1 	.word	0x08008ec1
 8008e5c:	08008e3d 	.word	0x08008e3d
 8008e60:	08008e3d 	.word	0x08008e3d
 8008e64:	08008e3d 	.word	0x08008e3d
 8008e68:	08008e3d 	.word	0x08008e3d
 8008e6c:	08008ec1 	.word	0x08008ec1
 8008e70:	08008e3d 	.word	0x08008e3d
 8008e74:	08008e3d 	.word	0x08008e3d
 8008e78:	08008e3d 	.word	0x08008e3d
 8008e7c:	08008e3d 	.word	0x08008e3d
 8008e80:	08008fcd 	.word	0x08008fcd
 8008e84:	08008ef1 	.word	0x08008ef1
 8008e88:	08008faf 	.word	0x08008faf
 8008e8c:	08008e3d 	.word	0x08008e3d
 8008e90:	08008e3d 	.word	0x08008e3d
 8008e94:	08008fef 	.word	0x08008fef
 8008e98:	08008e3d 	.word	0x08008e3d
 8008e9c:	08008ef1 	.word	0x08008ef1
 8008ea0:	08008e3d 	.word	0x08008e3d
 8008ea4:	08008e3d 	.word	0x08008e3d
 8008ea8:	08008fb7 	.word	0x08008fb7
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	1d1a      	adds	r2, r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	602a      	str	r2, [r5, #0]
 8008eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e0a3      	b.n	8009008 <_printf_i+0x1f4>
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	6829      	ldr	r1, [r5, #0]
 8008ec4:	0606      	lsls	r6, r0, #24
 8008ec6:	f101 0304 	add.w	r3, r1, #4
 8008eca:	d50a      	bpl.n	8008ee2 <_printf_i+0xce>
 8008ecc:	680e      	ldr	r6, [r1, #0]
 8008ece:	602b      	str	r3, [r5, #0]
 8008ed0:	2e00      	cmp	r6, #0
 8008ed2:	da03      	bge.n	8008edc <_printf_i+0xc8>
 8008ed4:	232d      	movs	r3, #45	; 0x2d
 8008ed6:	4276      	negs	r6, r6
 8008ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008edc:	485e      	ldr	r0, [pc, #376]	; (8009058 <_printf_i+0x244>)
 8008ede:	230a      	movs	r3, #10
 8008ee0:	e019      	b.n	8008f16 <_printf_i+0x102>
 8008ee2:	680e      	ldr	r6, [r1, #0]
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008eea:	bf18      	it	ne
 8008eec:	b236      	sxthne	r6, r6
 8008eee:	e7ef      	b.n	8008ed0 <_printf_i+0xbc>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	1d19      	adds	r1, r3, #4
 8008ef6:	6029      	str	r1, [r5, #0]
 8008ef8:	0601      	lsls	r1, r0, #24
 8008efa:	d501      	bpl.n	8008f00 <_printf_i+0xec>
 8008efc:	681e      	ldr	r6, [r3, #0]
 8008efe:	e002      	b.n	8008f06 <_printf_i+0xf2>
 8008f00:	0646      	lsls	r6, r0, #25
 8008f02:	d5fb      	bpl.n	8008efc <_printf_i+0xe8>
 8008f04:	881e      	ldrh	r6, [r3, #0]
 8008f06:	4854      	ldr	r0, [pc, #336]	; (8009058 <_printf_i+0x244>)
 8008f08:	2f6f      	cmp	r7, #111	; 0x6f
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2308      	moveq	r3, #8
 8008f0e:	230a      	movne	r3, #10
 8008f10:	2100      	movs	r1, #0
 8008f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f16:	6865      	ldr	r5, [r4, #4]
 8008f18:	60a5      	str	r5, [r4, #8]
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	bfa2      	ittt	ge
 8008f1e:	6821      	ldrge	r1, [r4, #0]
 8008f20:	f021 0104 	bicge.w	r1, r1, #4
 8008f24:	6021      	strge	r1, [r4, #0]
 8008f26:	b90e      	cbnz	r6, 8008f2c <_printf_i+0x118>
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	d04d      	beq.n	8008fc8 <_printf_i+0x1b4>
 8008f2c:	4615      	mov	r5, r2
 8008f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f32:	fb03 6711 	mls	r7, r3, r1, r6
 8008f36:	5dc7      	ldrb	r7, [r0, r7]
 8008f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f3c:	4637      	mov	r7, r6
 8008f3e:	42bb      	cmp	r3, r7
 8008f40:	460e      	mov	r6, r1
 8008f42:	d9f4      	bls.n	8008f2e <_printf_i+0x11a>
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d10b      	bne.n	8008f60 <_printf_i+0x14c>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	07de      	lsls	r6, r3, #31
 8008f4c:	d508      	bpl.n	8008f60 <_printf_i+0x14c>
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	4299      	cmp	r1, r3
 8008f54:	bfde      	ittt	le
 8008f56:	2330      	movle	r3, #48	; 0x30
 8008f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f60:	1b52      	subs	r2, r2, r5
 8008f62:	6122      	str	r2, [r4, #16]
 8008f64:	f8cd a000 	str.w	sl, [sp]
 8008f68:	464b      	mov	r3, r9
 8008f6a:	aa03      	add	r2, sp, #12
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7ff fee2 	bl	8008d38 <_printf_common>
 8008f74:	3001      	adds	r0, #1
 8008f76:	d14c      	bne.n	8009012 <_printf_i+0x1fe>
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	b004      	add	sp, #16
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	4835      	ldr	r0, [pc, #212]	; (8009058 <_printf_i+0x244>)
 8008f84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f88:	6829      	ldr	r1, [r5, #0]
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f90:	6029      	str	r1, [r5, #0]
 8008f92:	061d      	lsls	r5, r3, #24
 8008f94:	d514      	bpl.n	8008fc0 <_printf_i+0x1ac>
 8008f96:	07df      	lsls	r7, r3, #31
 8008f98:	bf44      	itt	mi
 8008f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008f9e:	6023      	strmi	r3, [r4, #0]
 8008fa0:	b91e      	cbnz	r6, 8008faa <_printf_i+0x196>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	f023 0320 	bic.w	r3, r3, #32
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	2310      	movs	r3, #16
 8008fac:	e7b0      	b.n	8008f10 <_printf_i+0xfc>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	f043 0320 	orr.w	r3, r3, #32
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	2378      	movs	r3, #120	; 0x78
 8008fb8:	4828      	ldr	r0, [pc, #160]	; (800905c <_printf_i+0x248>)
 8008fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fbe:	e7e3      	b.n	8008f88 <_printf_i+0x174>
 8008fc0:	0659      	lsls	r1, r3, #25
 8008fc2:	bf48      	it	mi
 8008fc4:	b2b6      	uxthmi	r6, r6
 8008fc6:	e7e6      	b.n	8008f96 <_printf_i+0x182>
 8008fc8:	4615      	mov	r5, r2
 8008fca:	e7bb      	b.n	8008f44 <_printf_i+0x130>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	6826      	ldr	r6, [r4, #0]
 8008fd0:	6961      	ldr	r1, [r4, #20]
 8008fd2:	1d18      	adds	r0, r3, #4
 8008fd4:	6028      	str	r0, [r5, #0]
 8008fd6:	0635      	lsls	r5, r6, #24
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	d501      	bpl.n	8008fe0 <_printf_i+0x1cc>
 8008fdc:	6019      	str	r1, [r3, #0]
 8008fde:	e002      	b.n	8008fe6 <_printf_i+0x1d2>
 8008fe0:	0670      	lsls	r0, r6, #25
 8008fe2:	d5fb      	bpl.n	8008fdc <_printf_i+0x1c8>
 8008fe4:	8019      	strh	r1, [r3, #0]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6123      	str	r3, [r4, #16]
 8008fea:	4615      	mov	r5, r2
 8008fec:	e7ba      	b.n	8008f64 <_printf_i+0x150>
 8008fee:	682b      	ldr	r3, [r5, #0]
 8008ff0:	1d1a      	adds	r2, r3, #4
 8008ff2:	602a      	str	r2, [r5, #0]
 8008ff4:	681d      	ldr	r5, [r3, #0]
 8008ff6:	6862      	ldr	r2, [r4, #4]
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f7f7 f900 	bl	8000200 <memchr>
 8009000:	b108      	cbz	r0, 8009006 <_printf_i+0x1f2>
 8009002:	1b40      	subs	r0, r0, r5
 8009004:	6060      	str	r0, [r4, #4]
 8009006:	6863      	ldr	r3, [r4, #4]
 8009008:	6123      	str	r3, [r4, #16]
 800900a:	2300      	movs	r3, #0
 800900c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009010:	e7a8      	b.n	8008f64 <_printf_i+0x150>
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	462a      	mov	r2, r5
 8009016:	4649      	mov	r1, r9
 8009018:	4640      	mov	r0, r8
 800901a:	47d0      	blx	sl
 800901c:	3001      	adds	r0, #1
 800901e:	d0ab      	beq.n	8008f78 <_printf_i+0x164>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	079b      	lsls	r3, r3, #30
 8009024:	d413      	bmi.n	800904e <_printf_i+0x23a>
 8009026:	68e0      	ldr	r0, [r4, #12]
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	4298      	cmp	r0, r3
 800902c:	bfb8      	it	lt
 800902e:	4618      	movlt	r0, r3
 8009030:	e7a4      	b.n	8008f7c <_printf_i+0x168>
 8009032:	2301      	movs	r3, #1
 8009034:	4632      	mov	r2, r6
 8009036:	4649      	mov	r1, r9
 8009038:	4640      	mov	r0, r8
 800903a:	47d0      	blx	sl
 800903c:	3001      	adds	r0, #1
 800903e:	d09b      	beq.n	8008f78 <_printf_i+0x164>
 8009040:	3501      	adds	r5, #1
 8009042:	68e3      	ldr	r3, [r4, #12]
 8009044:	9903      	ldr	r1, [sp, #12]
 8009046:	1a5b      	subs	r3, r3, r1
 8009048:	42ab      	cmp	r3, r5
 800904a:	dcf2      	bgt.n	8009032 <_printf_i+0x21e>
 800904c:	e7eb      	b.n	8009026 <_printf_i+0x212>
 800904e:	2500      	movs	r5, #0
 8009050:	f104 0619 	add.w	r6, r4, #25
 8009054:	e7f5      	b.n	8009042 <_printf_i+0x22e>
 8009056:	bf00      	nop
 8009058:	0800bf60 	.word	0x0800bf60
 800905c:	0800bf71 	.word	0x0800bf71

08009060 <iprintf>:
 8009060:	b40f      	push	{r0, r1, r2, r3}
 8009062:	4b0a      	ldr	r3, [pc, #40]	; (800908c <iprintf+0x2c>)
 8009064:	b513      	push	{r0, r1, r4, lr}
 8009066:	681c      	ldr	r4, [r3, #0]
 8009068:	b124      	cbz	r4, 8009074 <iprintf+0x14>
 800906a:	69a3      	ldr	r3, [r4, #24]
 800906c:	b913      	cbnz	r3, 8009074 <iprintf+0x14>
 800906e:	4620      	mov	r0, r4
 8009070:	f001 fa0e 	bl	800a490 <__sinit>
 8009074:	ab05      	add	r3, sp, #20
 8009076:	9a04      	ldr	r2, [sp, #16]
 8009078:	68a1      	ldr	r1, [r4, #8]
 800907a:	9301      	str	r3, [sp, #4]
 800907c:	4620      	mov	r0, r4
 800907e:	f002 f9a3 	bl	800b3c8 <_vfiprintf_r>
 8009082:	b002      	add	sp, #8
 8009084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009088:	b004      	add	sp, #16
 800908a:	4770      	bx	lr
 800908c:	2000002c 	.word	0x2000002c

08009090 <_puts_r>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	460e      	mov	r6, r1
 8009094:	4605      	mov	r5, r0
 8009096:	b118      	cbz	r0, 80090a0 <_puts_r+0x10>
 8009098:	6983      	ldr	r3, [r0, #24]
 800909a:	b90b      	cbnz	r3, 80090a0 <_puts_r+0x10>
 800909c:	f001 f9f8 	bl	800a490 <__sinit>
 80090a0:	69ab      	ldr	r3, [r5, #24]
 80090a2:	68ac      	ldr	r4, [r5, #8]
 80090a4:	b913      	cbnz	r3, 80090ac <_puts_r+0x1c>
 80090a6:	4628      	mov	r0, r5
 80090a8:	f001 f9f2 	bl	800a490 <__sinit>
 80090ac:	4b2c      	ldr	r3, [pc, #176]	; (8009160 <_puts_r+0xd0>)
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d120      	bne.n	80090f4 <_puts_r+0x64>
 80090b2:	686c      	ldr	r4, [r5, #4]
 80090b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b6:	07db      	lsls	r3, r3, #31
 80090b8:	d405      	bmi.n	80090c6 <_puts_r+0x36>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	0598      	lsls	r0, r3, #22
 80090be:	d402      	bmi.n	80090c6 <_puts_r+0x36>
 80090c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c2:	f001 fa88 	bl	800a5d6 <__retarget_lock_acquire_recursive>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	0719      	lsls	r1, r3, #28
 80090ca:	d51d      	bpl.n	8009108 <_puts_r+0x78>
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	b1db      	cbz	r3, 8009108 <_puts_r+0x78>
 80090d0:	3e01      	subs	r6, #1
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090d8:	3b01      	subs	r3, #1
 80090da:	60a3      	str	r3, [r4, #8]
 80090dc:	bb39      	cbnz	r1, 800912e <_puts_r+0x9e>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da38      	bge.n	8009154 <_puts_r+0xc4>
 80090e2:	4622      	mov	r2, r4
 80090e4:	210a      	movs	r1, #10
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 f95a 	bl	80093a0 <__swbuf_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d011      	beq.n	8009114 <_puts_r+0x84>
 80090f0:	250a      	movs	r5, #10
 80090f2:	e011      	b.n	8009118 <_puts_r+0x88>
 80090f4:	4b1b      	ldr	r3, [pc, #108]	; (8009164 <_puts_r+0xd4>)
 80090f6:	429c      	cmp	r4, r3
 80090f8:	d101      	bne.n	80090fe <_puts_r+0x6e>
 80090fa:	68ac      	ldr	r4, [r5, #8]
 80090fc:	e7da      	b.n	80090b4 <_puts_r+0x24>
 80090fe:	4b1a      	ldr	r3, [pc, #104]	; (8009168 <_puts_r+0xd8>)
 8009100:	429c      	cmp	r4, r3
 8009102:	bf08      	it	eq
 8009104:	68ec      	ldreq	r4, [r5, #12]
 8009106:	e7d5      	b.n	80090b4 <_puts_r+0x24>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f9ac 	bl	8009468 <__swsetup_r>
 8009110:	2800      	cmp	r0, #0
 8009112:	d0dd      	beq.n	80090d0 <_puts_r+0x40>
 8009114:	f04f 35ff 	mov.w	r5, #4294967295
 8009118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800911a:	07da      	lsls	r2, r3, #31
 800911c:	d405      	bmi.n	800912a <_puts_r+0x9a>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	059b      	lsls	r3, r3, #22
 8009122:	d402      	bmi.n	800912a <_puts_r+0x9a>
 8009124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009126:	f001 fa57 	bl	800a5d8 <__retarget_lock_release_recursive>
 800912a:	4628      	mov	r0, r5
 800912c:	bd70      	pop	{r4, r5, r6, pc}
 800912e:	2b00      	cmp	r3, #0
 8009130:	da04      	bge.n	800913c <_puts_r+0xac>
 8009132:	69a2      	ldr	r2, [r4, #24]
 8009134:	429a      	cmp	r2, r3
 8009136:	dc06      	bgt.n	8009146 <_puts_r+0xb6>
 8009138:	290a      	cmp	r1, #10
 800913a:	d004      	beq.n	8009146 <_puts_r+0xb6>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	6022      	str	r2, [r4, #0]
 8009142:	7019      	strb	r1, [r3, #0]
 8009144:	e7c5      	b.n	80090d2 <_puts_r+0x42>
 8009146:	4622      	mov	r2, r4
 8009148:	4628      	mov	r0, r5
 800914a:	f000 f929 	bl	80093a0 <__swbuf_r>
 800914e:	3001      	adds	r0, #1
 8009150:	d1bf      	bne.n	80090d2 <_puts_r+0x42>
 8009152:	e7df      	b.n	8009114 <_puts_r+0x84>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	250a      	movs	r5, #10
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	6022      	str	r2, [r4, #0]
 800915c:	701d      	strb	r5, [r3, #0]
 800915e:	e7db      	b.n	8009118 <_puts_r+0x88>
 8009160:	0800c134 	.word	0x0800c134
 8009164:	0800c154 	.word	0x0800c154
 8009168:	0800c114 	.word	0x0800c114

0800916c <puts>:
 800916c:	4b02      	ldr	r3, [pc, #8]	; (8009178 <puts+0xc>)
 800916e:	4601      	mov	r1, r0
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	f7ff bf8d 	b.w	8009090 <_puts_r>
 8009176:	bf00      	nop
 8009178:	2000002c 	.word	0x2000002c

0800917c <siscanf>:
 800917c:	b40e      	push	{r1, r2, r3}
 800917e:	b510      	push	{r4, lr}
 8009180:	b09f      	sub	sp, #124	; 0x7c
 8009182:	ac21      	add	r4, sp, #132	; 0x84
 8009184:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009188:	f854 2b04 	ldr.w	r2, [r4], #4
 800918c:	9201      	str	r2, [sp, #4]
 800918e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009192:	9004      	str	r0, [sp, #16]
 8009194:	9008      	str	r0, [sp, #32]
 8009196:	f7f7 f825 	bl	80001e4 <strlen>
 800919a:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <siscanf+0x50>)
 800919c:	9005      	str	r0, [sp, #20]
 800919e:	9009      	str	r0, [sp, #36]	; 0x24
 80091a0:	930d      	str	r3, [sp, #52]	; 0x34
 80091a2:	480b      	ldr	r0, [pc, #44]	; (80091d0 <siscanf+0x54>)
 80091a4:	9a01      	ldr	r2, [sp, #4]
 80091a6:	6800      	ldr	r0, [r0, #0]
 80091a8:	9403      	str	r4, [sp, #12]
 80091aa:	2300      	movs	r3, #0
 80091ac:	9311      	str	r3, [sp, #68]	; 0x44
 80091ae:	9316      	str	r3, [sp, #88]	; 0x58
 80091b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80091b8:	a904      	add	r1, sp, #16
 80091ba:	4623      	mov	r3, r4
 80091bc:	f001 ff62 	bl	800b084 <__ssvfiscanf_r>
 80091c0:	b01f      	add	sp, #124	; 0x7c
 80091c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c6:	b003      	add	sp, #12
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	080091f7 	.word	0x080091f7
 80091d0:	2000002c 	.word	0x2000002c

080091d4 <__sread>:
 80091d4:	b510      	push	{r4, lr}
 80091d6:	460c      	mov	r4, r1
 80091d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091dc:	f002 fb76 	bl	800b8cc <_read_r>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	bfab      	itete	ge
 80091e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091e6:	89a3      	ldrhlt	r3, [r4, #12]
 80091e8:	181b      	addge	r3, r3, r0
 80091ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091ee:	bfac      	ite	ge
 80091f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80091f2:	81a3      	strhlt	r3, [r4, #12]
 80091f4:	bd10      	pop	{r4, pc}

080091f6 <__seofread>:
 80091f6:	2000      	movs	r0, #0
 80091f8:	4770      	bx	lr

080091fa <__swrite>:
 80091fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fe:	461f      	mov	r7, r3
 8009200:	898b      	ldrh	r3, [r1, #12]
 8009202:	05db      	lsls	r3, r3, #23
 8009204:	4605      	mov	r5, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4616      	mov	r6, r2
 800920a:	d505      	bpl.n	8009218 <__swrite+0x1e>
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	2302      	movs	r3, #2
 8009212:	2200      	movs	r2, #0
 8009214:	f001 f9e2 	bl	800a5dc <_lseek_r>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800921e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	4632      	mov	r2, r6
 8009226:	463b      	mov	r3, r7
 8009228:	4628      	mov	r0, r5
 800922a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	f000 b909 	b.w	8009444 <_write_r>

08009232 <__sseek>:
 8009232:	b510      	push	{r4, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923a:	f001 f9cf 	bl	800a5dc <_lseek_r>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	bf15      	itete	ne
 8009244:	6560      	strne	r0, [r4, #84]	; 0x54
 8009246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800924e:	81a3      	strheq	r3, [r4, #12]
 8009250:	bf18      	it	ne
 8009252:	81a3      	strhne	r3, [r4, #12]
 8009254:	bd10      	pop	{r4, pc}

08009256 <__sclose>:
 8009256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925a:	f000 b973 	b.w	8009544 <_close_r>

0800925e <strncpy>:
 800925e:	b510      	push	{r4, lr}
 8009260:	3901      	subs	r1, #1
 8009262:	4603      	mov	r3, r0
 8009264:	b132      	cbz	r2, 8009274 <strncpy+0x16>
 8009266:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800926a:	f803 4b01 	strb.w	r4, [r3], #1
 800926e:	3a01      	subs	r2, #1
 8009270:	2c00      	cmp	r4, #0
 8009272:	d1f7      	bne.n	8009264 <strncpy+0x6>
 8009274:	441a      	add	r2, r3
 8009276:	2100      	movs	r1, #0
 8009278:	4293      	cmp	r3, r2
 800927a:	d100      	bne.n	800927e <strncpy+0x20>
 800927c:	bd10      	pop	{r4, pc}
 800927e:	f803 1b01 	strb.w	r1, [r3], #1
 8009282:	e7f9      	b.n	8009278 <strncpy+0x1a>

08009284 <_strtol_l.constprop.0>:
 8009284:	2b01      	cmp	r3, #1
 8009286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800928a:	d001      	beq.n	8009290 <_strtol_l.constprop.0+0xc>
 800928c:	2b24      	cmp	r3, #36	; 0x24
 800928e:	d906      	bls.n	800929e <_strtol_l.constprop.0+0x1a>
 8009290:	f7ff fa3c 	bl	800870c <__errno>
 8009294:	2316      	movs	r3, #22
 8009296:	6003      	str	r3, [r0, #0]
 8009298:	2000      	movs	r0, #0
 800929a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009384 <_strtol_l.constprop.0+0x100>
 80092a2:	460d      	mov	r5, r1
 80092a4:	462e      	mov	r6, r5
 80092a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80092ae:	f017 0708 	ands.w	r7, r7, #8
 80092b2:	d1f7      	bne.n	80092a4 <_strtol_l.constprop.0+0x20>
 80092b4:	2c2d      	cmp	r4, #45	; 0x2d
 80092b6:	d132      	bne.n	800931e <_strtol_l.constprop.0+0x9a>
 80092b8:	782c      	ldrb	r4, [r5, #0]
 80092ba:	2701      	movs	r7, #1
 80092bc:	1cb5      	adds	r5, r6, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d05b      	beq.n	800937a <_strtol_l.constprop.0+0xf6>
 80092c2:	2b10      	cmp	r3, #16
 80092c4:	d109      	bne.n	80092da <_strtol_l.constprop.0+0x56>
 80092c6:	2c30      	cmp	r4, #48	; 0x30
 80092c8:	d107      	bne.n	80092da <_strtol_l.constprop.0+0x56>
 80092ca:	782c      	ldrb	r4, [r5, #0]
 80092cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80092d0:	2c58      	cmp	r4, #88	; 0x58
 80092d2:	d14d      	bne.n	8009370 <_strtol_l.constprop.0+0xec>
 80092d4:	786c      	ldrb	r4, [r5, #1]
 80092d6:	2310      	movs	r3, #16
 80092d8:	3502      	adds	r5, #2
 80092da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80092de:	f108 38ff 	add.w	r8, r8, #4294967295
 80092e2:	f04f 0c00 	mov.w	ip, #0
 80092e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80092ea:	4666      	mov	r6, ip
 80092ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80092f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80092f4:	f1be 0f09 	cmp.w	lr, #9
 80092f8:	d816      	bhi.n	8009328 <_strtol_l.constprop.0+0xa4>
 80092fa:	4674      	mov	r4, lr
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	dd24      	ble.n	800934a <_strtol_l.constprop.0+0xc6>
 8009300:	f1bc 0f00 	cmp.w	ip, #0
 8009304:	db1e      	blt.n	8009344 <_strtol_l.constprop.0+0xc0>
 8009306:	45b1      	cmp	r9, r6
 8009308:	d31c      	bcc.n	8009344 <_strtol_l.constprop.0+0xc0>
 800930a:	d101      	bne.n	8009310 <_strtol_l.constprop.0+0x8c>
 800930c:	45a2      	cmp	sl, r4
 800930e:	db19      	blt.n	8009344 <_strtol_l.constprop.0+0xc0>
 8009310:	fb06 4603 	mla	r6, r6, r3, r4
 8009314:	f04f 0c01 	mov.w	ip, #1
 8009318:	f815 4b01 	ldrb.w	r4, [r5], #1
 800931c:	e7e8      	b.n	80092f0 <_strtol_l.constprop.0+0x6c>
 800931e:	2c2b      	cmp	r4, #43	; 0x2b
 8009320:	bf04      	itt	eq
 8009322:	782c      	ldrbeq	r4, [r5, #0]
 8009324:	1cb5      	addeq	r5, r6, #2
 8009326:	e7ca      	b.n	80092be <_strtol_l.constprop.0+0x3a>
 8009328:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800932c:	f1be 0f19 	cmp.w	lr, #25
 8009330:	d801      	bhi.n	8009336 <_strtol_l.constprop.0+0xb2>
 8009332:	3c37      	subs	r4, #55	; 0x37
 8009334:	e7e2      	b.n	80092fc <_strtol_l.constprop.0+0x78>
 8009336:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800933a:	f1be 0f19 	cmp.w	lr, #25
 800933e:	d804      	bhi.n	800934a <_strtol_l.constprop.0+0xc6>
 8009340:	3c57      	subs	r4, #87	; 0x57
 8009342:	e7db      	b.n	80092fc <_strtol_l.constprop.0+0x78>
 8009344:	f04f 3cff 	mov.w	ip, #4294967295
 8009348:	e7e6      	b.n	8009318 <_strtol_l.constprop.0+0x94>
 800934a:	f1bc 0f00 	cmp.w	ip, #0
 800934e:	da05      	bge.n	800935c <_strtol_l.constprop.0+0xd8>
 8009350:	2322      	movs	r3, #34	; 0x22
 8009352:	6003      	str	r3, [r0, #0]
 8009354:	4646      	mov	r6, r8
 8009356:	b942      	cbnz	r2, 800936a <_strtol_l.constprop.0+0xe6>
 8009358:	4630      	mov	r0, r6
 800935a:	e79e      	b.n	800929a <_strtol_l.constprop.0+0x16>
 800935c:	b107      	cbz	r7, 8009360 <_strtol_l.constprop.0+0xdc>
 800935e:	4276      	negs	r6, r6
 8009360:	2a00      	cmp	r2, #0
 8009362:	d0f9      	beq.n	8009358 <_strtol_l.constprop.0+0xd4>
 8009364:	f1bc 0f00 	cmp.w	ip, #0
 8009368:	d000      	beq.n	800936c <_strtol_l.constprop.0+0xe8>
 800936a:	1e69      	subs	r1, r5, #1
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	e7f3      	b.n	8009358 <_strtol_l.constprop.0+0xd4>
 8009370:	2430      	movs	r4, #48	; 0x30
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1b1      	bne.n	80092da <_strtol_l.constprop.0+0x56>
 8009376:	2308      	movs	r3, #8
 8009378:	e7af      	b.n	80092da <_strtol_l.constprop.0+0x56>
 800937a:	2c30      	cmp	r4, #48	; 0x30
 800937c:	d0a5      	beq.n	80092ca <_strtol_l.constprop.0+0x46>
 800937e:	230a      	movs	r3, #10
 8009380:	e7ab      	b.n	80092da <_strtol_l.constprop.0+0x56>
 8009382:	bf00      	nop
 8009384:	0800bf83 	.word	0x0800bf83

08009388 <_strtol_r>:
 8009388:	f7ff bf7c 	b.w	8009284 <_strtol_l.constprop.0>

0800938c <strtol>:
 800938c:	4613      	mov	r3, r2
 800938e:	460a      	mov	r2, r1
 8009390:	4601      	mov	r1, r0
 8009392:	4802      	ldr	r0, [pc, #8]	; (800939c <strtol+0x10>)
 8009394:	6800      	ldr	r0, [r0, #0]
 8009396:	f7ff bf75 	b.w	8009284 <_strtol_l.constprop.0>
 800939a:	bf00      	nop
 800939c:	2000002c 	.word	0x2000002c

080093a0 <__swbuf_r>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	460e      	mov	r6, r1
 80093a4:	4614      	mov	r4, r2
 80093a6:	4605      	mov	r5, r0
 80093a8:	b118      	cbz	r0, 80093b2 <__swbuf_r+0x12>
 80093aa:	6983      	ldr	r3, [r0, #24]
 80093ac:	b90b      	cbnz	r3, 80093b2 <__swbuf_r+0x12>
 80093ae:	f001 f86f 	bl	800a490 <__sinit>
 80093b2:	4b21      	ldr	r3, [pc, #132]	; (8009438 <__swbuf_r+0x98>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	d12b      	bne.n	8009410 <__swbuf_r+0x70>
 80093b8:	686c      	ldr	r4, [r5, #4]
 80093ba:	69a3      	ldr	r3, [r4, #24]
 80093bc:	60a3      	str	r3, [r4, #8]
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	071a      	lsls	r2, r3, #28
 80093c2:	d52f      	bpl.n	8009424 <__swbuf_r+0x84>
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	b36b      	cbz	r3, 8009424 <__swbuf_r+0x84>
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	6820      	ldr	r0, [r4, #0]
 80093cc:	1ac0      	subs	r0, r0, r3
 80093ce:	6963      	ldr	r3, [r4, #20]
 80093d0:	b2f6      	uxtb	r6, r6
 80093d2:	4283      	cmp	r3, r0
 80093d4:	4637      	mov	r7, r6
 80093d6:	dc04      	bgt.n	80093e2 <__swbuf_r+0x42>
 80093d8:	4621      	mov	r1, r4
 80093da:	4628      	mov	r0, r5
 80093dc:	f000 ffc4 	bl	800a368 <_fflush_r>
 80093e0:	bb30      	cbnz	r0, 8009430 <__swbuf_r+0x90>
 80093e2:	68a3      	ldr	r3, [r4, #8]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	60a3      	str	r3, [r4, #8]
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	6022      	str	r2, [r4, #0]
 80093ee:	701e      	strb	r6, [r3, #0]
 80093f0:	6963      	ldr	r3, [r4, #20]
 80093f2:	3001      	adds	r0, #1
 80093f4:	4283      	cmp	r3, r0
 80093f6:	d004      	beq.n	8009402 <__swbuf_r+0x62>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	07db      	lsls	r3, r3, #31
 80093fc:	d506      	bpl.n	800940c <__swbuf_r+0x6c>
 80093fe:	2e0a      	cmp	r6, #10
 8009400:	d104      	bne.n	800940c <__swbuf_r+0x6c>
 8009402:	4621      	mov	r1, r4
 8009404:	4628      	mov	r0, r5
 8009406:	f000 ffaf 	bl	800a368 <_fflush_r>
 800940a:	b988      	cbnz	r0, 8009430 <__swbuf_r+0x90>
 800940c:	4638      	mov	r0, r7
 800940e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <__swbuf_r+0x9c>)
 8009412:	429c      	cmp	r4, r3
 8009414:	d101      	bne.n	800941a <__swbuf_r+0x7a>
 8009416:	68ac      	ldr	r4, [r5, #8]
 8009418:	e7cf      	b.n	80093ba <__swbuf_r+0x1a>
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <__swbuf_r+0xa0>)
 800941c:	429c      	cmp	r4, r3
 800941e:	bf08      	it	eq
 8009420:	68ec      	ldreq	r4, [r5, #12]
 8009422:	e7ca      	b.n	80093ba <__swbuf_r+0x1a>
 8009424:	4621      	mov	r1, r4
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f81e 	bl	8009468 <__swsetup_r>
 800942c:	2800      	cmp	r0, #0
 800942e:	d0cb      	beq.n	80093c8 <__swbuf_r+0x28>
 8009430:	f04f 37ff 	mov.w	r7, #4294967295
 8009434:	e7ea      	b.n	800940c <__swbuf_r+0x6c>
 8009436:	bf00      	nop
 8009438:	0800c134 	.word	0x0800c134
 800943c:	0800c154 	.word	0x0800c154
 8009440:	0800c114 	.word	0x0800c114

08009444 <_write_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	; (8009464 <_write_r+0x20>)
 8009448:	4604      	mov	r4, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7f9 fb81 	bl	8002b5a <_write>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_write_r+0x1e>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_write_r+0x1e>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	200008f4 	.word	0x200008f4

08009468 <__swsetup_r>:
 8009468:	4b32      	ldr	r3, [pc, #200]	; (8009534 <__swsetup_r+0xcc>)
 800946a:	b570      	push	{r4, r5, r6, lr}
 800946c:	681d      	ldr	r5, [r3, #0]
 800946e:	4606      	mov	r6, r0
 8009470:	460c      	mov	r4, r1
 8009472:	b125      	cbz	r5, 800947e <__swsetup_r+0x16>
 8009474:	69ab      	ldr	r3, [r5, #24]
 8009476:	b913      	cbnz	r3, 800947e <__swsetup_r+0x16>
 8009478:	4628      	mov	r0, r5
 800947a:	f001 f809 	bl	800a490 <__sinit>
 800947e:	4b2e      	ldr	r3, [pc, #184]	; (8009538 <__swsetup_r+0xd0>)
 8009480:	429c      	cmp	r4, r3
 8009482:	d10f      	bne.n	80094a4 <__swsetup_r+0x3c>
 8009484:	686c      	ldr	r4, [r5, #4]
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800948c:	0719      	lsls	r1, r3, #28
 800948e:	d42c      	bmi.n	80094ea <__swsetup_r+0x82>
 8009490:	06dd      	lsls	r5, r3, #27
 8009492:	d411      	bmi.n	80094b8 <__swsetup_r+0x50>
 8009494:	2309      	movs	r3, #9
 8009496:	6033      	str	r3, [r6, #0]
 8009498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	f04f 30ff 	mov.w	r0, #4294967295
 80094a2:	e03e      	b.n	8009522 <__swsetup_r+0xba>
 80094a4:	4b25      	ldr	r3, [pc, #148]	; (800953c <__swsetup_r+0xd4>)
 80094a6:	429c      	cmp	r4, r3
 80094a8:	d101      	bne.n	80094ae <__swsetup_r+0x46>
 80094aa:	68ac      	ldr	r4, [r5, #8]
 80094ac:	e7eb      	b.n	8009486 <__swsetup_r+0x1e>
 80094ae:	4b24      	ldr	r3, [pc, #144]	; (8009540 <__swsetup_r+0xd8>)
 80094b0:	429c      	cmp	r4, r3
 80094b2:	bf08      	it	eq
 80094b4:	68ec      	ldreq	r4, [r5, #12]
 80094b6:	e7e6      	b.n	8009486 <__swsetup_r+0x1e>
 80094b8:	0758      	lsls	r0, r3, #29
 80094ba:	d512      	bpl.n	80094e2 <__swsetup_r+0x7a>
 80094bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094be:	b141      	cbz	r1, 80094d2 <__swsetup_r+0x6a>
 80094c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c4:	4299      	cmp	r1, r3
 80094c6:	d002      	beq.n	80094ce <__swsetup_r+0x66>
 80094c8:	4630      	mov	r0, r6
 80094ca:	f001 fca1 	bl	800ae10 <_free_r>
 80094ce:	2300      	movs	r3, #0
 80094d0:	6363      	str	r3, [r4, #52]	; 0x34
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	2300      	movs	r3, #0
 80094dc:	6063      	str	r3, [r4, #4]
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	f043 0308 	orr.w	r3, r3, #8
 80094e8:	81a3      	strh	r3, [r4, #12]
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	b94b      	cbnz	r3, 8009502 <__swsetup_r+0x9a>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f8:	d003      	beq.n	8009502 <__swsetup_r+0x9a>
 80094fa:	4621      	mov	r1, r4
 80094fc:	4630      	mov	r0, r6
 80094fe:	f001 f8a5 	bl	800a64c <__smakebuf_r>
 8009502:	89a0      	ldrh	r0, [r4, #12]
 8009504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009508:	f010 0301 	ands.w	r3, r0, #1
 800950c:	d00a      	beq.n	8009524 <__swsetup_r+0xbc>
 800950e:	2300      	movs	r3, #0
 8009510:	60a3      	str	r3, [r4, #8]
 8009512:	6963      	ldr	r3, [r4, #20]
 8009514:	425b      	negs	r3, r3
 8009516:	61a3      	str	r3, [r4, #24]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	b943      	cbnz	r3, 800952e <__swsetup_r+0xc6>
 800951c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009520:	d1ba      	bne.n	8009498 <__swsetup_r+0x30>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	0781      	lsls	r1, r0, #30
 8009526:	bf58      	it	pl
 8009528:	6963      	ldrpl	r3, [r4, #20]
 800952a:	60a3      	str	r3, [r4, #8]
 800952c:	e7f4      	b.n	8009518 <__swsetup_r+0xb0>
 800952e:	2000      	movs	r0, #0
 8009530:	e7f7      	b.n	8009522 <__swsetup_r+0xba>
 8009532:	bf00      	nop
 8009534:	2000002c 	.word	0x2000002c
 8009538:	0800c134 	.word	0x0800c134
 800953c:	0800c154 	.word	0x0800c154
 8009540:	0800c114 	.word	0x0800c114

08009544 <_close_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d06      	ldr	r5, [pc, #24]	; (8009560 <_close_r+0x1c>)
 8009548:	2300      	movs	r3, #0
 800954a:	4604      	mov	r4, r0
 800954c:	4608      	mov	r0, r1
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	f7f9 fb1f 	bl	8002b92 <_close>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_close_r+0x1a>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_close_r+0x1a>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	200008f4 	.word	0x200008f4

08009564 <quorem>:
 8009564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	6903      	ldr	r3, [r0, #16]
 800956a:	690c      	ldr	r4, [r1, #16]
 800956c:	42a3      	cmp	r3, r4
 800956e:	4607      	mov	r7, r0
 8009570:	f2c0 8081 	blt.w	8009676 <quorem+0x112>
 8009574:	3c01      	subs	r4, #1
 8009576:	f101 0814 	add.w	r8, r1, #20
 800957a:	f100 0514 	add.w	r5, r0, #20
 800957e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800958c:	3301      	adds	r3, #1
 800958e:	429a      	cmp	r2, r3
 8009590:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009598:	fbb2 f6f3 	udiv	r6, r2, r3
 800959c:	d331      	bcc.n	8009602 <quorem+0x9e>
 800959e:	f04f 0e00 	mov.w	lr, #0
 80095a2:	4640      	mov	r0, r8
 80095a4:	46ac      	mov	ip, r5
 80095a6:	46f2      	mov	sl, lr
 80095a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80095ac:	b293      	uxth	r3, r2
 80095ae:	fb06 e303 	mla	r3, r6, r3, lr
 80095b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	ebaa 0303 	sub.w	r3, sl, r3
 80095bc:	f8dc a000 	ldr.w	sl, [ip]
 80095c0:	0c12      	lsrs	r2, r2, #16
 80095c2:	fa13 f38a 	uxtah	r3, r3, sl
 80095c6:	fb06 e202 	mla	r2, r6, r2, lr
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	9b00      	ldr	r3, [sp, #0]
 80095ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095d2:	b292      	uxth	r2, r2
 80095d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80095e0:	4581      	cmp	r9, r0
 80095e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095e6:	f84c 3b04 	str.w	r3, [ip], #4
 80095ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095ee:	d2db      	bcs.n	80095a8 <quorem+0x44>
 80095f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80095f4:	b92b      	cbnz	r3, 8009602 <quorem+0x9e>
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	3b04      	subs	r3, #4
 80095fa:	429d      	cmp	r5, r3
 80095fc:	461a      	mov	r2, r3
 80095fe:	d32e      	bcc.n	800965e <quorem+0xfa>
 8009600:	613c      	str	r4, [r7, #16]
 8009602:	4638      	mov	r0, r7
 8009604:	f001 faec 	bl	800abe0 <__mcmp>
 8009608:	2800      	cmp	r0, #0
 800960a:	db24      	blt.n	8009656 <quorem+0xf2>
 800960c:	3601      	adds	r6, #1
 800960e:	4628      	mov	r0, r5
 8009610:	f04f 0c00 	mov.w	ip, #0
 8009614:	f858 2b04 	ldr.w	r2, [r8], #4
 8009618:	f8d0 e000 	ldr.w	lr, [r0]
 800961c:	b293      	uxth	r3, r2
 800961e:	ebac 0303 	sub.w	r3, ip, r3
 8009622:	0c12      	lsrs	r2, r2, #16
 8009624:	fa13 f38e 	uxtah	r3, r3, lr
 8009628:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800962c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009630:	b29b      	uxth	r3, r3
 8009632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009636:	45c1      	cmp	r9, r8
 8009638:	f840 3b04 	str.w	r3, [r0], #4
 800963c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009640:	d2e8      	bcs.n	8009614 <quorem+0xb0>
 8009642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800964a:	b922      	cbnz	r2, 8009656 <quorem+0xf2>
 800964c:	3b04      	subs	r3, #4
 800964e:	429d      	cmp	r5, r3
 8009650:	461a      	mov	r2, r3
 8009652:	d30a      	bcc.n	800966a <quorem+0x106>
 8009654:	613c      	str	r4, [r7, #16]
 8009656:	4630      	mov	r0, r6
 8009658:	b003      	add	sp, #12
 800965a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965e:	6812      	ldr	r2, [r2, #0]
 8009660:	3b04      	subs	r3, #4
 8009662:	2a00      	cmp	r2, #0
 8009664:	d1cc      	bne.n	8009600 <quorem+0x9c>
 8009666:	3c01      	subs	r4, #1
 8009668:	e7c7      	b.n	80095fa <quorem+0x96>
 800966a:	6812      	ldr	r2, [r2, #0]
 800966c:	3b04      	subs	r3, #4
 800966e:	2a00      	cmp	r2, #0
 8009670:	d1f0      	bne.n	8009654 <quorem+0xf0>
 8009672:	3c01      	subs	r4, #1
 8009674:	e7eb      	b.n	800964e <quorem+0xea>
 8009676:	2000      	movs	r0, #0
 8009678:	e7ee      	b.n	8009658 <quorem+0xf4>
 800967a:	0000      	movs	r0, r0
 800967c:	0000      	movs	r0, r0
	...

08009680 <_dtoa_r>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	ed2d 8b04 	vpush	{d8-d9}
 8009688:	ec57 6b10 	vmov	r6, r7, d0
 800968c:	b093      	sub	sp, #76	; 0x4c
 800968e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009690:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009694:	9106      	str	r1, [sp, #24]
 8009696:	ee10 aa10 	vmov	sl, s0
 800969a:	4604      	mov	r4, r0
 800969c:	9209      	str	r2, [sp, #36]	; 0x24
 800969e:	930c      	str	r3, [sp, #48]	; 0x30
 80096a0:	46bb      	mov	fp, r7
 80096a2:	b975      	cbnz	r5, 80096c2 <_dtoa_r+0x42>
 80096a4:	2010      	movs	r0, #16
 80096a6:	f001 f811 	bl	800a6cc <malloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6260      	str	r0, [r4, #36]	; 0x24
 80096ae:	b920      	cbnz	r0, 80096ba <_dtoa_r+0x3a>
 80096b0:	4ba7      	ldr	r3, [pc, #668]	; (8009950 <_dtoa_r+0x2d0>)
 80096b2:	21ea      	movs	r1, #234	; 0xea
 80096b4:	48a7      	ldr	r0, [pc, #668]	; (8009954 <_dtoa_r+0x2d4>)
 80096b6:	f002 fa11 	bl	800badc <__assert_func>
 80096ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096be:	6005      	str	r5, [r0, #0]
 80096c0:	60c5      	str	r5, [r0, #12]
 80096c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c4:	6819      	ldr	r1, [r3, #0]
 80096c6:	b151      	cbz	r1, 80096de <_dtoa_r+0x5e>
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	604a      	str	r2, [r1, #4]
 80096cc:	2301      	movs	r3, #1
 80096ce:	4093      	lsls	r3, r2
 80096d0:	608b      	str	r3, [r1, #8]
 80096d2:	4620      	mov	r0, r4
 80096d4:	f001 f842 	bl	800a75c <_Bfree>
 80096d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	1e3b      	subs	r3, r7, #0
 80096e0:	bfaa      	itet	ge
 80096e2:	2300      	movge	r3, #0
 80096e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80096e8:	f8c8 3000 	strge.w	r3, [r8]
 80096ec:	4b9a      	ldr	r3, [pc, #616]	; (8009958 <_dtoa_r+0x2d8>)
 80096ee:	bfbc      	itt	lt
 80096f0:	2201      	movlt	r2, #1
 80096f2:	f8c8 2000 	strlt.w	r2, [r8]
 80096f6:	ea33 030b 	bics.w	r3, r3, fp
 80096fa:	d11b      	bne.n	8009734 <_dtoa_r+0xb4>
 80096fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009708:	4333      	orrs	r3, r6
 800970a:	f000 8592 	beq.w	800a232 <_dtoa_r+0xbb2>
 800970e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009710:	b963      	cbnz	r3, 800972c <_dtoa_r+0xac>
 8009712:	4b92      	ldr	r3, [pc, #584]	; (800995c <_dtoa_r+0x2dc>)
 8009714:	e022      	b.n	800975c <_dtoa_r+0xdc>
 8009716:	4b92      	ldr	r3, [pc, #584]	; (8009960 <_dtoa_r+0x2e0>)
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	3308      	adds	r3, #8
 800971c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	9801      	ldr	r0, [sp, #4]
 8009722:	b013      	add	sp, #76	; 0x4c
 8009724:	ecbd 8b04 	vpop	{d8-d9}
 8009728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	4b8b      	ldr	r3, [pc, #556]	; (800995c <_dtoa_r+0x2dc>)
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	3303      	adds	r3, #3
 8009732:	e7f3      	b.n	800971c <_dtoa_r+0x9c>
 8009734:	2200      	movs	r2, #0
 8009736:	2300      	movs	r3, #0
 8009738:	4650      	mov	r0, sl
 800973a:	4659      	mov	r1, fp
 800973c:	f7f7 f9d4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009740:	ec4b ab19 	vmov	d9, sl, fp
 8009744:	4680      	mov	r8, r0
 8009746:	b158      	cbz	r0, 8009760 <_dtoa_r+0xe0>
 8009748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800974a:	2301      	movs	r3, #1
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 856b 	beq.w	800a22c <_dtoa_r+0xbac>
 8009756:	4883      	ldr	r0, [pc, #524]	; (8009964 <_dtoa_r+0x2e4>)
 8009758:	6018      	str	r0, [r3, #0]
 800975a:	1e43      	subs	r3, r0, #1
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	e7df      	b.n	8009720 <_dtoa_r+0xa0>
 8009760:	ec4b ab10 	vmov	d0, sl, fp
 8009764:	aa10      	add	r2, sp, #64	; 0x40
 8009766:	a911      	add	r1, sp, #68	; 0x44
 8009768:	4620      	mov	r0, r4
 800976a:	f001 fadf 	bl	800ad2c <__d2b>
 800976e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009772:	ee08 0a10 	vmov	s16, r0
 8009776:	2d00      	cmp	r5, #0
 8009778:	f000 8084 	beq.w	8009884 <_dtoa_r+0x204>
 800977c:	ee19 3a90 	vmov	r3, s19
 8009780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009784:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009788:	4656      	mov	r6, sl
 800978a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800978e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009792:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009796:	4b74      	ldr	r3, [pc, #464]	; (8009968 <_dtoa_r+0x2e8>)
 8009798:	2200      	movs	r2, #0
 800979a:	4630      	mov	r0, r6
 800979c:	4639      	mov	r1, r7
 800979e:	f7f6 fd83 	bl	80002a8 <__aeabi_dsub>
 80097a2:	a365      	add	r3, pc, #404	; (adr r3, 8009938 <_dtoa_r+0x2b8>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 ff36 	bl	8000618 <__aeabi_dmul>
 80097ac:	a364      	add	r3, pc, #400	; (adr r3, 8009940 <_dtoa_r+0x2c0>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f7f6 fd7b 	bl	80002ac <__adddf3>
 80097b6:	4606      	mov	r6, r0
 80097b8:	4628      	mov	r0, r5
 80097ba:	460f      	mov	r7, r1
 80097bc:	f7f6 fec2 	bl	8000544 <__aeabi_i2d>
 80097c0:	a361      	add	r3, pc, #388	; (adr r3, 8009948 <_dtoa_r+0x2c8>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7f6 ff27 	bl	8000618 <__aeabi_dmul>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4630      	mov	r0, r6
 80097d0:	4639      	mov	r1, r7
 80097d2:	f7f6 fd6b 	bl	80002ac <__adddf3>
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	f7f7 f9cd 	bl	8000b78 <__aeabi_d2iz>
 80097de:	2200      	movs	r2, #0
 80097e0:	9000      	str	r0, [sp, #0]
 80097e2:	2300      	movs	r3, #0
 80097e4:	4630      	mov	r0, r6
 80097e6:	4639      	mov	r1, r7
 80097e8:	f7f7 f988 	bl	8000afc <__aeabi_dcmplt>
 80097ec:	b150      	cbz	r0, 8009804 <_dtoa_r+0x184>
 80097ee:	9800      	ldr	r0, [sp, #0]
 80097f0:	f7f6 fea8 	bl	8000544 <__aeabi_i2d>
 80097f4:	4632      	mov	r2, r6
 80097f6:	463b      	mov	r3, r7
 80097f8:	f7f7 f976 	bl	8000ae8 <__aeabi_dcmpeq>
 80097fc:	b910      	cbnz	r0, 8009804 <_dtoa_r+0x184>
 80097fe:	9b00      	ldr	r3, [sp, #0]
 8009800:	3b01      	subs	r3, #1
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	9b00      	ldr	r3, [sp, #0]
 8009806:	2b16      	cmp	r3, #22
 8009808:	d85a      	bhi.n	80098c0 <_dtoa_r+0x240>
 800980a:	9a00      	ldr	r2, [sp, #0]
 800980c:	4b57      	ldr	r3, [pc, #348]	; (800996c <_dtoa_r+0x2ec>)
 800980e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	ec51 0b19 	vmov	r0, r1, d9
 800981a:	f7f7 f96f 	bl	8000afc <__aeabi_dcmplt>
 800981e:	2800      	cmp	r0, #0
 8009820:	d050      	beq.n	80098c4 <_dtoa_r+0x244>
 8009822:	9b00      	ldr	r3, [sp, #0]
 8009824:	3b01      	subs	r3, #1
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	2300      	movs	r3, #0
 800982a:	930b      	str	r3, [sp, #44]	; 0x2c
 800982c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800982e:	1b5d      	subs	r5, r3, r5
 8009830:	1e6b      	subs	r3, r5, #1
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	bf45      	ittet	mi
 8009836:	f1c5 0301 	rsbmi	r3, r5, #1
 800983a:	9304      	strmi	r3, [sp, #16]
 800983c:	2300      	movpl	r3, #0
 800983e:	2300      	movmi	r3, #0
 8009840:	bf4c      	ite	mi
 8009842:	9305      	strmi	r3, [sp, #20]
 8009844:	9304      	strpl	r3, [sp, #16]
 8009846:	9b00      	ldr	r3, [sp, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	db3d      	blt.n	80098c8 <_dtoa_r+0x248>
 800984c:	9b05      	ldr	r3, [sp, #20]
 800984e:	9a00      	ldr	r2, [sp, #0]
 8009850:	920a      	str	r2, [sp, #40]	; 0x28
 8009852:	4413      	add	r3, r2
 8009854:	9305      	str	r3, [sp, #20]
 8009856:	2300      	movs	r3, #0
 8009858:	9307      	str	r3, [sp, #28]
 800985a:	9b06      	ldr	r3, [sp, #24]
 800985c:	2b09      	cmp	r3, #9
 800985e:	f200 8089 	bhi.w	8009974 <_dtoa_r+0x2f4>
 8009862:	2b05      	cmp	r3, #5
 8009864:	bfc4      	itt	gt
 8009866:	3b04      	subgt	r3, #4
 8009868:	9306      	strgt	r3, [sp, #24]
 800986a:	9b06      	ldr	r3, [sp, #24]
 800986c:	f1a3 0302 	sub.w	r3, r3, #2
 8009870:	bfcc      	ite	gt
 8009872:	2500      	movgt	r5, #0
 8009874:	2501      	movle	r5, #1
 8009876:	2b03      	cmp	r3, #3
 8009878:	f200 8087 	bhi.w	800998a <_dtoa_r+0x30a>
 800987c:	e8df f003 	tbb	[pc, r3]
 8009880:	59383a2d 	.word	0x59383a2d
 8009884:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009888:	441d      	add	r5, r3
 800988a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800988e:	2b20      	cmp	r3, #32
 8009890:	bfc1      	itttt	gt
 8009892:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009896:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800989a:	fa0b f303 	lslgt.w	r3, fp, r3
 800989e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80098a2:	bfda      	itte	le
 80098a4:	f1c3 0320 	rsble	r3, r3, #32
 80098a8:	fa06 f003 	lslle.w	r0, r6, r3
 80098ac:	4318      	orrgt	r0, r3
 80098ae:	f7f6 fe39 	bl	8000524 <__aeabi_ui2d>
 80098b2:	2301      	movs	r3, #1
 80098b4:	4606      	mov	r6, r0
 80098b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80098ba:	3d01      	subs	r5, #1
 80098bc:	930e      	str	r3, [sp, #56]	; 0x38
 80098be:	e76a      	b.n	8009796 <_dtoa_r+0x116>
 80098c0:	2301      	movs	r3, #1
 80098c2:	e7b2      	b.n	800982a <_dtoa_r+0x1aa>
 80098c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80098c6:	e7b1      	b.n	800982c <_dtoa_r+0x1ac>
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	9a00      	ldr	r2, [sp, #0]
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	4253      	negs	r3, r2
 80098d2:	9307      	str	r3, [sp, #28]
 80098d4:	2300      	movs	r3, #0
 80098d6:	930a      	str	r3, [sp, #40]	; 0x28
 80098d8:	e7bf      	b.n	800985a <_dtoa_r+0x1da>
 80098da:	2300      	movs	r3, #0
 80098dc:	9308      	str	r3, [sp, #32]
 80098de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	dc55      	bgt.n	8009990 <_dtoa_r+0x310>
 80098e4:	2301      	movs	r3, #1
 80098e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098ea:	461a      	mov	r2, r3
 80098ec:	9209      	str	r2, [sp, #36]	; 0x24
 80098ee:	e00c      	b.n	800990a <_dtoa_r+0x28a>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e7f3      	b.n	80098dc <_dtoa_r+0x25c>
 80098f4:	2300      	movs	r3, #0
 80098f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098f8:	9308      	str	r3, [sp, #32]
 80098fa:	9b00      	ldr	r3, [sp, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	9302      	str	r3, [sp, #8]
 8009900:	3301      	adds	r3, #1
 8009902:	2b01      	cmp	r3, #1
 8009904:	9303      	str	r3, [sp, #12]
 8009906:	bfb8      	it	lt
 8009908:	2301      	movlt	r3, #1
 800990a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800990c:	2200      	movs	r2, #0
 800990e:	6042      	str	r2, [r0, #4]
 8009910:	2204      	movs	r2, #4
 8009912:	f102 0614 	add.w	r6, r2, #20
 8009916:	429e      	cmp	r6, r3
 8009918:	6841      	ldr	r1, [r0, #4]
 800991a:	d93d      	bls.n	8009998 <_dtoa_r+0x318>
 800991c:	4620      	mov	r0, r4
 800991e:	f000 fedd 	bl	800a6dc <_Balloc>
 8009922:	9001      	str	r0, [sp, #4]
 8009924:	2800      	cmp	r0, #0
 8009926:	d13b      	bne.n	80099a0 <_dtoa_r+0x320>
 8009928:	4b11      	ldr	r3, [pc, #68]	; (8009970 <_dtoa_r+0x2f0>)
 800992a:	4602      	mov	r2, r0
 800992c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009930:	e6c0      	b.n	80096b4 <_dtoa_r+0x34>
 8009932:	2301      	movs	r3, #1
 8009934:	e7df      	b.n	80098f6 <_dtoa_r+0x276>
 8009936:	bf00      	nop
 8009938:	636f4361 	.word	0x636f4361
 800993c:	3fd287a7 	.word	0x3fd287a7
 8009940:	8b60c8b3 	.word	0x8b60c8b3
 8009944:	3fc68a28 	.word	0x3fc68a28
 8009948:	509f79fb 	.word	0x509f79fb
 800994c:	3fd34413 	.word	0x3fd34413
 8009950:	0800c090 	.word	0x0800c090
 8009954:	0800c0a7 	.word	0x0800c0a7
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	0800c08c 	.word	0x0800c08c
 8009960:	0800c083 	.word	0x0800c083
 8009964:	0800c2e2 	.word	0x0800c2e2
 8009968:	3ff80000 	.word	0x3ff80000
 800996c:	0800c1f8 	.word	0x0800c1f8
 8009970:	0800c102 	.word	0x0800c102
 8009974:	2501      	movs	r5, #1
 8009976:	2300      	movs	r3, #0
 8009978:	9306      	str	r3, [sp, #24]
 800997a:	9508      	str	r5, [sp, #32]
 800997c:	f04f 33ff 	mov.w	r3, #4294967295
 8009980:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009984:	2200      	movs	r2, #0
 8009986:	2312      	movs	r3, #18
 8009988:	e7b0      	b.n	80098ec <_dtoa_r+0x26c>
 800998a:	2301      	movs	r3, #1
 800998c:	9308      	str	r3, [sp, #32]
 800998e:	e7f5      	b.n	800997c <_dtoa_r+0x2fc>
 8009990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009992:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009996:	e7b8      	b.n	800990a <_dtoa_r+0x28a>
 8009998:	3101      	adds	r1, #1
 800999a:	6041      	str	r1, [r0, #4]
 800999c:	0052      	lsls	r2, r2, #1
 800999e:	e7b8      	b.n	8009912 <_dtoa_r+0x292>
 80099a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a2:	9a01      	ldr	r2, [sp, #4]
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	2b0e      	cmp	r3, #14
 80099aa:	f200 809d 	bhi.w	8009ae8 <_dtoa_r+0x468>
 80099ae:	2d00      	cmp	r5, #0
 80099b0:	f000 809a 	beq.w	8009ae8 <_dtoa_r+0x468>
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dd32      	ble.n	8009a20 <_dtoa_r+0x3a0>
 80099ba:	4ab7      	ldr	r2, [pc, #732]	; (8009c98 <_dtoa_r+0x618>)
 80099bc:	f003 030f 	and.w	r3, r3, #15
 80099c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	05d8      	lsls	r0, r3, #23
 80099cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80099d0:	d516      	bpl.n	8009a00 <_dtoa_r+0x380>
 80099d2:	4bb2      	ldr	r3, [pc, #712]	; (8009c9c <_dtoa_r+0x61c>)
 80099d4:	ec51 0b19 	vmov	r0, r1, d9
 80099d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099dc:	f7f6 ff46 	bl	800086c <__aeabi_ddiv>
 80099e0:	f007 070f 	and.w	r7, r7, #15
 80099e4:	4682      	mov	sl, r0
 80099e6:	468b      	mov	fp, r1
 80099e8:	2503      	movs	r5, #3
 80099ea:	4eac      	ldr	r6, [pc, #688]	; (8009c9c <_dtoa_r+0x61c>)
 80099ec:	b957      	cbnz	r7, 8009a04 <_dtoa_r+0x384>
 80099ee:	4642      	mov	r2, r8
 80099f0:	464b      	mov	r3, r9
 80099f2:	4650      	mov	r0, sl
 80099f4:	4659      	mov	r1, fp
 80099f6:	f7f6 ff39 	bl	800086c <__aeabi_ddiv>
 80099fa:	4682      	mov	sl, r0
 80099fc:	468b      	mov	fp, r1
 80099fe:	e028      	b.n	8009a52 <_dtoa_r+0x3d2>
 8009a00:	2502      	movs	r5, #2
 8009a02:	e7f2      	b.n	80099ea <_dtoa_r+0x36a>
 8009a04:	07f9      	lsls	r1, r7, #31
 8009a06:	d508      	bpl.n	8009a1a <_dtoa_r+0x39a>
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a10:	f7f6 fe02 	bl	8000618 <__aeabi_dmul>
 8009a14:	3501      	adds	r5, #1
 8009a16:	4680      	mov	r8, r0
 8009a18:	4689      	mov	r9, r1
 8009a1a:	107f      	asrs	r7, r7, #1
 8009a1c:	3608      	adds	r6, #8
 8009a1e:	e7e5      	b.n	80099ec <_dtoa_r+0x36c>
 8009a20:	f000 809b 	beq.w	8009b5a <_dtoa_r+0x4da>
 8009a24:	9b00      	ldr	r3, [sp, #0]
 8009a26:	4f9d      	ldr	r7, [pc, #628]	; (8009c9c <_dtoa_r+0x61c>)
 8009a28:	425e      	negs	r6, r3
 8009a2a:	4b9b      	ldr	r3, [pc, #620]	; (8009c98 <_dtoa_r+0x618>)
 8009a2c:	f006 020f 	and.w	r2, r6, #15
 8009a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	ec51 0b19 	vmov	r0, r1, d9
 8009a3c:	f7f6 fdec 	bl	8000618 <__aeabi_dmul>
 8009a40:	1136      	asrs	r6, r6, #4
 8009a42:	4682      	mov	sl, r0
 8009a44:	468b      	mov	fp, r1
 8009a46:	2300      	movs	r3, #0
 8009a48:	2502      	movs	r5, #2
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	d17a      	bne.n	8009b44 <_dtoa_r+0x4c4>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1d3      	bne.n	80099fa <_dtoa_r+0x37a>
 8009a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 8082 	beq.w	8009b5e <_dtoa_r+0x4de>
 8009a5a:	4b91      	ldr	r3, [pc, #580]	; (8009ca0 <_dtoa_r+0x620>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4650      	mov	r0, sl
 8009a60:	4659      	mov	r1, fp
 8009a62:	f7f7 f84b 	bl	8000afc <__aeabi_dcmplt>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d079      	beq.n	8009b5e <_dtoa_r+0x4de>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d076      	beq.n	8009b5e <_dtoa_r+0x4de>
 8009a70:	9b02      	ldr	r3, [sp, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	dd36      	ble.n	8009ae4 <_dtoa_r+0x464>
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	4650      	mov	r0, sl
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	1e5f      	subs	r7, r3, #1
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4b88      	ldr	r3, [pc, #544]	; (8009ca4 <_dtoa_r+0x624>)
 8009a82:	f7f6 fdc9 	bl	8000618 <__aeabi_dmul>
 8009a86:	9e02      	ldr	r6, [sp, #8]
 8009a88:	4682      	mov	sl, r0
 8009a8a:	468b      	mov	fp, r1
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f7f6 fd58 	bl	8000544 <__aeabi_i2d>
 8009a94:	4652      	mov	r2, sl
 8009a96:	465b      	mov	r3, fp
 8009a98:	f7f6 fdbe 	bl	8000618 <__aeabi_dmul>
 8009a9c:	4b82      	ldr	r3, [pc, #520]	; (8009ca8 <_dtoa_r+0x628>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f7f6 fc04 	bl	80002ac <__adddf3>
 8009aa4:	46d0      	mov	r8, sl
 8009aa6:	46d9      	mov	r9, fp
 8009aa8:	4682      	mov	sl, r0
 8009aaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009aae:	2e00      	cmp	r6, #0
 8009ab0:	d158      	bne.n	8009b64 <_dtoa_r+0x4e4>
 8009ab2:	4b7e      	ldr	r3, [pc, #504]	; (8009cac <_dtoa_r+0x62c>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f6 fbf5 	bl	80002a8 <__aeabi_dsub>
 8009abe:	4652      	mov	r2, sl
 8009ac0:	465b      	mov	r3, fp
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	f7f7 f837 	bl	8000b38 <__aeabi_dcmpgt>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f040 8295 	bne.w	8009ffa <_dtoa_r+0x97a>
 8009ad0:	4652      	mov	r2, sl
 8009ad2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	4649      	mov	r1, r9
 8009ada:	f7f7 f80f 	bl	8000afc <__aeabi_dcmplt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f040 8289 	bne.w	8009ff6 <_dtoa_r+0x976>
 8009ae4:	ec5b ab19 	vmov	sl, fp, d9
 8009ae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f2c0 8148 	blt.w	8009d80 <_dtoa_r+0x700>
 8009af0:	9a00      	ldr	r2, [sp, #0]
 8009af2:	2a0e      	cmp	r2, #14
 8009af4:	f300 8144 	bgt.w	8009d80 <_dtoa_r+0x700>
 8009af8:	4b67      	ldr	r3, [pc, #412]	; (8009c98 <_dtoa_r+0x618>)
 8009afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009afe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f280 80d5 	bge.w	8009cb4 <_dtoa_r+0x634>
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f300 80d1 	bgt.w	8009cb4 <_dtoa_r+0x634>
 8009b12:	f040 826f 	bne.w	8009ff4 <_dtoa_r+0x974>
 8009b16:	4b65      	ldr	r3, [pc, #404]	; (8009cac <_dtoa_r+0x62c>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f6 fd7b 	bl	8000618 <__aeabi_dmul>
 8009b22:	4652      	mov	r2, sl
 8009b24:	465b      	mov	r3, fp
 8009b26:	f7f6 fffd 	bl	8000b24 <__aeabi_dcmpge>
 8009b2a:	9e03      	ldr	r6, [sp, #12]
 8009b2c:	4637      	mov	r7, r6
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	f040 8245 	bne.w	8009fbe <_dtoa_r+0x93e>
 8009b34:	9d01      	ldr	r5, [sp, #4]
 8009b36:	2331      	movs	r3, #49	; 0x31
 8009b38:	f805 3b01 	strb.w	r3, [r5], #1
 8009b3c:	9b00      	ldr	r3, [sp, #0]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	e240      	b.n	8009fc6 <_dtoa_r+0x946>
 8009b44:	07f2      	lsls	r2, r6, #31
 8009b46:	d505      	bpl.n	8009b54 <_dtoa_r+0x4d4>
 8009b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4c:	f7f6 fd64 	bl	8000618 <__aeabi_dmul>
 8009b50:	3501      	adds	r5, #1
 8009b52:	2301      	movs	r3, #1
 8009b54:	1076      	asrs	r6, r6, #1
 8009b56:	3708      	adds	r7, #8
 8009b58:	e777      	b.n	8009a4a <_dtoa_r+0x3ca>
 8009b5a:	2502      	movs	r5, #2
 8009b5c:	e779      	b.n	8009a52 <_dtoa_r+0x3d2>
 8009b5e:	9f00      	ldr	r7, [sp, #0]
 8009b60:	9e03      	ldr	r6, [sp, #12]
 8009b62:	e794      	b.n	8009a8e <_dtoa_r+0x40e>
 8009b64:	9901      	ldr	r1, [sp, #4]
 8009b66:	4b4c      	ldr	r3, [pc, #304]	; (8009c98 <_dtoa_r+0x618>)
 8009b68:	4431      	add	r1, r6
 8009b6a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b6c:	9908      	ldr	r1, [sp, #32]
 8009b6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b76:	2900      	cmp	r1, #0
 8009b78:	d043      	beq.n	8009c02 <_dtoa_r+0x582>
 8009b7a:	494d      	ldr	r1, [pc, #308]	; (8009cb0 <_dtoa_r+0x630>)
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f7f6 fe75 	bl	800086c <__aeabi_ddiv>
 8009b82:	4652      	mov	r2, sl
 8009b84:	465b      	mov	r3, fp
 8009b86:	f7f6 fb8f 	bl	80002a8 <__aeabi_dsub>
 8009b8a:	9d01      	ldr	r5, [sp, #4]
 8009b8c:	4682      	mov	sl, r0
 8009b8e:	468b      	mov	fp, r1
 8009b90:	4649      	mov	r1, r9
 8009b92:	4640      	mov	r0, r8
 8009b94:	f7f6 fff0 	bl	8000b78 <__aeabi_d2iz>
 8009b98:	4606      	mov	r6, r0
 8009b9a:	f7f6 fcd3 	bl	8000544 <__aeabi_i2d>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 fb7f 	bl	80002a8 <__aeabi_dsub>
 8009baa:	3630      	adds	r6, #48	; 0x30
 8009bac:	f805 6b01 	strb.w	r6, [r5], #1
 8009bb0:	4652      	mov	r2, sl
 8009bb2:	465b      	mov	r3, fp
 8009bb4:	4680      	mov	r8, r0
 8009bb6:	4689      	mov	r9, r1
 8009bb8:	f7f6 ffa0 	bl	8000afc <__aeabi_dcmplt>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d163      	bne.n	8009c88 <_dtoa_r+0x608>
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	4936      	ldr	r1, [pc, #216]	; (8009ca0 <_dtoa_r+0x620>)
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	f7f6 fb6e 	bl	80002a8 <__aeabi_dsub>
 8009bcc:	4652      	mov	r2, sl
 8009bce:	465b      	mov	r3, fp
 8009bd0:	f7f6 ff94 	bl	8000afc <__aeabi_dcmplt>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f040 80b5 	bne.w	8009d44 <_dtoa_r+0x6c4>
 8009bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bdc:	429d      	cmp	r5, r3
 8009bde:	d081      	beq.n	8009ae4 <_dtoa_r+0x464>
 8009be0:	4b30      	ldr	r3, [pc, #192]	; (8009ca4 <_dtoa_r+0x624>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	4650      	mov	r0, sl
 8009be6:	4659      	mov	r1, fp
 8009be8:	f7f6 fd16 	bl	8000618 <__aeabi_dmul>
 8009bec:	4b2d      	ldr	r3, [pc, #180]	; (8009ca4 <_dtoa_r+0x624>)
 8009bee:	4682      	mov	sl, r0
 8009bf0:	468b      	mov	fp, r1
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f7f6 fd0e 	bl	8000618 <__aeabi_dmul>
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	4689      	mov	r9, r1
 8009c00:	e7c6      	b.n	8009b90 <_dtoa_r+0x510>
 8009c02:	4650      	mov	r0, sl
 8009c04:	4659      	mov	r1, fp
 8009c06:	f7f6 fd07 	bl	8000618 <__aeabi_dmul>
 8009c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c0c:	9d01      	ldr	r5, [sp, #4]
 8009c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c10:	4682      	mov	sl, r0
 8009c12:	468b      	mov	fp, r1
 8009c14:	4649      	mov	r1, r9
 8009c16:	4640      	mov	r0, r8
 8009c18:	f7f6 ffae 	bl	8000b78 <__aeabi_d2iz>
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	f7f6 fc91 	bl	8000544 <__aeabi_i2d>
 8009c22:	3630      	adds	r6, #48	; 0x30
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4640      	mov	r0, r8
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f6 fb3c 	bl	80002a8 <__aeabi_dsub>
 8009c30:	f805 6b01 	strb.w	r6, [r5], #1
 8009c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c36:	429d      	cmp	r5, r3
 8009c38:	4680      	mov	r8, r0
 8009c3a:	4689      	mov	r9, r1
 8009c3c:	f04f 0200 	mov.w	r2, #0
 8009c40:	d124      	bne.n	8009c8c <_dtoa_r+0x60c>
 8009c42:	4b1b      	ldr	r3, [pc, #108]	; (8009cb0 <_dtoa_r+0x630>)
 8009c44:	4650      	mov	r0, sl
 8009c46:	4659      	mov	r1, fp
 8009c48:	f7f6 fb30 	bl	80002ac <__adddf3>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7f6 ff70 	bl	8000b38 <__aeabi_dcmpgt>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d173      	bne.n	8009d44 <_dtoa_r+0x6c4>
 8009c5c:	4652      	mov	r2, sl
 8009c5e:	465b      	mov	r3, fp
 8009c60:	4913      	ldr	r1, [pc, #76]	; (8009cb0 <_dtoa_r+0x630>)
 8009c62:	2000      	movs	r0, #0
 8009c64:	f7f6 fb20 	bl	80002a8 <__aeabi_dsub>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	4649      	mov	r1, r9
 8009c70:	f7f6 ff44 	bl	8000afc <__aeabi_dcmplt>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f43f af35 	beq.w	8009ae4 <_dtoa_r+0x464>
 8009c7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c7c:	1e6b      	subs	r3, r5, #1
 8009c7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c84:	2b30      	cmp	r3, #48	; 0x30
 8009c86:	d0f8      	beq.n	8009c7a <_dtoa_r+0x5fa>
 8009c88:	9700      	str	r7, [sp, #0]
 8009c8a:	e049      	b.n	8009d20 <_dtoa_r+0x6a0>
 8009c8c:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <_dtoa_r+0x624>)
 8009c8e:	f7f6 fcc3 	bl	8000618 <__aeabi_dmul>
 8009c92:	4680      	mov	r8, r0
 8009c94:	4689      	mov	r9, r1
 8009c96:	e7bd      	b.n	8009c14 <_dtoa_r+0x594>
 8009c98:	0800c1f8 	.word	0x0800c1f8
 8009c9c:	0800c1d0 	.word	0x0800c1d0
 8009ca0:	3ff00000 	.word	0x3ff00000
 8009ca4:	40240000 	.word	0x40240000
 8009ca8:	401c0000 	.word	0x401c0000
 8009cac:	40140000 	.word	0x40140000
 8009cb0:	3fe00000 	.word	0x3fe00000
 8009cb4:	9d01      	ldr	r5, [sp, #4]
 8009cb6:	4656      	mov	r6, sl
 8009cb8:	465f      	mov	r7, fp
 8009cba:	4642      	mov	r2, r8
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	f7f6 fdd3 	bl	800086c <__aeabi_ddiv>
 8009cc6:	f7f6 ff57 	bl	8000b78 <__aeabi_d2iz>
 8009cca:	4682      	mov	sl, r0
 8009ccc:	f7f6 fc3a 	bl	8000544 <__aeabi_i2d>
 8009cd0:	4642      	mov	r2, r8
 8009cd2:	464b      	mov	r3, r9
 8009cd4:	f7f6 fca0 	bl	8000618 <__aeabi_dmul>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ce4:	f7f6 fae0 	bl	80002a8 <__aeabi_dsub>
 8009ce8:	f805 6b01 	strb.w	r6, [r5], #1
 8009cec:	9e01      	ldr	r6, [sp, #4]
 8009cee:	9f03      	ldr	r7, [sp, #12]
 8009cf0:	1bae      	subs	r6, r5, r6
 8009cf2:	42b7      	cmp	r7, r6
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	d135      	bne.n	8009d66 <_dtoa_r+0x6e6>
 8009cfa:	f7f6 fad7 	bl	80002ac <__adddf3>
 8009cfe:	4642      	mov	r2, r8
 8009d00:	464b      	mov	r3, r9
 8009d02:	4606      	mov	r6, r0
 8009d04:	460f      	mov	r7, r1
 8009d06:	f7f6 ff17 	bl	8000b38 <__aeabi_dcmpgt>
 8009d0a:	b9d0      	cbnz	r0, 8009d42 <_dtoa_r+0x6c2>
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 fee8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d18:	b110      	cbz	r0, 8009d20 <_dtoa_r+0x6a0>
 8009d1a:	f01a 0f01 	tst.w	sl, #1
 8009d1e:	d110      	bne.n	8009d42 <_dtoa_r+0x6c2>
 8009d20:	4620      	mov	r0, r4
 8009d22:	ee18 1a10 	vmov	r1, s16
 8009d26:	f000 fd19 	bl	800a75c <_Bfree>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9800      	ldr	r0, [sp, #0]
 8009d2e:	702b      	strb	r3, [r5, #0]
 8009d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d32:	3001      	adds	r0, #1
 8009d34:	6018      	str	r0, [r3, #0]
 8009d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f43f acf1 	beq.w	8009720 <_dtoa_r+0xa0>
 8009d3e:	601d      	str	r5, [r3, #0]
 8009d40:	e4ee      	b.n	8009720 <_dtoa_r+0xa0>
 8009d42:	9f00      	ldr	r7, [sp, #0]
 8009d44:	462b      	mov	r3, r5
 8009d46:	461d      	mov	r5, r3
 8009d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d4c:	2a39      	cmp	r2, #57	; 0x39
 8009d4e:	d106      	bne.n	8009d5e <_dtoa_r+0x6de>
 8009d50:	9a01      	ldr	r2, [sp, #4]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d1f7      	bne.n	8009d46 <_dtoa_r+0x6c6>
 8009d56:	9901      	ldr	r1, [sp, #4]
 8009d58:	2230      	movs	r2, #48	; 0x30
 8009d5a:	3701      	adds	r7, #1
 8009d5c:	700a      	strb	r2, [r1, #0]
 8009d5e:	781a      	ldrb	r2, [r3, #0]
 8009d60:	3201      	adds	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	e790      	b.n	8009c88 <_dtoa_r+0x608>
 8009d66:	4ba6      	ldr	r3, [pc, #664]	; (800a000 <_dtoa_r+0x980>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f7f6 fc55 	bl	8000618 <__aeabi_dmul>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2300      	movs	r3, #0
 8009d72:	4606      	mov	r6, r0
 8009d74:	460f      	mov	r7, r1
 8009d76:	f7f6 feb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d09d      	beq.n	8009cba <_dtoa_r+0x63a>
 8009d7e:	e7cf      	b.n	8009d20 <_dtoa_r+0x6a0>
 8009d80:	9a08      	ldr	r2, [sp, #32]
 8009d82:	2a00      	cmp	r2, #0
 8009d84:	f000 80d7 	beq.w	8009f36 <_dtoa_r+0x8b6>
 8009d88:	9a06      	ldr	r2, [sp, #24]
 8009d8a:	2a01      	cmp	r2, #1
 8009d8c:	f300 80ba 	bgt.w	8009f04 <_dtoa_r+0x884>
 8009d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d92:	2a00      	cmp	r2, #0
 8009d94:	f000 80b2 	beq.w	8009efc <_dtoa_r+0x87c>
 8009d98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d9c:	9e07      	ldr	r6, [sp, #28]
 8009d9e:	9d04      	ldr	r5, [sp, #16]
 8009da0:	9a04      	ldr	r2, [sp, #16]
 8009da2:	441a      	add	r2, r3
 8009da4:	9204      	str	r2, [sp, #16]
 8009da6:	9a05      	ldr	r2, [sp, #20]
 8009da8:	2101      	movs	r1, #1
 8009daa:	441a      	add	r2, r3
 8009dac:	4620      	mov	r0, r4
 8009dae:	9205      	str	r2, [sp, #20]
 8009db0:	f000 fd8c 	bl	800a8cc <__i2b>
 8009db4:	4607      	mov	r7, r0
 8009db6:	2d00      	cmp	r5, #0
 8009db8:	dd0c      	ble.n	8009dd4 <_dtoa_r+0x754>
 8009dba:	9b05      	ldr	r3, [sp, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd09      	ble.n	8009dd4 <_dtoa_r+0x754>
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	9a04      	ldr	r2, [sp, #16]
 8009dc4:	bfa8      	it	ge
 8009dc6:	462b      	movge	r3, r5
 8009dc8:	1ad2      	subs	r2, r2, r3
 8009dca:	9204      	str	r2, [sp, #16]
 8009dcc:	9a05      	ldr	r2, [sp, #20]
 8009dce:	1aed      	subs	r5, r5, r3
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	9305      	str	r3, [sp, #20]
 8009dd4:	9b07      	ldr	r3, [sp, #28]
 8009dd6:	b31b      	cbz	r3, 8009e20 <_dtoa_r+0x7a0>
 8009dd8:	9b08      	ldr	r3, [sp, #32]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 80af 	beq.w	8009f3e <_dtoa_r+0x8be>
 8009de0:	2e00      	cmp	r6, #0
 8009de2:	dd13      	ble.n	8009e0c <_dtoa_r+0x78c>
 8009de4:	4639      	mov	r1, r7
 8009de6:	4632      	mov	r2, r6
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fe2f 	bl	800aa4c <__pow5mult>
 8009dee:	ee18 2a10 	vmov	r2, s16
 8009df2:	4601      	mov	r1, r0
 8009df4:	4607      	mov	r7, r0
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 fd7e 	bl	800a8f8 <__multiply>
 8009dfc:	ee18 1a10 	vmov	r1, s16
 8009e00:	4680      	mov	r8, r0
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fcaa 	bl	800a75c <_Bfree>
 8009e08:	ee08 8a10 	vmov	s16, r8
 8009e0c:	9b07      	ldr	r3, [sp, #28]
 8009e0e:	1b9a      	subs	r2, r3, r6
 8009e10:	d006      	beq.n	8009e20 <_dtoa_r+0x7a0>
 8009e12:	ee18 1a10 	vmov	r1, s16
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 fe18 	bl	800aa4c <__pow5mult>
 8009e1c:	ee08 0a10 	vmov	s16, r0
 8009e20:	2101      	movs	r1, #1
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fd52 	bl	800a8cc <__i2b>
 8009e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	f340 8088 	ble.w	8009f42 <_dtoa_r+0x8c2>
 8009e32:	461a      	mov	r2, r3
 8009e34:	4601      	mov	r1, r0
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 fe08 	bl	800aa4c <__pow5mult>
 8009e3c:	9b06      	ldr	r3, [sp, #24]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	4606      	mov	r6, r0
 8009e42:	f340 8081 	ble.w	8009f48 <_dtoa_r+0x8c8>
 8009e46:	f04f 0800 	mov.w	r8, #0
 8009e4a:	6933      	ldr	r3, [r6, #16]
 8009e4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e50:	6918      	ldr	r0, [r3, #16]
 8009e52:	f000 fceb 	bl	800a82c <__hi0bits>
 8009e56:	f1c0 0020 	rsb	r0, r0, #32
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	4418      	add	r0, r3
 8009e5e:	f010 001f 	ands.w	r0, r0, #31
 8009e62:	f000 8092 	beq.w	8009f8a <_dtoa_r+0x90a>
 8009e66:	f1c0 0320 	rsb	r3, r0, #32
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	f340 808a 	ble.w	8009f84 <_dtoa_r+0x904>
 8009e70:	f1c0 001c 	rsb	r0, r0, #28
 8009e74:	9b04      	ldr	r3, [sp, #16]
 8009e76:	4403      	add	r3, r0
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	9b05      	ldr	r3, [sp, #20]
 8009e7c:	4403      	add	r3, r0
 8009e7e:	4405      	add	r5, r0
 8009e80:	9305      	str	r3, [sp, #20]
 8009e82:	9b04      	ldr	r3, [sp, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	dd07      	ble.n	8009e98 <_dtoa_r+0x818>
 8009e88:	ee18 1a10 	vmov	r1, s16
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 fe36 	bl	800ab00 <__lshift>
 8009e94:	ee08 0a10 	vmov	s16, r0
 8009e98:	9b05      	ldr	r3, [sp, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dd05      	ble.n	8009eaa <_dtoa_r+0x82a>
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fe2c 	bl	800ab00 <__lshift>
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d06e      	beq.n	8009f8e <_dtoa_r+0x90e>
 8009eb0:	ee18 0a10 	vmov	r0, s16
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	f000 fe93 	bl	800abe0 <__mcmp>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	da67      	bge.n	8009f8e <_dtoa_r+0x90e>
 8009ebe:	9b00      	ldr	r3, [sp, #0]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	ee18 1a10 	vmov	r1, s16
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	220a      	movs	r2, #10
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 fc67 	bl	800a7a0 <__multadd>
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	ee08 0a10 	vmov	s16, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 81b1 	beq.w	800a240 <_dtoa_r+0xbc0>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	220a      	movs	r2, #10
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f000 fc5b 	bl	800a7a0 <__multadd>
 8009eea:	9b02      	ldr	r3, [sp, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	4607      	mov	r7, r0
 8009ef0:	f300 808e 	bgt.w	800a010 <_dtoa_r+0x990>
 8009ef4:	9b06      	ldr	r3, [sp, #24]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	dc51      	bgt.n	8009f9e <_dtoa_r+0x91e>
 8009efa:	e089      	b.n	800a010 <_dtoa_r+0x990>
 8009efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009efe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f02:	e74b      	b.n	8009d9c <_dtoa_r+0x71c>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	1e5e      	subs	r6, r3, #1
 8009f08:	9b07      	ldr	r3, [sp, #28]
 8009f0a:	42b3      	cmp	r3, r6
 8009f0c:	bfbf      	itttt	lt
 8009f0e:	9b07      	ldrlt	r3, [sp, #28]
 8009f10:	9607      	strlt	r6, [sp, #28]
 8009f12:	1af2      	sublt	r2, r6, r3
 8009f14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f16:	bfb6      	itet	lt
 8009f18:	189b      	addlt	r3, r3, r2
 8009f1a:	1b9e      	subge	r6, r3, r6
 8009f1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	bfb8      	it	lt
 8009f22:	2600      	movlt	r6, #0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	bfb7      	itett	lt
 8009f28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009f30:	1a9d      	sublt	r5, r3, r2
 8009f32:	2300      	movlt	r3, #0
 8009f34:	e734      	b.n	8009da0 <_dtoa_r+0x720>
 8009f36:	9e07      	ldr	r6, [sp, #28]
 8009f38:	9d04      	ldr	r5, [sp, #16]
 8009f3a:	9f08      	ldr	r7, [sp, #32]
 8009f3c:	e73b      	b.n	8009db6 <_dtoa_r+0x736>
 8009f3e:	9a07      	ldr	r2, [sp, #28]
 8009f40:	e767      	b.n	8009e12 <_dtoa_r+0x792>
 8009f42:	9b06      	ldr	r3, [sp, #24]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	dc18      	bgt.n	8009f7a <_dtoa_r+0x8fa>
 8009f48:	f1ba 0f00 	cmp.w	sl, #0
 8009f4c:	d115      	bne.n	8009f7a <_dtoa_r+0x8fa>
 8009f4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f52:	b993      	cbnz	r3, 8009f7a <_dtoa_r+0x8fa>
 8009f54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f58:	0d1b      	lsrs	r3, r3, #20
 8009f5a:	051b      	lsls	r3, r3, #20
 8009f5c:	b183      	cbz	r3, 8009f80 <_dtoa_r+0x900>
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	3301      	adds	r3, #1
 8009f62:	9304      	str	r3, [sp, #16]
 8009f64:	9b05      	ldr	r3, [sp, #20]
 8009f66:	3301      	adds	r3, #1
 8009f68:	9305      	str	r3, [sp, #20]
 8009f6a:	f04f 0801 	mov.w	r8, #1
 8009f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f47f af6a 	bne.w	8009e4a <_dtoa_r+0x7ca>
 8009f76:	2001      	movs	r0, #1
 8009f78:	e76f      	b.n	8009e5a <_dtoa_r+0x7da>
 8009f7a:	f04f 0800 	mov.w	r8, #0
 8009f7e:	e7f6      	b.n	8009f6e <_dtoa_r+0x8ee>
 8009f80:	4698      	mov	r8, r3
 8009f82:	e7f4      	b.n	8009f6e <_dtoa_r+0x8ee>
 8009f84:	f43f af7d 	beq.w	8009e82 <_dtoa_r+0x802>
 8009f88:	4618      	mov	r0, r3
 8009f8a:	301c      	adds	r0, #28
 8009f8c:	e772      	b.n	8009e74 <_dtoa_r+0x7f4>
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	dc37      	bgt.n	800a004 <_dtoa_r+0x984>
 8009f94:	9b06      	ldr	r3, [sp, #24]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	dd34      	ble.n	800a004 <_dtoa_r+0x984>
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	9302      	str	r3, [sp, #8]
 8009f9e:	9b02      	ldr	r3, [sp, #8]
 8009fa0:	b96b      	cbnz	r3, 8009fbe <_dtoa_r+0x93e>
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	2205      	movs	r2, #5
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 fbfa 	bl	800a7a0 <__multadd>
 8009fac:	4601      	mov	r1, r0
 8009fae:	4606      	mov	r6, r0
 8009fb0:	ee18 0a10 	vmov	r0, s16
 8009fb4:	f000 fe14 	bl	800abe0 <__mcmp>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	f73f adbb 	bgt.w	8009b34 <_dtoa_r+0x4b4>
 8009fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc0:	9d01      	ldr	r5, [sp, #4]
 8009fc2:	43db      	mvns	r3, r3
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	f04f 0800 	mov.w	r8, #0
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 fbc5 	bl	800a75c <_Bfree>
 8009fd2:	2f00      	cmp	r7, #0
 8009fd4:	f43f aea4 	beq.w	8009d20 <_dtoa_r+0x6a0>
 8009fd8:	f1b8 0f00 	cmp.w	r8, #0
 8009fdc:	d005      	beq.n	8009fea <_dtoa_r+0x96a>
 8009fde:	45b8      	cmp	r8, r7
 8009fe0:	d003      	beq.n	8009fea <_dtoa_r+0x96a>
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 fbb9 	bl	800a75c <_Bfree>
 8009fea:	4639      	mov	r1, r7
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 fbb5 	bl	800a75c <_Bfree>
 8009ff2:	e695      	b.n	8009d20 <_dtoa_r+0x6a0>
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	4637      	mov	r7, r6
 8009ff8:	e7e1      	b.n	8009fbe <_dtoa_r+0x93e>
 8009ffa:	9700      	str	r7, [sp, #0]
 8009ffc:	4637      	mov	r7, r6
 8009ffe:	e599      	b.n	8009b34 <_dtoa_r+0x4b4>
 800a000:	40240000 	.word	0x40240000
 800a004:	9b08      	ldr	r3, [sp, #32]
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 80ca 	beq.w	800a1a0 <_dtoa_r+0xb20>
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	9302      	str	r3, [sp, #8]
 800a010:	2d00      	cmp	r5, #0
 800a012:	dd05      	ble.n	800a020 <_dtoa_r+0x9a0>
 800a014:	4639      	mov	r1, r7
 800a016:	462a      	mov	r2, r5
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 fd71 	bl	800ab00 <__lshift>
 800a01e:	4607      	mov	r7, r0
 800a020:	f1b8 0f00 	cmp.w	r8, #0
 800a024:	d05b      	beq.n	800a0de <_dtoa_r+0xa5e>
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fb57 	bl	800a6dc <_Balloc>
 800a02e:	4605      	mov	r5, r0
 800a030:	b928      	cbnz	r0, 800a03e <_dtoa_r+0x9be>
 800a032:	4b87      	ldr	r3, [pc, #540]	; (800a250 <_dtoa_r+0xbd0>)
 800a034:	4602      	mov	r2, r0
 800a036:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a03a:	f7ff bb3b 	b.w	80096b4 <_dtoa_r+0x34>
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	3202      	adds	r2, #2
 800a042:	0092      	lsls	r2, r2, #2
 800a044:	f107 010c 	add.w	r1, r7, #12
 800a048:	300c      	adds	r0, #12
 800a04a:	f7fe fb89 	bl	8008760 <memcpy>
 800a04e:	2201      	movs	r2, #1
 800a050:	4629      	mov	r1, r5
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fd54 	bl	800ab00 <__lshift>
 800a058:	9b01      	ldr	r3, [sp, #4]
 800a05a:	f103 0901 	add.w	r9, r3, #1
 800a05e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a062:	4413      	add	r3, r2
 800a064:	9305      	str	r3, [sp, #20]
 800a066:	f00a 0301 	and.w	r3, sl, #1
 800a06a:	46b8      	mov	r8, r7
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	4607      	mov	r7, r0
 800a070:	4631      	mov	r1, r6
 800a072:	ee18 0a10 	vmov	r0, s16
 800a076:	f7ff fa75 	bl	8009564 <quorem>
 800a07a:	4641      	mov	r1, r8
 800a07c:	9002      	str	r0, [sp, #8]
 800a07e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a082:	ee18 0a10 	vmov	r0, s16
 800a086:	f000 fdab 	bl	800abe0 <__mcmp>
 800a08a:	463a      	mov	r2, r7
 800a08c:	9003      	str	r0, [sp, #12]
 800a08e:	4631      	mov	r1, r6
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fdc1 	bl	800ac18 <__mdiff>
 800a096:	68c2      	ldr	r2, [r0, #12]
 800a098:	f109 3bff 	add.w	fp, r9, #4294967295
 800a09c:	4605      	mov	r5, r0
 800a09e:	bb02      	cbnz	r2, 800a0e2 <_dtoa_r+0xa62>
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	ee18 0a10 	vmov	r0, s16
 800a0a6:	f000 fd9b 	bl	800abe0 <__mcmp>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	9207      	str	r2, [sp, #28]
 800a0b2:	f000 fb53 	bl	800a75c <_Bfree>
 800a0b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a0ba:	ea43 0102 	orr.w	r1, r3, r2
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	464d      	mov	r5, r9
 800a0c4:	d10f      	bne.n	800a0e6 <_dtoa_r+0xa66>
 800a0c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0ca:	d02a      	beq.n	800a122 <_dtoa_r+0xaa2>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	dd02      	ble.n	800a0d8 <_dtoa_r+0xa58>
 800a0d2:	9b02      	ldr	r3, [sp, #8]
 800a0d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a0d8:	f88b a000 	strb.w	sl, [fp]
 800a0dc:	e775      	b.n	8009fca <_dtoa_r+0x94a>
 800a0de:	4638      	mov	r0, r7
 800a0e0:	e7ba      	b.n	800a058 <_dtoa_r+0x9d8>
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	e7e2      	b.n	800a0ac <_dtoa_r+0xa2c>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	db04      	blt.n	800a0f6 <_dtoa_r+0xa76>
 800a0ec:	9906      	ldr	r1, [sp, #24]
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	9904      	ldr	r1, [sp, #16]
 800a0f2:	430b      	orrs	r3, r1
 800a0f4:	d122      	bne.n	800a13c <_dtoa_r+0xabc>
 800a0f6:	2a00      	cmp	r2, #0
 800a0f8:	ddee      	ble.n	800a0d8 <_dtoa_r+0xa58>
 800a0fa:	ee18 1a10 	vmov	r1, s16
 800a0fe:	2201      	movs	r2, #1
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fcfd 	bl	800ab00 <__lshift>
 800a106:	4631      	mov	r1, r6
 800a108:	ee08 0a10 	vmov	s16, r0
 800a10c:	f000 fd68 	bl	800abe0 <__mcmp>
 800a110:	2800      	cmp	r0, #0
 800a112:	dc03      	bgt.n	800a11c <_dtoa_r+0xa9c>
 800a114:	d1e0      	bne.n	800a0d8 <_dtoa_r+0xa58>
 800a116:	f01a 0f01 	tst.w	sl, #1
 800a11a:	d0dd      	beq.n	800a0d8 <_dtoa_r+0xa58>
 800a11c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a120:	d1d7      	bne.n	800a0d2 <_dtoa_r+0xa52>
 800a122:	2339      	movs	r3, #57	; 0x39
 800a124:	f88b 3000 	strb.w	r3, [fp]
 800a128:	462b      	mov	r3, r5
 800a12a:	461d      	mov	r5, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a132:	2a39      	cmp	r2, #57	; 0x39
 800a134:	d071      	beq.n	800a21a <_dtoa_r+0xb9a>
 800a136:	3201      	adds	r2, #1
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	e746      	b.n	8009fca <_dtoa_r+0x94a>
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	dd07      	ble.n	800a150 <_dtoa_r+0xad0>
 800a140:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a144:	d0ed      	beq.n	800a122 <_dtoa_r+0xaa2>
 800a146:	f10a 0301 	add.w	r3, sl, #1
 800a14a:	f88b 3000 	strb.w	r3, [fp]
 800a14e:	e73c      	b.n	8009fca <_dtoa_r+0x94a>
 800a150:	9b05      	ldr	r3, [sp, #20]
 800a152:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a156:	4599      	cmp	r9, r3
 800a158:	d047      	beq.n	800a1ea <_dtoa_r+0xb6a>
 800a15a:	ee18 1a10 	vmov	r1, s16
 800a15e:	2300      	movs	r3, #0
 800a160:	220a      	movs	r2, #10
 800a162:	4620      	mov	r0, r4
 800a164:	f000 fb1c 	bl	800a7a0 <__multadd>
 800a168:	45b8      	cmp	r8, r7
 800a16a:	ee08 0a10 	vmov	s16, r0
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	f04f 020a 	mov.w	r2, #10
 800a176:	4641      	mov	r1, r8
 800a178:	4620      	mov	r0, r4
 800a17a:	d106      	bne.n	800a18a <_dtoa_r+0xb0a>
 800a17c:	f000 fb10 	bl	800a7a0 <__multadd>
 800a180:	4680      	mov	r8, r0
 800a182:	4607      	mov	r7, r0
 800a184:	f109 0901 	add.w	r9, r9, #1
 800a188:	e772      	b.n	800a070 <_dtoa_r+0x9f0>
 800a18a:	f000 fb09 	bl	800a7a0 <__multadd>
 800a18e:	4639      	mov	r1, r7
 800a190:	4680      	mov	r8, r0
 800a192:	2300      	movs	r3, #0
 800a194:	220a      	movs	r2, #10
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fb02 	bl	800a7a0 <__multadd>
 800a19c:	4607      	mov	r7, r0
 800a19e:	e7f1      	b.n	800a184 <_dtoa_r+0xb04>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	9302      	str	r3, [sp, #8]
 800a1a4:	9d01      	ldr	r5, [sp, #4]
 800a1a6:	ee18 0a10 	vmov	r0, s16
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	f7ff f9da 	bl	8009564 <quorem>
 800a1b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	f805 ab01 	strb.w	sl, [r5], #1
 800a1ba:	1aea      	subs	r2, r5, r3
 800a1bc:	9b02      	ldr	r3, [sp, #8]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	dd09      	ble.n	800a1d6 <_dtoa_r+0xb56>
 800a1c2:	ee18 1a10 	vmov	r1, s16
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	220a      	movs	r2, #10
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fae8 	bl	800a7a0 <__multadd>
 800a1d0:	ee08 0a10 	vmov	s16, r0
 800a1d4:	e7e7      	b.n	800a1a6 <_dtoa_r+0xb26>
 800a1d6:	9b02      	ldr	r3, [sp, #8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bfc8      	it	gt
 800a1dc:	461d      	movgt	r5, r3
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	bfd8      	it	le
 800a1e2:	2501      	movle	r5, #1
 800a1e4:	441d      	add	r5, r3
 800a1e6:	f04f 0800 	mov.w	r8, #0
 800a1ea:	ee18 1a10 	vmov	r1, s16
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fc85 	bl	800ab00 <__lshift>
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	ee08 0a10 	vmov	s16, r0
 800a1fc:	f000 fcf0 	bl	800abe0 <__mcmp>
 800a200:	2800      	cmp	r0, #0
 800a202:	dc91      	bgt.n	800a128 <_dtoa_r+0xaa8>
 800a204:	d102      	bne.n	800a20c <_dtoa_r+0xb8c>
 800a206:	f01a 0f01 	tst.w	sl, #1
 800a20a:	d18d      	bne.n	800a128 <_dtoa_r+0xaa8>
 800a20c:	462b      	mov	r3, r5
 800a20e:	461d      	mov	r5, r3
 800a210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a214:	2a30      	cmp	r2, #48	; 0x30
 800a216:	d0fa      	beq.n	800a20e <_dtoa_r+0xb8e>
 800a218:	e6d7      	b.n	8009fca <_dtoa_r+0x94a>
 800a21a:	9a01      	ldr	r2, [sp, #4]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d184      	bne.n	800a12a <_dtoa_r+0xaaa>
 800a220:	9b00      	ldr	r3, [sp, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	2331      	movs	r3, #49	; 0x31
 800a228:	7013      	strb	r3, [r2, #0]
 800a22a:	e6ce      	b.n	8009fca <_dtoa_r+0x94a>
 800a22c:	4b09      	ldr	r3, [pc, #36]	; (800a254 <_dtoa_r+0xbd4>)
 800a22e:	f7ff ba95 	b.w	800975c <_dtoa_r+0xdc>
 800a232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f aa6e 	bne.w	8009716 <_dtoa_r+0x96>
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <_dtoa_r+0xbd8>)
 800a23c:	f7ff ba8e 	b.w	800975c <_dtoa_r+0xdc>
 800a240:	9b02      	ldr	r3, [sp, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	dcae      	bgt.n	800a1a4 <_dtoa_r+0xb24>
 800a246:	9b06      	ldr	r3, [sp, #24]
 800a248:	2b02      	cmp	r3, #2
 800a24a:	f73f aea8 	bgt.w	8009f9e <_dtoa_r+0x91e>
 800a24e:	e7a9      	b.n	800a1a4 <_dtoa_r+0xb24>
 800a250:	0800c102 	.word	0x0800c102
 800a254:	0800c2e1 	.word	0x0800c2e1
 800a258:	0800c083 	.word	0x0800c083

0800a25c <__sflush_r>:
 800a25c:	898a      	ldrh	r2, [r1, #12]
 800a25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a262:	4605      	mov	r5, r0
 800a264:	0710      	lsls	r0, r2, #28
 800a266:	460c      	mov	r4, r1
 800a268:	d458      	bmi.n	800a31c <__sflush_r+0xc0>
 800a26a:	684b      	ldr	r3, [r1, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dc05      	bgt.n	800a27c <__sflush_r+0x20>
 800a270:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a272:	2b00      	cmp	r3, #0
 800a274:	dc02      	bgt.n	800a27c <__sflush_r+0x20>
 800a276:	2000      	movs	r0, #0
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a27e:	2e00      	cmp	r6, #0
 800a280:	d0f9      	beq.n	800a276 <__sflush_r+0x1a>
 800a282:	2300      	movs	r3, #0
 800a284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a288:	682f      	ldr	r7, [r5, #0]
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	d032      	beq.n	800a2f4 <__sflush_r+0x98>
 800a28e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	075a      	lsls	r2, r3, #29
 800a294:	d505      	bpl.n	800a2a2 <__sflush_r+0x46>
 800a296:	6863      	ldr	r3, [r4, #4]
 800a298:	1ac0      	subs	r0, r0, r3
 800a29a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a29c:	b10b      	cbz	r3, 800a2a2 <__sflush_r+0x46>
 800a29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2a0:	1ac0      	subs	r0, r0, r3
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2a8:	6a21      	ldr	r1, [r4, #32]
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b0      	blx	r6
 800a2ae:	1c43      	adds	r3, r0, #1
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	d106      	bne.n	800a2c2 <__sflush_r+0x66>
 800a2b4:	6829      	ldr	r1, [r5, #0]
 800a2b6:	291d      	cmp	r1, #29
 800a2b8:	d82c      	bhi.n	800a314 <__sflush_r+0xb8>
 800a2ba:	4a2a      	ldr	r2, [pc, #168]	; (800a364 <__sflush_r+0x108>)
 800a2bc:	40ca      	lsrs	r2, r1
 800a2be:	07d6      	lsls	r6, r2, #31
 800a2c0:	d528      	bpl.n	800a314 <__sflush_r+0xb8>
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	6062      	str	r2, [r4, #4]
 800a2c6:	04d9      	lsls	r1, r3, #19
 800a2c8:	6922      	ldr	r2, [r4, #16]
 800a2ca:	6022      	str	r2, [r4, #0]
 800a2cc:	d504      	bpl.n	800a2d8 <__sflush_r+0x7c>
 800a2ce:	1c42      	adds	r2, r0, #1
 800a2d0:	d101      	bne.n	800a2d6 <__sflush_r+0x7a>
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	b903      	cbnz	r3, 800a2d8 <__sflush_r+0x7c>
 800a2d6:	6560      	str	r0, [r4, #84]	; 0x54
 800a2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2da:	602f      	str	r7, [r5, #0]
 800a2dc:	2900      	cmp	r1, #0
 800a2de:	d0ca      	beq.n	800a276 <__sflush_r+0x1a>
 800a2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2e4:	4299      	cmp	r1, r3
 800a2e6:	d002      	beq.n	800a2ee <__sflush_r+0x92>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 fd91 	bl	800ae10 <_free_r>
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a2f2:	e7c1      	b.n	800a278 <__sflush_r+0x1c>
 800a2f4:	6a21      	ldr	r1, [r4, #32]
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b0      	blx	r6
 800a2fc:	1c41      	adds	r1, r0, #1
 800a2fe:	d1c7      	bne.n	800a290 <__sflush_r+0x34>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d0c4      	beq.n	800a290 <__sflush_r+0x34>
 800a306:	2b1d      	cmp	r3, #29
 800a308:	d001      	beq.n	800a30e <__sflush_r+0xb2>
 800a30a:	2b16      	cmp	r3, #22
 800a30c:	d101      	bne.n	800a312 <__sflush_r+0xb6>
 800a30e:	602f      	str	r7, [r5, #0]
 800a310:	e7b1      	b.n	800a276 <__sflush_r+0x1a>
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a318:	81a3      	strh	r3, [r4, #12]
 800a31a:	e7ad      	b.n	800a278 <__sflush_r+0x1c>
 800a31c:	690f      	ldr	r7, [r1, #16]
 800a31e:	2f00      	cmp	r7, #0
 800a320:	d0a9      	beq.n	800a276 <__sflush_r+0x1a>
 800a322:	0793      	lsls	r3, r2, #30
 800a324:	680e      	ldr	r6, [r1, #0]
 800a326:	bf08      	it	eq
 800a328:	694b      	ldreq	r3, [r1, #20]
 800a32a:	600f      	str	r7, [r1, #0]
 800a32c:	bf18      	it	ne
 800a32e:	2300      	movne	r3, #0
 800a330:	eba6 0807 	sub.w	r8, r6, r7
 800a334:	608b      	str	r3, [r1, #8]
 800a336:	f1b8 0f00 	cmp.w	r8, #0
 800a33a:	dd9c      	ble.n	800a276 <__sflush_r+0x1a>
 800a33c:	6a21      	ldr	r1, [r4, #32]
 800a33e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a340:	4643      	mov	r3, r8
 800a342:	463a      	mov	r2, r7
 800a344:	4628      	mov	r0, r5
 800a346:	47b0      	blx	r6
 800a348:	2800      	cmp	r0, #0
 800a34a:	dc06      	bgt.n	800a35a <__sflush_r+0xfe>
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	f04f 30ff 	mov.w	r0, #4294967295
 800a358:	e78e      	b.n	800a278 <__sflush_r+0x1c>
 800a35a:	4407      	add	r7, r0
 800a35c:	eba8 0800 	sub.w	r8, r8, r0
 800a360:	e7e9      	b.n	800a336 <__sflush_r+0xda>
 800a362:	bf00      	nop
 800a364:	20400001 	.word	0x20400001

0800a368 <_fflush_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	690b      	ldr	r3, [r1, #16]
 800a36c:	4605      	mov	r5, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	b913      	cbnz	r3, 800a378 <_fflush_r+0x10>
 800a372:	2500      	movs	r5, #0
 800a374:	4628      	mov	r0, r5
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	b118      	cbz	r0, 800a382 <_fflush_r+0x1a>
 800a37a:	6983      	ldr	r3, [r0, #24]
 800a37c:	b90b      	cbnz	r3, 800a382 <_fflush_r+0x1a>
 800a37e:	f000 f887 	bl	800a490 <__sinit>
 800a382:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <_fflush_r+0x6c>)
 800a384:	429c      	cmp	r4, r3
 800a386:	d11b      	bne.n	800a3c0 <_fflush_r+0x58>
 800a388:	686c      	ldr	r4, [r5, #4]
 800a38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0ef      	beq.n	800a372 <_fflush_r+0xa>
 800a392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a394:	07d0      	lsls	r0, r2, #31
 800a396:	d404      	bmi.n	800a3a2 <_fflush_r+0x3a>
 800a398:	0599      	lsls	r1, r3, #22
 800a39a:	d402      	bmi.n	800a3a2 <_fflush_r+0x3a>
 800a39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a39e:	f000 f91a 	bl	800a5d6 <__retarget_lock_acquire_recursive>
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f7ff ff59 	bl	800a25c <__sflush_r>
 800a3aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ac:	07da      	lsls	r2, r3, #31
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	d4e0      	bmi.n	800a374 <_fflush_r+0xc>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	059b      	lsls	r3, r3, #22
 800a3b6:	d4dd      	bmi.n	800a374 <_fflush_r+0xc>
 800a3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ba:	f000 f90d 	bl	800a5d8 <__retarget_lock_release_recursive>
 800a3be:	e7d9      	b.n	800a374 <_fflush_r+0xc>
 800a3c0:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <_fflush_r+0x70>)
 800a3c2:	429c      	cmp	r4, r3
 800a3c4:	d101      	bne.n	800a3ca <_fflush_r+0x62>
 800a3c6:	68ac      	ldr	r4, [r5, #8]
 800a3c8:	e7df      	b.n	800a38a <_fflush_r+0x22>
 800a3ca:	4b04      	ldr	r3, [pc, #16]	; (800a3dc <_fflush_r+0x74>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	bf08      	it	eq
 800a3d0:	68ec      	ldreq	r4, [r5, #12]
 800a3d2:	e7da      	b.n	800a38a <_fflush_r+0x22>
 800a3d4:	0800c134 	.word	0x0800c134
 800a3d8:	0800c154 	.word	0x0800c154
 800a3dc:	0800c114 	.word	0x0800c114

0800a3e0 <std>:
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	b510      	push	{r4, lr}
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a3ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ee:	6083      	str	r3, [r0, #8]
 800a3f0:	8181      	strh	r1, [r0, #12]
 800a3f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a3f4:	81c2      	strh	r2, [r0, #14]
 800a3f6:	6183      	str	r3, [r0, #24]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	2208      	movs	r2, #8
 800a3fc:	305c      	adds	r0, #92	; 0x5c
 800a3fe:	f7fe f9bd 	bl	800877c <memset>
 800a402:	4b05      	ldr	r3, [pc, #20]	; (800a418 <std+0x38>)
 800a404:	6263      	str	r3, [r4, #36]	; 0x24
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <std+0x3c>)
 800a408:	62a3      	str	r3, [r4, #40]	; 0x28
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <std+0x40>)
 800a40c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <std+0x44>)
 800a410:	6224      	str	r4, [r4, #32]
 800a412:	6323      	str	r3, [r4, #48]	; 0x30
 800a414:	bd10      	pop	{r4, pc}
 800a416:	bf00      	nop
 800a418:	080091d5 	.word	0x080091d5
 800a41c:	080091fb 	.word	0x080091fb
 800a420:	08009233 	.word	0x08009233
 800a424:	08009257 	.word	0x08009257

0800a428 <_cleanup_r>:
 800a428:	4901      	ldr	r1, [pc, #4]	; (800a430 <_cleanup_r+0x8>)
 800a42a:	f000 b8af 	b.w	800a58c <_fwalk_reent>
 800a42e:	bf00      	nop
 800a430:	0800a369 	.word	0x0800a369

0800a434 <__sfmoreglue>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	2268      	movs	r2, #104	; 0x68
 800a438:	1e4d      	subs	r5, r1, #1
 800a43a:	4355      	muls	r5, r2
 800a43c:	460e      	mov	r6, r1
 800a43e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a442:	f000 fd51 	bl	800aee8 <_malloc_r>
 800a446:	4604      	mov	r4, r0
 800a448:	b140      	cbz	r0, 800a45c <__sfmoreglue+0x28>
 800a44a:	2100      	movs	r1, #0
 800a44c:	e9c0 1600 	strd	r1, r6, [r0]
 800a450:	300c      	adds	r0, #12
 800a452:	60a0      	str	r0, [r4, #8]
 800a454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a458:	f7fe f990 	bl	800877c <memset>
 800a45c:	4620      	mov	r0, r4
 800a45e:	bd70      	pop	{r4, r5, r6, pc}

0800a460 <__sfp_lock_acquire>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__sfp_lock_acquire+0x8>)
 800a462:	f000 b8b8 	b.w	800a5d6 <__retarget_lock_acquire_recursive>
 800a466:	bf00      	nop
 800a468:	200008e9 	.word	0x200008e9

0800a46c <__sfp_lock_release>:
 800a46c:	4801      	ldr	r0, [pc, #4]	; (800a474 <__sfp_lock_release+0x8>)
 800a46e:	f000 b8b3 	b.w	800a5d8 <__retarget_lock_release_recursive>
 800a472:	bf00      	nop
 800a474:	200008e9 	.word	0x200008e9

0800a478 <__sinit_lock_acquire>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__sinit_lock_acquire+0x8>)
 800a47a:	f000 b8ac 	b.w	800a5d6 <__retarget_lock_acquire_recursive>
 800a47e:	bf00      	nop
 800a480:	200008ea 	.word	0x200008ea

0800a484 <__sinit_lock_release>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__sinit_lock_release+0x8>)
 800a486:	f000 b8a7 	b.w	800a5d8 <__retarget_lock_release_recursive>
 800a48a:	bf00      	nop
 800a48c:	200008ea 	.word	0x200008ea

0800a490 <__sinit>:
 800a490:	b510      	push	{r4, lr}
 800a492:	4604      	mov	r4, r0
 800a494:	f7ff fff0 	bl	800a478 <__sinit_lock_acquire>
 800a498:	69a3      	ldr	r3, [r4, #24]
 800a49a:	b11b      	cbz	r3, 800a4a4 <__sinit+0x14>
 800a49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a0:	f7ff bff0 	b.w	800a484 <__sinit_lock_release>
 800a4a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4a8:	6523      	str	r3, [r4, #80]	; 0x50
 800a4aa:	4b13      	ldr	r3, [pc, #76]	; (800a4f8 <__sinit+0x68>)
 800a4ac:	4a13      	ldr	r2, [pc, #76]	; (800a4fc <__sinit+0x6c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4b2:	42a3      	cmp	r3, r4
 800a4b4:	bf04      	itt	eq
 800a4b6:	2301      	moveq	r3, #1
 800a4b8:	61a3      	streq	r3, [r4, #24]
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 f820 	bl	800a500 <__sfp>
 800a4c0:	6060      	str	r0, [r4, #4]
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 f81c 	bl	800a500 <__sfp>
 800a4c8:	60a0      	str	r0, [r4, #8]
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f818 	bl	800a500 <__sfp>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	60e0      	str	r0, [r4, #12]
 800a4d4:	2104      	movs	r1, #4
 800a4d6:	6860      	ldr	r0, [r4, #4]
 800a4d8:	f7ff ff82 	bl	800a3e0 <std>
 800a4dc:	68a0      	ldr	r0, [r4, #8]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	2109      	movs	r1, #9
 800a4e2:	f7ff ff7d 	bl	800a3e0 <std>
 800a4e6:	68e0      	ldr	r0, [r4, #12]
 800a4e8:	2202      	movs	r2, #2
 800a4ea:	2112      	movs	r1, #18
 800a4ec:	f7ff ff78 	bl	800a3e0 <std>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	61a3      	str	r3, [r4, #24]
 800a4f4:	e7d2      	b.n	800a49c <__sinit+0xc>
 800a4f6:	bf00      	nop
 800a4f8:	0800bf4c 	.word	0x0800bf4c
 800a4fc:	0800a429 	.word	0x0800a429

0800a500 <__sfp>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	4607      	mov	r7, r0
 800a504:	f7ff ffac 	bl	800a460 <__sfp_lock_acquire>
 800a508:	4b1e      	ldr	r3, [pc, #120]	; (800a584 <__sfp+0x84>)
 800a50a:	681e      	ldr	r6, [r3, #0]
 800a50c:	69b3      	ldr	r3, [r6, #24]
 800a50e:	b913      	cbnz	r3, 800a516 <__sfp+0x16>
 800a510:	4630      	mov	r0, r6
 800a512:	f7ff ffbd 	bl	800a490 <__sinit>
 800a516:	3648      	adds	r6, #72	; 0x48
 800a518:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	d503      	bpl.n	800a528 <__sfp+0x28>
 800a520:	6833      	ldr	r3, [r6, #0]
 800a522:	b30b      	cbz	r3, 800a568 <__sfp+0x68>
 800a524:	6836      	ldr	r6, [r6, #0]
 800a526:	e7f7      	b.n	800a518 <__sfp+0x18>
 800a528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a52c:	b9d5      	cbnz	r5, 800a564 <__sfp+0x64>
 800a52e:	4b16      	ldr	r3, [pc, #88]	; (800a588 <__sfp+0x88>)
 800a530:	60e3      	str	r3, [r4, #12]
 800a532:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a536:	6665      	str	r5, [r4, #100]	; 0x64
 800a538:	f000 f84c 	bl	800a5d4 <__retarget_lock_init_recursive>
 800a53c:	f7ff ff96 	bl	800a46c <__sfp_lock_release>
 800a540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a548:	6025      	str	r5, [r4, #0]
 800a54a:	61a5      	str	r5, [r4, #24]
 800a54c:	2208      	movs	r2, #8
 800a54e:	4629      	mov	r1, r5
 800a550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a554:	f7fe f912 	bl	800877c <memset>
 800a558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a55c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a560:	4620      	mov	r0, r4
 800a562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a564:	3468      	adds	r4, #104	; 0x68
 800a566:	e7d9      	b.n	800a51c <__sfp+0x1c>
 800a568:	2104      	movs	r1, #4
 800a56a:	4638      	mov	r0, r7
 800a56c:	f7ff ff62 	bl	800a434 <__sfmoreglue>
 800a570:	4604      	mov	r4, r0
 800a572:	6030      	str	r0, [r6, #0]
 800a574:	2800      	cmp	r0, #0
 800a576:	d1d5      	bne.n	800a524 <__sfp+0x24>
 800a578:	f7ff ff78 	bl	800a46c <__sfp_lock_release>
 800a57c:	230c      	movs	r3, #12
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	e7ee      	b.n	800a560 <__sfp+0x60>
 800a582:	bf00      	nop
 800a584:	0800bf4c 	.word	0x0800bf4c
 800a588:	ffff0001 	.word	0xffff0001

0800a58c <_fwalk_reent>:
 800a58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a590:	4606      	mov	r6, r0
 800a592:	4688      	mov	r8, r1
 800a594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a598:	2700      	movs	r7, #0
 800a59a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a59e:	f1b9 0901 	subs.w	r9, r9, #1
 800a5a2:	d505      	bpl.n	800a5b0 <_fwalk_reent+0x24>
 800a5a4:	6824      	ldr	r4, [r4, #0]
 800a5a6:	2c00      	cmp	r4, #0
 800a5a8:	d1f7      	bne.n	800a59a <_fwalk_reent+0xe>
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b0:	89ab      	ldrh	r3, [r5, #12]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d907      	bls.n	800a5c6 <_fwalk_reent+0x3a>
 800a5b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	d003      	beq.n	800a5c6 <_fwalk_reent+0x3a>
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	47c0      	blx	r8
 800a5c4:	4307      	orrs	r7, r0
 800a5c6:	3568      	adds	r5, #104	; 0x68
 800a5c8:	e7e9      	b.n	800a59e <_fwalk_reent+0x12>
	...

0800a5cc <_localeconv_r>:
 800a5cc:	4800      	ldr	r0, [pc, #0]	; (800a5d0 <_localeconv_r+0x4>)
 800a5ce:	4770      	bx	lr
 800a5d0:	20000180 	.word	0x20000180

0800a5d4 <__retarget_lock_init_recursive>:
 800a5d4:	4770      	bx	lr

0800a5d6 <__retarget_lock_acquire_recursive>:
 800a5d6:	4770      	bx	lr

0800a5d8 <__retarget_lock_release_recursive>:
 800a5d8:	4770      	bx	lr
	...

0800a5dc <_lseek_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4d07      	ldr	r5, [pc, #28]	; (800a5fc <_lseek_r+0x20>)
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	4608      	mov	r0, r1
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	602a      	str	r2, [r5, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f7f8 faf8 	bl	8002be0 <_lseek>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d102      	bne.n	800a5fa <_lseek_r+0x1e>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	b103      	cbz	r3, 800a5fa <_lseek_r+0x1e>
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}
 800a5fc:	200008f4 	.word	0x200008f4

0800a600 <__swhatbuf_r>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	460e      	mov	r6, r1
 800a604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a608:	2900      	cmp	r1, #0
 800a60a:	b096      	sub	sp, #88	; 0x58
 800a60c:	4614      	mov	r4, r2
 800a60e:	461d      	mov	r5, r3
 800a610:	da08      	bge.n	800a624 <__swhatbuf_r+0x24>
 800a612:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	602a      	str	r2, [r5, #0]
 800a61a:	061a      	lsls	r2, r3, #24
 800a61c:	d410      	bmi.n	800a640 <__swhatbuf_r+0x40>
 800a61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a622:	e00e      	b.n	800a642 <__swhatbuf_r+0x42>
 800a624:	466a      	mov	r2, sp
 800a626:	f001 fa89 	bl	800bb3c <_fstat_r>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	dbf1      	blt.n	800a612 <__swhatbuf_r+0x12>
 800a62e:	9a01      	ldr	r2, [sp, #4]
 800a630:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a634:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a638:	425a      	negs	r2, r3
 800a63a:	415a      	adcs	r2, r3
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	e7ee      	b.n	800a61e <__swhatbuf_r+0x1e>
 800a640:	2340      	movs	r3, #64	; 0x40
 800a642:	2000      	movs	r0, #0
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	b016      	add	sp, #88	; 0x58
 800a648:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a64c <__smakebuf_r>:
 800a64c:	898b      	ldrh	r3, [r1, #12]
 800a64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a650:	079d      	lsls	r5, r3, #30
 800a652:	4606      	mov	r6, r0
 800a654:	460c      	mov	r4, r1
 800a656:	d507      	bpl.n	800a668 <__smakebuf_r+0x1c>
 800a658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	6123      	str	r3, [r4, #16]
 800a660:	2301      	movs	r3, #1
 800a662:	6163      	str	r3, [r4, #20]
 800a664:	b002      	add	sp, #8
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	ab01      	add	r3, sp, #4
 800a66a:	466a      	mov	r2, sp
 800a66c:	f7ff ffc8 	bl	800a600 <__swhatbuf_r>
 800a670:	9900      	ldr	r1, [sp, #0]
 800a672:	4605      	mov	r5, r0
 800a674:	4630      	mov	r0, r6
 800a676:	f000 fc37 	bl	800aee8 <_malloc_r>
 800a67a:	b948      	cbnz	r0, 800a690 <__smakebuf_r+0x44>
 800a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a680:	059a      	lsls	r2, r3, #22
 800a682:	d4ef      	bmi.n	800a664 <__smakebuf_r+0x18>
 800a684:	f023 0303 	bic.w	r3, r3, #3
 800a688:	f043 0302 	orr.w	r3, r3, #2
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	e7e3      	b.n	800a658 <__smakebuf_r+0xc>
 800a690:	4b0d      	ldr	r3, [pc, #52]	; (800a6c8 <__smakebuf_r+0x7c>)
 800a692:	62b3      	str	r3, [r6, #40]	; 0x28
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	6020      	str	r0, [r4, #0]
 800a698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	9b00      	ldr	r3, [sp, #0]
 800a6a0:	6163      	str	r3, [r4, #20]
 800a6a2:	9b01      	ldr	r3, [sp, #4]
 800a6a4:	6120      	str	r0, [r4, #16]
 800a6a6:	b15b      	cbz	r3, 800a6c0 <__smakebuf_r+0x74>
 800a6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f001 fa57 	bl	800bb60 <_isatty_r>
 800a6b2:	b128      	cbz	r0, 800a6c0 <__smakebuf_r+0x74>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	f043 0301 	orr.w	r3, r3, #1
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	89a0      	ldrh	r0, [r4, #12]
 800a6c2:	4305      	orrs	r5, r0
 800a6c4:	81a5      	strh	r5, [r4, #12]
 800a6c6:	e7cd      	b.n	800a664 <__smakebuf_r+0x18>
 800a6c8:	0800a429 	.word	0x0800a429

0800a6cc <malloc>:
 800a6cc:	4b02      	ldr	r3, [pc, #8]	; (800a6d8 <malloc+0xc>)
 800a6ce:	4601      	mov	r1, r0
 800a6d0:	6818      	ldr	r0, [r3, #0]
 800a6d2:	f000 bc09 	b.w	800aee8 <_malloc_r>
 800a6d6:	bf00      	nop
 800a6d8:	2000002c 	.word	0x2000002c

0800a6dc <_Balloc>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	b976      	cbnz	r6, 800a704 <_Balloc+0x28>
 800a6e6:	2010      	movs	r0, #16
 800a6e8:	f7ff fff0 	bl	800a6cc <malloc>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	6260      	str	r0, [r4, #36]	; 0x24
 800a6f0:	b920      	cbnz	r0, 800a6fc <_Balloc+0x20>
 800a6f2:	4b18      	ldr	r3, [pc, #96]	; (800a754 <_Balloc+0x78>)
 800a6f4:	4818      	ldr	r0, [pc, #96]	; (800a758 <_Balloc+0x7c>)
 800a6f6:	2166      	movs	r1, #102	; 0x66
 800a6f8:	f001 f9f0 	bl	800badc <__assert_func>
 800a6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a700:	6006      	str	r6, [r0, #0]
 800a702:	60c6      	str	r6, [r0, #12]
 800a704:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a706:	68f3      	ldr	r3, [r6, #12]
 800a708:	b183      	cbz	r3, 800a72c <_Balloc+0x50>
 800a70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a712:	b9b8      	cbnz	r0, 800a744 <_Balloc+0x68>
 800a714:	2101      	movs	r1, #1
 800a716:	fa01 f605 	lsl.w	r6, r1, r5
 800a71a:	1d72      	adds	r2, r6, #5
 800a71c:	0092      	lsls	r2, r2, #2
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 fb60 	bl	800ade4 <_calloc_r>
 800a724:	b160      	cbz	r0, 800a740 <_Balloc+0x64>
 800a726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a72a:	e00e      	b.n	800a74a <_Balloc+0x6e>
 800a72c:	2221      	movs	r2, #33	; 0x21
 800a72e:	2104      	movs	r1, #4
 800a730:	4620      	mov	r0, r4
 800a732:	f000 fb57 	bl	800ade4 <_calloc_r>
 800a736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a738:	60f0      	str	r0, [r6, #12]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1e4      	bne.n	800a70a <_Balloc+0x2e>
 800a740:	2000      	movs	r0, #0
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	6802      	ldr	r2, [r0, #0]
 800a746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a74a:	2300      	movs	r3, #0
 800a74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a750:	e7f7      	b.n	800a742 <_Balloc+0x66>
 800a752:	bf00      	nop
 800a754:	0800c090 	.word	0x0800c090
 800a758:	0800c174 	.word	0x0800c174

0800a75c <_Bfree>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a760:	4605      	mov	r5, r0
 800a762:	460c      	mov	r4, r1
 800a764:	b976      	cbnz	r6, 800a784 <_Bfree+0x28>
 800a766:	2010      	movs	r0, #16
 800a768:	f7ff ffb0 	bl	800a6cc <malloc>
 800a76c:	4602      	mov	r2, r0
 800a76e:	6268      	str	r0, [r5, #36]	; 0x24
 800a770:	b920      	cbnz	r0, 800a77c <_Bfree+0x20>
 800a772:	4b09      	ldr	r3, [pc, #36]	; (800a798 <_Bfree+0x3c>)
 800a774:	4809      	ldr	r0, [pc, #36]	; (800a79c <_Bfree+0x40>)
 800a776:	218a      	movs	r1, #138	; 0x8a
 800a778:	f001 f9b0 	bl	800badc <__assert_func>
 800a77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a780:	6006      	str	r6, [r0, #0]
 800a782:	60c6      	str	r6, [r0, #12]
 800a784:	b13c      	cbz	r4, 800a796 <_Bfree+0x3a>
 800a786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a788:	6862      	ldr	r2, [r4, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a790:	6021      	str	r1, [r4, #0]
 800a792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a796:	bd70      	pop	{r4, r5, r6, pc}
 800a798:	0800c090 	.word	0x0800c090
 800a79c:	0800c174 	.word	0x0800c174

0800a7a0 <__multadd>:
 800a7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a4:	690d      	ldr	r5, [r1, #16]
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	461e      	mov	r6, r3
 800a7ac:	f101 0c14 	add.w	ip, r1, #20
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a7b6:	b299      	uxth	r1, r3
 800a7b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a7bc:	0c1e      	lsrs	r6, r3, #16
 800a7be:	0c0b      	lsrs	r3, r1, #16
 800a7c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a7c4:	b289      	uxth	r1, r1
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7cc:	4285      	cmp	r5, r0
 800a7ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7d6:	dcec      	bgt.n	800a7b2 <__multadd+0x12>
 800a7d8:	b30e      	cbz	r6, 800a81e <__multadd+0x7e>
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	42ab      	cmp	r3, r5
 800a7de:	dc19      	bgt.n	800a814 <__multadd+0x74>
 800a7e0:	6861      	ldr	r1, [r4, #4]
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	3101      	adds	r1, #1
 800a7e6:	f7ff ff79 	bl	800a6dc <_Balloc>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <__multadd+0x5a>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <__multadd+0x84>)
 800a7f2:	480d      	ldr	r0, [pc, #52]	; (800a828 <__multadd+0x88>)
 800a7f4:	21b5      	movs	r1, #181	; 0xb5
 800a7f6:	f001 f971 	bl	800badc <__assert_func>
 800a7fa:	6922      	ldr	r2, [r4, #16]
 800a7fc:	3202      	adds	r2, #2
 800a7fe:	f104 010c 	add.w	r1, r4, #12
 800a802:	0092      	lsls	r2, r2, #2
 800a804:	300c      	adds	r0, #12
 800a806:	f7fd ffab 	bl	8008760 <memcpy>
 800a80a:	4621      	mov	r1, r4
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7ff ffa5 	bl	800a75c <_Bfree>
 800a812:	4644      	mov	r4, r8
 800a814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a818:	3501      	adds	r5, #1
 800a81a:	615e      	str	r6, [r3, #20]
 800a81c:	6125      	str	r5, [r4, #16]
 800a81e:	4620      	mov	r0, r4
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	0800c102 	.word	0x0800c102
 800a828:	0800c174 	.word	0x0800c174

0800a82c <__hi0bits>:
 800a82c:	0c03      	lsrs	r3, r0, #16
 800a82e:	041b      	lsls	r3, r3, #16
 800a830:	b9d3      	cbnz	r3, 800a868 <__hi0bits+0x3c>
 800a832:	0400      	lsls	r0, r0, #16
 800a834:	2310      	movs	r3, #16
 800a836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a83a:	bf04      	itt	eq
 800a83c:	0200      	lsleq	r0, r0, #8
 800a83e:	3308      	addeq	r3, #8
 800a840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a844:	bf04      	itt	eq
 800a846:	0100      	lsleq	r0, r0, #4
 800a848:	3304      	addeq	r3, #4
 800a84a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a84e:	bf04      	itt	eq
 800a850:	0080      	lsleq	r0, r0, #2
 800a852:	3302      	addeq	r3, #2
 800a854:	2800      	cmp	r0, #0
 800a856:	db05      	blt.n	800a864 <__hi0bits+0x38>
 800a858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a85c:	f103 0301 	add.w	r3, r3, #1
 800a860:	bf08      	it	eq
 800a862:	2320      	moveq	r3, #32
 800a864:	4618      	mov	r0, r3
 800a866:	4770      	bx	lr
 800a868:	2300      	movs	r3, #0
 800a86a:	e7e4      	b.n	800a836 <__hi0bits+0xa>

0800a86c <__lo0bits>:
 800a86c:	6803      	ldr	r3, [r0, #0]
 800a86e:	f013 0207 	ands.w	r2, r3, #7
 800a872:	4601      	mov	r1, r0
 800a874:	d00b      	beq.n	800a88e <__lo0bits+0x22>
 800a876:	07da      	lsls	r2, r3, #31
 800a878:	d423      	bmi.n	800a8c2 <__lo0bits+0x56>
 800a87a:	0798      	lsls	r0, r3, #30
 800a87c:	bf49      	itett	mi
 800a87e:	085b      	lsrmi	r3, r3, #1
 800a880:	089b      	lsrpl	r3, r3, #2
 800a882:	2001      	movmi	r0, #1
 800a884:	600b      	strmi	r3, [r1, #0]
 800a886:	bf5c      	itt	pl
 800a888:	600b      	strpl	r3, [r1, #0]
 800a88a:	2002      	movpl	r0, #2
 800a88c:	4770      	bx	lr
 800a88e:	b298      	uxth	r0, r3
 800a890:	b9a8      	cbnz	r0, 800a8be <__lo0bits+0x52>
 800a892:	0c1b      	lsrs	r3, r3, #16
 800a894:	2010      	movs	r0, #16
 800a896:	b2da      	uxtb	r2, r3
 800a898:	b90a      	cbnz	r2, 800a89e <__lo0bits+0x32>
 800a89a:	3008      	adds	r0, #8
 800a89c:	0a1b      	lsrs	r3, r3, #8
 800a89e:	071a      	lsls	r2, r3, #28
 800a8a0:	bf04      	itt	eq
 800a8a2:	091b      	lsreq	r3, r3, #4
 800a8a4:	3004      	addeq	r0, #4
 800a8a6:	079a      	lsls	r2, r3, #30
 800a8a8:	bf04      	itt	eq
 800a8aa:	089b      	lsreq	r3, r3, #2
 800a8ac:	3002      	addeq	r0, #2
 800a8ae:	07da      	lsls	r2, r3, #31
 800a8b0:	d403      	bmi.n	800a8ba <__lo0bits+0x4e>
 800a8b2:	085b      	lsrs	r3, r3, #1
 800a8b4:	f100 0001 	add.w	r0, r0, #1
 800a8b8:	d005      	beq.n	800a8c6 <__lo0bits+0x5a>
 800a8ba:	600b      	str	r3, [r1, #0]
 800a8bc:	4770      	bx	lr
 800a8be:	4610      	mov	r0, r2
 800a8c0:	e7e9      	b.n	800a896 <__lo0bits+0x2a>
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	4770      	bx	lr
 800a8c6:	2020      	movs	r0, #32
 800a8c8:	4770      	bx	lr
	...

0800a8cc <__i2b>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	f7ff ff03 	bl	800a6dc <_Balloc>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	b928      	cbnz	r0, 800a8e6 <__i2b+0x1a>
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <__i2b+0x24>)
 800a8dc:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <__i2b+0x28>)
 800a8de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a8e2:	f001 f8fb 	bl	800badc <__assert_func>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	6144      	str	r4, [r0, #20]
 800a8ea:	6103      	str	r3, [r0, #16]
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	bf00      	nop
 800a8f0:	0800c102 	.word	0x0800c102
 800a8f4:	0800c174 	.word	0x0800c174

0800a8f8 <__multiply>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	4691      	mov	r9, r2
 800a8fe:	690a      	ldr	r2, [r1, #16]
 800a900:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a904:	429a      	cmp	r2, r3
 800a906:	bfb8      	it	lt
 800a908:	460b      	movlt	r3, r1
 800a90a:	460c      	mov	r4, r1
 800a90c:	bfbc      	itt	lt
 800a90e:	464c      	movlt	r4, r9
 800a910:	4699      	movlt	r9, r3
 800a912:	6927      	ldr	r7, [r4, #16]
 800a914:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a918:	68a3      	ldr	r3, [r4, #8]
 800a91a:	6861      	ldr	r1, [r4, #4]
 800a91c:	eb07 060a 	add.w	r6, r7, sl
 800a920:	42b3      	cmp	r3, r6
 800a922:	b085      	sub	sp, #20
 800a924:	bfb8      	it	lt
 800a926:	3101      	addlt	r1, #1
 800a928:	f7ff fed8 	bl	800a6dc <_Balloc>
 800a92c:	b930      	cbnz	r0, 800a93c <__multiply+0x44>
 800a92e:	4602      	mov	r2, r0
 800a930:	4b44      	ldr	r3, [pc, #272]	; (800aa44 <__multiply+0x14c>)
 800a932:	4845      	ldr	r0, [pc, #276]	; (800aa48 <__multiply+0x150>)
 800a934:	f240 115d 	movw	r1, #349	; 0x15d
 800a938:	f001 f8d0 	bl	800badc <__assert_func>
 800a93c:	f100 0514 	add.w	r5, r0, #20
 800a940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a944:	462b      	mov	r3, r5
 800a946:	2200      	movs	r2, #0
 800a948:	4543      	cmp	r3, r8
 800a94a:	d321      	bcc.n	800a990 <__multiply+0x98>
 800a94c:	f104 0314 	add.w	r3, r4, #20
 800a950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a954:	f109 0314 	add.w	r3, r9, #20
 800a958:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a95c:	9202      	str	r2, [sp, #8]
 800a95e:	1b3a      	subs	r2, r7, r4
 800a960:	3a15      	subs	r2, #21
 800a962:	f022 0203 	bic.w	r2, r2, #3
 800a966:	3204      	adds	r2, #4
 800a968:	f104 0115 	add.w	r1, r4, #21
 800a96c:	428f      	cmp	r7, r1
 800a96e:	bf38      	it	cc
 800a970:	2204      	movcc	r2, #4
 800a972:	9201      	str	r2, [sp, #4]
 800a974:	9a02      	ldr	r2, [sp, #8]
 800a976:	9303      	str	r3, [sp, #12]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d80c      	bhi.n	800a996 <__multiply+0x9e>
 800a97c:	2e00      	cmp	r6, #0
 800a97e:	dd03      	ble.n	800a988 <__multiply+0x90>
 800a980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a984:	2b00      	cmp	r3, #0
 800a986:	d05a      	beq.n	800aa3e <__multiply+0x146>
 800a988:	6106      	str	r6, [r0, #16]
 800a98a:	b005      	add	sp, #20
 800a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a990:	f843 2b04 	str.w	r2, [r3], #4
 800a994:	e7d8      	b.n	800a948 <__multiply+0x50>
 800a996:	f8b3 a000 	ldrh.w	sl, [r3]
 800a99a:	f1ba 0f00 	cmp.w	sl, #0
 800a99e:	d024      	beq.n	800a9ea <__multiply+0xf2>
 800a9a0:	f104 0e14 	add.w	lr, r4, #20
 800a9a4:	46a9      	mov	r9, r5
 800a9a6:	f04f 0c00 	mov.w	ip, #0
 800a9aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a9ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a9b2:	fa1f fb82 	uxth.w	fp, r2
 800a9b6:	b289      	uxth	r1, r1
 800a9b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a9bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a9c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a9c4:	4461      	add	r1, ip
 800a9c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a9ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a9d2:	b289      	uxth	r1, r1
 800a9d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9d8:	4577      	cmp	r7, lr
 800a9da:	f849 1b04 	str.w	r1, [r9], #4
 800a9de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9e2:	d8e2      	bhi.n	800a9aa <__multiply+0xb2>
 800a9e4:	9a01      	ldr	r2, [sp, #4]
 800a9e6:	f845 c002 	str.w	ip, [r5, r2]
 800a9ea:	9a03      	ldr	r2, [sp, #12]
 800a9ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	f1b9 0f00 	cmp.w	r9, #0
 800a9f6:	d020      	beq.n	800aa3a <__multiply+0x142>
 800a9f8:	6829      	ldr	r1, [r5, #0]
 800a9fa:	f104 0c14 	add.w	ip, r4, #20
 800a9fe:	46ae      	mov	lr, r5
 800aa00:	f04f 0a00 	mov.w	sl, #0
 800aa04:	f8bc b000 	ldrh.w	fp, [ip]
 800aa08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa0c:	fb09 220b 	mla	r2, r9, fp, r2
 800aa10:	4492      	add	sl, r2
 800aa12:	b289      	uxth	r1, r1
 800aa14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aa18:	f84e 1b04 	str.w	r1, [lr], #4
 800aa1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa20:	f8be 1000 	ldrh.w	r1, [lr]
 800aa24:	0c12      	lsrs	r2, r2, #16
 800aa26:	fb09 1102 	mla	r1, r9, r2, r1
 800aa2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aa2e:	4567      	cmp	r7, ip
 800aa30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa34:	d8e6      	bhi.n	800aa04 <__multiply+0x10c>
 800aa36:	9a01      	ldr	r2, [sp, #4]
 800aa38:	50a9      	str	r1, [r5, r2]
 800aa3a:	3504      	adds	r5, #4
 800aa3c:	e79a      	b.n	800a974 <__multiply+0x7c>
 800aa3e:	3e01      	subs	r6, #1
 800aa40:	e79c      	b.n	800a97c <__multiply+0x84>
 800aa42:	bf00      	nop
 800aa44:	0800c102 	.word	0x0800c102
 800aa48:	0800c174 	.word	0x0800c174

0800aa4c <__pow5mult>:
 800aa4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa50:	4615      	mov	r5, r2
 800aa52:	f012 0203 	ands.w	r2, r2, #3
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	d007      	beq.n	800aa6c <__pow5mult+0x20>
 800aa5c:	4c25      	ldr	r4, [pc, #148]	; (800aaf4 <__pow5mult+0xa8>)
 800aa5e:	3a01      	subs	r2, #1
 800aa60:	2300      	movs	r3, #0
 800aa62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa66:	f7ff fe9b 	bl	800a7a0 <__multadd>
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	10ad      	asrs	r5, r5, #2
 800aa6e:	d03d      	beq.n	800aaec <__pow5mult+0xa0>
 800aa70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa72:	b97c      	cbnz	r4, 800aa94 <__pow5mult+0x48>
 800aa74:	2010      	movs	r0, #16
 800aa76:	f7ff fe29 	bl	800a6cc <malloc>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	6270      	str	r0, [r6, #36]	; 0x24
 800aa7e:	b928      	cbnz	r0, 800aa8c <__pow5mult+0x40>
 800aa80:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <__pow5mult+0xac>)
 800aa82:	481e      	ldr	r0, [pc, #120]	; (800aafc <__pow5mult+0xb0>)
 800aa84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa88:	f001 f828 	bl	800badc <__assert_func>
 800aa8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa90:	6004      	str	r4, [r0, #0]
 800aa92:	60c4      	str	r4, [r0, #12]
 800aa94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa9c:	b94c      	cbnz	r4, 800aab2 <__pow5mult+0x66>
 800aa9e:	f240 2171 	movw	r1, #625	; 0x271
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7ff ff12 	bl	800a8cc <__i2b>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaae:	4604      	mov	r4, r0
 800aab0:	6003      	str	r3, [r0, #0]
 800aab2:	f04f 0900 	mov.w	r9, #0
 800aab6:	07eb      	lsls	r3, r5, #31
 800aab8:	d50a      	bpl.n	800aad0 <__pow5mult+0x84>
 800aaba:	4639      	mov	r1, r7
 800aabc:	4622      	mov	r2, r4
 800aabe:	4630      	mov	r0, r6
 800aac0:	f7ff ff1a 	bl	800a8f8 <__multiply>
 800aac4:	4639      	mov	r1, r7
 800aac6:	4680      	mov	r8, r0
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7ff fe47 	bl	800a75c <_Bfree>
 800aace:	4647      	mov	r7, r8
 800aad0:	106d      	asrs	r5, r5, #1
 800aad2:	d00b      	beq.n	800aaec <__pow5mult+0xa0>
 800aad4:	6820      	ldr	r0, [r4, #0]
 800aad6:	b938      	cbnz	r0, 800aae8 <__pow5mult+0x9c>
 800aad8:	4622      	mov	r2, r4
 800aada:	4621      	mov	r1, r4
 800aadc:	4630      	mov	r0, r6
 800aade:	f7ff ff0b 	bl	800a8f8 <__multiply>
 800aae2:	6020      	str	r0, [r4, #0]
 800aae4:	f8c0 9000 	str.w	r9, [r0]
 800aae8:	4604      	mov	r4, r0
 800aaea:	e7e4      	b.n	800aab6 <__pow5mult+0x6a>
 800aaec:	4638      	mov	r0, r7
 800aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	bf00      	nop
 800aaf4:	0800c2c0 	.word	0x0800c2c0
 800aaf8:	0800c090 	.word	0x0800c090
 800aafc:	0800c174 	.word	0x0800c174

0800ab00 <__lshift>:
 800ab00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab04:	460c      	mov	r4, r1
 800ab06:	6849      	ldr	r1, [r1, #4]
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab0e:	68a3      	ldr	r3, [r4, #8]
 800ab10:	4607      	mov	r7, r0
 800ab12:	4691      	mov	r9, r2
 800ab14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab18:	f108 0601 	add.w	r6, r8, #1
 800ab1c:	42b3      	cmp	r3, r6
 800ab1e:	db0b      	blt.n	800ab38 <__lshift+0x38>
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff fddb 	bl	800a6dc <_Balloc>
 800ab26:	4605      	mov	r5, r0
 800ab28:	b948      	cbnz	r0, 800ab3e <__lshift+0x3e>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	4b2a      	ldr	r3, [pc, #168]	; (800abd8 <__lshift+0xd8>)
 800ab2e:	482b      	ldr	r0, [pc, #172]	; (800abdc <__lshift+0xdc>)
 800ab30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab34:	f000 ffd2 	bl	800badc <__assert_func>
 800ab38:	3101      	adds	r1, #1
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	e7ee      	b.n	800ab1c <__lshift+0x1c>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f100 0114 	add.w	r1, r0, #20
 800ab44:	f100 0210 	add.w	r2, r0, #16
 800ab48:	4618      	mov	r0, r3
 800ab4a:	4553      	cmp	r3, sl
 800ab4c:	db37      	blt.n	800abbe <__lshift+0xbe>
 800ab4e:	6920      	ldr	r0, [r4, #16]
 800ab50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab54:	f104 0314 	add.w	r3, r4, #20
 800ab58:	f019 091f 	ands.w	r9, r9, #31
 800ab5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab64:	d02f      	beq.n	800abc6 <__lshift+0xc6>
 800ab66:	f1c9 0e20 	rsb	lr, r9, #32
 800ab6a:	468a      	mov	sl, r1
 800ab6c:	f04f 0c00 	mov.w	ip, #0
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	fa02 f209 	lsl.w	r2, r2, r9
 800ab76:	ea42 020c 	orr.w	r2, r2, ip
 800ab7a:	f84a 2b04 	str.w	r2, [sl], #4
 800ab7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab82:	4298      	cmp	r0, r3
 800ab84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ab88:	d8f2      	bhi.n	800ab70 <__lshift+0x70>
 800ab8a:	1b03      	subs	r3, r0, r4
 800ab8c:	3b15      	subs	r3, #21
 800ab8e:	f023 0303 	bic.w	r3, r3, #3
 800ab92:	3304      	adds	r3, #4
 800ab94:	f104 0215 	add.w	r2, r4, #21
 800ab98:	4290      	cmp	r0, r2
 800ab9a:	bf38      	it	cc
 800ab9c:	2304      	movcc	r3, #4
 800ab9e:	f841 c003 	str.w	ip, [r1, r3]
 800aba2:	f1bc 0f00 	cmp.w	ip, #0
 800aba6:	d001      	beq.n	800abac <__lshift+0xac>
 800aba8:	f108 0602 	add.w	r6, r8, #2
 800abac:	3e01      	subs	r6, #1
 800abae:	4638      	mov	r0, r7
 800abb0:	612e      	str	r6, [r5, #16]
 800abb2:	4621      	mov	r1, r4
 800abb4:	f7ff fdd2 	bl	800a75c <_Bfree>
 800abb8:	4628      	mov	r0, r5
 800abba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800abc2:	3301      	adds	r3, #1
 800abc4:	e7c1      	b.n	800ab4a <__lshift+0x4a>
 800abc6:	3904      	subs	r1, #4
 800abc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800abd0:	4298      	cmp	r0, r3
 800abd2:	d8f9      	bhi.n	800abc8 <__lshift+0xc8>
 800abd4:	e7ea      	b.n	800abac <__lshift+0xac>
 800abd6:	bf00      	nop
 800abd8:	0800c102 	.word	0x0800c102
 800abdc:	0800c174 	.word	0x0800c174

0800abe0 <__mcmp>:
 800abe0:	b530      	push	{r4, r5, lr}
 800abe2:	6902      	ldr	r2, [r0, #16]
 800abe4:	690c      	ldr	r4, [r1, #16]
 800abe6:	1b12      	subs	r2, r2, r4
 800abe8:	d10e      	bne.n	800ac08 <__mcmp+0x28>
 800abea:	f100 0314 	add.w	r3, r0, #20
 800abee:	3114      	adds	r1, #20
 800abf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800abfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac00:	42a5      	cmp	r5, r4
 800ac02:	d003      	beq.n	800ac0c <__mcmp+0x2c>
 800ac04:	d305      	bcc.n	800ac12 <__mcmp+0x32>
 800ac06:	2201      	movs	r2, #1
 800ac08:	4610      	mov	r0, r2
 800ac0a:	bd30      	pop	{r4, r5, pc}
 800ac0c:	4283      	cmp	r3, r0
 800ac0e:	d3f3      	bcc.n	800abf8 <__mcmp+0x18>
 800ac10:	e7fa      	b.n	800ac08 <__mcmp+0x28>
 800ac12:	f04f 32ff 	mov.w	r2, #4294967295
 800ac16:	e7f7      	b.n	800ac08 <__mcmp+0x28>

0800ac18 <__mdiff>:
 800ac18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	4606      	mov	r6, r0
 800ac20:	4611      	mov	r1, r2
 800ac22:	4620      	mov	r0, r4
 800ac24:	4690      	mov	r8, r2
 800ac26:	f7ff ffdb 	bl	800abe0 <__mcmp>
 800ac2a:	1e05      	subs	r5, r0, #0
 800ac2c:	d110      	bne.n	800ac50 <__mdiff+0x38>
 800ac2e:	4629      	mov	r1, r5
 800ac30:	4630      	mov	r0, r6
 800ac32:	f7ff fd53 	bl	800a6dc <_Balloc>
 800ac36:	b930      	cbnz	r0, 800ac46 <__mdiff+0x2e>
 800ac38:	4b3a      	ldr	r3, [pc, #232]	; (800ad24 <__mdiff+0x10c>)
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	f240 2132 	movw	r1, #562	; 0x232
 800ac40:	4839      	ldr	r0, [pc, #228]	; (800ad28 <__mdiff+0x110>)
 800ac42:	f000 ff4b 	bl	800badc <__assert_func>
 800ac46:	2301      	movs	r3, #1
 800ac48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac50:	bfa4      	itt	ge
 800ac52:	4643      	movge	r3, r8
 800ac54:	46a0      	movge	r8, r4
 800ac56:	4630      	mov	r0, r6
 800ac58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac5c:	bfa6      	itte	ge
 800ac5e:	461c      	movge	r4, r3
 800ac60:	2500      	movge	r5, #0
 800ac62:	2501      	movlt	r5, #1
 800ac64:	f7ff fd3a 	bl	800a6dc <_Balloc>
 800ac68:	b920      	cbnz	r0, 800ac74 <__mdiff+0x5c>
 800ac6a:	4b2e      	ldr	r3, [pc, #184]	; (800ad24 <__mdiff+0x10c>)
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac72:	e7e5      	b.n	800ac40 <__mdiff+0x28>
 800ac74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac78:	6926      	ldr	r6, [r4, #16]
 800ac7a:	60c5      	str	r5, [r0, #12]
 800ac7c:	f104 0914 	add.w	r9, r4, #20
 800ac80:	f108 0514 	add.w	r5, r8, #20
 800ac84:	f100 0e14 	add.w	lr, r0, #20
 800ac88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac90:	f108 0210 	add.w	r2, r8, #16
 800ac94:	46f2      	mov	sl, lr
 800ac96:	2100      	movs	r1, #0
 800ac98:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aca0:	fa1f f883 	uxth.w	r8, r3
 800aca4:	fa11 f18b 	uxtah	r1, r1, fp
 800aca8:	0c1b      	lsrs	r3, r3, #16
 800acaa:	eba1 0808 	sub.w	r8, r1, r8
 800acae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800acb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800acb6:	fa1f f888 	uxth.w	r8, r8
 800acba:	1419      	asrs	r1, r3, #16
 800acbc:	454e      	cmp	r6, r9
 800acbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acc2:	f84a 3b04 	str.w	r3, [sl], #4
 800acc6:	d8e7      	bhi.n	800ac98 <__mdiff+0x80>
 800acc8:	1b33      	subs	r3, r6, r4
 800acca:	3b15      	subs	r3, #21
 800accc:	f023 0303 	bic.w	r3, r3, #3
 800acd0:	3304      	adds	r3, #4
 800acd2:	3415      	adds	r4, #21
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	bf38      	it	cc
 800acd8:	2304      	movcc	r3, #4
 800acda:	441d      	add	r5, r3
 800acdc:	4473      	add	r3, lr
 800acde:	469e      	mov	lr, r3
 800ace0:	462e      	mov	r6, r5
 800ace2:	4566      	cmp	r6, ip
 800ace4:	d30e      	bcc.n	800ad04 <__mdiff+0xec>
 800ace6:	f10c 0203 	add.w	r2, ip, #3
 800acea:	1b52      	subs	r2, r2, r5
 800acec:	f022 0203 	bic.w	r2, r2, #3
 800acf0:	3d03      	subs	r5, #3
 800acf2:	45ac      	cmp	ip, r5
 800acf4:	bf38      	it	cc
 800acf6:	2200      	movcc	r2, #0
 800acf8:	441a      	add	r2, r3
 800acfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800acfe:	b17b      	cbz	r3, 800ad20 <__mdiff+0x108>
 800ad00:	6107      	str	r7, [r0, #16]
 800ad02:	e7a3      	b.n	800ac4c <__mdiff+0x34>
 800ad04:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad08:	fa11 f288 	uxtah	r2, r1, r8
 800ad0c:	1414      	asrs	r4, r2, #16
 800ad0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ad12:	b292      	uxth	r2, r2
 800ad14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ad18:	f84e 2b04 	str.w	r2, [lr], #4
 800ad1c:	1421      	asrs	r1, r4, #16
 800ad1e:	e7e0      	b.n	800ace2 <__mdiff+0xca>
 800ad20:	3f01      	subs	r7, #1
 800ad22:	e7ea      	b.n	800acfa <__mdiff+0xe2>
 800ad24:	0800c102 	.word	0x0800c102
 800ad28:	0800c174 	.word	0x0800c174

0800ad2c <__d2b>:
 800ad2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad30:	4689      	mov	r9, r1
 800ad32:	2101      	movs	r1, #1
 800ad34:	ec57 6b10 	vmov	r6, r7, d0
 800ad38:	4690      	mov	r8, r2
 800ad3a:	f7ff fccf 	bl	800a6dc <_Balloc>
 800ad3e:	4604      	mov	r4, r0
 800ad40:	b930      	cbnz	r0, 800ad50 <__d2b+0x24>
 800ad42:	4602      	mov	r2, r0
 800ad44:	4b25      	ldr	r3, [pc, #148]	; (800addc <__d2b+0xb0>)
 800ad46:	4826      	ldr	r0, [pc, #152]	; (800ade0 <__d2b+0xb4>)
 800ad48:	f240 310a 	movw	r1, #778	; 0x30a
 800ad4c:	f000 fec6 	bl	800badc <__assert_func>
 800ad50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad58:	bb35      	cbnz	r5, 800ada8 <__d2b+0x7c>
 800ad5a:	2e00      	cmp	r6, #0
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	d028      	beq.n	800adb2 <__d2b+0x86>
 800ad60:	4668      	mov	r0, sp
 800ad62:	9600      	str	r6, [sp, #0]
 800ad64:	f7ff fd82 	bl	800a86c <__lo0bits>
 800ad68:	9900      	ldr	r1, [sp, #0]
 800ad6a:	b300      	cbz	r0, 800adae <__d2b+0x82>
 800ad6c:	9a01      	ldr	r2, [sp, #4]
 800ad6e:	f1c0 0320 	rsb	r3, r0, #32
 800ad72:	fa02 f303 	lsl.w	r3, r2, r3
 800ad76:	430b      	orrs	r3, r1
 800ad78:	40c2      	lsrs	r2, r0
 800ad7a:	6163      	str	r3, [r4, #20]
 800ad7c:	9201      	str	r2, [sp, #4]
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	61a3      	str	r3, [r4, #24]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bf14      	ite	ne
 800ad86:	2202      	movne	r2, #2
 800ad88:	2201      	moveq	r2, #1
 800ad8a:	6122      	str	r2, [r4, #16]
 800ad8c:	b1d5      	cbz	r5, 800adc4 <__d2b+0x98>
 800ad8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad92:	4405      	add	r5, r0
 800ad94:	f8c9 5000 	str.w	r5, [r9]
 800ad98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad9c:	f8c8 0000 	str.w	r0, [r8]
 800ada0:	4620      	mov	r0, r4
 800ada2:	b003      	add	sp, #12
 800ada4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adac:	e7d5      	b.n	800ad5a <__d2b+0x2e>
 800adae:	6161      	str	r1, [r4, #20]
 800adb0:	e7e5      	b.n	800ad7e <__d2b+0x52>
 800adb2:	a801      	add	r0, sp, #4
 800adb4:	f7ff fd5a 	bl	800a86c <__lo0bits>
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	6163      	str	r3, [r4, #20]
 800adbc:	2201      	movs	r2, #1
 800adbe:	6122      	str	r2, [r4, #16]
 800adc0:	3020      	adds	r0, #32
 800adc2:	e7e3      	b.n	800ad8c <__d2b+0x60>
 800adc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adcc:	f8c9 0000 	str.w	r0, [r9]
 800add0:	6918      	ldr	r0, [r3, #16]
 800add2:	f7ff fd2b 	bl	800a82c <__hi0bits>
 800add6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adda:	e7df      	b.n	800ad9c <__d2b+0x70>
 800addc:	0800c102 	.word	0x0800c102
 800ade0:	0800c174 	.word	0x0800c174

0800ade4 <_calloc_r>:
 800ade4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ade6:	fba1 2402 	umull	r2, r4, r1, r2
 800adea:	b94c      	cbnz	r4, 800ae00 <_calloc_r+0x1c>
 800adec:	4611      	mov	r1, r2
 800adee:	9201      	str	r2, [sp, #4]
 800adf0:	f000 f87a 	bl	800aee8 <_malloc_r>
 800adf4:	9a01      	ldr	r2, [sp, #4]
 800adf6:	4605      	mov	r5, r0
 800adf8:	b930      	cbnz	r0, 800ae08 <_calloc_r+0x24>
 800adfa:	4628      	mov	r0, r5
 800adfc:	b003      	add	sp, #12
 800adfe:	bd30      	pop	{r4, r5, pc}
 800ae00:	220c      	movs	r2, #12
 800ae02:	6002      	str	r2, [r0, #0]
 800ae04:	2500      	movs	r5, #0
 800ae06:	e7f8      	b.n	800adfa <_calloc_r+0x16>
 800ae08:	4621      	mov	r1, r4
 800ae0a:	f7fd fcb7 	bl	800877c <memset>
 800ae0e:	e7f4      	b.n	800adfa <_calloc_r+0x16>

0800ae10 <_free_r>:
 800ae10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae12:	2900      	cmp	r1, #0
 800ae14:	d044      	beq.n	800aea0 <_free_r+0x90>
 800ae16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae1a:	9001      	str	r0, [sp, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ae22:	bfb8      	it	lt
 800ae24:	18e4      	addlt	r4, r4, r3
 800ae26:	f000 febd 	bl	800bba4 <__malloc_lock>
 800ae2a:	4a1e      	ldr	r2, [pc, #120]	; (800aea4 <_free_r+0x94>)
 800ae2c:	9801      	ldr	r0, [sp, #4]
 800ae2e:	6813      	ldr	r3, [r2, #0]
 800ae30:	b933      	cbnz	r3, 800ae40 <_free_r+0x30>
 800ae32:	6063      	str	r3, [r4, #4]
 800ae34:	6014      	str	r4, [r2, #0]
 800ae36:	b003      	add	sp, #12
 800ae38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae3c:	f000 beb8 	b.w	800bbb0 <__malloc_unlock>
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	d908      	bls.n	800ae56 <_free_r+0x46>
 800ae44:	6825      	ldr	r5, [r4, #0]
 800ae46:	1961      	adds	r1, r4, r5
 800ae48:	428b      	cmp	r3, r1
 800ae4a:	bf01      	itttt	eq
 800ae4c:	6819      	ldreq	r1, [r3, #0]
 800ae4e:	685b      	ldreq	r3, [r3, #4]
 800ae50:	1949      	addeq	r1, r1, r5
 800ae52:	6021      	streq	r1, [r4, #0]
 800ae54:	e7ed      	b.n	800ae32 <_free_r+0x22>
 800ae56:	461a      	mov	r2, r3
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	b10b      	cbz	r3, 800ae60 <_free_r+0x50>
 800ae5c:	42a3      	cmp	r3, r4
 800ae5e:	d9fa      	bls.n	800ae56 <_free_r+0x46>
 800ae60:	6811      	ldr	r1, [r2, #0]
 800ae62:	1855      	adds	r5, r2, r1
 800ae64:	42a5      	cmp	r5, r4
 800ae66:	d10b      	bne.n	800ae80 <_free_r+0x70>
 800ae68:	6824      	ldr	r4, [r4, #0]
 800ae6a:	4421      	add	r1, r4
 800ae6c:	1854      	adds	r4, r2, r1
 800ae6e:	42a3      	cmp	r3, r4
 800ae70:	6011      	str	r1, [r2, #0]
 800ae72:	d1e0      	bne.n	800ae36 <_free_r+0x26>
 800ae74:	681c      	ldr	r4, [r3, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	6053      	str	r3, [r2, #4]
 800ae7a:	4421      	add	r1, r4
 800ae7c:	6011      	str	r1, [r2, #0]
 800ae7e:	e7da      	b.n	800ae36 <_free_r+0x26>
 800ae80:	d902      	bls.n	800ae88 <_free_r+0x78>
 800ae82:	230c      	movs	r3, #12
 800ae84:	6003      	str	r3, [r0, #0]
 800ae86:	e7d6      	b.n	800ae36 <_free_r+0x26>
 800ae88:	6825      	ldr	r5, [r4, #0]
 800ae8a:	1961      	adds	r1, r4, r5
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	bf04      	itt	eq
 800ae90:	6819      	ldreq	r1, [r3, #0]
 800ae92:	685b      	ldreq	r3, [r3, #4]
 800ae94:	6063      	str	r3, [r4, #4]
 800ae96:	bf04      	itt	eq
 800ae98:	1949      	addeq	r1, r1, r5
 800ae9a:	6021      	streq	r1, [r4, #0]
 800ae9c:	6054      	str	r4, [r2, #4]
 800ae9e:	e7ca      	b.n	800ae36 <_free_r+0x26>
 800aea0:	b003      	add	sp, #12
 800aea2:	bd30      	pop	{r4, r5, pc}
 800aea4:	200008ec 	.word	0x200008ec

0800aea8 <sbrk_aligned>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	4e0e      	ldr	r6, [pc, #56]	; (800aee4 <sbrk_aligned+0x3c>)
 800aeac:	460c      	mov	r4, r1
 800aeae:	6831      	ldr	r1, [r6, #0]
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	b911      	cbnz	r1, 800aeba <sbrk_aligned+0x12>
 800aeb4:	f000 fd1c 	bl	800b8f0 <_sbrk_r>
 800aeb8:	6030      	str	r0, [r6, #0]
 800aeba:	4621      	mov	r1, r4
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 fd17 	bl	800b8f0 <_sbrk_r>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	d00a      	beq.n	800aedc <sbrk_aligned+0x34>
 800aec6:	1cc4      	adds	r4, r0, #3
 800aec8:	f024 0403 	bic.w	r4, r4, #3
 800aecc:	42a0      	cmp	r0, r4
 800aece:	d007      	beq.n	800aee0 <sbrk_aligned+0x38>
 800aed0:	1a21      	subs	r1, r4, r0
 800aed2:	4628      	mov	r0, r5
 800aed4:	f000 fd0c 	bl	800b8f0 <_sbrk_r>
 800aed8:	3001      	adds	r0, #1
 800aeda:	d101      	bne.n	800aee0 <sbrk_aligned+0x38>
 800aedc:	f04f 34ff 	mov.w	r4, #4294967295
 800aee0:	4620      	mov	r0, r4
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	200008f0 	.word	0x200008f0

0800aee8 <_malloc_r>:
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	1ccd      	adds	r5, r1, #3
 800aeee:	f025 0503 	bic.w	r5, r5, #3
 800aef2:	3508      	adds	r5, #8
 800aef4:	2d0c      	cmp	r5, #12
 800aef6:	bf38      	it	cc
 800aef8:	250c      	movcc	r5, #12
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	4607      	mov	r7, r0
 800aefe:	db01      	blt.n	800af04 <_malloc_r+0x1c>
 800af00:	42a9      	cmp	r1, r5
 800af02:	d905      	bls.n	800af10 <_malloc_r+0x28>
 800af04:	230c      	movs	r3, #12
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	2600      	movs	r6, #0
 800af0a:	4630      	mov	r0, r6
 800af0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af10:	4e2e      	ldr	r6, [pc, #184]	; (800afcc <_malloc_r+0xe4>)
 800af12:	f000 fe47 	bl	800bba4 <__malloc_lock>
 800af16:	6833      	ldr	r3, [r6, #0]
 800af18:	461c      	mov	r4, r3
 800af1a:	bb34      	cbnz	r4, 800af6a <_malloc_r+0x82>
 800af1c:	4629      	mov	r1, r5
 800af1e:	4638      	mov	r0, r7
 800af20:	f7ff ffc2 	bl	800aea8 <sbrk_aligned>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	4604      	mov	r4, r0
 800af28:	d14d      	bne.n	800afc6 <_malloc_r+0xde>
 800af2a:	6834      	ldr	r4, [r6, #0]
 800af2c:	4626      	mov	r6, r4
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d140      	bne.n	800afb4 <_malloc_r+0xcc>
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	4631      	mov	r1, r6
 800af36:	4638      	mov	r0, r7
 800af38:	eb04 0803 	add.w	r8, r4, r3
 800af3c:	f000 fcd8 	bl	800b8f0 <_sbrk_r>
 800af40:	4580      	cmp	r8, r0
 800af42:	d13a      	bne.n	800afba <_malloc_r+0xd2>
 800af44:	6821      	ldr	r1, [r4, #0]
 800af46:	3503      	adds	r5, #3
 800af48:	1a6d      	subs	r5, r5, r1
 800af4a:	f025 0503 	bic.w	r5, r5, #3
 800af4e:	3508      	adds	r5, #8
 800af50:	2d0c      	cmp	r5, #12
 800af52:	bf38      	it	cc
 800af54:	250c      	movcc	r5, #12
 800af56:	4629      	mov	r1, r5
 800af58:	4638      	mov	r0, r7
 800af5a:	f7ff ffa5 	bl	800aea8 <sbrk_aligned>
 800af5e:	3001      	adds	r0, #1
 800af60:	d02b      	beq.n	800afba <_malloc_r+0xd2>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	442b      	add	r3, r5
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	e00e      	b.n	800af88 <_malloc_r+0xa0>
 800af6a:	6822      	ldr	r2, [r4, #0]
 800af6c:	1b52      	subs	r2, r2, r5
 800af6e:	d41e      	bmi.n	800afae <_malloc_r+0xc6>
 800af70:	2a0b      	cmp	r2, #11
 800af72:	d916      	bls.n	800afa2 <_malloc_r+0xba>
 800af74:	1961      	adds	r1, r4, r5
 800af76:	42a3      	cmp	r3, r4
 800af78:	6025      	str	r5, [r4, #0]
 800af7a:	bf18      	it	ne
 800af7c:	6059      	strne	r1, [r3, #4]
 800af7e:	6863      	ldr	r3, [r4, #4]
 800af80:	bf08      	it	eq
 800af82:	6031      	streq	r1, [r6, #0]
 800af84:	5162      	str	r2, [r4, r5]
 800af86:	604b      	str	r3, [r1, #4]
 800af88:	4638      	mov	r0, r7
 800af8a:	f104 060b 	add.w	r6, r4, #11
 800af8e:	f000 fe0f 	bl	800bbb0 <__malloc_unlock>
 800af92:	f026 0607 	bic.w	r6, r6, #7
 800af96:	1d23      	adds	r3, r4, #4
 800af98:	1af2      	subs	r2, r6, r3
 800af9a:	d0b6      	beq.n	800af0a <_malloc_r+0x22>
 800af9c:	1b9b      	subs	r3, r3, r6
 800af9e:	50a3      	str	r3, [r4, r2]
 800afa0:	e7b3      	b.n	800af0a <_malloc_r+0x22>
 800afa2:	6862      	ldr	r2, [r4, #4]
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	bf0c      	ite	eq
 800afa8:	6032      	streq	r2, [r6, #0]
 800afaa:	605a      	strne	r2, [r3, #4]
 800afac:	e7ec      	b.n	800af88 <_malloc_r+0xa0>
 800afae:	4623      	mov	r3, r4
 800afb0:	6864      	ldr	r4, [r4, #4]
 800afb2:	e7b2      	b.n	800af1a <_malloc_r+0x32>
 800afb4:	4634      	mov	r4, r6
 800afb6:	6876      	ldr	r6, [r6, #4]
 800afb8:	e7b9      	b.n	800af2e <_malloc_r+0x46>
 800afba:	230c      	movs	r3, #12
 800afbc:	603b      	str	r3, [r7, #0]
 800afbe:	4638      	mov	r0, r7
 800afc0:	f000 fdf6 	bl	800bbb0 <__malloc_unlock>
 800afc4:	e7a1      	b.n	800af0a <_malloc_r+0x22>
 800afc6:	6025      	str	r5, [r4, #0]
 800afc8:	e7de      	b.n	800af88 <_malloc_r+0xa0>
 800afca:	bf00      	nop
 800afcc:	200008ec 	.word	0x200008ec

0800afd0 <_sungetc_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	1c4b      	adds	r3, r1, #1
 800afd4:	4614      	mov	r4, r2
 800afd6:	d103      	bne.n	800afe0 <_sungetc_r+0x10>
 800afd8:	f04f 35ff 	mov.w	r5, #4294967295
 800afdc:	4628      	mov	r0, r5
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	8993      	ldrh	r3, [r2, #12]
 800afe2:	f023 0320 	bic.w	r3, r3, #32
 800afe6:	8193      	strh	r3, [r2, #12]
 800afe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afea:	6852      	ldr	r2, [r2, #4]
 800afec:	b2cd      	uxtb	r5, r1
 800afee:	b18b      	cbz	r3, 800b014 <_sungetc_r+0x44>
 800aff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aff2:	4293      	cmp	r3, r2
 800aff4:	dd08      	ble.n	800b008 <_sungetc_r+0x38>
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	1e5a      	subs	r2, r3, #1
 800affa:	6022      	str	r2, [r4, #0]
 800affc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	3301      	adds	r3, #1
 800b004:	6063      	str	r3, [r4, #4]
 800b006:	e7e9      	b.n	800afdc <_sungetc_r+0xc>
 800b008:	4621      	mov	r1, r4
 800b00a:	f000 fd2d 	bl	800ba68 <__submore>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d0f1      	beq.n	800aff6 <_sungetc_r+0x26>
 800b012:	e7e1      	b.n	800afd8 <_sungetc_r+0x8>
 800b014:	6921      	ldr	r1, [r4, #16]
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	b151      	cbz	r1, 800b030 <_sungetc_r+0x60>
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d208      	bcs.n	800b030 <_sungetc_r+0x60>
 800b01e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b022:	42a9      	cmp	r1, r5
 800b024:	d104      	bne.n	800b030 <_sungetc_r+0x60>
 800b026:	3b01      	subs	r3, #1
 800b028:	3201      	adds	r2, #1
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	6062      	str	r2, [r4, #4]
 800b02e:	e7d5      	b.n	800afdc <_sungetc_r+0xc>
 800b030:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b038:	6363      	str	r3, [r4, #52]	; 0x34
 800b03a:	2303      	movs	r3, #3
 800b03c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b03e:	4623      	mov	r3, r4
 800b040:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	2301      	movs	r3, #1
 800b048:	e7dc      	b.n	800b004 <_sungetc_r+0x34>

0800b04a <__ssrefill_r>:
 800b04a:	b510      	push	{r4, lr}
 800b04c:	460c      	mov	r4, r1
 800b04e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b050:	b169      	cbz	r1, 800b06e <__ssrefill_r+0x24>
 800b052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b056:	4299      	cmp	r1, r3
 800b058:	d001      	beq.n	800b05e <__ssrefill_r+0x14>
 800b05a:	f7ff fed9 	bl	800ae10 <_free_r>
 800b05e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b060:	6063      	str	r3, [r4, #4]
 800b062:	2000      	movs	r0, #0
 800b064:	6360      	str	r0, [r4, #52]	; 0x34
 800b066:	b113      	cbz	r3, 800b06e <__ssrefill_r+0x24>
 800b068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	2300      	movs	r3, #0
 800b074:	6063      	str	r3, [r4, #4]
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	f043 0320 	orr.w	r3, r3, #32
 800b07c:	81a3      	strh	r3, [r4, #12]
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	e7f3      	b.n	800b06c <__ssrefill_r+0x22>

0800b084 <__ssvfiscanf_r>:
 800b084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b088:	460c      	mov	r4, r1
 800b08a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b08e:	2100      	movs	r1, #0
 800b090:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b094:	49a6      	ldr	r1, [pc, #664]	; (800b330 <__ssvfiscanf_r+0x2ac>)
 800b096:	91a0      	str	r1, [sp, #640]	; 0x280
 800b098:	f10d 0804 	add.w	r8, sp, #4
 800b09c:	49a5      	ldr	r1, [pc, #660]	; (800b334 <__ssvfiscanf_r+0x2b0>)
 800b09e:	4fa6      	ldr	r7, [pc, #664]	; (800b338 <__ssvfiscanf_r+0x2b4>)
 800b0a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b33c <__ssvfiscanf_r+0x2b8>
 800b0a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	7813      	ldrb	r3, [r2, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 815a 	beq.w	800b36a <__ssvfiscanf_r+0x2e6>
 800b0b6:	5dd9      	ldrb	r1, [r3, r7]
 800b0b8:	f011 0108 	ands.w	r1, r1, #8
 800b0bc:	f102 0501 	add.w	r5, r2, #1
 800b0c0:	d019      	beq.n	800b0f6 <__ssvfiscanf_r+0x72>
 800b0c2:	6863      	ldr	r3, [r4, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd0f      	ble.n	800b0e8 <__ssvfiscanf_r+0x64>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	5cba      	ldrb	r2, [r7, r2]
 800b0ce:	0712      	lsls	r2, r2, #28
 800b0d0:	d401      	bmi.n	800b0d6 <__ssvfiscanf_r+0x52>
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	e7eb      	b.n	800b0ae <__ssvfiscanf_r+0x2a>
 800b0d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b0d8:	3201      	adds	r2, #1
 800b0da:	9245      	str	r2, [sp, #276]	; 0x114
 800b0dc:	6862      	ldr	r2, [r4, #4]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	3a01      	subs	r2, #1
 800b0e2:	6062      	str	r2, [r4, #4]
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	e7ec      	b.n	800b0c2 <__ssvfiscanf_r+0x3e>
 800b0e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	4798      	blx	r3
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d0e9      	beq.n	800b0c8 <__ssvfiscanf_r+0x44>
 800b0f4:	e7ed      	b.n	800b0d2 <__ssvfiscanf_r+0x4e>
 800b0f6:	2b25      	cmp	r3, #37	; 0x25
 800b0f8:	d012      	beq.n	800b120 <__ssvfiscanf_r+0x9c>
 800b0fa:	469a      	mov	sl, r3
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f340 8091 	ble.w	800b226 <__ssvfiscanf_r+0x1a2>
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	7813      	ldrb	r3, [r2, #0]
 800b108:	4553      	cmp	r3, sl
 800b10a:	f040 812e 	bne.w	800b36a <__ssvfiscanf_r+0x2e6>
 800b10e:	6863      	ldr	r3, [r4, #4]
 800b110:	3b01      	subs	r3, #1
 800b112:	6063      	str	r3, [r4, #4]
 800b114:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b116:	3201      	adds	r2, #1
 800b118:	3301      	adds	r3, #1
 800b11a:	6022      	str	r2, [r4, #0]
 800b11c:	9345      	str	r3, [sp, #276]	; 0x114
 800b11e:	e7d8      	b.n	800b0d2 <__ssvfiscanf_r+0x4e>
 800b120:	9141      	str	r1, [sp, #260]	; 0x104
 800b122:	9143      	str	r1, [sp, #268]	; 0x10c
 800b124:	7853      	ldrb	r3, [r2, #1]
 800b126:	2b2a      	cmp	r3, #42	; 0x2a
 800b128:	bf02      	ittt	eq
 800b12a:	2310      	moveq	r3, #16
 800b12c:	1c95      	addeq	r5, r2, #2
 800b12e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b130:	220a      	movs	r2, #10
 800b132:	46aa      	mov	sl, r5
 800b134:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b138:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b13c:	2b09      	cmp	r3, #9
 800b13e:	d91d      	bls.n	800b17c <__ssvfiscanf_r+0xf8>
 800b140:	487e      	ldr	r0, [pc, #504]	; (800b33c <__ssvfiscanf_r+0x2b8>)
 800b142:	2203      	movs	r2, #3
 800b144:	f7f5 f85c 	bl	8000200 <memchr>
 800b148:	b140      	cbz	r0, 800b15c <__ssvfiscanf_r+0xd8>
 800b14a:	2301      	movs	r3, #1
 800b14c:	eba0 0009 	sub.w	r0, r0, r9
 800b150:	fa03 f000 	lsl.w	r0, r3, r0
 800b154:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b156:	4318      	orrs	r0, r3
 800b158:	9041      	str	r0, [sp, #260]	; 0x104
 800b15a:	4655      	mov	r5, sl
 800b15c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b160:	2b78      	cmp	r3, #120	; 0x78
 800b162:	d806      	bhi.n	800b172 <__ssvfiscanf_r+0xee>
 800b164:	2b57      	cmp	r3, #87	; 0x57
 800b166:	d810      	bhi.n	800b18a <__ssvfiscanf_r+0x106>
 800b168:	2b25      	cmp	r3, #37	; 0x25
 800b16a:	d0c6      	beq.n	800b0fa <__ssvfiscanf_r+0x76>
 800b16c:	d856      	bhi.n	800b21c <__ssvfiscanf_r+0x198>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d064      	beq.n	800b23c <__ssvfiscanf_r+0x1b8>
 800b172:	2303      	movs	r3, #3
 800b174:	9347      	str	r3, [sp, #284]	; 0x11c
 800b176:	230a      	movs	r3, #10
 800b178:	9342      	str	r3, [sp, #264]	; 0x108
 800b17a:	e071      	b.n	800b260 <__ssvfiscanf_r+0x1dc>
 800b17c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b17e:	fb02 1103 	mla	r1, r2, r3, r1
 800b182:	3930      	subs	r1, #48	; 0x30
 800b184:	9143      	str	r1, [sp, #268]	; 0x10c
 800b186:	4655      	mov	r5, sl
 800b188:	e7d3      	b.n	800b132 <__ssvfiscanf_r+0xae>
 800b18a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b18e:	2a20      	cmp	r2, #32
 800b190:	d8ef      	bhi.n	800b172 <__ssvfiscanf_r+0xee>
 800b192:	a101      	add	r1, pc, #4	; (adr r1, 800b198 <__ssvfiscanf_r+0x114>)
 800b194:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b198:	0800b24b 	.word	0x0800b24b
 800b19c:	0800b173 	.word	0x0800b173
 800b1a0:	0800b173 	.word	0x0800b173
 800b1a4:	0800b2a9 	.word	0x0800b2a9
 800b1a8:	0800b173 	.word	0x0800b173
 800b1ac:	0800b173 	.word	0x0800b173
 800b1b0:	0800b173 	.word	0x0800b173
 800b1b4:	0800b173 	.word	0x0800b173
 800b1b8:	0800b173 	.word	0x0800b173
 800b1bc:	0800b173 	.word	0x0800b173
 800b1c0:	0800b173 	.word	0x0800b173
 800b1c4:	0800b2bf 	.word	0x0800b2bf
 800b1c8:	0800b295 	.word	0x0800b295
 800b1cc:	0800b223 	.word	0x0800b223
 800b1d0:	0800b223 	.word	0x0800b223
 800b1d4:	0800b223 	.word	0x0800b223
 800b1d8:	0800b173 	.word	0x0800b173
 800b1dc:	0800b299 	.word	0x0800b299
 800b1e0:	0800b173 	.word	0x0800b173
 800b1e4:	0800b173 	.word	0x0800b173
 800b1e8:	0800b173 	.word	0x0800b173
 800b1ec:	0800b173 	.word	0x0800b173
 800b1f0:	0800b2cf 	.word	0x0800b2cf
 800b1f4:	0800b2a1 	.word	0x0800b2a1
 800b1f8:	0800b243 	.word	0x0800b243
 800b1fc:	0800b173 	.word	0x0800b173
 800b200:	0800b173 	.word	0x0800b173
 800b204:	0800b2cb 	.word	0x0800b2cb
 800b208:	0800b173 	.word	0x0800b173
 800b20c:	0800b295 	.word	0x0800b295
 800b210:	0800b173 	.word	0x0800b173
 800b214:	0800b173 	.word	0x0800b173
 800b218:	0800b24b 	.word	0x0800b24b
 800b21c:	3b45      	subs	r3, #69	; 0x45
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d8a7      	bhi.n	800b172 <__ssvfiscanf_r+0xee>
 800b222:	2305      	movs	r3, #5
 800b224:	e01b      	b.n	800b25e <__ssvfiscanf_r+0x1da>
 800b226:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b228:	4621      	mov	r1, r4
 800b22a:	4630      	mov	r0, r6
 800b22c:	4798      	blx	r3
 800b22e:	2800      	cmp	r0, #0
 800b230:	f43f af68 	beq.w	800b104 <__ssvfiscanf_r+0x80>
 800b234:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b236:	2800      	cmp	r0, #0
 800b238:	f040 808d 	bne.w	800b356 <__ssvfiscanf_r+0x2d2>
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	e08f      	b.n	800b362 <__ssvfiscanf_r+0x2de>
 800b242:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b244:	f042 0220 	orr.w	r2, r2, #32
 800b248:	9241      	str	r2, [sp, #260]	; 0x104
 800b24a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b24c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b250:	9241      	str	r2, [sp, #260]	; 0x104
 800b252:	2210      	movs	r2, #16
 800b254:	2b6f      	cmp	r3, #111	; 0x6f
 800b256:	9242      	str	r2, [sp, #264]	; 0x108
 800b258:	bf34      	ite	cc
 800b25a:	2303      	movcc	r3, #3
 800b25c:	2304      	movcs	r3, #4
 800b25e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b260:	6863      	ldr	r3, [r4, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	dd42      	ble.n	800b2ec <__ssvfiscanf_r+0x268>
 800b266:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b268:	0659      	lsls	r1, r3, #25
 800b26a:	d404      	bmi.n	800b276 <__ssvfiscanf_r+0x1f2>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	5cba      	ldrb	r2, [r7, r2]
 800b272:	0712      	lsls	r2, r2, #28
 800b274:	d441      	bmi.n	800b2fa <__ssvfiscanf_r+0x276>
 800b276:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b278:	2b02      	cmp	r3, #2
 800b27a:	dc50      	bgt.n	800b31e <__ssvfiscanf_r+0x29a>
 800b27c:	466b      	mov	r3, sp
 800b27e:	4622      	mov	r2, r4
 800b280:	a941      	add	r1, sp, #260	; 0x104
 800b282:	4630      	mov	r0, r6
 800b284:	f000 f9d0 	bl	800b628 <_scanf_chars>
 800b288:	2801      	cmp	r0, #1
 800b28a:	d06e      	beq.n	800b36a <__ssvfiscanf_r+0x2e6>
 800b28c:	2802      	cmp	r0, #2
 800b28e:	f47f af20 	bne.w	800b0d2 <__ssvfiscanf_r+0x4e>
 800b292:	e7cf      	b.n	800b234 <__ssvfiscanf_r+0x1b0>
 800b294:	220a      	movs	r2, #10
 800b296:	e7dd      	b.n	800b254 <__ssvfiscanf_r+0x1d0>
 800b298:	2300      	movs	r3, #0
 800b29a:	9342      	str	r3, [sp, #264]	; 0x108
 800b29c:	2303      	movs	r3, #3
 800b29e:	e7de      	b.n	800b25e <__ssvfiscanf_r+0x1da>
 800b2a0:	2308      	movs	r3, #8
 800b2a2:	9342      	str	r3, [sp, #264]	; 0x108
 800b2a4:	2304      	movs	r3, #4
 800b2a6:	e7da      	b.n	800b25e <__ssvfiscanf_r+0x1da>
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	f000 fb30 	bl	800b910 <__sccl>
 800b2b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b6:	9341      	str	r3, [sp, #260]	; 0x104
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e7cf      	b.n	800b25e <__ssvfiscanf_r+0x1da>
 800b2be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c4:	9341      	str	r3, [sp, #260]	; 0x104
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e7c9      	b.n	800b25e <__ssvfiscanf_r+0x1da>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e7c7      	b.n	800b25e <__ssvfiscanf_r+0x1da>
 800b2ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b2d0:	06c3      	lsls	r3, r0, #27
 800b2d2:	f53f aefe 	bmi.w	800b0d2 <__ssvfiscanf_r+0x4e>
 800b2d6:	9b00      	ldr	r3, [sp, #0]
 800b2d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2da:	1d19      	adds	r1, r3, #4
 800b2dc:	9100      	str	r1, [sp, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f010 0f01 	tst.w	r0, #1
 800b2e4:	bf14      	ite	ne
 800b2e6:	801a      	strhne	r2, [r3, #0]
 800b2e8:	601a      	streq	r2, [r3, #0]
 800b2ea:	e6f2      	b.n	800b0d2 <__ssvfiscanf_r+0x4e>
 800b2ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4798      	blx	r3
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d0b6      	beq.n	800b266 <__ssvfiscanf_r+0x1e2>
 800b2f8:	e79c      	b.n	800b234 <__ssvfiscanf_r+0x1b0>
 800b2fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2fc:	3201      	adds	r2, #1
 800b2fe:	9245      	str	r2, [sp, #276]	; 0x114
 800b300:	6862      	ldr	r2, [r4, #4]
 800b302:	3a01      	subs	r2, #1
 800b304:	2a00      	cmp	r2, #0
 800b306:	6062      	str	r2, [r4, #4]
 800b308:	dd02      	ble.n	800b310 <__ssvfiscanf_r+0x28c>
 800b30a:	3301      	adds	r3, #1
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	e7ad      	b.n	800b26c <__ssvfiscanf_r+0x1e8>
 800b310:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b312:	4621      	mov	r1, r4
 800b314:	4630      	mov	r0, r6
 800b316:	4798      	blx	r3
 800b318:	2800      	cmp	r0, #0
 800b31a:	d0a7      	beq.n	800b26c <__ssvfiscanf_r+0x1e8>
 800b31c:	e78a      	b.n	800b234 <__ssvfiscanf_r+0x1b0>
 800b31e:	2b04      	cmp	r3, #4
 800b320:	dc0e      	bgt.n	800b340 <__ssvfiscanf_r+0x2bc>
 800b322:	466b      	mov	r3, sp
 800b324:	4622      	mov	r2, r4
 800b326:	a941      	add	r1, sp, #260	; 0x104
 800b328:	4630      	mov	r0, r6
 800b32a:	f000 f9d7 	bl	800b6dc <_scanf_i>
 800b32e:	e7ab      	b.n	800b288 <__ssvfiscanf_r+0x204>
 800b330:	0800afd1 	.word	0x0800afd1
 800b334:	0800b04b 	.word	0x0800b04b
 800b338:	0800bf83 	.word	0x0800bf83
 800b33c:	0800c2cc 	.word	0x0800c2cc
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <__ssvfiscanf_r+0x2ec>)
 800b342:	2b00      	cmp	r3, #0
 800b344:	f43f aec5 	beq.w	800b0d2 <__ssvfiscanf_r+0x4e>
 800b348:	466b      	mov	r3, sp
 800b34a:	4622      	mov	r2, r4
 800b34c:	a941      	add	r1, sp, #260	; 0x104
 800b34e:	4630      	mov	r0, r6
 800b350:	f3af 8000 	nop.w
 800b354:	e798      	b.n	800b288 <__ssvfiscanf_r+0x204>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b35c:	bf18      	it	ne
 800b35e:	f04f 30ff 	movne.w	r0, #4294967295
 800b362:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b36c:	e7f9      	b.n	800b362 <__ssvfiscanf_r+0x2de>
 800b36e:	bf00      	nop
 800b370:	00000000 	.word	0x00000000

0800b374 <__sfputc_r>:
 800b374:	6893      	ldr	r3, [r2, #8]
 800b376:	3b01      	subs	r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	b410      	push	{r4}
 800b37c:	6093      	str	r3, [r2, #8]
 800b37e:	da08      	bge.n	800b392 <__sfputc_r+0x1e>
 800b380:	6994      	ldr	r4, [r2, #24]
 800b382:	42a3      	cmp	r3, r4
 800b384:	db01      	blt.n	800b38a <__sfputc_r+0x16>
 800b386:	290a      	cmp	r1, #10
 800b388:	d103      	bne.n	800b392 <__sfputc_r+0x1e>
 800b38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38e:	f7fe b807 	b.w	80093a0 <__swbuf_r>
 800b392:	6813      	ldr	r3, [r2, #0]
 800b394:	1c58      	adds	r0, r3, #1
 800b396:	6010      	str	r0, [r2, #0]
 800b398:	7019      	strb	r1, [r3, #0]
 800b39a:	4608      	mov	r0, r1
 800b39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <__sfputs_r>:
 800b3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	4614      	mov	r4, r2
 800b3aa:	18d5      	adds	r5, r2, r3
 800b3ac:	42ac      	cmp	r4, r5
 800b3ae:	d101      	bne.n	800b3b4 <__sfputs_r+0x12>
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	e007      	b.n	800b3c4 <__sfputs_r+0x22>
 800b3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b8:	463a      	mov	r2, r7
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7ff ffda 	bl	800b374 <__sfputc_r>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d1f3      	bne.n	800b3ac <__sfputs_r+0xa>
 800b3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3c8 <_vfiprintf_r>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	b09d      	sub	sp, #116	; 0x74
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	4698      	mov	r8, r3
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	b118      	cbz	r0, 800b3e0 <_vfiprintf_r+0x18>
 800b3d8:	6983      	ldr	r3, [r0, #24]
 800b3da:	b90b      	cbnz	r3, 800b3e0 <_vfiprintf_r+0x18>
 800b3dc:	f7ff f858 	bl	800a490 <__sinit>
 800b3e0:	4b89      	ldr	r3, [pc, #548]	; (800b608 <_vfiprintf_r+0x240>)
 800b3e2:	429d      	cmp	r5, r3
 800b3e4:	d11b      	bne.n	800b41e <_vfiprintf_r+0x56>
 800b3e6:	6875      	ldr	r5, [r6, #4]
 800b3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ea:	07d9      	lsls	r1, r3, #31
 800b3ec:	d405      	bmi.n	800b3fa <_vfiprintf_r+0x32>
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	059a      	lsls	r2, r3, #22
 800b3f2:	d402      	bmi.n	800b3fa <_vfiprintf_r+0x32>
 800b3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f6:	f7ff f8ee 	bl	800a5d6 <__retarget_lock_acquire_recursive>
 800b3fa:	89ab      	ldrh	r3, [r5, #12]
 800b3fc:	071b      	lsls	r3, r3, #28
 800b3fe:	d501      	bpl.n	800b404 <_vfiprintf_r+0x3c>
 800b400:	692b      	ldr	r3, [r5, #16]
 800b402:	b9eb      	cbnz	r3, 800b440 <_vfiprintf_r+0x78>
 800b404:	4629      	mov	r1, r5
 800b406:	4630      	mov	r0, r6
 800b408:	f7fe f82e 	bl	8009468 <__swsetup_r>
 800b40c:	b1c0      	cbz	r0, 800b440 <_vfiprintf_r+0x78>
 800b40e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b410:	07dc      	lsls	r4, r3, #31
 800b412:	d50e      	bpl.n	800b432 <_vfiprintf_r+0x6a>
 800b414:	f04f 30ff 	mov.w	r0, #4294967295
 800b418:	b01d      	add	sp, #116	; 0x74
 800b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41e:	4b7b      	ldr	r3, [pc, #492]	; (800b60c <_vfiprintf_r+0x244>)
 800b420:	429d      	cmp	r5, r3
 800b422:	d101      	bne.n	800b428 <_vfiprintf_r+0x60>
 800b424:	68b5      	ldr	r5, [r6, #8]
 800b426:	e7df      	b.n	800b3e8 <_vfiprintf_r+0x20>
 800b428:	4b79      	ldr	r3, [pc, #484]	; (800b610 <_vfiprintf_r+0x248>)
 800b42a:	429d      	cmp	r5, r3
 800b42c:	bf08      	it	eq
 800b42e:	68f5      	ldreq	r5, [r6, #12]
 800b430:	e7da      	b.n	800b3e8 <_vfiprintf_r+0x20>
 800b432:	89ab      	ldrh	r3, [r5, #12]
 800b434:	0598      	lsls	r0, r3, #22
 800b436:	d4ed      	bmi.n	800b414 <_vfiprintf_r+0x4c>
 800b438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43a:	f7ff f8cd 	bl	800a5d8 <__retarget_lock_release_recursive>
 800b43e:	e7e9      	b.n	800b414 <_vfiprintf_r+0x4c>
 800b440:	2300      	movs	r3, #0
 800b442:	9309      	str	r3, [sp, #36]	; 0x24
 800b444:	2320      	movs	r3, #32
 800b446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b44a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b44e:	2330      	movs	r3, #48	; 0x30
 800b450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b614 <_vfiprintf_r+0x24c>
 800b454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b458:	f04f 0901 	mov.w	r9, #1
 800b45c:	4623      	mov	r3, r4
 800b45e:	469a      	mov	sl, r3
 800b460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b464:	b10a      	cbz	r2, 800b46a <_vfiprintf_r+0xa2>
 800b466:	2a25      	cmp	r2, #37	; 0x25
 800b468:	d1f9      	bne.n	800b45e <_vfiprintf_r+0x96>
 800b46a:	ebba 0b04 	subs.w	fp, sl, r4
 800b46e:	d00b      	beq.n	800b488 <_vfiprintf_r+0xc0>
 800b470:	465b      	mov	r3, fp
 800b472:	4622      	mov	r2, r4
 800b474:	4629      	mov	r1, r5
 800b476:	4630      	mov	r0, r6
 800b478:	f7ff ff93 	bl	800b3a2 <__sfputs_r>
 800b47c:	3001      	adds	r0, #1
 800b47e:	f000 80aa 	beq.w	800b5d6 <_vfiprintf_r+0x20e>
 800b482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b484:	445a      	add	r2, fp
 800b486:	9209      	str	r2, [sp, #36]	; 0x24
 800b488:	f89a 3000 	ldrb.w	r3, [sl]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 80a2 	beq.w	800b5d6 <_vfiprintf_r+0x20e>
 800b492:	2300      	movs	r3, #0
 800b494:	f04f 32ff 	mov.w	r2, #4294967295
 800b498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b49c:	f10a 0a01 	add.w	sl, sl, #1
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	9307      	str	r3, [sp, #28]
 800b4a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b4aa:	4654      	mov	r4, sl
 800b4ac:	2205      	movs	r2, #5
 800b4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b2:	4858      	ldr	r0, [pc, #352]	; (800b614 <_vfiprintf_r+0x24c>)
 800b4b4:	f7f4 fea4 	bl	8000200 <memchr>
 800b4b8:	9a04      	ldr	r2, [sp, #16]
 800b4ba:	b9d8      	cbnz	r0, 800b4f4 <_vfiprintf_r+0x12c>
 800b4bc:	06d1      	lsls	r1, r2, #27
 800b4be:	bf44      	itt	mi
 800b4c0:	2320      	movmi	r3, #32
 800b4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4c6:	0713      	lsls	r3, r2, #28
 800b4c8:	bf44      	itt	mi
 800b4ca:	232b      	movmi	r3, #43	; 0x2b
 800b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d6:	d015      	beq.n	800b504 <_vfiprintf_r+0x13c>
 800b4d8:	9a07      	ldr	r2, [sp, #28]
 800b4da:	4654      	mov	r4, sl
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f04f 0c0a 	mov.w	ip, #10
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e8:	3b30      	subs	r3, #48	; 0x30
 800b4ea:	2b09      	cmp	r3, #9
 800b4ec:	d94e      	bls.n	800b58c <_vfiprintf_r+0x1c4>
 800b4ee:	b1b0      	cbz	r0, 800b51e <_vfiprintf_r+0x156>
 800b4f0:	9207      	str	r2, [sp, #28]
 800b4f2:	e014      	b.n	800b51e <_vfiprintf_r+0x156>
 800b4f4:	eba0 0308 	sub.w	r3, r0, r8
 800b4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	9304      	str	r3, [sp, #16]
 800b500:	46a2      	mov	sl, r4
 800b502:	e7d2      	b.n	800b4aa <_vfiprintf_r+0xe2>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	1d19      	adds	r1, r3, #4
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	9103      	str	r1, [sp, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bfbb      	ittet	lt
 800b510:	425b      	neglt	r3, r3
 800b512:	f042 0202 	orrlt.w	r2, r2, #2
 800b516:	9307      	strge	r3, [sp, #28]
 800b518:	9307      	strlt	r3, [sp, #28]
 800b51a:	bfb8      	it	lt
 800b51c:	9204      	strlt	r2, [sp, #16]
 800b51e:	7823      	ldrb	r3, [r4, #0]
 800b520:	2b2e      	cmp	r3, #46	; 0x2e
 800b522:	d10c      	bne.n	800b53e <_vfiprintf_r+0x176>
 800b524:	7863      	ldrb	r3, [r4, #1]
 800b526:	2b2a      	cmp	r3, #42	; 0x2a
 800b528:	d135      	bne.n	800b596 <_vfiprintf_r+0x1ce>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	1d1a      	adds	r2, r3, #4
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	9203      	str	r2, [sp, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	bfb8      	it	lt
 800b536:	f04f 33ff 	movlt.w	r3, #4294967295
 800b53a:	3402      	adds	r4, #2
 800b53c:	9305      	str	r3, [sp, #20]
 800b53e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b624 <_vfiprintf_r+0x25c>
 800b542:	7821      	ldrb	r1, [r4, #0]
 800b544:	2203      	movs	r2, #3
 800b546:	4650      	mov	r0, sl
 800b548:	f7f4 fe5a 	bl	8000200 <memchr>
 800b54c:	b140      	cbz	r0, 800b560 <_vfiprintf_r+0x198>
 800b54e:	2340      	movs	r3, #64	; 0x40
 800b550:	eba0 000a 	sub.w	r0, r0, sl
 800b554:	fa03 f000 	lsl.w	r0, r3, r0
 800b558:	9b04      	ldr	r3, [sp, #16]
 800b55a:	4303      	orrs	r3, r0
 800b55c:	3401      	adds	r4, #1
 800b55e:	9304      	str	r3, [sp, #16]
 800b560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b564:	482c      	ldr	r0, [pc, #176]	; (800b618 <_vfiprintf_r+0x250>)
 800b566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b56a:	2206      	movs	r2, #6
 800b56c:	f7f4 fe48 	bl	8000200 <memchr>
 800b570:	2800      	cmp	r0, #0
 800b572:	d03f      	beq.n	800b5f4 <_vfiprintf_r+0x22c>
 800b574:	4b29      	ldr	r3, [pc, #164]	; (800b61c <_vfiprintf_r+0x254>)
 800b576:	bb1b      	cbnz	r3, 800b5c0 <_vfiprintf_r+0x1f8>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	3307      	adds	r3, #7
 800b57c:	f023 0307 	bic.w	r3, r3, #7
 800b580:	3308      	adds	r3, #8
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b586:	443b      	add	r3, r7
 800b588:	9309      	str	r3, [sp, #36]	; 0x24
 800b58a:	e767      	b.n	800b45c <_vfiprintf_r+0x94>
 800b58c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b590:	460c      	mov	r4, r1
 800b592:	2001      	movs	r0, #1
 800b594:	e7a5      	b.n	800b4e2 <_vfiprintf_r+0x11a>
 800b596:	2300      	movs	r3, #0
 800b598:	3401      	adds	r4, #1
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	4619      	mov	r1, r3
 800b59e:	f04f 0c0a 	mov.w	ip, #10
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a8:	3a30      	subs	r2, #48	; 0x30
 800b5aa:	2a09      	cmp	r2, #9
 800b5ac:	d903      	bls.n	800b5b6 <_vfiprintf_r+0x1ee>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0c5      	beq.n	800b53e <_vfiprintf_r+0x176>
 800b5b2:	9105      	str	r1, [sp, #20]
 800b5b4:	e7c3      	b.n	800b53e <_vfiprintf_r+0x176>
 800b5b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e7f0      	b.n	800b5a2 <_vfiprintf_r+0x1da>
 800b5c0:	ab03      	add	r3, sp, #12
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	4b16      	ldr	r3, [pc, #88]	; (800b620 <_vfiprintf_r+0x258>)
 800b5c8:	a904      	add	r1, sp, #16
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f7fd f97e 	bl	80088cc <_printf_float>
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	1c78      	adds	r0, r7, #1
 800b5d4:	d1d6      	bne.n	800b584 <_vfiprintf_r+0x1bc>
 800b5d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5d8:	07d9      	lsls	r1, r3, #31
 800b5da:	d405      	bmi.n	800b5e8 <_vfiprintf_r+0x220>
 800b5dc:	89ab      	ldrh	r3, [r5, #12]
 800b5de:	059a      	lsls	r2, r3, #22
 800b5e0:	d402      	bmi.n	800b5e8 <_vfiprintf_r+0x220>
 800b5e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e4:	f7fe fff8 	bl	800a5d8 <__retarget_lock_release_recursive>
 800b5e8:	89ab      	ldrh	r3, [r5, #12]
 800b5ea:	065b      	lsls	r3, r3, #25
 800b5ec:	f53f af12 	bmi.w	800b414 <_vfiprintf_r+0x4c>
 800b5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f2:	e711      	b.n	800b418 <_vfiprintf_r+0x50>
 800b5f4:	ab03      	add	r3, sp, #12
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4b09      	ldr	r3, [pc, #36]	; (800b620 <_vfiprintf_r+0x258>)
 800b5fc:	a904      	add	r1, sp, #16
 800b5fe:	4630      	mov	r0, r6
 800b600:	f7fd fc08 	bl	8008e14 <_printf_i>
 800b604:	e7e4      	b.n	800b5d0 <_vfiprintf_r+0x208>
 800b606:	bf00      	nop
 800b608:	0800c134 	.word	0x0800c134
 800b60c:	0800c154 	.word	0x0800c154
 800b610:	0800c114 	.word	0x0800c114
 800b614:	0800c2d0 	.word	0x0800c2d0
 800b618:	0800c2d6 	.word	0x0800c2d6
 800b61c:	080088cd 	.word	0x080088cd
 800b620:	0800b3a3 	.word	0x0800b3a3
 800b624:	0800c2cc 	.word	0x0800c2cc

0800b628 <_scanf_chars>:
 800b628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b62c:	4615      	mov	r5, r2
 800b62e:	688a      	ldr	r2, [r1, #8]
 800b630:	4680      	mov	r8, r0
 800b632:	460c      	mov	r4, r1
 800b634:	b932      	cbnz	r2, 800b644 <_scanf_chars+0x1c>
 800b636:	698a      	ldr	r2, [r1, #24]
 800b638:	2a00      	cmp	r2, #0
 800b63a:	bf0c      	ite	eq
 800b63c:	2201      	moveq	r2, #1
 800b63e:	f04f 32ff 	movne.w	r2, #4294967295
 800b642:	608a      	str	r2, [r1, #8]
 800b644:	6822      	ldr	r2, [r4, #0]
 800b646:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b6d8 <_scanf_chars+0xb0>
 800b64a:	06d1      	lsls	r1, r2, #27
 800b64c:	bf5f      	itttt	pl
 800b64e:	681a      	ldrpl	r2, [r3, #0]
 800b650:	1d11      	addpl	r1, r2, #4
 800b652:	6019      	strpl	r1, [r3, #0]
 800b654:	6816      	ldrpl	r6, [r2, #0]
 800b656:	2700      	movs	r7, #0
 800b658:	69a0      	ldr	r0, [r4, #24]
 800b65a:	b188      	cbz	r0, 800b680 <_scanf_chars+0x58>
 800b65c:	2801      	cmp	r0, #1
 800b65e:	d107      	bne.n	800b670 <_scanf_chars+0x48>
 800b660:	682a      	ldr	r2, [r5, #0]
 800b662:	7811      	ldrb	r1, [r2, #0]
 800b664:	6962      	ldr	r2, [r4, #20]
 800b666:	5c52      	ldrb	r2, [r2, r1]
 800b668:	b952      	cbnz	r2, 800b680 <_scanf_chars+0x58>
 800b66a:	2f00      	cmp	r7, #0
 800b66c:	d031      	beq.n	800b6d2 <_scanf_chars+0xaa>
 800b66e:	e022      	b.n	800b6b6 <_scanf_chars+0x8e>
 800b670:	2802      	cmp	r0, #2
 800b672:	d120      	bne.n	800b6b6 <_scanf_chars+0x8e>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b67c:	071b      	lsls	r3, r3, #28
 800b67e:	d41a      	bmi.n	800b6b6 <_scanf_chars+0x8e>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	06da      	lsls	r2, r3, #27
 800b684:	bf5e      	ittt	pl
 800b686:	682b      	ldrpl	r3, [r5, #0]
 800b688:	781b      	ldrbpl	r3, [r3, #0]
 800b68a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b68e:	682a      	ldr	r2, [r5, #0]
 800b690:	686b      	ldr	r3, [r5, #4]
 800b692:	3201      	adds	r2, #1
 800b694:	602a      	str	r2, [r5, #0]
 800b696:	68a2      	ldr	r2, [r4, #8]
 800b698:	3b01      	subs	r3, #1
 800b69a:	3a01      	subs	r2, #1
 800b69c:	606b      	str	r3, [r5, #4]
 800b69e:	3701      	adds	r7, #1
 800b6a0:	60a2      	str	r2, [r4, #8]
 800b6a2:	b142      	cbz	r2, 800b6b6 <_scanf_chars+0x8e>
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dcd7      	bgt.n	800b658 <_scanf_chars+0x30>
 800b6a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4798      	blx	r3
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d0d0      	beq.n	800b658 <_scanf_chars+0x30>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	f013 0310 	ands.w	r3, r3, #16
 800b6bc:	d105      	bne.n	800b6ca <_scanf_chars+0xa2>
 800b6be:	68e2      	ldr	r2, [r4, #12]
 800b6c0:	3201      	adds	r2, #1
 800b6c2:	60e2      	str	r2, [r4, #12]
 800b6c4:	69a2      	ldr	r2, [r4, #24]
 800b6c6:	b102      	cbz	r2, 800b6ca <_scanf_chars+0xa2>
 800b6c8:	7033      	strb	r3, [r6, #0]
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	443b      	add	r3, r7
 800b6ce:	6123      	str	r3, [r4, #16]
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800bf83 	.word	0x0800bf83

0800b6dc <_scanf_i>:
 800b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	4698      	mov	r8, r3
 800b6e2:	4b76      	ldr	r3, [pc, #472]	; (800b8bc <_scanf_i+0x1e0>)
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	4682      	mov	sl, r0
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	ab03      	add	r3, sp, #12
 800b6f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b6f6:	4b72      	ldr	r3, [pc, #456]	; (800b8c0 <_scanf_i+0x1e4>)
 800b6f8:	69a1      	ldr	r1, [r4, #24]
 800b6fa:	4a72      	ldr	r2, [pc, #456]	; (800b8c4 <_scanf_i+0x1e8>)
 800b6fc:	2903      	cmp	r1, #3
 800b6fe:	bf18      	it	ne
 800b700:	461a      	movne	r2, r3
 800b702:	68a3      	ldr	r3, [r4, #8]
 800b704:	9201      	str	r2, [sp, #4]
 800b706:	1e5a      	subs	r2, r3, #1
 800b708:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b70c:	bf88      	it	hi
 800b70e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b712:	4627      	mov	r7, r4
 800b714:	bf82      	ittt	hi
 800b716:	eb03 0905 	addhi.w	r9, r3, r5
 800b71a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b71e:	60a3      	strhi	r3, [r4, #8]
 800b720:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b724:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b728:	bf98      	it	ls
 800b72a:	f04f 0900 	movls.w	r9, #0
 800b72e:	6023      	str	r3, [r4, #0]
 800b730:	463d      	mov	r5, r7
 800b732:	f04f 0b00 	mov.w	fp, #0
 800b736:	6831      	ldr	r1, [r6, #0]
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	7809      	ldrb	r1, [r1, #0]
 800b73c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b740:	2202      	movs	r2, #2
 800b742:	f7f4 fd5d 	bl	8000200 <memchr>
 800b746:	b328      	cbz	r0, 800b794 <_scanf_i+0xb8>
 800b748:	f1bb 0f01 	cmp.w	fp, #1
 800b74c:	d159      	bne.n	800b802 <_scanf_i+0x126>
 800b74e:	6862      	ldr	r2, [r4, #4]
 800b750:	b92a      	cbnz	r2, 800b75e <_scanf_i+0x82>
 800b752:	6822      	ldr	r2, [r4, #0]
 800b754:	2308      	movs	r3, #8
 800b756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b75a:	6063      	str	r3, [r4, #4]
 800b75c:	6022      	str	r2, [r4, #0]
 800b75e:	6822      	ldr	r2, [r4, #0]
 800b760:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b764:	6022      	str	r2, [r4, #0]
 800b766:	68a2      	ldr	r2, [r4, #8]
 800b768:	1e51      	subs	r1, r2, #1
 800b76a:	60a1      	str	r1, [r4, #8]
 800b76c:	b192      	cbz	r2, 800b794 <_scanf_i+0xb8>
 800b76e:	6832      	ldr	r2, [r6, #0]
 800b770:	1c51      	adds	r1, r2, #1
 800b772:	6031      	str	r1, [r6, #0]
 800b774:	7812      	ldrb	r2, [r2, #0]
 800b776:	f805 2b01 	strb.w	r2, [r5], #1
 800b77a:	6872      	ldr	r2, [r6, #4]
 800b77c:	3a01      	subs	r2, #1
 800b77e:	2a00      	cmp	r2, #0
 800b780:	6072      	str	r2, [r6, #4]
 800b782:	dc07      	bgt.n	800b794 <_scanf_i+0xb8>
 800b784:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b788:	4631      	mov	r1, r6
 800b78a:	4650      	mov	r0, sl
 800b78c:	4790      	blx	r2
 800b78e:	2800      	cmp	r0, #0
 800b790:	f040 8085 	bne.w	800b89e <_scanf_i+0x1c2>
 800b794:	f10b 0b01 	add.w	fp, fp, #1
 800b798:	f1bb 0f03 	cmp.w	fp, #3
 800b79c:	d1cb      	bne.n	800b736 <_scanf_i+0x5a>
 800b79e:	6863      	ldr	r3, [r4, #4]
 800b7a0:	b90b      	cbnz	r3, 800b7a6 <_scanf_i+0xca>
 800b7a2:	230a      	movs	r3, #10
 800b7a4:	6063      	str	r3, [r4, #4]
 800b7a6:	6863      	ldr	r3, [r4, #4]
 800b7a8:	4947      	ldr	r1, [pc, #284]	; (800b8c8 <_scanf_i+0x1ec>)
 800b7aa:	6960      	ldr	r0, [r4, #20]
 800b7ac:	1ac9      	subs	r1, r1, r3
 800b7ae:	f000 f8af 	bl	800b910 <__sccl>
 800b7b2:	f04f 0b00 	mov.w	fp, #0
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	6822      	ldr	r2, [r4, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d03d      	beq.n	800b83a <_scanf_i+0x15e>
 800b7be:	6831      	ldr	r1, [r6, #0]
 800b7c0:	6960      	ldr	r0, [r4, #20]
 800b7c2:	f891 c000 	ldrb.w	ip, [r1]
 800b7c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d035      	beq.n	800b83a <_scanf_i+0x15e>
 800b7ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b7d2:	d124      	bne.n	800b81e <_scanf_i+0x142>
 800b7d4:	0510      	lsls	r0, r2, #20
 800b7d6:	d522      	bpl.n	800b81e <_scanf_i+0x142>
 800b7d8:	f10b 0b01 	add.w	fp, fp, #1
 800b7dc:	f1b9 0f00 	cmp.w	r9, #0
 800b7e0:	d003      	beq.n	800b7ea <_scanf_i+0x10e>
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b7e8:	60a3      	str	r3, [r4, #8]
 800b7ea:	6873      	ldr	r3, [r6, #4]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	6073      	str	r3, [r6, #4]
 800b7f2:	dd1b      	ble.n	800b82c <_scanf_i+0x150>
 800b7f4:	6833      	ldr	r3, [r6, #0]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	6033      	str	r3, [r6, #0]
 800b7fa:	68a3      	ldr	r3, [r4, #8]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	60a3      	str	r3, [r4, #8]
 800b800:	e7d9      	b.n	800b7b6 <_scanf_i+0xda>
 800b802:	f1bb 0f02 	cmp.w	fp, #2
 800b806:	d1ae      	bne.n	800b766 <_scanf_i+0x8a>
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b80e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b812:	d1bf      	bne.n	800b794 <_scanf_i+0xb8>
 800b814:	2310      	movs	r3, #16
 800b816:	6063      	str	r3, [r4, #4]
 800b818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b81c:	e7a2      	b.n	800b764 <_scanf_i+0x88>
 800b81e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b822:	6022      	str	r2, [r4, #0]
 800b824:	780b      	ldrb	r3, [r1, #0]
 800b826:	f805 3b01 	strb.w	r3, [r5], #1
 800b82a:	e7de      	b.n	800b7ea <_scanf_i+0x10e>
 800b82c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b830:	4631      	mov	r1, r6
 800b832:	4650      	mov	r0, sl
 800b834:	4798      	blx	r3
 800b836:	2800      	cmp	r0, #0
 800b838:	d0df      	beq.n	800b7fa <_scanf_i+0x11e>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	05db      	lsls	r3, r3, #23
 800b83e:	d50d      	bpl.n	800b85c <_scanf_i+0x180>
 800b840:	42bd      	cmp	r5, r7
 800b842:	d909      	bls.n	800b858 <_scanf_i+0x17c>
 800b844:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b84c:	4632      	mov	r2, r6
 800b84e:	4650      	mov	r0, sl
 800b850:	4798      	blx	r3
 800b852:	f105 39ff 	add.w	r9, r5, #4294967295
 800b856:	464d      	mov	r5, r9
 800b858:	42bd      	cmp	r5, r7
 800b85a:	d02d      	beq.n	800b8b8 <_scanf_i+0x1dc>
 800b85c:	6822      	ldr	r2, [r4, #0]
 800b85e:	f012 0210 	ands.w	r2, r2, #16
 800b862:	d113      	bne.n	800b88c <_scanf_i+0x1b0>
 800b864:	702a      	strb	r2, [r5, #0]
 800b866:	6863      	ldr	r3, [r4, #4]
 800b868:	9e01      	ldr	r6, [sp, #4]
 800b86a:	4639      	mov	r1, r7
 800b86c:	4650      	mov	r0, sl
 800b86e:	47b0      	blx	r6
 800b870:	6821      	ldr	r1, [r4, #0]
 800b872:	f8d8 3000 	ldr.w	r3, [r8]
 800b876:	f011 0f20 	tst.w	r1, #32
 800b87a:	d013      	beq.n	800b8a4 <_scanf_i+0x1c8>
 800b87c:	1d1a      	adds	r2, r3, #4
 800b87e:	f8c8 2000 	str.w	r2, [r8]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6018      	str	r0, [r3, #0]
 800b886:	68e3      	ldr	r3, [r4, #12]
 800b888:	3301      	adds	r3, #1
 800b88a:	60e3      	str	r3, [r4, #12]
 800b88c:	1bed      	subs	r5, r5, r7
 800b88e:	44ab      	add	fp, r5
 800b890:	6925      	ldr	r5, [r4, #16]
 800b892:	445d      	add	r5, fp
 800b894:	6125      	str	r5, [r4, #16]
 800b896:	2000      	movs	r0, #0
 800b898:	b007      	add	sp, #28
 800b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89e:	f04f 0b00 	mov.w	fp, #0
 800b8a2:	e7ca      	b.n	800b83a <_scanf_i+0x15e>
 800b8a4:	1d1a      	adds	r2, r3, #4
 800b8a6:	f8c8 2000 	str.w	r2, [r8]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f011 0f01 	tst.w	r1, #1
 800b8b0:	bf14      	ite	ne
 800b8b2:	8018      	strhne	r0, [r3, #0]
 800b8b4:	6018      	streq	r0, [r3, #0]
 800b8b6:	e7e6      	b.n	800b886 <_scanf_i+0x1aa>
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	e7ed      	b.n	800b898 <_scanf_i+0x1bc>
 800b8bc:	0800be90 	.word	0x0800be90
 800b8c0:	0800ba65 	.word	0x0800ba65
 800b8c4:	08009389 	.word	0x08009389
 800b8c8:	0800c2f6 	.word	0x0800c2f6

0800b8cc <_read_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d07      	ldr	r5, [pc, #28]	; (800b8ec <_read_r+0x20>)
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	4608      	mov	r0, r1
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	602a      	str	r2, [r5, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f7f7 f920 	bl	8002b20 <_read>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_read_r+0x1e>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_read_r+0x1e>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	200008f4 	.word	0x200008f4

0800b8f0 <_sbrk_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d06      	ldr	r5, [pc, #24]	; (800b90c <_sbrk_r+0x1c>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	602b      	str	r3, [r5, #0]
 800b8fc:	f7f7 f97e 	bl	8002bfc <_sbrk>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_sbrk_r+0x1a>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_sbrk_r+0x1a>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	200008f4 	.word	0x200008f4

0800b910 <__sccl>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	780b      	ldrb	r3, [r1, #0]
 800b914:	4604      	mov	r4, r0
 800b916:	2b5e      	cmp	r3, #94	; 0x5e
 800b918:	bf0b      	itete	eq
 800b91a:	784b      	ldrbeq	r3, [r1, #1]
 800b91c:	1c48      	addne	r0, r1, #1
 800b91e:	1c88      	addeq	r0, r1, #2
 800b920:	2200      	movne	r2, #0
 800b922:	bf08      	it	eq
 800b924:	2201      	moveq	r2, #1
 800b926:	1e61      	subs	r1, r4, #1
 800b928:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b92c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b930:	42a9      	cmp	r1, r5
 800b932:	d1fb      	bne.n	800b92c <__sccl+0x1c>
 800b934:	b90b      	cbnz	r3, 800b93a <__sccl+0x2a>
 800b936:	3801      	subs	r0, #1
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	f082 0201 	eor.w	r2, r2, #1
 800b93e:	54e2      	strb	r2, [r4, r3]
 800b940:	4605      	mov	r5, r0
 800b942:	4628      	mov	r0, r5
 800b944:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b948:	292d      	cmp	r1, #45	; 0x2d
 800b94a:	d006      	beq.n	800b95a <__sccl+0x4a>
 800b94c:	295d      	cmp	r1, #93	; 0x5d
 800b94e:	d0f3      	beq.n	800b938 <__sccl+0x28>
 800b950:	b909      	cbnz	r1, 800b956 <__sccl+0x46>
 800b952:	4628      	mov	r0, r5
 800b954:	e7f0      	b.n	800b938 <__sccl+0x28>
 800b956:	460b      	mov	r3, r1
 800b958:	e7f1      	b.n	800b93e <__sccl+0x2e>
 800b95a:	786e      	ldrb	r6, [r5, #1]
 800b95c:	2e5d      	cmp	r6, #93	; 0x5d
 800b95e:	d0fa      	beq.n	800b956 <__sccl+0x46>
 800b960:	42b3      	cmp	r3, r6
 800b962:	dcf8      	bgt.n	800b956 <__sccl+0x46>
 800b964:	3502      	adds	r5, #2
 800b966:	4619      	mov	r1, r3
 800b968:	3101      	adds	r1, #1
 800b96a:	428e      	cmp	r6, r1
 800b96c:	5462      	strb	r2, [r4, r1]
 800b96e:	dcfb      	bgt.n	800b968 <__sccl+0x58>
 800b970:	1af1      	subs	r1, r6, r3
 800b972:	3901      	subs	r1, #1
 800b974:	1c58      	adds	r0, r3, #1
 800b976:	42b3      	cmp	r3, r6
 800b978:	bfa8      	it	ge
 800b97a:	2100      	movge	r1, #0
 800b97c:	1843      	adds	r3, r0, r1
 800b97e:	e7e0      	b.n	800b942 <__sccl+0x32>

0800b980 <_strtoul_l.constprop.0>:
 800b980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b984:	4f36      	ldr	r7, [pc, #216]	; (800ba60 <_strtoul_l.constprop.0+0xe0>)
 800b986:	4686      	mov	lr, r0
 800b988:	460d      	mov	r5, r1
 800b98a:	4628      	mov	r0, r5
 800b98c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b990:	5de6      	ldrb	r6, [r4, r7]
 800b992:	f016 0608 	ands.w	r6, r6, #8
 800b996:	d1f8      	bne.n	800b98a <_strtoul_l.constprop.0+0xa>
 800b998:	2c2d      	cmp	r4, #45	; 0x2d
 800b99a:	d12f      	bne.n	800b9fc <_strtoul_l.constprop.0+0x7c>
 800b99c:	782c      	ldrb	r4, [r5, #0]
 800b99e:	2601      	movs	r6, #1
 800b9a0:	1c85      	adds	r5, r0, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d057      	beq.n	800ba56 <_strtoul_l.constprop.0+0xd6>
 800b9a6:	2b10      	cmp	r3, #16
 800b9a8:	d109      	bne.n	800b9be <_strtoul_l.constprop.0+0x3e>
 800b9aa:	2c30      	cmp	r4, #48	; 0x30
 800b9ac:	d107      	bne.n	800b9be <_strtoul_l.constprop.0+0x3e>
 800b9ae:	7828      	ldrb	r0, [r5, #0]
 800b9b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b9b4:	2858      	cmp	r0, #88	; 0x58
 800b9b6:	d149      	bne.n	800ba4c <_strtoul_l.constprop.0+0xcc>
 800b9b8:	786c      	ldrb	r4, [r5, #1]
 800b9ba:	2310      	movs	r3, #16
 800b9bc:	3502      	adds	r5, #2
 800b9be:	f04f 38ff 	mov.w	r8, #4294967295
 800b9c2:	2700      	movs	r7, #0
 800b9c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800b9c8:	fb03 f908 	mul.w	r9, r3, r8
 800b9cc:	ea6f 0909 	mvn.w	r9, r9
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b9d6:	f1bc 0f09 	cmp.w	ip, #9
 800b9da:	d814      	bhi.n	800ba06 <_strtoul_l.constprop.0+0x86>
 800b9dc:	4664      	mov	r4, ip
 800b9de:	42a3      	cmp	r3, r4
 800b9e0:	dd22      	ble.n	800ba28 <_strtoul_l.constprop.0+0xa8>
 800b9e2:	2f00      	cmp	r7, #0
 800b9e4:	db1d      	blt.n	800ba22 <_strtoul_l.constprop.0+0xa2>
 800b9e6:	4580      	cmp	r8, r0
 800b9e8:	d31b      	bcc.n	800ba22 <_strtoul_l.constprop.0+0xa2>
 800b9ea:	d101      	bne.n	800b9f0 <_strtoul_l.constprop.0+0x70>
 800b9ec:	45a1      	cmp	r9, r4
 800b9ee:	db18      	blt.n	800ba22 <_strtoul_l.constprop.0+0xa2>
 800b9f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b9f4:	2701      	movs	r7, #1
 800b9f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9fa:	e7ea      	b.n	800b9d2 <_strtoul_l.constprop.0+0x52>
 800b9fc:	2c2b      	cmp	r4, #43	; 0x2b
 800b9fe:	bf04      	itt	eq
 800ba00:	782c      	ldrbeq	r4, [r5, #0]
 800ba02:	1c85      	addeq	r5, r0, #2
 800ba04:	e7cd      	b.n	800b9a2 <_strtoul_l.constprop.0+0x22>
 800ba06:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba0a:	f1bc 0f19 	cmp.w	ip, #25
 800ba0e:	d801      	bhi.n	800ba14 <_strtoul_l.constprop.0+0x94>
 800ba10:	3c37      	subs	r4, #55	; 0x37
 800ba12:	e7e4      	b.n	800b9de <_strtoul_l.constprop.0+0x5e>
 800ba14:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ba18:	f1bc 0f19 	cmp.w	ip, #25
 800ba1c:	d804      	bhi.n	800ba28 <_strtoul_l.constprop.0+0xa8>
 800ba1e:	3c57      	subs	r4, #87	; 0x57
 800ba20:	e7dd      	b.n	800b9de <_strtoul_l.constprop.0+0x5e>
 800ba22:	f04f 37ff 	mov.w	r7, #4294967295
 800ba26:	e7e6      	b.n	800b9f6 <_strtoul_l.constprop.0+0x76>
 800ba28:	2f00      	cmp	r7, #0
 800ba2a:	da07      	bge.n	800ba3c <_strtoul_l.constprop.0+0xbc>
 800ba2c:	2322      	movs	r3, #34	; 0x22
 800ba2e:	f8ce 3000 	str.w	r3, [lr]
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295
 800ba36:	b932      	cbnz	r2, 800ba46 <_strtoul_l.constprop.0+0xc6>
 800ba38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba3c:	b106      	cbz	r6, 800ba40 <_strtoul_l.constprop.0+0xc0>
 800ba3e:	4240      	negs	r0, r0
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	d0f9      	beq.n	800ba38 <_strtoul_l.constprop.0+0xb8>
 800ba44:	b107      	cbz	r7, 800ba48 <_strtoul_l.constprop.0+0xc8>
 800ba46:	1e69      	subs	r1, r5, #1
 800ba48:	6011      	str	r1, [r2, #0]
 800ba4a:	e7f5      	b.n	800ba38 <_strtoul_l.constprop.0+0xb8>
 800ba4c:	2430      	movs	r4, #48	; 0x30
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1b5      	bne.n	800b9be <_strtoul_l.constprop.0+0x3e>
 800ba52:	2308      	movs	r3, #8
 800ba54:	e7b3      	b.n	800b9be <_strtoul_l.constprop.0+0x3e>
 800ba56:	2c30      	cmp	r4, #48	; 0x30
 800ba58:	d0a9      	beq.n	800b9ae <_strtoul_l.constprop.0+0x2e>
 800ba5a:	230a      	movs	r3, #10
 800ba5c:	e7af      	b.n	800b9be <_strtoul_l.constprop.0+0x3e>
 800ba5e:	bf00      	nop
 800ba60:	0800bf83 	.word	0x0800bf83

0800ba64 <_strtoul_r>:
 800ba64:	f7ff bf8c 	b.w	800b980 <_strtoul_l.constprop.0>

0800ba68 <__submore>:
 800ba68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba74:	4299      	cmp	r1, r3
 800ba76:	d11d      	bne.n	800bab4 <__submore+0x4c>
 800ba78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba7c:	f7ff fa34 	bl	800aee8 <_malloc_r>
 800ba80:	b918      	cbnz	r0, 800ba8a <__submore+0x22>
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295
 800ba86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba8e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba94:	6360      	str	r0, [r4, #52]	; 0x34
 800ba96:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ba9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba9e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800baa2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800baa6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800baaa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800baae:	6020      	str	r0, [r4, #0]
 800bab0:	2000      	movs	r0, #0
 800bab2:	e7e8      	b.n	800ba86 <__submore+0x1e>
 800bab4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bab6:	0077      	lsls	r7, r6, #1
 800bab8:	463a      	mov	r2, r7
 800baba:	f000 f87f 	bl	800bbbc <_realloc_r>
 800babe:	4605      	mov	r5, r0
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d0de      	beq.n	800ba82 <__submore+0x1a>
 800bac4:	eb00 0806 	add.w	r8, r0, r6
 800bac8:	4601      	mov	r1, r0
 800baca:	4632      	mov	r2, r6
 800bacc:	4640      	mov	r0, r8
 800bace:	f7fc fe47 	bl	8008760 <memcpy>
 800bad2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bad6:	f8c4 8000 	str.w	r8, [r4]
 800bada:	e7e9      	b.n	800bab0 <__submore+0x48>

0800badc <__assert_func>:
 800badc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bade:	4614      	mov	r4, r2
 800bae0:	461a      	mov	r2, r3
 800bae2:	4b09      	ldr	r3, [pc, #36]	; (800bb08 <__assert_func+0x2c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4605      	mov	r5, r0
 800bae8:	68d8      	ldr	r0, [r3, #12]
 800baea:	b14c      	cbz	r4, 800bb00 <__assert_func+0x24>
 800baec:	4b07      	ldr	r3, [pc, #28]	; (800bb0c <__assert_func+0x30>)
 800baee:	9100      	str	r1, [sp, #0]
 800baf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baf4:	4906      	ldr	r1, [pc, #24]	; (800bb10 <__assert_func+0x34>)
 800baf6:	462b      	mov	r3, r5
 800baf8:	f000 f80e 	bl	800bb18 <fiprintf>
 800bafc:	f000 f89a 	bl	800bc34 <abort>
 800bb00:	4b04      	ldr	r3, [pc, #16]	; (800bb14 <__assert_func+0x38>)
 800bb02:	461c      	mov	r4, r3
 800bb04:	e7f3      	b.n	800baee <__assert_func+0x12>
 800bb06:	bf00      	nop
 800bb08:	2000002c 	.word	0x2000002c
 800bb0c:	0800c2f8 	.word	0x0800c2f8
 800bb10:	0800c305 	.word	0x0800c305
 800bb14:	0800c333 	.word	0x0800c333

0800bb18 <fiprintf>:
 800bb18:	b40e      	push	{r1, r2, r3}
 800bb1a:	b503      	push	{r0, r1, lr}
 800bb1c:	4601      	mov	r1, r0
 800bb1e:	ab03      	add	r3, sp, #12
 800bb20:	4805      	ldr	r0, [pc, #20]	; (800bb38 <fiprintf+0x20>)
 800bb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb26:	6800      	ldr	r0, [r0, #0]
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	f7ff fc4d 	bl	800b3c8 <_vfiprintf_r>
 800bb2e:	b002      	add	sp, #8
 800bb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb34:	b003      	add	sp, #12
 800bb36:	4770      	bx	lr
 800bb38:	2000002c 	.word	0x2000002c

0800bb3c <_fstat_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4d07      	ldr	r5, [pc, #28]	; (800bb5c <_fstat_r+0x20>)
 800bb40:	2300      	movs	r3, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	4608      	mov	r0, r1
 800bb46:	4611      	mov	r1, r2
 800bb48:	602b      	str	r3, [r5, #0]
 800bb4a:	f7f7 f82e 	bl	8002baa <_fstat>
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	d102      	bne.n	800bb58 <_fstat_r+0x1c>
 800bb52:	682b      	ldr	r3, [r5, #0]
 800bb54:	b103      	cbz	r3, 800bb58 <_fstat_r+0x1c>
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	bd38      	pop	{r3, r4, r5, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200008f4 	.word	0x200008f4

0800bb60 <_isatty_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d06      	ldr	r5, [pc, #24]	; (800bb7c <_isatty_r+0x1c>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f7 f82d 	bl	8002bca <_isatty>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_isatty_r+0x1a>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_isatty_r+0x1a>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	200008f4 	.word	0x200008f4

0800bb80 <__ascii_mbtowc>:
 800bb80:	b082      	sub	sp, #8
 800bb82:	b901      	cbnz	r1, 800bb86 <__ascii_mbtowc+0x6>
 800bb84:	a901      	add	r1, sp, #4
 800bb86:	b142      	cbz	r2, 800bb9a <__ascii_mbtowc+0x1a>
 800bb88:	b14b      	cbz	r3, 800bb9e <__ascii_mbtowc+0x1e>
 800bb8a:	7813      	ldrb	r3, [r2, #0]
 800bb8c:	600b      	str	r3, [r1, #0]
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	1e10      	subs	r0, r2, #0
 800bb92:	bf18      	it	ne
 800bb94:	2001      	movne	r0, #1
 800bb96:	b002      	add	sp, #8
 800bb98:	4770      	bx	lr
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	e7fb      	b.n	800bb96 <__ascii_mbtowc+0x16>
 800bb9e:	f06f 0001 	mvn.w	r0, #1
 800bba2:	e7f8      	b.n	800bb96 <__ascii_mbtowc+0x16>

0800bba4 <__malloc_lock>:
 800bba4:	4801      	ldr	r0, [pc, #4]	; (800bbac <__malloc_lock+0x8>)
 800bba6:	f7fe bd16 	b.w	800a5d6 <__retarget_lock_acquire_recursive>
 800bbaa:	bf00      	nop
 800bbac:	200008e8 	.word	0x200008e8

0800bbb0 <__malloc_unlock>:
 800bbb0:	4801      	ldr	r0, [pc, #4]	; (800bbb8 <__malloc_unlock+0x8>)
 800bbb2:	f7fe bd11 	b.w	800a5d8 <__retarget_lock_release_recursive>
 800bbb6:	bf00      	nop
 800bbb8:	200008e8 	.word	0x200008e8

0800bbbc <_realloc_r>:
 800bbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc0:	4680      	mov	r8, r0
 800bbc2:	4614      	mov	r4, r2
 800bbc4:	460e      	mov	r6, r1
 800bbc6:	b921      	cbnz	r1, 800bbd2 <_realloc_r+0x16>
 800bbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	4611      	mov	r1, r2
 800bbce:	f7ff b98b 	b.w	800aee8 <_malloc_r>
 800bbd2:	b92a      	cbnz	r2, 800bbe0 <_realloc_r+0x24>
 800bbd4:	f7ff f91c 	bl	800ae10 <_free_r>
 800bbd8:	4625      	mov	r5, r4
 800bbda:	4628      	mov	r0, r5
 800bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe0:	f000 f82f 	bl	800bc42 <_malloc_usable_size_r>
 800bbe4:	4284      	cmp	r4, r0
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	d802      	bhi.n	800bbf0 <_realloc_r+0x34>
 800bbea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbee:	d812      	bhi.n	800bc16 <_realloc_r+0x5a>
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	f7ff f978 	bl	800aee8 <_malloc_r>
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d0ed      	beq.n	800bbda <_realloc_r+0x1e>
 800bbfe:	42bc      	cmp	r4, r7
 800bc00:	4622      	mov	r2, r4
 800bc02:	4631      	mov	r1, r6
 800bc04:	bf28      	it	cs
 800bc06:	463a      	movcs	r2, r7
 800bc08:	f7fc fdaa 	bl	8008760 <memcpy>
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f7ff f8fe 	bl	800ae10 <_free_r>
 800bc14:	e7e1      	b.n	800bbda <_realloc_r+0x1e>
 800bc16:	4635      	mov	r5, r6
 800bc18:	e7df      	b.n	800bbda <_realloc_r+0x1e>

0800bc1a <__ascii_wctomb>:
 800bc1a:	b149      	cbz	r1, 800bc30 <__ascii_wctomb+0x16>
 800bc1c:	2aff      	cmp	r2, #255	; 0xff
 800bc1e:	bf85      	ittet	hi
 800bc20:	238a      	movhi	r3, #138	; 0x8a
 800bc22:	6003      	strhi	r3, [r0, #0]
 800bc24:	700a      	strbls	r2, [r1, #0]
 800bc26:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc2a:	bf98      	it	ls
 800bc2c:	2001      	movls	r0, #1
 800bc2e:	4770      	bx	lr
 800bc30:	4608      	mov	r0, r1
 800bc32:	4770      	bx	lr

0800bc34 <abort>:
 800bc34:	b508      	push	{r3, lr}
 800bc36:	2006      	movs	r0, #6
 800bc38:	f000 f834 	bl	800bca4 <raise>
 800bc3c:	2001      	movs	r0, #1
 800bc3e:	f7f6 ff65 	bl	8002b0c <_exit>

0800bc42 <_malloc_usable_size_r>:
 800bc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc46:	1f18      	subs	r0, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	bfbc      	itt	lt
 800bc4c:	580b      	ldrlt	r3, [r1, r0]
 800bc4e:	18c0      	addlt	r0, r0, r3
 800bc50:	4770      	bx	lr

0800bc52 <_raise_r>:
 800bc52:	291f      	cmp	r1, #31
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4604      	mov	r4, r0
 800bc58:	460d      	mov	r5, r1
 800bc5a:	d904      	bls.n	800bc66 <_raise_r+0x14>
 800bc5c:	2316      	movs	r3, #22
 800bc5e:	6003      	str	r3, [r0, #0]
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
 800bc66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc68:	b112      	cbz	r2, 800bc70 <_raise_r+0x1e>
 800bc6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc6e:	b94b      	cbnz	r3, 800bc84 <_raise_r+0x32>
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 f831 	bl	800bcd8 <_getpid_r>
 800bc76:	462a      	mov	r2, r5
 800bc78:	4601      	mov	r1, r0
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc80:	f000 b818 	b.w	800bcb4 <_kill_r>
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d00a      	beq.n	800bc9e <_raise_r+0x4c>
 800bc88:	1c59      	adds	r1, r3, #1
 800bc8a:	d103      	bne.n	800bc94 <_raise_r+0x42>
 800bc8c:	2316      	movs	r3, #22
 800bc8e:	6003      	str	r3, [r0, #0]
 800bc90:	2001      	movs	r0, #1
 800bc92:	e7e7      	b.n	800bc64 <_raise_r+0x12>
 800bc94:	2400      	movs	r4, #0
 800bc96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	4798      	blx	r3
 800bc9e:	2000      	movs	r0, #0
 800bca0:	e7e0      	b.n	800bc64 <_raise_r+0x12>
	...

0800bca4 <raise>:
 800bca4:	4b02      	ldr	r3, [pc, #8]	; (800bcb0 <raise+0xc>)
 800bca6:	4601      	mov	r1, r0
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	f7ff bfd2 	b.w	800bc52 <_raise_r>
 800bcae:	bf00      	nop
 800bcb0:	2000002c 	.word	0x2000002c

0800bcb4 <_kill_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4d07      	ldr	r5, [pc, #28]	; (800bcd4 <_kill_r+0x20>)
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4608      	mov	r0, r1
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	602b      	str	r3, [r5, #0]
 800bcc2:	f7f6 ff13 	bl	8002aec <_kill>
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	d102      	bne.n	800bcd0 <_kill_r+0x1c>
 800bcca:	682b      	ldr	r3, [r5, #0]
 800bccc:	b103      	cbz	r3, 800bcd0 <_kill_r+0x1c>
 800bcce:	6023      	str	r3, [r4, #0]
 800bcd0:	bd38      	pop	{r3, r4, r5, pc}
 800bcd2:	bf00      	nop
 800bcd4:	200008f4 	.word	0x200008f4

0800bcd8 <_getpid_r>:
 800bcd8:	f7f6 bf00 	b.w	8002adc <_getpid>

0800bcdc <_init>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	bf00      	nop
 800bce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce2:	bc08      	pop	{r3}
 800bce4:	469e      	mov	lr, r3
 800bce6:	4770      	bx	lr

0800bce8 <_fini>:
 800bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcea:	bf00      	nop
 800bcec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcee:	bc08      	pop	{r3}
 800bcf0:	469e      	mov	lr, r3
 800bcf2:	4770      	bx	lr
