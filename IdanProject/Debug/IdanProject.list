
IdanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb0  08008cb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb8  08008cb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000070  08008d30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08008d30  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e90  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003394  00000000  00000000  00038f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0003d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002add0  00000000  00000000  0003eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b6e  00000000  00000000  00069910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010939b  00000000  00000000  0008247e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b819  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006324  00000000  00000000  0018b86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800891c 	.word	0x0800891c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800891c 	.word	0x0800891c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <Button_init>:
extern  TIM_HandleTypeDef htim3;



void Button_init(Button* button, ButtonName name, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	461a      	mov	r2, r3
 80005b0:	460b      	mov	r3, r1
 80005b2:	72fb      	strb	r3, [r7, #11]
 80005b4:	4613      	mov	r3, r2
 80005b6:	813b      	strh	r3, [r7, #8]
	button->name = name;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	7afa      	ldrb	r2, [r7, #11]
 80005bc:	701a      	strb	r2, [r3, #0]
	button->gpioPort = gpioPort;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	605a      	str	r2, [r3, #4]
	button->gpioPin = gpioPin;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	893a      	ldrh	r2, [r7, #8]
 80005c8:	811a      	strh	r2, [r3, #8]
	button->pressTime = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
	button->btState=BUTTON_STATE_NONE;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	741a      	strb	r2, [r3, #16]
	button->waitToSecondPress=0;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
	button->counter=0;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <Button_getState>:


ButtonState  Button_getState(Button* bt)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	return bt->btState;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c1b      	ldrb	r3, [r3, #16]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <Button_changeStateToNone>:

void Button_changeStateToNone(Button *bt)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	bt->btState=BUTTON_STATE_NONE;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	741a      	strb	r2, [r3, #16]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <Button_onInterrupt>:

void Button_onInterrupt(Button* button, uint16_t pin)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
	if (pin == button->gpioPin) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	891b      	ldrh	r3, [r3, #8]
 8000630:	887a      	ldrh	r2, [r7, #2]
 8000632:	429a      	cmp	r2, r3
 8000634:	d12c      	bne.n	8000690 <Button_onInterrupt+0x70>
		if (HAL_GPIO_ReadPin(button->gpioPort, button->gpioPin) == 0) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	891b      	ldrh	r3, [r3, #8]
 800063e:	4619      	mov	r1, r3
 8000640:	4610      	mov	r0, r2
 8000642:	f003 f891 	bl	8003768 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d104      	bne.n	8000656 <Button_onInterrupt+0x36>
			button->pressTime = myClock.tickCount;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <Button_onInterrupt+0x78>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	60da      	str	r2, [r3, #12]


		}

	}
}
 8000654:	e01c      	b.n	8000690 <Button_onInterrupt+0x70>
			button->counter=0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
			if (myClock.tickCount - button->pressTime > LONG_PRESS_MS) {
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <Button_onInterrupt+0x78>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800066a:	d903      	bls.n	8000674 <Button_onInterrupt+0x54>
				button->btState=BUTTON_STATE_LONG_PRESS;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2202      	movs	r2, #2
 8000670:	741a      	strb	r2, [r3, #16]
}
 8000672:	e00d      	b.n	8000690 <Button_onInterrupt+0x70>
			else if (button->waitToSecondPress) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <Button_onInterrupt+0x6a>
				button->btState=BUTTON_STATE_DOUBLE_PRESS;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2203      	movs	r2, #3
 8000680:	741a      	strb	r2, [r3, #16]
				button->waitToSecondPress=0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
}
 8000688:	e002      	b.n	8000690 <Button_onInterrupt+0x70>
				button->waitToSecondPress = 1;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	619a      	str	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000094 	.word	0x20000094

0800069c <Button_timerInterrupt>:

void Button_timerInterrupt(Button* bt)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	if(bt->waitToSecondPress){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00f      	beq.n	80006cc <Button_timerInterrupt+0x30>
		bt->counter++;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	615a      	str	r2, [r3, #20]
		if(bt->counter>300){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80006be:	dd05      	ble.n	80006cc <Button_timerInterrupt+0x30>
			bt->btState=BUTTON_STATE_PRESS;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2201      	movs	r2, #1
 80006c4:	741a      	strb	r2, [r3, #16]
			bt->waitToSecondPress=0;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <Buzzer_init>:
		NOTE_1_F, NOTE_1_G, NOTE_1_G, NOTE_1_G};
static const int _lengths[] = {LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_2, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_4, LEN_2};
static const int _len=sizeof(_notes)/sizeof(_notes[_index]);

void Buzzer_init(Buzzer * buzzer)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]


	buzzer->counter=0;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
	buzzer->maxCounter=1000/_lengths[0];
 80006e6:	2304      	movs	r3, #4
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	605a      	str	r2, [r3, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	721a      	strb	r2, [r3, #8]

}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <Buzzer_interrupt>:


void Buzzer_interrupt(Buzzer * buzzer)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

	if(buzzer->bzState !=BUZZER_STATE_ON){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7a1b      	ldrb	r3, [r3, #8]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d14a      	bne.n	80007ae <Buzzer_interrupt+0xa6>
		return;
	}
	buzzer->counter++;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
	if (buzzer->counter < buzzer->maxCounter) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	429a      	cmp	r2, r3
 800072c:	db41      	blt.n	80007b2 <Buzzer_interrupt+0xaa>
		return;
	}

	_reload=(100000/_notes[_index])-1;
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <Buzzer_interrupt+0xb8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <Buzzer_interrupt+0xbc>)
 8000734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <Buzzer_interrupt+0xc0>)
 800073a:	fb92 f3f3 	sdiv	r3, r2, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <Buzzer_interrupt+0xc4>)
 8000742:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <Buzzer_interrupt+0xc8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, _reload);
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <Buzzer_interrupt+0xc4>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <Buzzer_interrupt+0xc8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <Buzzer_interrupt+0xc4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <Buzzer_interrupt+0xc8>)
 800075e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, _reload/2);
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <Buzzer_interrupt+0xc4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	0fda      	lsrs	r2, r3, #31
 8000766:	4413      	add	r3, r2
 8000768:	105b      	asrs	r3, r3, #1
 800076a:	461a      	mov	r2, r3
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <Buzzer_interrupt+0xc8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	635a      	str	r2, [r3, #52]	; 0x34

	if(_index==(_len-1)){
 8000772:	230d      	movs	r3, #13
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <Buzzer_interrupt+0xb8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d103      	bne.n	8000786 <Buzzer_interrupt+0x7e>
		_index=0;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <Buzzer_interrupt+0xb8>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	e004      	b.n	8000790 <Buzzer_interrupt+0x88>
	}
	else{
		_index++;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <Buzzer_interrupt+0xb8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <Buzzer_interrupt+0xb8>)
 800078e:	6013      	str	r3, [r2, #0]
	}

	buzzer->maxCounter=1000/_lengths[_index];
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <Buzzer_interrupt+0xb8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <Buzzer_interrupt+0xcc>)
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800079e:	fb92 f2f3 	sdiv	r2, r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	605a      	str	r2, [r3, #4]
	buzzer->counter=0;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e002      	b.n	80007b4 <Buzzer_interrupt+0xac>
		return;
 80007ae:	bf00      	nop
 80007b0:	e000      	b.n	80007b4 <Buzzer_interrupt+0xac>
		return;
 80007b2:	bf00      	nop

}
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	08008a48 	.word	0x08008a48
 80007c8:	000186a0 	.word	0x000186a0
 80007cc:	20000090 	.word	0x20000090
 80007d0:	200002fc 	.word	0x200002fc
 80007d4:	08008a7c 	.word	0x08008a7c

080007d8 <Buzzer_changeToOn>:

void Buzzer_changeToOn(Buzzer * buzzer)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_ON;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	721a      	strb	r2, [r3, #8]

}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <Buzzer_changeToOff>:

void Buzzer_changeToOff(Buzzer * buzzer)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	buzzer->bzState=BUZZER_STATE_OFF;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	721a      	strb	r2, [r3, #8]

}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <Buzzer_reset>:


void Buzzer_reset()
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	_index=0;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <Buzzer_reset+0x14>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]

}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	2000008c 	.word	0x2000008c

08000824 <Buzzer_stop>:

void Buzzer_stop()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(&htim3);
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <Buzzer_stop+0x18>)
 800082a:	f004 fbdf 	bl	8004fec <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800082e:	2100      	movs	r1, #0
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <Buzzer_stop+0x18>)
 8000832:	f004 fdd1 	bl	80053d8 <HAL_TIM_PWM_Stop>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200002fc 	.word	0x200002fc

08000840 <Buzzer_start>:

void Buzzer_start()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000844:	2100      	movs	r1, #0
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <Buzzer_start+0x18>)
 8000848:	f004 fcc0 	bl	80051cc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <Buzzer_start+0x18>)
 800084e:	f004 fb65 	bl	8004f1c <HAL_TIM_Base_Start>


}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200002fc 	.word	0x200002fc

0800085c <cmdLedOn>:
#include "Buzzer.h"

#include <stdlib.h>

static void cmdLedOn(void* obj, char* params)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	(void)params;
	Led* led = (Led*)obj;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]
	Led_On(led);
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 f9f0 	bl	8000c50 <Led_On>

}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <cmdLedOff>:
static void cmdLedOff(void* obj, char* params)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
	(void)params;
	Led* led = (Led*)obj;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]
	Led_Off(led);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f000 f9f5 	bl	8000c76 <Led_Off>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <cmdLedBlink>:

static void cmdLedBlink(void* obj, char* params)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	Led* led = (Led*)obj;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]
	Led_Blink(led, atoi(params));
 80008a2:	6838      	ldr	r0, [r7, #0]
 80008a4:	f006 fae1 	bl	8006e6a <atoi>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4619      	mov	r1, r3
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f000 f9f5 	bl	8000c9c <Led_Blink>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <cmdLedBrightness>:
static void cmdLedBrightness(void* obj, char* params)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	6039      	str	r1, [r7, #0]
	Led* led = (Led*)obj;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	60fb      	str	r3, [r7, #12]
	Led_Brightness(led, atoi(params));
 80008c8:	6838      	ldr	r0, [r7, #0]
 80008ca:	f006 face 	bl	8006e6a <atoi>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4619      	mov	r1, r3
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f000 f9fc 	bl	8000cd0 <Led_Brightness>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <cmdBuzzerStart>:

static void cmdBuzzerStart(void* obj, char* params)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]

	Buzzer_start();
 80008ea:	f7ff ffa9 	bl	8000840 <Buzzer_start>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <cmdBuzzerStop>:
static void cmdBuzzerStop(void* obj, char* params)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
	Buzzer_stop();
 8000900:	f7ff ff90 	bl	8000824 <Buzzer_stop>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <Cli_init>:


void Cli_init(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	Communication_register("blueOn", &cmdLedOn, &ledB);
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <Cli_init+0x6c>)
 8000912:	491a      	ldr	r1, [pc, #104]	; (800097c <Cli_init+0x70>)
 8000914:	481a      	ldr	r0, [pc, #104]	; (8000980 <Cli_init+0x74>)
 8000916:	f000 f94f 	bl	8000bb8 <Communication_register>
	Communication_register("blueOff", &cmdLedOff, &ledB);
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <Cli_init+0x6c>)
 800091c:	4919      	ldr	r1, [pc, #100]	; (8000984 <Cli_init+0x78>)
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <Cli_init+0x7c>)
 8000920:	f000 f94a 	bl	8000bb8 <Communication_register>
	Communication_register("blueBlink", &cmdLedBlink, &ledB);
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <Cli_init+0x6c>)
 8000926:	4919      	ldr	r1, [pc, #100]	; (800098c <Cli_init+0x80>)
 8000928:	4819      	ldr	r0, [pc, #100]	; (8000990 <Cli_init+0x84>)
 800092a:	f000 f945 	bl	8000bb8 <Communication_register>
	Communication_register("blueBrightness", &cmdLedBrightness, &ledB);
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <Cli_init+0x6c>)
 8000930:	4918      	ldr	r1, [pc, #96]	; (8000994 <Cli_init+0x88>)
 8000932:	4819      	ldr	r0, [pc, #100]	; (8000998 <Cli_init+0x8c>)
 8000934:	f000 f940 	bl	8000bb8 <Communication_register>

	Communication_register("redOn", &cmdLedOn, &ledR);
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <Cli_init+0x90>)
 800093a:	4910      	ldr	r1, [pc, #64]	; (800097c <Cli_init+0x70>)
 800093c:	4818      	ldr	r0, [pc, #96]	; (80009a0 <Cli_init+0x94>)
 800093e:	f000 f93b 	bl	8000bb8 <Communication_register>
	Communication_register("redOff", &cmdLedOff, &ledR);
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <Cli_init+0x90>)
 8000944:	490f      	ldr	r1, [pc, #60]	; (8000984 <Cli_init+0x78>)
 8000946:	4817      	ldr	r0, [pc, #92]	; (80009a4 <Cli_init+0x98>)
 8000948:	f000 f936 	bl	8000bb8 <Communication_register>
	Communication_register("redBlink", &cmdLedBlink, &ledR);
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <Cli_init+0x90>)
 800094e:	490f      	ldr	r1, [pc, #60]	; (800098c <Cli_init+0x80>)
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <Cli_init+0x9c>)
 8000952:	f000 f931 	bl	8000bb8 <Communication_register>
	Communication_register("redBrightness", &cmdLedBrightness, &ledR);
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <Cli_init+0x90>)
 8000958:	490e      	ldr	r1, [pc, #56]	; (8000994 <Cli_init+0x88>)
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <Cli_init+0xa0>)
 800095c:	f000 f92c 	bl	8000bb8 <Communication_register>
	Communication_register("buzzerStart", &cmdBuzzerStart, &bz1);
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <Cli_init+0xa4>)
 8000962:	4914      	ldr	r1, [pc, #80]	; (80009b4 <Cli_init+0xa8>)
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <Cli_init+0xac>)
 8000966:	f000 f927 	bl	8000bb8 <Communication_register>
	Communication_register("buzzerStop", &cmdBuzzerStop, &bz1);
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <Cli_init+0xa4>)
 800096c:	4913      	ldr	r1, [pc, #76]	; (80009bc <Cli_init+0xb0>)
 800096e:	4814      	ldr	r0, [pc, #80]	; (80009c0 <Cli_init+0xb4>)
 8000970:	f000 f922 	bl	8000bb8 <Communication_register>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000220 	.word	0x20000220
 800097c:	0800085d 	.word	0x0800085d
 8000980:	08008934 	.word	0x08008934
 8000984:	08000879 	.word	0x08000879
 8000988:	0800893c 	.word	0x0800893c
 800098c:	08000895 	.word	0x08000895
 8000990:	08008944 	.word	0x08008944
 8000994:	080008bb 	.word	0x080008bb
 8000998:	08008950 	.word	0x08008950
 800099c:	20000234 	.word	0x20000234
 80009a0:	08008960 	.word	0x08008960
 80009a4:	08008968 	.word	0x08008968
 80009a8:	08008970 	.word	0x08008970
 80009ac:	0800897c 	.word	0x0800897c
 80009b0:	20000280 	.word	0x20000280
 80009b4:	080008e1 	.word	0x080008e1
 80009b8:	0800898c 	.word	0x0800898c
 80009bc:	080008f7 	.word	0x080008f7
 80009c0:	08008998 	.word	0x08008998

080009c4 <Clock_init>:
#include "Clock.h"

Clock myClock;

void Clock_init()
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	myClock.tickCount=0;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <Clock_init+0x14>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]

}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000094 	.word	0x20000094

080009dc <Communication_task>:
static int _CommandArrLen=0;



 int Communication_task()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80009e2:	1db9      	adds	r1, r7, #6
 80009e4:	230a      	movs	r3, #10
 80009e6:	2201      	movs	r2, #1
 80009e8:	4844      	ldr	r0, [pc, #272]	; (8000afc <Communication_task+0x120>)
 80009ea:	f005 fd05 	bl	80063f8 <HAL_UART_Receive>
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d020      	beq.n	8000a3a <Communication_task+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <Communication_task+0x120>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d011      	beq.n	8000a2a <Communication_task+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a06:	4b3d      	ldr	r3, [pc, #244]	; (8000afc <Communication_task+0x120>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 8000a0e:	e00c      	b.n	8000a2a <Communication_task+0x4e>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 8000a10:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <Communication_task+0x124>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	493a      	ldr	r1, [pc, #232]	; (8000b00 <Communication_task+0x124>)
 8000a18:	600a      	str	r2, [r1, #0]
 8000a1a:	4a3a      	ldr	r2, [pc, #232]	; (8000b04 <Communication_task+0x128>)
 8000a1c:	1899      	adds	r1, r3, r2
 8000a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a22:	2201      	movs	r2, #1
 8000a24:	4835      	ldr	r0, [pc, #212]	; (8000afc <Communication_task+0x120>)
 8000a26:	f005 fc53 	bl	80062d0 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <Communication_task+0x124>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b36      	ldr	r3, [pc, #216]	; (8000b08 <Communication_task+0x12c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbec      	blt.n	8000a10 <Communication_task+0x34>
		}

		return 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e05c      	b.n	8000af4 <Communication_task+0x118>
	}

	if (ch == '\r' || ch == '\n')
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	2b0d      	cmp	r3, #13
 8000a3e:	d010      	beq.n	8000a62 <Communication_task+0x86>
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d127      	bne.n	8000a96 <Communication_task+0xba>
	{
		// here we have a time to print the command
		while (_cmdprint < _cmdcount)
 8000a46:	e00c      	b.n	8000a62 <Communication_task+0x86>
		{
			HAL_UART_Transmit(&huart2, &_cmdbuffer[_cmdprint++], 1, 0xFFFF);
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <Communication_task+0x124>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	492c      	ldr	r1, [pc, #176]	; (8000b00 <Communication_task+0x124>)
 8000a50:	600a      	str	r2, [r1, #0]
 8000a52:	4a2c      	ldr	r2, [pc, #176]	; (8000b04 <Communication_task+0x128>)
 8000a54:	1899      	adds	r1, r3, r2
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4827      	ldr	r0, [pc, #156]	; (8000afc <Communication_task+0x120>)
 8000a5e:	f005 fc37 	bl	80062d0 <HAL_UART_Transmit>
		while (_cmdprint < _cmdcount)
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <Communication_task+0x124>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <Communication_task+0x12c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbec      	blt.n	8000a48 <Communication_task+0x6c>
		}

		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a72:	2202      	movs	r2, #2
 8000a74:	4925      	ldr	r1, [pc, #148]	; (8000b0c <Communication_task+0x130>)
 8000a76:	4821      	ldr	r0, [pc, #132]	; (8000afc <Communication_task+0x120>)
 8000a78:	f005 fc2a 	bl	80062d0 <HAL_UART_Transmit>

		_cmdbuffer[_cmdcount] = 0;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <Communication_task+0x12c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <Communication_task+0x128>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	54d1      	strb	r1, [r2, r3]
		_cmdcount = 0;
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <Communication_task+0x12c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
		_cmdprint = 0;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <Communication_task+0x124>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]

		// command is ready
		return 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e02e      	b.n	8000af4 <Communication_task+0x118>
	}
	else if (ch == '\b')
 8000a96:	79bb      	ldrb	r3, [r7, #6]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d118      	bne.n	8000ace <Communication_task+0xf2>
	{
		char bs[] = "\b \b";
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <Communication_task+0x134>)
 8000a9e:	603b      	str	r3, [r7, #0]
		_cmdcount--;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <Communication_task+0x12c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <Communication_task+0x12c>)
 8000aa8:	6013      	str	r3, [r2, #0]
		_cmdprint--;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <Communication_task+0x124>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <Communication_task+0x124>)
 8000ab2:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)bs, strlen(bs), 0xFFFF);
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fb94 	bl	80001e4 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4639      	mov	r1, r7
 8000ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <Communication_task+0x120>)
 8000ac8:	f005 fc02 	bl	80062d0 <HAL_UART_Transmit>
 8000acc:	e011      	b.n	8000af2 <Communication_task+0x116>
	}
	else
	{
		if (_cmdcount >= MAX_BUFFER_LENGTH)
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <Communication_task+0x12c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b63      	cmp	r3, #99	; 0x63
 8000ad4:	dd05      	ble.n	8000ae2 <Communication_task+0x106>
		{
			_cmdcount = 0;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <Communication_task+0x12c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			_cmdprint = 0;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <Communication_task+0x124>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
		}

		_cmdbuffer[_cmdcount++] = ch;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <Communication_task+0x12c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <Communication_task+0x12c>)
 8000aea:	600a      	str	r2, [r1, #0]
 8000aec:	79b9      	ldrb	r1, [r7, #6]
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <Communication_task+0x128>)
 8000af0:	54d1      	strb	r1, [r2, r3]
	}

	return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000394 	.word	0x20000394
 8000b00:	20000100 	.word	0x20000100
 8000b04:	20000098 	.word	0x20000098
 8000b08:	200000fc 	.word	0x200000fc
 8000b0c:	080089a4 	.word	0x080089a4
 8000b10:	00082008 	.word	0x00082008

08000b14 <Communication_handle>:

 void Communication_handle()
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b08d      	sub	sp, #52	; 0x34
 8000b18:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[20];

	int params = sscanf((const char*)_cmdbuffer, "%s %s", cmd, param);
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	f107 0214 	add.w	r2, r7, #20
 8000b20:	4920      	ldr	r1, [pc, #128]	; (8000ba4 <Communication_handle+0x90>)
 8000b22:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <Communication_handle+0x94>)
 8000b24:	f006 fa66 	bl	8006ff4 <siscanf>
 8000b28:	62b8      	str	r0, [r7, #40]	; 0x28

	if (params == 0)
 8000b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d035      	beq.n	8000b9c <Communication_handle+0x88>
	{
		return;
	}
	for(int i=0;i<_CommandArrLen;i++){
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b34:	e029      	b.n	8000b8a <Communication_handle+0x76>
		if(strcmp(cmd,_commandsArr[i].commandName) == 0){
 8000b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b38:	4613      	mov	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <Communication_handle+0x98>)
 8000b42:	441a      	add	r2, r3
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fb40 	bl	80001d0 <strcmp>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d116      	bne.n	8000b84 <Communication_handle+0x70>
			_commandsArr[i].func(_commandsArr[i].object, param);
 8000b56:	4915      	ldr	r1, [pc, #84]	; (8000bac <Communication_handle+0x98>)
 8000b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	1a9b      	subs	r3, r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	3314      	adds	r3, #20
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	4910      	ldr	r1, [pc, #64]	; (8000bac <Communication_handle+0x98>)
 8000b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	3318      	adds	r3, #24
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	463a      	mov	r2, r7
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	47a0      	blx	r4
			return;
 8000b82:	e00c      	b.n	8000b9e <Communication_handle+0x8a>
	for(int i=0;i<_CommandArrLen;i++){
 8000b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b86:	3301      	adds	r3, #1
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <Communication_handle+0x9c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbd0      	blt.n	8000b36 <Communication_handle+0x22>
		}

	}
	printf("Invalid command\r\n");
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <Communication_handle+0xa0>)
 8000b96:	f006 fa25 	bl	8006fe4 <puts>
 8000b9a:	e000      	b.n	8000b9e <Communication_handle+0x8a>
		return;
 8000b9c:	bf00      	nop

}
 8000b9e:	3734      	adds	r7, #52	; 0x34
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	080089a8 	.word	0x080089a8
 8000ba8:	20000098 	.word	0x20000098
 8000bac:	20000104 	.word	0x20000104
 8000bb0:	2000021c 	.word	0x2000021c
 8000bb4:	080089b0 	.word	0x080089b0

08000bb8 <Communication_register>:

void Communication_register(char* commandName, HandlerFunc func,void* object)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	strncpy(_commandsArr[_CommandArrLen].commandName, commandName, 20);
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <Communication_register+0x64>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	1a9b      	subs	r3, r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <Communication_register+0x68>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2214      	movs	r2, #20
 8000bd6:	68f9      	ldr	r1, [r7, #12]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f006 fa7c 	bl	80070d6 <strncpy>
	_commandsArr[_CommandArrLen].func=func;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <Communication_register+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	490f      	ldr	r1, [pc, #60]	; (8000c20 <Communication_register+0x68>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	3314      	adds	r3, #20
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	601a      	str	r2, [r3, #0]
	_commandsArr[_CommandArrLen].object=object;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <Communication_register+0x64>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4909      	ldr	r1, [pc, #36]	; (8000c20 <Communication_register+0x68>)
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	1a9b      	subs	r3, r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	3318      	adds	r3, #24
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
	_CommandArrLen++;
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <Communication_register+0x64>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a02      	ldr	r2, [pc, #8]	; (8000c1c <Communication_register+0x64>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000021c 	.word	0x2000021c
 8000c20:	20000104 	.word	0x20000104

08000c24 <Led_init>:
#include "Led.h"

#define MAX_BRIGHNESS_LEVEL 10

void Led_init(Led* led, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
	led->gpioPort = gpioPort;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
	led->gpioPin = gpioPin;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	88fa      	ldrh	r2, [r7, #6]
 8000c42:	821a      	strh	r2, [r3, #16]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <Led_On>:

void Led_On(Led* led)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	led->state = STATE_FULL;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68d8      	ldr	r0, [r3, #12]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	8a1b      	ldrh	r3, [r3, #16]
 8000c66:	2201      	movs	r2, #1
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f002 fd95 	bl	8003798 <HAL_GPIO_WritePin>


}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <Led_Off>:

void Led_Off(Led* led)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	led->state = STATE_OFF;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68d8      	ldr	r0, [r3, #12]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	8a1b      	ldrh	r3, [r3, #16]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f002 fd82 	bl	8003798 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <Led_Blink>:

void Led_Blink(Led* led, int period)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	led->state = STATE_BLINK;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2202      	movs	r2, #2
 8000caa:	701a      	strb	r2, [r3, #0]
	led->counter = 0;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
	led->maxCounter = period;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68d8      	ldr	r0, [r3, #12]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	8a1b      	ldrh	r3, [r3, #16]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f002 fd68 	bl	8003798 <HAL_GPIO_WritePin>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <Led_Brightness>:

void Led_Brightness(Led* led ,int level)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	if (level < 0 || level > 10) {
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0c      	blt.n	8000cfa <Led_Brightness+0x2a>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	dc09      	bgt.n	8000cfa <Led_Brightness+0x2a>
		return;
	}
	led->state = STATE_BRIGHTNESS;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2203      	movs	r2, #3
 8000cea:	701a      	strb	r2, [r3, #0]
	led->counter=0;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
	led->maxCounter=level;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	e000      	b.n	8000cfc <Led_Brightness+0x2c>
		return;
 8000cfa:	bf00      	nop


}
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <Led_OnTimerInterrupt>:

void Led_OnTimerInterrupt(Led* led)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	if (led->state == STATE_BLINK) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d115      	bne.n	8000d44 <Led_OnTimerInterrupt+0x3c>
		led->counter++;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	605a      	str	r2, [r3, #4]
		if (led->counter == led->maxCounter) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d10a      	bne.n	8000d44 <Led_OnTimerInterrupt+0x3c>
			HAL_GPIO_TogglePin(led->gpioPort, led->gpioPin);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	8a1b      	ldrh	r3, [r3, #16]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f002 fd45 	bl	80037c8 <HAL_GPIO_TogglePin>
			led->counter = 0;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
		}
	}

	if(led->state==STATE_BRIGHTNESS){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d12a      	bne.n	8000da2 <Led_OnTimerInterrupt+0x9a>
		if(led->counter==0){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d108      	bne.n	8000d66 <Led_OnTimerInterrupt+0x5e>
			HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 1);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68d8      	ldr	r0, [r3, #12]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	8a1b      	ldrh	r3, [r3, #16]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f002 fd1a 	bl	8003798 <HAL_GPIO_WritePin>
 8000d64:	e00d      	b.n	8000d82 <Led_OnTimerInterrupt+0x7a>
		}
		else if(led->counter==led->maxCounter){
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d107      	bne.n	8000d82 <Led_OnTimerInterrupt+0x7a>
			HAL_GPIO_WritePin(led->gpioPort, led->gpioPin, 0);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68d8      	ldr	r0, [r3, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	8a1b      	ldrh	r3, [r3, #16]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f002 fd0b 	bl	8003798 <HAL_GPIO_WritePin>
		}
		led->counter=(led->counter+1)%MAX_BRIGHNESS_LEVEL;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	1c59      	adds	r1, r3, #1
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <Led_OnTimerInterrupt+0xa4>)
 8000d8a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d8e:	109a      	asrs	r2, r3, #2
 8000d90:	17cb      	asrs	r3, r1, #31
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	1aca      	subs	r2, r1, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	605a      	str	r2, [r3, #4]
	}
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	66666667 	.word	0x66666667

08000db0 <LightSensor_init>:
 */

#include "LightSensor.h"

void LightSensor_init(LightSensor *ltsensor,ADC_HandleTypeDef* hadc,uint32_t max)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	ltsensor->hadc=hadc;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	601a      	str	r2, [r3, #0]
	ltsensor->max=max;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	605a      	str	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LightSensor_adcInterrupt>:


void LightSensor_adcInterrupt(LightSensor *ltsensor)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint32_t lt=HAL_ADC_GetValue(ltsensor->hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fb21 	bl	8002428 <HAL_ADC_GetValue>
 8000de6:	60f8      	str	r0, [r7, #12]
	ltsensor->val=((ltsensor->max) * lt + (4096/2) ) /4096;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000df6:	0b1a      	lsrs	r2, r3, #12
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	609a      	str	r2, [r3, #8]

}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <MyMain>:
Buzzer bz1;


LightSensor lts1;

void MyMain(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	Led_init(&ledB, LED1_GPIO_Port, LED1_Pin);
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e10:	485b      	ldr	r0, [pc, #364]	; (8000f80 <MyMain+0x17c>)
 8000e12:	f7ff ff07 	bl	8000c24 <Led_init>
	Led_init(&ledR, LED2_GPIO_Port, LED2_Pin);
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e1c:	4859      	ldr	r0, [pc, #356]	; (8000f84 <MyMain+0x180>)
 8000e1e:	f7ff ff01 	bl	8000c24 <Led_init>

	 Button_init(&buttonSw1, BTN_SW1, SW1_GPIO_Port,  SW1_Pin);
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4856      	ldr	r0, [pc, #344]	; (8000f88 <MyMain+0x184>)
 8000e2e:	f7ff fbb9 	bl	80005a4 <Button_init>
	 Button_init(&buttonSw2, BTN_SW2, SW2_GPIO_Port, SW2_Pin);
 8000e32:	2308      	movs	r3, #8
 8000e34:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <MyMain+0x188>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	4855      	ldr	r0, [pc, #340]	; (8000f90 <MyMain+0x18c>)
 8000e3a:	f7ff fbb3 	bl	80005a4 <Button_init>

	 LightSensor_init(&lts1, &hadc2, 10);
 8000e3e:	220a      	movs	r2, #10
 8000e40:	4954      	ldr	r1, [pc, #336]	; (8000f94 <MyMain+0x190>)
 8000e42:	4855      	ldr	r0, [pc, #340]	; (8000f98 <MyMain+0x194>)
 8000e44:	f7ff ffb4 	bl	8000db0 <LightSensor_init>


	 Clock_init();
 8000e48:	f7ff fdbc 	bl	80009c4 <Clock_init>

	 Buzzer_init(&bz1);
 8000e4c:	4853      	ldr	r0, [pc, #332]	; (8000f9c <MyMain+0x198>)
 8000e4e:	f7ff fc43 	bl	80006d8 <Buzzer_init>

	 HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e52:	2036      	movs	r0, #54	; 0x36
 8000e54:	f002 fac3 	bl	80033de <HAL_NVIC_EnableIRQ>
	 HAL_TIM_Base_Start_IT(&htim6);
 8000e58:	4851      	ldr	r0, [pc, #324]	; (8000fa0 <MyMain+0x19c>)
 8000e5a:	f004 f8ef 	bl	800503c <HAL_TIM_Base_Start_IT>


	 HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e5e:	2012      	movs	r0, #18
 8000e60:	f002 fabd 	bl	80033de <HAL_NVIC_EnableIRQ>
	 HAL_ADC_Start_IT(&hadc2);
 8000e64:	484b      	ldr	r0, [pc, #300]	; (8000f94 <MyMain+0x190>)
 8000e66:	f001 f9ad 	bl	80021c4 <HAL_ADC_Start_IT>
	 //ledBlink(&ledB, 500);
	 //ledOn(&ledB);

	 ButtonState SW1State;
	 ButtonState SW2State;
	 Cli_init();
 8000e6a:	f7ff fd4f 	bl	800090c <Cli_init>
	 while(1){
		 if (Communication_task())
 8000e6e:	f7ff fdb5 	bl	80009dc <Communication_task>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MyMain+0x78>
		 	{
		 		Communication_handle();
 8000e78:	f7ff fe4c 	bl	8000b14 <Communication_handle>
		 	}

		 SW1State=Button_getState(&buttonSw1);
 8000e7c:	4842      	ldr	r0, [pc, #264]	; (8000f88 <MyMain+0x184>)
 8000e7e:	f7ff fbb6 	bl	80005ee <Button_getState>
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]


		 if(SW1State!=BUTTON_STATE_NONE){
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d035      	beq.n	8000ef8 <MyMain+0xf4>
			 switch(SW1State){
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d833      	bhi.n	8000efa <MyMain+0xf6>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <MyMain+0x94>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000efb 	.word	0x08000efb
 8000e9c:	08000ea9 	.word	0x08000ea9
 8000ea0:	08000ec1 	.word	0x08000ec1
 8000ea4:	08000ed9 	.word	0x08000ed9
			 case BUTTON_STATE_PRESS:
				 //HAL_TIM_Base_Stop_IT(&htim6);
				 Buzzer_stop();
 8000ea8:	f7ff fcbc 	bl	8000824 <Buzzer_stop>
				 printf("SW1 short press\n\r");
 8000eac:	483d      	ldr	r0, [pc, #244]	; (8000fa4 <MyMain+0x1a0>)
 8000eae:	f006 f813 	bl	8006ed8 <iprintf>
				 Button_changeStateToNone(&buttonSw1);
 8000eb2:	4835      	ldr	r0, [pc, #212]	; (8000f88 <MyMain+0x184>)
 8000eb4:	f7ff fba7 	bl	8000606 <Button_changeStateToNone>
				 Buzzer_changeToOff(&bz1);
 8000eb8:	4838      	ldr	r0, [pc, #224]	; (8000f9c <MyMain+0x198>)
 8000eba:	f7ff fc9a 	bl	80007f2 <Buzzer_changeToOff>
				 break;
 8000ebe:	e01c      	b.n	8000efa <MyMain+0xf6>


			 case BUTTON_STATE_LONG_PRESS:

				 //HAL_TIM_Base_Start_IT(&htim6);
				 Buzzer_start();
 8000ec0:	f7ff fcbe 	bl	8000840 <Buzzer_start>
				 printf("SW1 long press\n\r");
 8000ec4:	4838      	ldr	r0, [pc, #224]	; (8000fa8 <MyMain+0x1a4>)
 8000ec6:	f006 f807 	bl	8006ed8 <iprintf>
				 Button_changeStateToNone(&buttonSw1);
 8000eca:	482f      	ldr	r0, [pc, #188]	; (8000f88 <MyMain+0x184>)
 8000ecc:	f7ff fb9b 	bl	8000606 <Button_changeStateToNone>
				 Buzzer_changeToOn(&bz1);
 8000ed0:	4832      	ldr	r0, [pc, #200]	; (8000f9c <MyMain+0x198>)
 8000ed2:	f7ff fc81 	bl	80007d8 <Buzzer_changeToOn>
				 break;
 8000ed6:	e010      	b.n	8000efa <MyMain+0xf6>

			 case BUTTON_STATE_DOUBLE_PRESS:
				 printf("SW1 double press\n\r");
 8000ed8:	4834      	ldr	r0, [pc, #208]	; (8000fac <MyMain+0x1a8>)
 8000eda:	f005 fffd 	bl	8006ed8 <iprintf>
				 Led_Blink(&ledB, 100);
 8000ede:	2164      	movs	r1, #100	; 0x64
 8000ee0:	4827      	ldr	r0, [pc, #156]	; (8000f80 <MyMain+0x17c>)
 8000ee2:	f7ff fedb 	bl	8000c9c <Led_Blink>
				 Led_Blink(&ledR, 500);
 8000ee6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eea:	4826      	ldr	r0, [pc, #152]	; (8000f84 <MyMain+0x180>)
 8000eec:	f7ff fed6 	bl	8000c9c <Led_Blink>
				 Button_changeStateToNone(&buttonSw1);
 8000ef0:	4825      	ldr	r0, [pc, #148]	; (8000f88 <MyMain+0x184>)
 8000ef2:	f7ff fb88 	bl	8000606 <Button_changeStateToNone>
			 case BUTTON_STATE_NONE:
				 break;
 8000ef6:	e000      	b.n	8000efa <MyMain+0xf6>

			 }
		 }
 8000ef8:	bf00      	nop

		 SW2State=Button_getState(&buttonSw2);
 8000efa:	4825      	ldr	r0, [pc, #148]	; (8000f90 <MyMain+0x18c>)
 8000efc:	f7ff fb77 	bl	80005ee <Button_getState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	71bb      	strb	r3, [r7, #6]
		 if(SW2State!=BUTTON_STATE_NONE){
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d037      	beq.n	8000f7a <MyMain+0x176>
		 	switch(SW2State){
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d8ae      	bhi.n	8000e6e <MyMain+0x6a>
 8000f10:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <MyMain+0x114>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000e6f 	.word	0x08000e6f
 8000f1c:	08000f29 	.word	0x08000f29
 8000f20:	08000f43 	.word	0x08000f43
 8000f24:	08000f5d 	.word	0x08000f5d
		 	case BUTTON_STATE_PRESS:
		 		Led_On(&ledR);
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <MyMain+0x180>)
 8000f2a:	f7ff fe91 	bl	8000c50 <Led_On>
		 		Led_On(&ledB);
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <MyMain+0x17c>)
 8000f30:	f7ff fe8e 	bl	8000c50 <Led_On>
		 		printf("SW2 short press\n\r");
 8000f34:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <MyMain+0x1ac>)
 8000f36:	f005 ffcf 	bl	8006ed8 <iprintf>
		 		Button_changeStateToNone(&buttonSw2);
 8000f3a:	4815      	ldr	r0, [pc, #84]	; (8000f90 <MyMain+0x18c>)
 8000f3c:	f7ff fb63 	bl	8000606 <Button_changeStateToNone>
		 		break;
 8000f40:	e01c      	b.n	8000f7c <MyMain+0x178>
		 	case BUTTON_STATE_LONG_PRESS:

		 		Led_Off(&ledR);
 8000f42:	4810      	ldr	r0, [pc, #64]	; (8000f84 <MyMain+0x180>)
 8000f44:	f7ff fe97 	bl	8000c76 <Led_Off>
		 		Led_Off(&ledB);
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MyMain+0x17c>)
 8000f4a:	f7ff fe94 	bl	8000c76 <Led_Off>
		 		printf("SW2 long press\n\r");
 8000f4e:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <MyMain+0x1b0>)
 8000f50:	f005 ffc2 	bl	8006ed8 <iprintf>
		 		Button_changeStateToNone(&buttonSw2);
 8000f54:	480e      	ldr	r0, [pc, #56]	; (8000f90 <MyMain+0x18c>)
 8000f56:	f7ff fb56 	bl	8000606 <Button_changeStateToNone>
		 		break;
 8000f5a:	e00f      	b.n	8000f7c <MyMain+0x178>

		 	case BUTTON_STATE_DOUBLE_PRESS:
		 		Led_Brightness(&ledR, 2);
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4809      	ldr	r0, [pc, #36]	; (8000f84 <MyMain+0x180>)
 8000f60:	f7ff feb6 	bl	8000cd0 <Led_Brightness>
		 		Led_Brightness(&ledB, 5);
 8000f64:	2105      	movs	r1, #5
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <MyMain+0x17c>)
 8000f68:	f7ff feb2 	bl	8000cd0 <Led_Brightness>
		 		printf("SW2 double press\n\r");
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <MyMain+0x1b4>)
 8000f6e:	f005 ffb3 	bl	8006ed8 <iprintf>
		 		Button_changeStateToNone(&buttonSw2);
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MyMain+0x18c>)
 8000f74:	f7ff fb47 	bl	8000606 <Button_changeStateToNone>
		 		break;
 8000f78:	e000      	b.n	8000f7c <MyMain+0x178>
		 	case BUTTON_STATE_NONE:
		 		break;

		 	}

		 }
 8000f7a:	bf00      	nop
		 if (Communication_task())
 8000f7c:	e777      	b.n	8000e6e <MyMain+0x6a>
 8000f7e:	bf00      	nop
 8000f80:	20000220 	.word	0x20000220
 8000f84:	20000234 	.word	0x20000234
 8000f88:	20000248 	.word	0x20000248
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	20000264 	.word	0x20000264
 8000f94:	20000298 	.word	0x20000298
 8000f98:	2000028c 	.word	0x2000028c
 8000f9c:	20000280 	.word	0x20000280
 8000fa0:	20000348 	.word	0x20000348
 8000fa4:	080089c4 	.word	0x080089c4
 8000fa8:	080089d8 	.word	0x080089d8
 8000fac:	080089ec 	.word	0x080089ec
 8000fb0:	08008a00 	.word	0x08008a00
 8000fb4:	08008a14 	.word	0x08008a14
 8000fb8:	08008a28 	.word	0x08008a28

08000fbc <HAL_TIM_PeriodElapsedCallback>:
	 }

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	if(htim==&htim6){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d113      	bne.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x38>


		Led_OnTimerInterrupt(&ledB);
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fce:	f7ff fe9b 	bl	8000d08 <Led_OnTimerInterrupt>
		Led_OnTimerInterrupt(&ledR);
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fd4:	f7ff fe98 	bl	8000d08 <Led_OnTimerInterrupt>


		Buzzer_interrupt(&bz1);
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fda:	f7ff fb95 	bl	8000708 <Buzzer_interrupt>

		myClock.tickCount++;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fe6:	6013      	str	r3, [r2, #0]
		Button_timerInterrupt(&buttonSw1);
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fea:	f7ff fb57 	bl	800069c <Button_timerInterrupt>
		Button_timerInterrupt(&buttonSw2);
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ff0:	f7ff fb54 	bl	800069c <Button_timerInterrupt>




	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000348 	.word	0x20000348
 8001000:	20000220 	.word	0x20000220
 8001004:	20000234 	.word	0x20000234
 8001008:	20000280 	.word	0x20000280
 800100c:	20000094 	.word	0x20000094
 8001010:	20000248 	.word	0x20000248
 8001014:	20000264 	.word	0x20000264

08001018 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	Button_onInterrupt(&buttonSw1, pin);
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001028:	f7ff fafa 	bl	8000620 <Button_onInterrupt>
	Button_onInterrupt(&buttonSw2, pin);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_GPIO_EXTI_Callback+0x30>)
 8001032:	f7ff faf5 	bl	8000620 <Button_onInterrupt>
	Buzzer_reset();
 8001036:	f7ff fbe9 	bl	800080c <Buzzer_reset>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000248 	.word	0x20000248
 8001048:	20000264 	.word	0x20000264

0800104c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	LightSensor_adcInterrupt(&lts1);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <HAL_ADC_ConvCpltCallback+0x18>)
 8001056:	f7ff febd 	bl	8000dd4 <LightSensor_adcInterrupt>

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000028c 	.word	0x2000028c

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fce2 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f80d 	bl	800108e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 f982 	bl	800137c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001078:	f000 f950 	bl	800131c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800107c:	f000 f8bc 	bl	80011f8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001080:	f000 f916 	bl	80012b0 <MX_TIM6_Init>
  MX_ADC2_Init();
 8001084:	f000 f854 	bl	8001130 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  MyMain();
 8001088:	f7ff febc 	bl	8000e04 <MyMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108c:	e7fe      	b.n	800108c <main+0x24>

0800108e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b096      	sub	sp, #88	; 0x58
 8001092:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2244      	movs	r2, #68	; 0x44
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f005 ff13 	bl	8006ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b4:	f002 fbc8 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010be:	f000 fa03 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c2:	2302      	movs	r3, #2
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010dc:	230a      	movs	r3, #10
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010e0:	2307      	movs	r3, #7
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fbff 	bl	80038f4 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010fc:	f000 f9e4 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2303      	movs	r3, #3
 8001106:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2104      	movs	r1, #4
 8001118:	4618      	mov	r0, r3
 800111a:	f002 ffc7 	bl	80040ac <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001124:	f000 f9d0 	bl	80014c8 <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3758      	adds	r7, #88	; 0x58
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001148:	4a29      	ldr	r2, [pc, #164]	; (80011f0 <MX_ADC2_Init+0xc0>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC2_Init+0xbc>)
 800114e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8001152:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_ADC2_Init+0xbc>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001168:	2204      	movs	r2, #4
 800116a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_ADC2_Init+0xbc>)
 800116e:	2200      	movs	r2, #0
 8001170:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001174:	2201      	movs	r2, #1
 8001176:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_ADC2_Init+0xbc>)
 800117a:	2201      	movs	r2, #1
 800117c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_ADC2_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_ADC2_Init+0xbc>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_ADC2_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_ADC2_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <MX_ADC2_Init+0xbc>)
 80011aa:	f000 feb5 	bl	8001f18 <HAL_ADC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80011b4:	f000 f988 	bl	80014c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_ADC2_Init+0xc4>)
 80011ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011bc:	2306      	movs	r3, #6
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c4:	237f      	movs	r3, #127	; 0x7f
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c8:	2304      	movs	r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_ADC2_Init+0xbc>)
 80011d6:	f001 fb63 	bl	80028a0 <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80011e0:	f000 f972 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000298 	.word	0x20000298
 80011f0:	50040100 	.word	0x50040100
 80011f4:	19200040 	.word	0x19200040

080011f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_TIM3_Init+0xb0>)
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_TIM3_Init+0xb4>)
 8001220:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_TIM3_Init+0xb0>)
 8001224:	f240 321f 	movw	r2, #799	; 0x31f
 8001228:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_TIM3_Init+0xb0>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 382;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM3_Init+0xb0>)
 8001232:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8001236:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM3_Init+0xb0>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_TIM3_Init+0xb0>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <MX_TIM3_Init+0xb0>)
 8001246:	f003 ff69 	bl	800511c <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001250:	f000 f93a 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4811      	ldr	r0, [pc, #68]	; (80012a8 <MX_TIM3_Init+0xb0>)
 8001264:	f004 ff40 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800126e:	f000 f92b 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 191;
 8001276:	23bf      	movs	r3, #191	; 0xbf
 8001278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM3_Init+0xb0>)
 800128a:	f004 fa5b 	bl	8005744 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001294:	f000 f918 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM3_Init+0xb0>)
 800129a:	f000 f9fb 	bl	8001694 <HAL_TIM_MspPostInit>

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002fc 	.word	0x200002fc
 80012ac:	40000400 	.word	0x40000400

080012b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_TIM6_Init+0x64>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_TIM6_Init+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_TIM6_Init+0x64>)
 80012c8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_TIM6_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_TIM6_Init+0x64>)
 80012d6:	220a      	movs	r2, #10
 80012d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_TIM6_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_TIM6_Init+0x64>)
 80012e2:	f003 fdc3 	bl	8004e6c <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012ec:	f000 f8ec 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_TIM6_Init+0x64>)
 80012fe:	f004 fef3 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001308:	f000 f8de 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000348 	.word	0x20000348
 8001318:	40001000 	.word	0x40001000

0800131c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <MX_USART2_UART_Init+0x5c>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USART2_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USART2_UART_Init+0x58>)
 8001360:	f004 ff68 	bl	8006234 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 f8ad 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000394 	.word	0x20000394
 8001378:	40004400 	.word	0x40004400

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b41      	ldr	r3, [pc, #260]	; (8001498 <MX_GPIO_Init+0x11c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <MX_GPIO_Init+0x11c>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b35      	ldr	r3, [pc, #212]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a34      	ldr	r2, [pc, #208]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MX_GPIO_Init+0x11c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2160      	movs	r1, #96	; 0x60
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f002 f9cd 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001404:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <MX_GPIO_Init+0x120>)
 8001416:	f001 fffd 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800141a:	2360      	movs	r3, #96	; 0x60
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f001 ffee 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800143e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f001 ffdf 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8001456:	2308      	movs	r3, #8
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800145a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_GPIO_Init+0x124>)
 800146c:	f001 ffd2 	bl	8003414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2009      	movs	r0, #9
 8001476:	f001 ff96 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800147a:	2009      	movs	r0, #9
 800147c:	f001 ffaf 	bl	80033de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2028      	movs	r0, #40	; 0x28
 8001486:	f001 ff8e 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800148a:	2028      	movs	r0, #40	; 0x28
 800148c:	f001 ffa7 	bl	80033de <HAL_NVIC_EnableIRQ>

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	48000800 	.word	0x48000800
 80014a0:	48000400 	.word	0x48000400

080014a4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80014ac:	1d39      	adds	r1, r7, #4
 80014ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b2:	2201      	movs	r2, #1
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <__io_putchar+0x20>)
 80014b6:	f004 ff0b 	bl	80062d0 <HAL_UART_Transmit>

  return ch;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000394 	.word	0x20000394

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x44>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_MspInit+0x44>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6613      	str	r3, [r2, #96]	; 0x60
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_MspInit+0x44>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_MspInit+0x44>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6593      	str	r3, [r2, #88]	; 0x58
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0ac      	sub	sp, #176	; 0xb0
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2288      	movs	r2, #136	; 0x88
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f005 fcc3 	bl	8006ec8 <memset>
  if(hadc->Instance==ADC2)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2b      	ldr	r2, [pc, #172]	; (80015f4 <HAL_ADC_MspInit+0xd8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d14f      	bne.n	80015ec <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800154c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001550:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001562:	2308      	movs	r3, #8
 8001564:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001566:	2307      	movs	r3, #7
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800156e:	2302      	movs	r3, #2
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4618      	mov	r0, r3
 800157e:	f002 ffb9 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001588:	f7ff ff9e 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_ADC_MspInit+0xdc>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_ADC_MspInit+0xdc>)
 8001592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_ADC_MspInit+0xdc>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_ADC_MspInit+0xdc>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_ADC_MspInit+0xdc>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_ADC_MspInit+0xdc>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015c2:	230b      	movs	r3, #11
 80015c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f001 ff1c 	bl	8003414 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2012      	movs	r0, #18
 80015e2:	f001 fee0 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015e6:	2012      	movs	r0, #18
 80015e8:	f001 fef9 	bl	80033de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	37b0      	adds	r7, #176	; 0xb0
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	50040100 	.word	0x50040100
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_TIM_PWM_MspInit+0x44>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d113      	bne.n	8001636 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_TIM_PWM_MspInit+0x48>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_TIM_PWM_MspInit+0x48>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_TIM_PWM_MspInit+0x48>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	201d      	movs	r0, #29
 800162c:	f001 febb 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001630:	201d      	movs	r0, #29
 8001632:	f001 fed4 	bl	80033de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40000400 	.word	0x40000400
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_TIM_Base_MspInit+0x44>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d113      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_TIM_Base_MspInit+0x48>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_TIM_Base_MspInit+0x48>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	6593      	str	r3, [r2, #88]	; 0x58
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_TIM_Base_MspInit+0x48>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2036      	movs	r0, #54	; 0x36
 8001678:	f001 fe95 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800167c:	2036      	movs	r0, #54	; 0x36
 800167e:	f001 feae 	bl	80033de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40001000 	.word	0x40001000
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <HAL_TIM_MspPostInit+0x64>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d11b      	bne.n	80016ee <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_TIM_MspPostInit+0x68>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_TIM_MspPostInit+0x68>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_TIM_MspPostInit+0x68>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ce:	2310      	movs	r3, #16
 80016d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016de:	2302      	movs	r3, #2
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_TIM_MspPostInit+0x6c>)
 80016ea:	f001 fe93 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40000400 	.word	0x40000400
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000400 	.word	0x48000400

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0ac      	sub	sp, #176	; 0xb0
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2288      	movs	r2, #136	; 0x88
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fbcf 	bl	8006ec8 <memset>
  if(huart->Instance==USART2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <HAL_UART_MspInit+0xb0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d13b      	bne.n	80017ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001734:	2302      	movs	r3, #2
 8001736:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001738:	2300      	movs	r3, #0
 800173a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fed7 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800174c:	f7ff febc 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_UART_MspInit+0xb4>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <HAL_UART_MspInit+0xb4>)
 8001756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_UART_MspInit+0xb4>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_UART_MspInit+0xb4>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <HAL_UART_MspInit+0xb4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_UART_MspInit+0xb4>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001780:	230c      	movs	r3, #12
 8001782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001798:	2307      	movs	r3, #7
 800179a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f001 fe34 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	37b0      	adds	r7, #176	; 0xb0
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40004400 	.word	0x40004400
 80017b8:	40021000 	.word	0x40021000

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001808:	f000 f970 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001814:	2008      	movs	r0, #8
 8001816:	f001 fff1 	bl	80037fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <ADC1_2_IRQHandler+0x10>)
 8001826:	f000 fe0d 	bl	8002444 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000298 	.word	0x20000298

08001834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM3_IRQHandler+0x10>)
 800183a:	f003 fe63 	bl	8005504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002fc 	.word	0x200002fc

08001848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800184c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001850:	f001 ffd4 	bl	80037fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001858:	f001 ffd0 	bl	80037fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM6_DAC_IRQHandler+0x10>)
 8001866:	f003 fe4d 	bl	8005504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000348 	.word	0x20000348

08001874 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00a      	b.n	800189c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001886:	f3af 8000 	nop.w
 800188a:	4601      	mov	r1, r0
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf0      	blt.n	8001886 <_read+0x12>
	}

return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e009      	b.n	80018d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fdeb 	bl	80014a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf1      	blt.n	80018c0 <_write+0x12>
	}
	return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f005 fa78 	bl	8006e74 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20018000 	.word	0x20018000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	20000418 	.word	0x20000418
 80019b8:	20000430 	.word	0x20000430

080019bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif


}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e4:	f7ff ffea 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80019ea:	490d      	ldr	r1, [pc, #52]	; (8001a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <LoopForever+0xe>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a00:	4c0a      	ldr	r4, [pc, #40]	; (8001a2c <LoopForever+0x16>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f005 fa37 	bl	8006e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a12:	f7ff fb29 	bl	8001068 <main>

08001a16 <LoopForever>:

LoopForever:
    b LoopForever
 8001a16:	e7fe      	b.n	8001a16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a24:	08008cc0 	.word	0x08008cc0
  ldr r2, =_sbss
 8001a28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a2c:	20000430 	.word	0x20000430

08001a30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC3_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_Init+0x3c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_Init+0x3c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f001 fca0 	bl	8003390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f80f 	bl	8001a74 <HAL_InitTick>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	e001      	b.n	8001a66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a62:	f7ff fd37 	bl	80014d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_InitTick+0x6c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d023      	beq.n	8001ad0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_InitTick+0x70>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_InitTick+0x6c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fcab 	bl	80033fa <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d809      	bhi.n	8001ac4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f001 fc75 	bl	80033a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_InitTick+0x74>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e004      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e001      	b.n	8001ad4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	2000041c 	.word	0x2000041c

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000041c 	.word	0x2000041c

08001b2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	609a      	str	r2, [r3, #8]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3360      	adds	r3, #96	; 0x60
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <LL_ADC_SetOffset+0x44>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	03fff000 	.word	0x03fff000

08001bdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3360      	adds	r3, #96	; 0x60
 8001bea:	461a      	mov	r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3360      	adds	r3, #96	; 0x60
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3330      	adds	r3, #48	; 0x30
 8001c74:	461a      	mov	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	211f      	movs	r1, #31
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	f003 011f 	and.w	r1, r3, #31
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	431a      	orrs	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3314      	adds	r3, #20
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	0e5b      	lsrs	r3, r3, #25
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	0d1b      	lsrs	r3, r3, #20
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2107      	movs	r1, #7
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0d1b      	lsrs	r3, r3, #20
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0318 	and.w	r3, r3, #24
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d5c:	40d9      	lsrs	r1, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	400b      	ands	r3, r1
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	0007ffff 	.word	0x0007ffff

08001d80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6093      	str	r3, [r2, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df0:	d101      	bne.n	8001df6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_IsEnabled+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_IsEnabled+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d101      	bne.n	8001f08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e136      	b.n	80021a0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff faeb 	bl	800151c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff3f 	bl	8001ddc <LL_ADC_IsDeepPowerDownEnabled>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff25 	bl	8001db8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff5a 	bl	8001e2c <LL_ADC_IsInternalRegulatorEnabled>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff3e 	bl	8001e04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f88:	4b87      	ldr	r3, [pc, #540]	; (80021a8 <HAL_ADC_Init+0x290>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	4a87      	ldr	r2, [pc, #540]	; (80021ac <HAL_ADC_Init+0x294>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	3301      	adds	r3, #1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f9c:	e002      	b.n	8001fa4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff3c 	bl	8001e2c <LL_ADC_IsInternalRegulatorEnabled>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0210 	orr.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff75 	bl	8001eca <LL_ADC_REG_IsConversionOngoing>
 8001fe0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80cf 	bne.w	800218e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 80cb 	bne.w	800218e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002000:	f043 0202 	orr.w	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff35 	bl	8001e7c <LL_ADC_IsEnabled>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d115      	bne.n	8002044 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002018:	4865      	ldr	r0, [pc, #404]	; (80021b0 <HAL_ADC_Init+0x298>)
 800201a:	f7ff ff2f 	bl	8001e7c <LL_ADC_IsEnabled>
 800201e:	4604      	mov	r4, r0
 8002020:	4864      	ldr	r0, [pc, #400]	; (80021b4 <HAL_ADC_Init+0x29c>)
 8002022:	f7ff ff2b 	bl	8001e7c <LL_ADC_IsEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	431c      	orrs	r4, r3
 800202a:	4863      	ldr	r0, [pc, #396]	; (80021b8 <HAL_ADC_Init+0x2a0>)
 800202c:	f7ff ff26 	bl	8001e7c <LL_ADC_IsEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	4323      	orrs	r3, r4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4619      	mov	r1, r3
 800203e:	485f      	ldr	r0, [pc, #380]	; (80021bc <HAL_ADC_Init+0x2a4>)
 8002040:	f7ff fd74 	bl	8001b2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e5b      	ldrb	r3, [r3, #25]
 8002048:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002054:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800205a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002062:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d106      	bne.n	8002080 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	3b01      	subs	r3, #1
 8002078:	045b      	lsls	r3, r3, #17
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_ADC_Init+0x2a8>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff08 	bl	8001eca <LL_ADC_REG_IsConversionOngoing>
 80020ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff15 	bl	8001ef0 <LL_ADC_INJ_IsConversionOngoing>
 80020c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13d      	bne.n	800214a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d13a      	bne.n	800214a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f0:	f023 0302 	bic.w	r3, r3, #2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	430b      	orrs	r3, r1
 80020fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002104:	2b01      	cmp	r3, #1
 8002106:	d118      	bne.n	800213a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212a:	430a      	orrs	r2, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	611a      	str	r2, [r3, #16]
 8002138:	e007      	b.n	800214a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10c      	bne.n	800216c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f023 010f 	bic.w	r1, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
 800216a:	e007      	b.n	800217c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020f 	bic.w	r2, r2, #15
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f023 0303 	bic.w	r3, r3, #3
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
 800218c:	e007      	b.n	800219e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800219e:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3724      	adds	r7, #36	; 0x24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	053e2d63 	.word	0x053e2d63
 80021b0:	50040000 	.word	0x50040000
 80021b4:	50040100 	.word	0x50040100
 80021b8:	50040200 	.word	0x50040200
 80021bc:	50040300 	.word	0x50040300
 80021c0:	fff0c007 	.word	0xfff0c007

080021c4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021cc:	4893      	ldr	r0, [pc, #588]	; (800241c <HAL_ADC_Start_IT+0x258>)
 80021ce:	f7ff fdd7 	bl	8001d80 <LL_ADC_GetMultimode>
 80021d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fe76 	bl	8001eca <LL_ADC_REG_IsConversionOngoing>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f040 8111 	bne.w	8002408 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_Start_IT+0x30>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e10e      	b.n	8002412 <HAL_ADC_Start_IT+0x24e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 ff3f 	bl	8003080 <ADC_Enable>
 8002202:	4603      	mov	r3, r0
 8002204:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 80f8 	bne.w	80023fe <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7e      	ldr	r2, [pc, #504]	; (8002420 <HAL_ADC_Start_IT+0x25c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d002      	beq.n	8002232 <HAL_ADC_Start_IT+0x6e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	e000      	b.n	8002234 <HAL_ADC_Start_IT+0x70>
 8002232:	4b7c      	ldr	r3, [pc, #496]	; (8002424 <HAL_ADC_Start_IT+0x260>)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	4293      	cmp	r3, r2
 800223a:	d002      	beq.n	8002242 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f023 0206 	bic.w	r2, r3, #6
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	659a      	str	r2, [r3, #88]	; 0x58
 8002266:	e002      	b.n	800226e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	221c      	movs	r2, #28
 8002274:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 021c 	bic.w	r2, r2, #28
 800228c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d108      	bne.n	80022a8 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0208 	orr.w	r2, r2, #8
 80022a4:	605a      	str	r2, [r3, #4]
          break;
 80022a6:	e008      	b.n	80022ba <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0204 	orr.w	r2, r2, #4
 80022b6:	605a      	str	r2, [r3, #4]
          break;
 80022b8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0210 	orr.w	r2, r2, #16
 80022d0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a52      	ldr	r2, [pc, #328]	; (8002420 <HAL_ADC_Start_IT+0x25c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d002      	beq.n	80022e2 <HAL_ADC_Start_IT+0x11e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	e000      	b.n	80022e4 <HAL_ADC_Start_IT+0x120>
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <HAL_ADC_Start_IT+0x260>)
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d008      	beq.n	80022fe <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d002      	beq.n	80022fe <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d13b      	bne.n	8002376 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02d      	beq.n	8002368 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002314:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d110      	bne.n	8002346 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0220 	bic.w	r2, r2, #32
 8002332:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002342:	605a      	str	r2, [r3, #4]
              break;
 8002344:	e011      	b.n	800236a <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002354:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0220 	orr.w	r2, r2, #32
 8002364:	605a      	str	r2, [r3, #4]
              break;
 8002366:	e000      	b.n	800236a <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002368:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fd97 	bl	8001ea2 <LL_ADC_REG_StartConversion>
 8002374:	e04c      	b.n	8002410 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a26      	ldr	r2, [pc, #152]	; (8002420 <HAL_ADC_Start_IT+0x25c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d002      	beq.n	8002392 <HAL_ADC_Start_IT+0x1ce>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e000      	b.n	8002394 <HAL_ADC_Start_IT+0x1d0>
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_ADC_Start_IT+0x260>)
 8002394:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d035      	beq.n	800240e <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d110      	bne.n	80023dc <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0220 	bic.w	r2, r2, #32
 80023c8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d8:	605a      	str	r2, [r3, #4]
              break;
 80023da:	e019      	b.n	8002410 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ea:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0220 	orr.w	r2, r2, #32
 80023fa:	605a      	str	r2, [r3, #4]
              break;
 80023fc:	e008      	b.n	8002410 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002406:	e003      	b.n	8002410 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	75fb      	strb	r3, [r7, #23]
 800240c:	e000      	b.n	8002410 <HAL_ADC_Start_IT+0x24c>
        }
 800240e:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002410:	7dfb      	ldrb	r3, [r7, #23]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	50040300 	.word	0x50040300
 8002420:	50040100 	.word	0x50040100
 8002424:	50040000 	.word	0x50040000

08002428 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002460:	4882      	ldr	r0, [pc, #520]	; (800266c <HAL_ADC_IRQHandler+0x228>)
 8002462:	f7ff fc8d 	bl	8001d80 <LL_ADC_GetMultimode>
 8002466:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d017      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x5e>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fea1 	bl	80031dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2202      	movs	r2, #2
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_ADC_IRQHandler+0x72>
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8083 	beq.w	80025c8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d07d      	beq.n	80025c8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fba8 	bl	8001c3e <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d062      	beq.n	80025ba <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a5d      	ldr	r2, [pc, #372]	; (8002670 <HAL_ADC_IRQHandler+0x22c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d002      	beq.n	8002504 <HAL_ADC_IRQHandler+0xc0>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e000      	b.n	8002506 <HAL_ADC_IRQHandler+0xc2>
 8002504:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <HAL_ADC_IRQHandler+0x230>)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	4293      	cmp	r3, r2
 800250c:	d008      	beq.n	8002520 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d002      	beq.n	8002520 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d104      	bne.n	800252a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	623b      	str	r3, [r7, #32]
 8002528:	e00c      	b.n	8002544 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a50      	ldr	r2, [pc, #320]	; (8002670 <HAL_ADC_IRQHandler+0x22c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d002      	beq.n	800253a <HAL_ADC_IRQHandler+0xf6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	e000      	b.n	800253c <HAL_ADC_IRQHandler+0xf8>
 800253a:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <HAL_ADC_IRQHandler+0x230>)
 800253c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d135      	bne.n	80025ba <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b08      	cmp	r3, #8
 800255a:	d12e      	bne.n	80025ba <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fcb2 	bl	8001eca <LL_ADC_REG_IsConversionOngoing>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11a      	bne.n	80025a2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020c 	bic.w	r2, r2, #12
 800257a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d112      	bne.n	80025ba <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
 80025a0:	e00b      	b.n	80025ba <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fd46 	bl	800104c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	220c      	movs	r2, #12
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_ADC_IRQHandler+0x198>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 809f 	beq.w	8002726 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8099 	beq.w	8002726 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fb53 	bl	8001cbc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002616:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb0e 	bl	8001c3e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002622:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a11      	ldr	r2, [pc, #68]	; (8002670 <HAL_ADC_IRQHandler+0x22c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d002      	beq.n	8002634 <HAL_ADC_IRQHandler+0x1f0>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	e000      	b.n	8002636 <HAL_ADC_IRQHandler+0x1f2>
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_ADC_IRQHandler+0x230>)
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	4293      	cmp	r3, r2
 800263c:	d008      	beq.n	8002650 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d002      	beq.n	8002650 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d104      	bne.n	800265a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	e013      	b.n	8002682 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_ADC_IRQHandler+0x22c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_ADC_IRQHandler+0x234>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	e007      	b.n	800267a <HAL_ADC_IRQHandler+0x236>
 800266a:	bf00      	nop
 800266c:	50040300 	.word	0x50040300
 8002670:	50040100 	.word	0x50040100
 8002674:	50040000 	.word	0x50040000
 8002678:	4b7d      	ldr	r3, [pc, #500]	; (8002870 <HAL_ADC_IRQHandler+0x42c>)
 800267a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d047      	beq.n	8002718 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x25e>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03f      	beq.n	8002718 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d13a      	bne.n	8002718 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d133      	bne.n	8002718 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d12e      	bne.n	8002718 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc16 	bl	8001ef0 <LL_ADC_INJ_IsConversionOngoing>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11a      	bne.n	8002700 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d112      	bne.n	8002718 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
 80026fe:	e00b      	b.n	8002718 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002704:	f043 0210 	orr.w	r2, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fd37 	bl	800318c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2260      	movs	r2, #96	; 0x60
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d011      	beq.n	8002754 <HAL_ADC_IRQHandler+0x310>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00c      	beq.n	8002754 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f896 	bl	8002878 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_ADC_IRQHandler+0x340>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fd1d 	bl	80031b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x370>
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fd0f 	bl	80031c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d036      	beq.n	800282c <HAL_ADC_IRQHandler+0x3e8>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d031      	beq.n	800282c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80027d0:	2301      	movs	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	e014      	b.n	8002800 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027dc:	4825      	ldr	r0, [pc, #148]	; (8002874 <HAL_ADC_IRQHandler+0x430>)
 80027de:	f7ff fadd 	bl	8001d9c <LL_ADC_GetMultiDMATransfer>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80027e8:	2301      	movs	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	e008      	b.n	8002800 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80027fc:	2301      	movs	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10e      	bne.n	8002824 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f834 	bl	800288c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2210      	movs	r2, #16
 800282a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	2b00      	cmp	r3, #0
 8002834:	d018      	beq.n	8002868 <HAL_ADC_IRQHandler+0x424>
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f043 0208 	orr.w	r2, r3, #8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002860:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fc9c 	bl	80031a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	50040000 	.word	0x50040000
 8002874:	50040300 	.word	0x50040300

08002878 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b0b6      	sub	sp, #216	; 0xd8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x22>
 80028be:	2302      	movs	r3, #2
 80028c0:	e3c7      	b.n	8003052 <HAL_ADC_ConfigChannel+0x7b2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fafb 	bl	8001eca <LL_ADC_REG_IsConversionOngoing>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 83a8 	bne.w	800302c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d824      	bhi.n	800292e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	3b02      	subs	r3, #2
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d81b      	bhi.n	8002926 <HAL_ADC_ConfigChannel+0x86>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_ADC_ConfigChannel+0x54>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002905 	.word	0x08002905
 80028f8:	0800290d 	.word	0x0800290d
 80028fc:	08002915 	.word	0x08002915
 8002900:	0800291d 	.word	0x0800291d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	220c      	movs	r2, #12
 8002908:	605a      	str	r2, [r3, #4]
          break;
 800290a:	e011      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2212      	movs	r2, #18
 8002910:	605a      	str	r2, [r3, #4]
          break;
 8002912:	e00d      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2218      	movs	r2, #24
 8002918:	605a      	str	r2, [r3, #4]
          break;
 800291a:	e009      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002922:	605a      	str	r2, [r3, #4]
          break;
 8002924:	e004      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2206      	movs	r2, #6
 800292a:	605a      	str	r2, [r3, #4]
          break;
 800292c:	e000      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800292e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	f7ff f991 	bl	8001c64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fabf 	bl	8001eca <LL_ADC_REG_IsConversionOngoing>
 800294c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff facb 	bl	8001ef0 <LL_ADC_INJ_IsConversionOngoing>
 800295a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800295e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 81a6 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 81a1 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	461a      	mov	r2, r3
 8002980:	f7ff f9af 	bl	8001ce2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	08db      	lsrs	r3, r3, #3
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00a      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029b6:	f7ff f8ed 	bl	8001b94 <LL_ADC_SetOffset>
 80029ba:	e17b      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f90a 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x148>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff f8ff 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	e01e      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x186>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f8f4 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a16:	2320      	movs	r3, #32
 8002a18:	e004      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x19e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	e018      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x1d0>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e004      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d106      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f8c3 	bl	8001c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f8a7 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x20e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f89c 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	e01e      	b.n	8002aec <HAL_ADC_ConfigChannel+0x24c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f891 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ad4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e004      	b.n	8002aea <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x264>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	e018      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x296>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e004      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d106      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f860 	bl	8001c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f844 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x2d4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2102      	movs	r1, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f839 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	e01e      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x312>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f82e 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e004      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x32a>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	e016      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x358>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e004      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d106      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2102      	movs	r1, #2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe ffff 	bl	8001c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2103      	movs	r1, #3
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe ffe3 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x396>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2103      	movs	r1, #3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe ffd8 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	e017      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x3c6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe ffcd 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c50:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c58:	2320      	movs	r3, #32
 8002c5a:	e003      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x3de>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	e011      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x402>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e003      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d106      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2103      	movs	r1, #3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ffaa 	bl	8001c08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff f8df 	bl	8001e7c <LL_ADC_IsEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 813f 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7ff f830 	bl	8001d38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4a8e      	ldr	r2, [pc, #568]	; (8002f18 <HAL_ADC_ConfigChannel+0x678>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	f040 8130 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x46c>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	bf94      	ite	ls
 8002d04:	2301      	movls	r3, #1
 8002d06:	2300      	movhi	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e019      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x4a0>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	bf94      	ite	ls
 8002d3a:	2301      	movls	r3, #1
 8002d3c:	2300      	movhi	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d079      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x4c0>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0e9b      	lsrs	r3, r3, #26
 8002d56:	3301      	adds	r3, #1
 8002d58:	069b      	lsls	r3, r3, #26
 8002d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d5e:	e015      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x4ec>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d70:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d78:	2320      	movs	r3, #32
 8002d7a:	e003      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	069b      	lsls	r3, r3, #26
 8002d88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x50c>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	e017      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x53c>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e003      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	ea42 0103 	orr.w	r1, r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x562>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	051b      	lsls	r3, r3, #20
 8002e00:	e018      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x594>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e34:	430b      	orrs	r3, r1
 8002e36:	e080      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x5b4>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	069b      	lsls	r3, r3, #26
 8002e4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e52:	e015      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5e0>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	069b      	lsls	r3, r3, #26
 8002e7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x600>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	3301      	adds	r3, #1
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	e017      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x630>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	61fb      	str	r3, [r7, #28]
  return result;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e003      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	ea42 0103 	orr.w	r1, r2, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x65c>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3b1e      	subs	r3, #30
 8002ef4:	051b      	lsls	r3, r3, #20
 8002ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002efa:	e01d      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x698>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	613b      	str	r3, [r7, #16]
  return result;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e005      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x684>
 8002f18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f003 021f 	and.w	r2, r3, #31
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b1e      	subs	r3, #30
 8002f32:	051b      	lsls	r3, r3, #20
 8002f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	6892      	ldr	r2, [r2, #8]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fe fecf 	bl	8001ce2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_ADC_ConfigChannel+0x7bc>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d07a      	beq.n	8003046 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f50:	4843      	ldr	r0, [pc, #268]	; (8003060 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f52:	f7fe fe11 	bl	8001b78 <LL_ADC_GetCommonPathInternalCh>
 8002f56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a41      	ldr	r2, [pc, #260]	; (8003064 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d12c      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d126      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_ADC_ConfigChannel+0x6e4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3b      	ldr	r2, [pc, #236]	; (800306c <HAL_ADC_ConfigChannel+0x7cc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d15d      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4834      	ldr	r0, [pc, #208]	; (8003060 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f90:	f7fe fddf 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	4a36      	ldr	r2, [pc, #216]	; (8003074 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f9      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fbc:	e040      	b.n	8003040 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d118      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x75a>
 8002fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d112      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d004      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x748>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_ADC_ConfigChannel+0x7cc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d12d      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	481b      	ldr	r0, [pc, #108]	; (8003060 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ff4:	f7fe fdad 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff8:	e024      	b.n	8003044 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_ADC_ConfigChannel+0x7dc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d120      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003004:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11a      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_ADC_ConfigChannel+0x7c8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d115      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800301a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800301e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003022:	4619      	mov	r1, r3
 8003024:	480e      	ldr	r0, [pc, #56]	; (8003060 <HAL_ADC_ConfigChannel+0x7c0>)
 8003026:	f7fe fd94 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 800302a:	e00c      	b.n	8003046 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800303e:	e002      	b.n	8003046 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003044:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800304e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003052:	4618      	mov	r0, r3
 8003054:	37d8      	adds	r7, #216	; 0xd8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	80080000 	.word	0x80080000
 8003060:	50040300 	.word	0x50040300
 8003064:	c7520000 	.word	0xc7520000
 8003068:	50040000 	.word	0x50040000
 800306c:	50040200 	.word	0x50040200
 8003070:	20000000 	.word	0x20000000
 8003074:	053e2d63 	.word	0x053e2d63
 8003078:	cb840000 	.word	0xcb840000
 800307c:	80000001 	.word	0x80000001

08003080 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fef3 	bl	8001e7c <LL_ADC_IsEnabled>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d169      	bne.n	8003170 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <ADC_Enable+0xfc>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e055      	b.n	8003172 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fec2 	bl	8001e54 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030d0:	482b      	ldr	r0, [pc, #172]	; (8003180 <ADC_Enable+0x100>)
 80030d2:	f7fe fd51 	bl	8001b78 <LL_ADC_GetCommonPathInternalCh>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <ADC_Enable+0x104>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	4a28      	ldr	r2, [pc, #160]	; (8003188 <ADC_Enable+0x108>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030fa:	e002      	b.n	8003102 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3b01      	subs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003108:	f7fe fd04 	bl	8001b14 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800310e:	e028      	b.n	8003162 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe feb1 	bl	8001e7c <LL_ADC_IsEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fe95 	bl	8001e54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800312a:	f7fe fcf3 	bl	8001b14 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d914      	bls.n	8003162 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d00d      	beq.n	8003162 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	f043 0210 	orr.w	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d1cf      	bne.n	8003110 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	8000003f 	.word	0x8000003f
 8003180:	50040300 	.word	0x50040300
 8003184:	20000000 	.word	0x20000000
 8003188:	053e2d63 	.word	0x053e2d63

0800318c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800320c:	4013      	ands	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800321c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <__NVIC_GetPriorityGrouping+0x18>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 0307 	and.w	r3, r3, #7
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db0b      	blt.n	800327e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	4907      	ldr	r1, [pc, #28]	; (800328c <__NVIC_EnableIRQ+0x38>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2001      	movs	r0, #1
 8003276:	fa00 f202 	lsl.w	r2, r0, r2
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e100 	.word	0xe000e100

08003290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db0a      	blt.n	80032ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	490c      	ldr	r1, [pc, #48]	; (80032dc <__NVIC_SetPriority+0x4c>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	440b      	add	r3, r1
 80032b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b8:	e00a      	b.n	80032d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4908      	ldr	r1, [pc, #32]	; (80032e0 <__NVIC_SetPriority+0x50>)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	3b04      	subs	r3, #4
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	440b      	add	r3, r1
 80032ce:	761a      	strb	r2, [r3, #24]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f1c3 0307 	rsb	r3, r3, #7
 80032fe:	2b04      	cmp	r3, #4
 8003300:	bf28      	it	cs
 8003302:	2304      	movcs	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3304      	adds	r3, #4
 800330a:	2b06      	cmp	r3, #6
 800330c:	d902      	bls.n	8003314 <NVIC_EncodePriority+0x30>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3b03      	subs	r3, #3
 8003312:	e000      	b.n	8003316 <NVIC_EncodePriority+0x32>
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	401a      	ands	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43d9      	mvns	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	4313      	orrs	r3, r2
         );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	; 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800335c:	d301      	bcc.n	8003362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335e:	2301      	movs	r3, #1
 8003360:	e00f      	b.n	8003382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <SysTick_Config+0x40>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336a:	210f      	movs	r1, #15
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f7ff ff8e 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <SysTick_Config+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <SysTick_Config+0x40>)
 800337c:	2207      	movs	r2, #7
 800337e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	e000e010 	.word	0xe000e010

08003390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff29 	bl	80031f0 <__NVIC_SetPriorityGrouping>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033b8:	f7ff ff3e 	bl	8003238 <__NVIC_GetPriorityGrouping>
 80033bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff8e 	bl	80032e4 <NVIC_EncodePriority>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff5d 	bl	8003290 <__NVIC_SetPriority>
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff31 	bl	8003254 <__NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ffa2 	bl	800334c <SysTick_Config>
 8003408:	4603      	mov	r3, r0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003422:	e17f      	b.n	8003724 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8171 	beq.w	800371e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d005      	beq.n	8003454 <HAL_GPIO_Init+0x40>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d130      	bne.n	80034b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348a:	2201      	movs	r2, #1
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0201 	and.w	r2, r3, #1
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d118      	bne.n	80034f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80034c8:	2201      	movs	r2, #1
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f003 0201 	and.w	r2, r3, #1
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d017      	beq.n	8003530 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d123      	bne.n	8003584 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	08da      	lsrs	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3208      	adds	r2, #8
 8003544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	220f      	movs	r2, #15
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	08da      	lsrs	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3208      	adds	r2, #8
 800357e:	6939      	ldr	r1, [r7, #16]
 8003580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2203      	movs	r2, #3
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0203 	and.w	r2, r3, #3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80ac 	beq.w	800371e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	4b5f      	ldr	r3, [pc, #380]	; (8003744 <HAL_GPIO_Init+0x330>)
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	4a5e      	ldr	r2, [pc, #376]	; (8003744 <HAL_GPIO_Init+0x330>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6613      	str	r3, [r2, #96]	; 0x60
 80035d2:	4b5c      	ldr	r3, [pc, #368]	; (8003744 <HAL_GPIO_Init+0x330>)
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035de:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <HAL_GPIO_Init+0x334>)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	3302      	adds	r3, #2
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003608:	d025      	beq.n	8003656 <HAL_GPIO_Init+0x242>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4f      	ldr	r2, [pc, #316]	; (800374c <HAL_GPIO_Init+0x338>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01f      	beq.n	8003652 <HAL_GPIO_Init+0x23e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4e      	ldr	r2, [pc, #312]	; (8003750 <HAL_GPIO_Init+0x33c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d019      	beq.n	800364e <HAL_GPIO_Init+0x23a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4d      	ldr	r2, [pc, #308]	; (8003754 <HAL_GPIO_Init+0x340>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_GPIO_Init+0x236>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4c      	ldr	r2, [pc, #304]	; (8003758 <HAL_GPIO_Init+0x344>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00d      	beq.n	8003646 <HAL_GPIO_Init+0x232>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a4b      	ldr	r2, [pc, #300]	; (800375c <HAL_GPIO_Init+0x348>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x22e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a4a      	ldr	r2, [pc, #296]	; (8003760 <HAL_GPIO_Init+0x34c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_GPIO_Init+0x22a>
 800363a:	2306      	movs	r3, #6
 800363c:	e00c      	b.n	8003658 <HAL_GPIO_Init+0x244>
 800363e:	2307      	movs	r3, #7
 8003640:	e00a      	b.n	8003658 <HAL_GPIO_Init+0x244>
 8003642:	2305      	movs	r3, #5
 8003644:	e008      	b.n	8003658 <HAL_GPIO_Init+0x244>
 8003646:	2304      	movs	r3, #4
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x244>
 800364a:	2303      	movs	r3, #3
 800364c:	e004      	b.n	8003658 <HAL_GPIO_Init+0x244>
 800364e:	2302      	movs	r3, #2
 8003650:	e002      	b.n	8003658 <HAL_GPIO_Init+0x244>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x244>
 8003656:	2300      	movs	r3, #0
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	f002 0203 	and.w	r2, r2, #3
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	4093      	lsls	r3, r2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003668:	4937      	ldr	r1, [pc, #220]	; (8003748 <HAL_GPIO_Init+0x334>)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	3302      	adds	r3, #2
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_GPIO_Init+0x350>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800369a:	4a32      	ldr	r2, [pc, #200]	; (8003764 <HAL_GPIO_Init+0x350>)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036a0:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_GPIO_Init+0x350>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_GPIO_Init+0x350>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <HAL_GPIO_Init+0x350>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <HAL_GPIO_Init+0x350>)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_GPIO_Init+0x350>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <HAL_GPIO_Init+0x350>)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	3301      	adds	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f47f ae78 	bne.w	8003424 <HAL_GPIO_Init+0x10>
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	40010000 	.word	0x40010000
 800374c:	48000400 	.word	0x48000400
 8003750:	48000800 	.word	0x48000800
 8003754:	48000c00 	.word	0x48000c00
 8003758:	48001000 	.word	0x48001000
 800375c:	48001400 	.word	0x48001400
 8003760:	48001800 	.word	0x48001800
 8003764:	40010400 	.word	0x40010400

08003768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	041a      	lsls	r2, r3, #16
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	43d9      	mvns	r1, r3
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	400b      	ands	r3, r1
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003812:	4a05      	ldr	r2, [pc, #20]	; (8003828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd fbfc 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <HAL_PWREx_GetVoltageRange+0x18>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d130      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003864:	d038      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2232      	movs	r2, #50	; 0x32
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388c:	e002      	b.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d102      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d110      	bne.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d007      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d0:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000
 80038ec:	20000000 	.word	0x20000000
 80038f0:	431bde83 	.word	0x431bde83

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e3ca      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b97      	ldr	r3, [pc, #604]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b94      	ldr	r3, [pc, #592]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80e4 	beq.w	8003af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_RCC_OscConfig+0x4a>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	f040 808b 	bne.w	8003a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 8087 	bne.w	8003a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800393e:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e3a2      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	4b82      	ldr	r3, [pc, #520]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_RCC_OscConfig+0x7c>
 8003966:	4b7f      	ldr	r3, [pc, #508]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396e:	e005      	b.n	800397c <HAL_RCC_OscConfig+0x88>
 8003970:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	4293      	cmp	r3, r2
 800397e:	d223      	bcs.n	80039c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd55 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e383      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003994:	4b73      	ldr	r3, [pc, #460]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a72      	ldr	r2, [pc, #456]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 800399a:	f043 0308 	orr.w	r3, r3, #8
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b70      	ldr	r3, [pc, #448]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	496d      	ldr	r1, [pc, #436]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b2:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	4968      	ldr	r1, [pc, #416]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
 80039c6:	e025      	b.n	8003a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c8:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039ce:	f043 0308 	orr.w	r3, r3, #8
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4960      	ldr	r1, [pc, #384]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e6:	4b5f      	ldr	r3, [pc, #380]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	495b      	ldr	r1, [pc, #364]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fd15 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e343      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a14:	f000 fc4a 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	4950      	ldr	r1, [pc, #320]	; (8003b68 <HAL_RCC_OscConfig+0x274>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	4a4e      	ldr	r2, [pc, #312]	; (8003b6c <HAL_RCC_OscConfig+0x278>)
 8003a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a34:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <HAL_RCC_OscConfig+0x27c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe f81b 	bl	8001a74 <HAL_InitTick>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d052      	beq.n	8003aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	e327      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d032      	beq.n	8003aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a54:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a42      	ldr	r2, [pc, #264]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a60:	f7fe f858 	bl	8001b14 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a68:	f7fe f854 	bl	8001b14 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e310      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a86:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a36      	ldr	r2, [pc, #216]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4931      	ldr	r1, [pc, #196]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	492c      	ldr	r1, [pc, #176]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
 8003ab8:	e01a      	b.n	8003af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a29      	ldr	r2, [pc, #164]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe f825 	bl	8001b14 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ace:	f7fe f821 	bl	8001b14 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e2dd      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x1da>
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d074      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x21a>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d10e      	bne.n	8003b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d10b      	bne.n	8003b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d064      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d160      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e2ba      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x24a>
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e026      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b46:	d115      	bne.n	8003b74 <HAL_RCC_OscConfig+0x280>
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a02      	ldr	r2, [pc, #8]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e014      	b.n	8003b8c <HAL_RCC_OscConfig+0x298>
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08008ab0 	.word	0x08008ab0
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000004 	.word	0x20000004
 8003b74:	4ba0      	ldr	r3, [pc, #640]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a9f      	ldr	r2, [pc, #636]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b9d      	ldr	r3, [pc, #628]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a9c      	ldr	r2, [pc, #624]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd ffbe 	bl	8001b14 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd ffba 	bl	8001b14 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e276      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	4b92      	ldr	r3, [pc, #584]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2a8>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ffaa 	bl	8001b14 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd ffa6 	bl	8001b14 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e262      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2d0>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d060      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x310>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d116      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c04:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x328>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e23f      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4973      	ldr	r1, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c30:	e040      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3a:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd ff65 	bl	8001b14 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd ff61 	bl	8001b14 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e21d      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c60:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	495f      	ldr	r1, [pc, #380]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd ff41 	bl	8001b14 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fd ff3d 	bl	8001b14 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e1f9      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	4a4a      	ldr	r2, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd ff1c 	bl	8001b14 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd ff18 	bl	8001b14 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1d4      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x3ec>
 8003d00:	e01b      	b.n	8003d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d08:	4a3b      	ldr	r2, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fd feff 	bl	8001b14 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fefb 	bl	8001b14 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1b7      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2c:	4b32      	ldr	r3, [pc, #200]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ef      	bne.n	8003d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a6 	beq.w	8003e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d118      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fec2 	bl	8001b14 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fd febe 	bl	8001b14 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e17a      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCC_OscConfig+0x508>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4d8>
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dca:	e029      	b.n	8003e20 <HAL_RCC_OscConfig+0x52c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d115      	bne.n	8003e00 <HAL_RCC_OscConfig+0x50c>
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a03      	ldr	r2, [pc, #12]	; (8003df8 <HAL_RCC_OscConfig+0x504>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x52c>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	4b9c      	ldr	r3, [pc, #624]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	4a9b      	ldr	r2, [pc, #620]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e10:	4b98      	ldr	r3, [pc, #608]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a97      	ldr	r2, [pc, #604]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd fe74 	bl	8001b14 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd fe70 	bl	8001b14 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e12a      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	4b8b      	ldr	r3, [pc, #556]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ed      	beq.n	8003e30 <HAL_RCC_OscConfig+0x53c>
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd fe5d 	bl	8001b14 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fd fe59 	bl	8001b14 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e113      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	4b7f      	ldr	r3, [pc, #508]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ed      	bne.n	8003e5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b7a      	ldr	r3, [pc, #488]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	4a79      	ldr	r2, [pc, #484]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80fe 	beq.w	800409a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	f040 80d0 	bne.w	8004048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ea8:	4b72      	ldr	r3, [pc, #456]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d130      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d127      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d11f      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee8:	2a07      	cmp	r2, #7
 8003eea:	bf14      	ite	ne
 8003eec:	2201      	movne	r2, #1
 8003eee:	2200      	moveq	r2, #0
 8003ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d113      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	3b01      	subs	r3, #1
 8003f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d06e      	beq.n	8003ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d069      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0ad      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a4b      	ldr	r2, [pc, #300]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4c:	f7fd fde2 	bl	8001b14 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd fdde 	bl	8001b14 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e09a      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f66:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f72:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	4b40      	ldr	r3, [pc, #256]	; (8004078 <HAL_RCC_OscConfig+0x784>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f82:	3a01      	subs	r2, #1
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f8c:	0212      	lsls	r2, r2, #8
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f94:	0852      	lsrs	r2, r2, #1
 8003f96:	3a01      	subs	r2, #1
 8003f98:	0552      	lsls	r2, r2, #21
 8003f9a:	4311      	orrs	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fa0:	0852      	lsrs	r2, r2, #1
 8003fa2:	3a01      	subs	r2, #1
 8003fa4:	0652      	lsls	r2, r2, #25
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fac:	0912      	lsrs	r2, r2, #4
 8003fae:	0452      	lsls	r2, r2, #17
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4930      	ldr	r1, [pc, #192]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd0:	f7fd fda0 	bl	8001b14 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fd9c 	bl	8001b14 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e058      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff6:	e050      	b.n	800409a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e04f      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d148      	bne.n	800409a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800400e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004020:	f7fd fd78 	bl	8001b14 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fd74 	bl	8001b14 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e030      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x734>
 8004046:	e028      	b.n	800409a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d023      	beq.n	8004096 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <HAL_RCC_OscConfig+0x780>)
 8004054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd fd5b 	bl	8001b14 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	e00c      	b.n	800407c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fd fd57 	bl	8001b14 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d905      	bls.n	800407c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e013      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
 8004074:	40021000 	.word	0x40021000
 8004078:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x7b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ec      	bne.n	8004062 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x7b0>)
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	4905      	ldr	r1, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x7b0>)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x7b4>)
 8004090:	4013      	ands	r3, r2
 8004092:	60cb      	str	r3, [r1, #12]
 8004094:	e001      	b.n	800409a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	feeefffc 	.word	0xfeeefffc

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0e7      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b75      	ldr	r3, [pc, #468]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d910      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b72      	ldr	r3, [pc, #456]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 0207 	bic.w	r2, r3, #7
 80040d6:	4970      	ldr	r1, [pc, #448]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0cf      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004108:	429a      	cmp	r2, r3
 800410a:	d908      	bls.n	800411e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4960      	ldr	r1, [pc, #384]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04c      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004132:	4b5a      	ldr	r3, [pc, #360]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d121      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0a6      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414a:	4b54      	ldr	r3, [pc, #336]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d115      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e09a      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004162:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e08e      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004172:	4b4a      	ldr	r3, [pc, #296]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e086      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b46      	ldr	r3, [pc, #280]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4943      	ldr	r1, [pc, #268]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004194:	f7fd fcbe 	bl	8001b14 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fd fcba 	bl	8001b14 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e06e      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b3a      	ldr	r3, [pc, #232]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041dc:	429a      	cmp	r2, r3
 80041de:	d208      	bcs.n	80041f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b2e      	ldr	r3, [pc, #184]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	492b      	ldr	r1, [pc, #172]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d210      	bcs.n	8004222 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 0207 	bic.w	r2, r3, #7
 8004208:	4923      	ldr	r1, [pc, #140]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e036      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4918      	ldr	r1, [pc, #96]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4910      	ldr	r1, [pc, #64]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004260:	f000 f824 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	490b      	ldr	r1, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1f8>)
 800427e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fbf5 	bl	8001a74 <HAL_InitTick>
 800428a:	4603      	mov	r3, r0
 800428c:	72fb      	strb	r3, [r7, #11]

  return status;
 800428e:	7afb      	ldrb	r3, [r7, #11]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40022000 	.word	0x40022000
 800429c:	40021000 	.word	0x40021000
 80042a0:	08008ab0 	.word	0x08008ab0
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000004 	.word	0x20000004

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	2300      	movs	r3, #0
 80042b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c4:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x34>
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d121      	bne.n	800431e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d11e      	bne.n	800431e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e0:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042ec:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e005      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004308:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004310:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d102      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e004      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d101      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004330:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d134      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0xa6>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d003      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0xac>
 8004350:	e005      	b.n	800435e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004354:	617b      	str	r3, [r7, #20]
      break;
 8004356:	e005      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800435a:	617b      	str	r3, [r7, #20]
      break;
 800435c:	e002      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	617b      	str	r3, [r7, #20]
      break;
 8004362:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	3301      	adds	r3, #1
 8004370:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	fb03 f202 	mul.w	r2, r3, r2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	0e5b      	lsrs	r3, r3, #25
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	3301      	adds	r3, #1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043a4:	69bb      	ldr	r3, [r7, #24]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	08008ac8 	.word	0x08008ac8
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4904      	ldr	r1, [pc, #16]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	08008ac0 	.word	0x08008ac0

08004408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800440c:	f7ff ffda 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0adb      	lsrs	r3, r3, #11
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	08008ac0 	.word	0x08008ac0

08004434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800444c:	f7ff f9ee 	bl	800382c <HAL_PWREx_GetVoltageRange>
 8004450:	6178      	str	r0, [r7, #20]
 8004452:	e014      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	4a24      	ldr	r2, [pc, #144]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445e:	6593      	str	r3, [r2, #88]	; 0x58
 8004460:	4b22      	ldr	r3, [pc, #136]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800446c:	f7ff f9de 	bl	800382c <HAL_PWREx_GetVoltageRange>
 8004470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004484:	d10b      	bne.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d919      	bls.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2ba0      	cmp	r3, #160	; 0xa0
 8004490:	d902      	bls.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004492:	2302      	movs	r3, #2
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e013      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004498:	2301      	movs	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e010      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d902      	bls.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044a4:	2303      	movs	r3, #3
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e00a      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d102      	bne.n	80044b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b0:	2302      	movs	r3, #2
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e004      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b70      	cmp	r3, #112	; 0x70
 80044ba:	d101      	bne.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044bc:	2301      	movs	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 0207 	bic.w	r2, r3, #7
 80044c8:	4909      	ldr	r1, [pc, #36]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40022000 	.word	0x40022000

080044f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004500:	2300      	movs	r3, #0
 8004502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d041      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004514:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004518:	d02a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800451a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800451e:	d824      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004520:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004524:	d008      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004526:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800452a:	d81e      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004534:	d010      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004536:	e018      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004538:	4b86      	ldr	r3, [pc, #536]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a85      	ldr	r2, [pc, #532]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004542:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004544:	e015      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fabb 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3320      	adds	r3, #32
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fba6 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	74fb      	strb	r3, [r7, #19]
      break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004578:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004586:	4973      	ldr	r1, [pc, #460]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800458e:	e001      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d041      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045a8:	d02a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ae:	d824      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045b4:	d008      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ba:	d81e      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c4:	d010      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045c6:	e018      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c8:	4b62      	ldr	r3, [pc, #392]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a61      	ldr	r2, [pc, #388]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045d4:	e015      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fa73 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045e6:	e00c      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3320      	adds	r3, #32
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb5e 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	74fb      	strb	r3, [r7, #19]
      break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004608:	4b52      	ldr	r3, [pc, #328]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004616:	494f      	ldr	r1, [pc, #316]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800461e:	e001      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80a0 	beq.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464c:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	4a40      	ldr	r2, [pc, #256]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004656:	6593      	str	r3, [r2, #88]	; 0x58
 8004658:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004664:	2301      	movs	r3, #1
 8004666:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004668:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3a      	ldr	r2, [pc, #232]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004674:	f7fd fa4e 	bl	8001b14 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800467a:	e009      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467c:	f7fd fa4a 	bl	8001b14 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d902      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	74fb      	strb	r3, [r7, #19]
        break;
 800468e:	e005      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004690:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ef      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d15c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d019      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046cc:	4b21      	ldr	r3, [pc, #132]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	4a20      	ldr	r2, [pc, #128]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046dc:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fd fa09 	bl	8001b14 <HAL_GetTick>
 8004702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004704:	e00b      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd fa05 	bl	8001b14 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d902      	bls.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	74fb      	strb	r3, [r7, #19]
            break;
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ec      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004742:	4904      	ldr	r1, [pc, #16]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800474a:	e009      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004760:	7c7b      	ldrb	r3, [r7, #17]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004766:	4b9e      	ldr	r3, [pc, #632]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	4a9d      	ldr	r2, [pc, #628]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004770:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800477e:	4b98      	ldr	r3, [pc, #608]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f023 0203 	bic.w	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	4994      	ldr	r1, [pc, #592]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047a0:	4b8f      	ldr	r3, [pc, #572]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f023 020c 	bic.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	498c      	ldr	r1, [pc, #560]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047c2:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	4983      	ldr	r1, [pc, #524]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047e4:	4b7e      	ldr	r3, [pc, #504]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	497b      	ldr	r1, [pc, #492]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004814:	4972      	ldr	r1, [pc, #456]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004828:	4b6d      	ldr	r3, [pc, #436]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	496a      	ldr	r1, [pc, #424]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	4961      	ldr	r1, [pc, #388]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800486c:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	4959      	ldr	r1, [pc, #356]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488e:	4b54      	ldr	r3, [pc, #336]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	4950      	ldr	r1, [pc, #320]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b0:	4b4b      	ldr	r3, [pc, #300]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	4948      	ldr	r1, [pc, #288]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d2:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	493f      	ldr	r1, [pc, #252]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d028      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048f4:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004902:	4937      	ldr	r1, [pc, #220]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004912:	d106      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004914:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800491e:	60d3      	str	r3, [r2, #12]
 8004920:	e011      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004926:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800492a:	d10c      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f8c8 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d028      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004952:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	491f      	ldr	r1, [pc, #124]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004970:	d106      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497c:	60d3      	str	r3, [r2, #12]
 800497e:	e011      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2101      	movs	r1, #1
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f899 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02b      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049be:	4908      	ldr	r1, [pc, #32]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a02      	ldr	r2, [pc, #8]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e014      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f867 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02f      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a22:	4928      	ldr	r1, [pc, #160]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a32:	d10d      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f844 	bl	8004ac8 <RCCEx_PLLSAI1_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a4a:	7cfb      	ldrb	r3, [r7, #19]
 8004a4c:	74bb      	strb	r3, [r7, #18]
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3320      	adds	r3, #32
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f925 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8e:	490d      	ldr	r1, [pc, #52]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab2:	4904      	ldr	r1, [pc, #16]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aba:	7cbb      	ldrb	r3, [r7, #18]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad6:	4b75      	ldr	r3, [pc, #468]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ae2:	4b72      	ldr	r3, [pc, #456]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d10d      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
       ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004afa:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
       ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d047      	beq.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e044      	b.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d018      	beq.n	8004b4e <RCCEx_PLLSAI1_Config+0x86>
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d825      	bhi.n	8004b6c <RCCEx_PLLSAI1_Config+0xa4>
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d002      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0x62>
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d009      	beq.n	8004b3c <RCCEx_PLLSAI1_Config+0x74>
 8004b28:	e020      	b.n	8004b6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b2a:	4b60      	ldr	r3, [pc, #384]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11d      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3a:	e01a      	b.n	8004b72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b3c:	4b5b      	ldr	r3, [pc, #364]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d116      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4c:	e013      	b.n	8004b76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b4e:	4b57      	ldr	r3, [pc, #348]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b5a:	4b54      	ldr	r3, [pc, #336]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b6a:	e006      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b70:	e004      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b82:	4b4a      	ldr	r3, [pc, #296]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	430b      	orrs	r3, r1
 8004b98:	4944      	ldr	r1, [pc, #272]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d17d      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ba4:	4b41      	ldr	r3, [pc, #260]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a40      	ldr	r2, [pc, #256]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fc ffb0 	bl	8001b14 <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb6:	e009      	b.n	8004bcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bb8:	f7fc ffac 	bl	8001b14 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d902      	bls.n	8004bcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bca:	e005      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bcc:	4b37      	ldr	r3, [pc, #220]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ef      	bne.n	8004bb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d160      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d111      	bne.n	8004c08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be4:	4b31      	ldr	r3, [pc, #196]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6892      	ldr	r2, [r2, #8]
 8004bf4:	0211      	lsls	r1, r2, #8
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	0912      	lsrs	r2, r2, #4
 8004bfc:	0452      	lsls	r2, r2, #17
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	492a      	ldr	r1, [pc, #168]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	610b      	str	r3, [r1, #16]
 8004c06:	e027      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d112      	bne.n	8004c34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0e:	4b27      	ldr	r3, [pc, #156]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	0211      	lsls	r1, r2, #8
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6912      	ldr	r2, [r2, #16]
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	3a01      	subs	r2, #1
 8004c28:	0552      	lsls	r2, r2, #21
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	491f      	ldr	r1, [pc, #124]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
 8004c32:	e011      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6952      	ldr	r2, [r2, #20]
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0652      	lsls	r2, r2, #25
 8004c50:	430a      	orrs	r2, r1
 8004c52:	4916      	ldr	r1, [pc, #88]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fc ff56 	bl	8001b14 <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c6a:	e009      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c6c:	f7fc ff52 	bl	8001b14 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d902      	bls.n	8004c80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c7e:	e005      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ef      	beq.n	8004c6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	4904      	ldr	r1, [pc, #16]	; (8004cac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cca:	4b67      	ldr	r3, [pc, #412]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0203 	and.w	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10d      	bne.n	8004cf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ce2:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d047      	beq.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e044      	b.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d018      	beq.n	8004d36 <RCCEx_PLLSAI2_Config+0x86>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d825      	bhi.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <RCCEx_PLLSAI2_Config+0x62>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d009      	beq.n	8004d24 <RCCEx_PLLSAI2_Config+0x74>
 8004d10:	e020      	b.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d12:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d22:	e01a      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d24:	4b50      	ldr	r3, [pc, #320]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e013      	b.n	8004d5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d36:	4b4c      	ldr	r3, [pc, #304]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d42:	4b49      	ldr	r3, [pc, #292]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e004      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	4939      	ldr	r1, [pc, #228]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d167      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a35      	ldr	r2, [pc, #212]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fc febc 	bl	8001b14 <HAL_GetTick>
 8004d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d9e:	e009      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004da0:	f7fc feb8 	bl	8001b14 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d902      	bls.n	8004db4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	73fb      	strb	r3, [r7, #15]
        break;
 8004db2:	e005      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004db4:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ef      	bne.n	8004da0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d14a      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d111      	bne.n	8004df0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dcc:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6892      	ldr	r2, [r2, #8]
 8004ddc:	0211      	lsls	r1, r2, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68d2      	ldr	r2, [r2, #12]
 8004de2:	0912      	lsrs	r2, r2, #4
 8004de4:	0452      	lsls	r2, r2, #17
 8004de6:	430a      	orrs	r2, r1
 8004de8:	491f      	ldr	r1, [pc, #124]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	614b      	str	r3, [r1, #20]
 8004dee:	e011      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df0:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004df8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	0211      	lsls	r1, r2, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6912      	ldr	r2, [r2, #16]
 8004e06:	0852      	lsrs	r2, r2, #1
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	0652      	lsls	r2, r2, #25
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	4916      	ldr	r1, [pc, #88]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e14:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fc fe78 	bl	8001b14 <HAL_GetTick>
 8004e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e26:	e009      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e28:	f7fc fe74 	bl	8001b14 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d902      	bls.n	8004e3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	73fb      	strb	r3, [r7, #15]
          break;
 8004e3a:	e005      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ef      	beq.n	8004e28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4904      	ldr	r1, [pc, #16]	; (8004e68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000

08004e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e049      	b.n	8004f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fbd8 	bl	8001648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 fd86 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d001      	beq.n	8004f34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e047      	b.n	8004fc4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <HAL_TIM_Base_Start+0xb4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_TIM_Base_Start+0x66>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d018      	beq.n	8004f82 <HAL_TIM_Base_Start+0x66>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_TIM_Base_Start+0xb8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIM_Base_Start+0x66>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_TIM_Base_Start+0xbc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIM_Base_Start+0x66>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <HAL_TIM_Base_Start+0xc0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIM_Base_Start+0x66>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_TIM_Base_Start+0xc4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIM_Base_Start+0x66>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_TIM_Base_Start+0xc8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d115      	bne.n	8004fae <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <HAL_TIM_Base_Start+0xcc>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d015      	beq.n	8004fc0 <HAL_TIM_Base_Start+0xa4>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9a:	d011      	beq.n	8004fc0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	e008      	b.n	8004fc0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e000      	b.n	8004fc2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	00010007 	.word	0x00010007

08004fec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a1a      	ldr	r2, [r3, #32]
 8004ffa:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10f      	bne.n	8005024 <HAL_TIM_Base_Stop+0x38>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6a1a      	ldr	r2, [r3, #32]
 800500a:	f240 4344 	movw	r3, #1092	; 0x444
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d107      	bne.n	8005024 <HAL_TIM_Base_Stop+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e04f      	b.n	80050f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a23      	ldr	r2, [pc, #140]	; (8005100 <HAL_TIM_Base_Start_IT+0xc4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01d      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507e:	d018      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <HAL_TIM_Base_Start_IT+0xc8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_TIM_Base_Start_IT+0xcc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <HAL_TIM_Base_Start_IT+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <HAL_TIM_Base_Start_IT+0xd4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIM_Base_Start_IT+0x76>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <HAL_TIM_Base_Start_IT+0xd8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d115      	bne.n	80050de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <HAL_TIM_Base_Start_IT+0xdc>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b06      	cmp	r3, #6
 80050c2:	d015      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0xb4>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ca:	d011      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050dc:	e008      	b.n	80050f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e000      	b.n	80050f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40013400 	.word	0x40013400
 8005114:	40014000 	.word	0x40014000
 8005118:	00010007 	.word	0x00010007

0800511c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc fa5a 	bl	80015fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fc2e 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_TIM_PWM_Start+0x24>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e03c      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d109      	bne.n	800520a <HAL_TIM_PWM_Start+0x3e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e02f      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d109      	bne.n	8005224 <HAL_TIM_PWM_Start+0x58>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e022      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d109      	bne.n	800523e <HAL_TIM_PWM_Start+0x72>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e015      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b10      	cmp	r3, #16
 8005242:	d109      	bne.n	8005258 <HAL_TIM_PWM_Start+0x8c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e008      	b.n	800526a <HAL_TIM_PWM_Start+0x9e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e09c      	b.n	80053ac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xb6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	e023      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xc6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	e01b      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0xd6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a0:	e013      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Start+0xe6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b0:	e00b      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start+0xf6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c0:	e003      	b.n	80052ca <HAL_TIM_PWM_Start+0xfe>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fee2 	bl	800609c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a35      	ldr	r2, [pc, #212]	; (80053b4 <HAL_TIM_PWM_Start+0x1e8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <HAL_TIM_PWM_Start+0x1ec>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a32      	ldr	r2, [pc, #200]	; (80053bc <HAL_TIM_PWM_Start+0x1f0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a31      	ldr	r2, [pc, #196]	; (80053c0 <HAL_TIM_PWM_Start+0x1f4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIM_PWM_Start+0x13e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <HAL_TIM_PWM_Start+0x1f8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_Start+0x142>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_TIM_PWM_Start+0x144>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <HAL_TIM_PWM_Start+0x1e8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01d      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d018      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <HAL_TIM_PWM_Start+0x1fc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a21      	ldr	r2, [pc, #132]	; (80053cc <HAL_TIM_PWM_Start+0x200>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_TIM_PWM_Start+0x204>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d009      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <HAL_TIM_PWM_Start+0x1ec>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_TIM_PWM_Start+0x19e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a15      	ldr	r2, [pc, #84]	; (80053bc <HAL_TIM_PWM_Start+0x1f0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d115      	bne.n	8005396 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <HAL_TIM_PWM_Start+0x208>)
 8005372:	4013      	ands	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b06      	cmp	r3, #6
 800537a:	d015      	beq.n	80053a8 <HAL_TIM_PWM_Start+0x1dc>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d011      	beq.n	80053a8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005394:	e008      	b.n	80053a8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e000      	b.n	80053aa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	00010007 	.word	0x00010007

080053d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fe56 	bl	800609c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a3e      	ldr	r2, [pc, #248]	; (80054f0 <HAL_TIM_PWM_Stop+0x118>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3d      	ldr	r2, [pc, #244]	; (80054f4 <HAL_TIM_PWM_Stop+0x11c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3b      	ldr	r2, [pc, #236]	; (80054f8 <HAL_TIM_PWM_Stop+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3a      	ldr	r2, [pc, #232]	; (80054fc <HAL_TIM_PWM_Stop+0x124>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIM_PWM_Stop+0x4a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a38      	ldr	r2, [pc, #224]	; (8005500 <HAL_TIM_PWM_Stop+0x128>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Stop+0x4e>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_TIM_PWM_Stop+0x50>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d017      	beq.n	800545c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	f241 1311 	movw	r3, #4369	; 0x1111
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10f      	bne.n	800545c <HAL_TIM_PWM_Stop+0x84>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	f240 4344 	movw	r3, #1092	; 0x444
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <HAL_TIM_PWM_Stop+0x84>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	f241 1311 	movw	r3, #4369	; 0x1111
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <HAL_TIM_PWM_Stop+0xb4>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	f240 4344 	movw	r3, #1092	; 0x444
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <HAL_TIM_PWM_Stop+0xb4>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <HAL_TIM_PWM_Stop+0xc4>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800549a:	e023      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d104      	bne.n	80054ac <HAL_TIM_PWM_Stop+0xd4>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054aa:	e01b      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d104      	bne.n	80054bc <HAL_TIM_PWM_Stop+0xe4>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ba:	e013      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d104      	bne.n	80054cc <HAL_TIM_PWM_Stop+0xf4>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ca:	e00b      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d104      	bne.n	80054dc <HAL_TIM_PWM_Stop+0x104>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054da:	e003      	b.n	80054e4 <HAL_TIM_PWM_Stop+0x10c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40013400 	.word	0x40013400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800

08005504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b02      	cmp	r3, #2
 8005518:	d122      	bne.n	8005560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b02      	cmp	r3, #2
 8005526:	d11b      	bne.n	8005560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0202 	mvn.w	r2, #2
 8005530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa1a 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa0c 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa1d 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b04      	cmp	r3, #4
 800556c:	d122      	bne.n	80055b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b04      	cmp	r3, #4
 800557a:	d11b      	bne.n	80055b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0204 	mvn.w	r2, #4
 8005584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9f0 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9e2 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f9f3 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0208 	mvn.w	r2, #8
 80055d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2204      	movs	r2, #4
 80055de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9c6 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9b8 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f9c9 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b10      	cmp	r3, #16
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b10      	cmp	r3, #16
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0210 	mvn.w	r2, #16
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2208      	movs	r2, #8
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f99c 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f98e 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f99f 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10e      	bne.n	8005688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d107      	bne.n	8005688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0201 	mvn.w	r2, #1
 8005680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fb fc9a 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b80      	cmp	r3, #128	; 0x80
 8005694:	d10e      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	d107      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fdac 	bl	800620c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c2:	d10e      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ce:	2b80      	cmp	r3, #128	; 0x80
 80056d0:	d107      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fd9f 	bl	8006220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d10e      	bne.n	800570e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d107      	bne.n	800570e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f94d 	bl	80059a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b20      	cmp	r3, #32
 800571a:	d10e      	bne.n	800573a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b20      	cmp	r3, #32
 8005728:	d107      	bne.n	800573a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f06f 0220 	mvn.w	r2, #32
 8005732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fd5f 	bl	80061f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800575e:	2302      	movs	r3, #2
 8005760:	e0ff      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b14      	cmp	r3, #20
 800576e:	f200 80f0 	bhi.w	8005952 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	080057cd 	.word	0x080057cd
 800577c:	08005953 	.word	0x08005953
 8005780:	08005953 	.word	0x08005953
 8005784:	08005953 	.word	0x08005953
 8005788:	0800580d 	.word	0x0800580d
 800578c:	08005953 	.word	0x08005953
 8005790:	08005953 	.word	0x08005953
 8005794:	08005953 	.word	0x08005953
 8005798:	0800584f 	.word	0x0800584f
 800579c:	08005953 	.word	0x08005953
 80057a0:	08005953 	.word	0x08005953
 80057a4:	08005953 	.word	0x08005953
 80057a8:	0800588f 	.word	0x0800588f
 80057ac:	08005953 	.word	0x08005953
 80057b0:	08005953 	.word	0x08005953
 80057b4:	08005953 	.word	0x08005953
 80057b8:	080058d1 	.word	0x080058d1
 80057bc:	08005953 	.word	0x08005953
 80057c0:	08005953 	.word	0x08005953
 80057c4:	08005953 	.word	0x08005953
 80057c8:	08005911 	.word	0x08005911
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f98c 	bl	8005af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0208 	orr.w	r2, r2, #8
 80057e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0204 	bic.w	r2, r2, #4
 80057f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6999      	ldr	r1, [r3, #24]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	619a      	str	r2, [r3, #24]
      break;
 800580a:	e0a5      	b.n	8005958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f9fc 	bl	8005c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	619a      	str	r2, [r3, #24]
      break;
 800584c:	e084      	b.n	8005958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fa65 	bl	8005d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0208 	orr.w	r2, r2, #8
 8005868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0204 	bic.w	r2, r2, #4
 8005878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69d9      	ldr	r1, [r3, #28]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	61da      	str	r2, [r3, #28]
      break;
 800588c:	e064      	b.n	8005958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 facd 	bl	8005e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	021a      	lsls	r2, r3, #8
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	61da      	str	r2, [r3, #28]
      break;
 80058ce:	e043      	b.n	8005958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fb16 	bl	8005f08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0208 	orr.w	r2, r2, #8
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0204 	bic.w	r2, r2, #4
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800590e:	e023      	b.n	8005958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fb5a 	bl	8005fd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	021a      	lsls	r2, r3, #8
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005950:	e002      	b.n	8005958 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	75fb      	strb	r3, [r7, #23]
      break;
 8005956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop

0800596c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a40      	ldr	r2, [pc, #256]	; (8005ad0 <TIM_Base_SetConfig+0x114>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059da:	d00f      	beq.n	80059fc <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3d      	ldr	r2, [pc, #244]	; (8005ad4 <TIM_Base_SetConfig+0x118>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3c      	ldr	r2, [pc, #240]	; (8005ad8 <TIM_Base_SetConfig+0x11c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3b      	ldr	r2, [pc, #236]	; (8005adc <TIM_Base_SetConfig+0x120>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3a      	ldr	r2, [pc, #232]	; (8005ae0 <TIM_Base_SetConfig+0x124>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d108      	bne.n	8005a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2f      	ldr	r2, [pc, #188]	; (8005ad0 <TIM_Base_SetConfig+0x114>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01f      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1c:	d01b      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <TIM_Base_SetConfig+0x118>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d017      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2b      	ldr	r2, [pc, #172]	; (8005ad8 <TIM_Base_SetConfig+0x11c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <TIM_Base_SetConfig+0x120>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <TIM_Base_SetConfig+0x124>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a28      	ldr	r2, [pc, #160]	; (8005ae4 <TIM_Base_SetConfig+0x128>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <TIM_Base_SetConfig+0x12c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a26      	ldr	r2, [pc, #152]	; (8005aec <TIM_Base_SetConfig+0x130>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00f      	beq.n	8005ab4 <TIM_Base_SetConfig+0xf8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <TIM_Base_SetConfig+0x124>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <TIM_Base_SetConfig+0xf8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <TIM_Base_SetConfig+0x128>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_Base_SetConfig+0xf8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a10      	ldr	r2, [pc, #64]	; (8005ae8 <TIM_Base_SetConfig+0x12c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_Base_SetConfig+0xf8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <TIM_Base_SetConfig+0x130>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d103      	bne.n	8005abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40000c00 	.word	0x40000c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0201 	bic.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f023 0302 	bic.w	r3, r3, #2
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <TIM_OC1_SetConfig+0x10c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00f      	beq.n	8005b70 <TIM_OC1_SetConfig+0x80>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a2b      	ldr	r2, [pc, #172]	; (8005c00 <TIM_OC1_SetConfig+0x110>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00b      	beq.n	8005b70 <TIM_OC1_SetConfig+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <TIM_OC1_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d007      	beq.n	8005b70 <TIM_OC1_SetConfig+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <TIM_OC1_SetConfig+0x118>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_OC1_SetConfig+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a28      	ldr	r2, [pc, #160]	; (8005c0c <TIM_OC1_SetConfig+0x11c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10c      	bne.n	8005b8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0308 	bic.w	r3, r3, #8
 8005b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 0304 	bic.w	r3, r3, #4
 8005b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <TIM_OC1_SetConfig+0x10c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_OC1_SetConfig+0xc2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <TIM_OC1_SetConfig+0x110>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_OC1_SetConfig+0xc2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <TIM_OC1_SetConfig+0x114>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_OC1_SetConfig+0xc2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <TIM_OC1_SetConfig+0x118>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_OC1_SetConfig+0xc2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <TIM_OC1_SetConfig+0x11c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d111      	bne.n	8005bd6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	621a      	str	r2, [r3, #32]
}
 8005bf0:	bf00      	nop
 8005bf2:	371c      	adds	r7, #28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	40013400 	.word	0x40013400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800

08005c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0320 	bic.w	r3, r3, #32
 8005c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <TIM_OC2_SetConfig+0x100>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_OC2_SetConfig+0x6c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a27      	ldr	r2, [pc, #156]	; (8005d14 <TIM_OC2_SetConfig+0x104>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10d      	bne.n	8005c98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a1d      	ldr	r2, [pc, #116]	; (8005d10 <TIM_OC2_SetConfig+0x100>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xb0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <TIM_OC2_SetConfig+0x104>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xb0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <TIM_OC2_SetConfig+0x108>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xb0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <TIM_OC2_SetConfig+0x10c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC2_SetConfig+0xb0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <TIM_OC2_SetConfig+0x110>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d113      	bne.n	8005ce8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800

08005d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a27      	ldr	r2, [pc, #156]	; (8005e20 <TIM_OC3_SetConfig+0xfc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC3_SetConfig+0x6a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a26      	ldr	r2, [pc, #152]	; (8005e24 <TIM_OC3_SetConfig+0x100>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d10d      	bne.n	8005daa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1c      	ldr	r2, [pc, #112]	; (8005e20 <TIM_OC3_SetConfig+0xfc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00f      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xae>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1b      	ldr	r2, [pc, #108]	; (8005e24 <TIM_OC3_SetConfig+0x100>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xae>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1a      	ldr	r2, [pc, #104]	; (8005e28 <TIM_OC3_SetConfig+0x104>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xae>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <TIM_OC3_SetConfig+0x108>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xae>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <TIM_OC3_SetConfig+0x10c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d113      	bne.n	8005dfa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	621a      	str	r2, [r3, #32]
}
 8005e14:	bf00      	nop
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40014400 	.word	0x40014400
 8005e30:	40014800 	.word	0x40014800

08005e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <TIM_OC4_SetConfig+0xc0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00f      	beq.n	8005eb8 <TIM_OC4_SetConfig+0x84>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <TIM_OC4_SetConfig+0xc4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <TIM_OC4_SetConfig+0x84>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a16      	ldr	r2, [pc, #88]	; (8005efc <TIM_OC4_SetConfig+0xc8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d007      	beq.n	8005eb8 <TIM_OC4_SetConfig+0x84>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <TIM_OC4_SetConfig+0xcc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_OC4_SetConfig+0x84>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <TIM_OC4_SetConfig+0xd0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d109      	bne.n	8005ecc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	019b      	lsls	r3, r3, #6
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40013400 	.word	0x40013400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800

08005f08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <TIM_OC5_SetConfig+0xb4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00f      	beq.n	8005f82 <TIM_OC5_SetConfig+0x7a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <TIM_OC5_SetConfig+0xb8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00b      	beq.n	8005f82 <TIM_OC5_SetConfig+0x7a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <TIM_OC5_SetConfig+0xbc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_OC5_SetConfig+0x7a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a14      	ldr	r2, [pc, #80]	; (8005fc8 <TIM_OC5_SetConfig+0xc0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC5_SetConfig+0x7a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <TIM_OC5_SetConfig+0xc4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d109      	bne.n	8005f96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40012c00 	.word	0x40012c00
 8005fc0:	40013400 	.word	0x40013400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800

08005fd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	051b      	lsls	r3, r3, #20
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <TIM_OC6_SetConfig+0xb8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_OC6_SetConfig+0x7c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a17      	ldr	r2, [pc, #92]	; (800608c <TIM_OC6_SetConfig+0xbc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_OC6_SetConfig+0x7c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a16      	ldr	r2, [pc, #88]	; (8006090 <TIM_OC6_SetConfig+0xc0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_OC6_SetConfig+0x7c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <TIM_OC6_SetConfig+0xc4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC6_SetConfig+0x7c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <TIM_OC6_SetConfig+0xc8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d109      	bne.n	8006060 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006052:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	029b      	lsls	r3, r3, #10
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40013400 	.word	0x40013400
 8006090:	40014000 	.word	0x40014000
 8006094:	40014400 	.word	0x40014400
 8006098:	40014800 	.word	0x40014800

0800609c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2201      	movs	r2, #1
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	43db      	mvns	r3, r3
 80060be:	401a      	ands	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1a      	ldr	r2, [r3, #32]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	fa01 f303 	lsl.w	r3, r1, r3
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e068      	b.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a2e      	ldr	r2, [pc, #184]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d108      	bne.n	8006146 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800613a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01d      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d018      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1a      	ldr	r2, [pc, #104]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a14      	ldr	r2, [pc, #80]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10c      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40013400 	.word	0x40013400
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40014000 	.word	0x40014000

080061f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e040      	b.n	80062c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fb fa54 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2224      	movs	r2, #36	; 0x24
 8006260:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f992 	bl	800659c <UART_SetConfig>
 8006278:	4603      	mov	r3, r0
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e022      	b.n	80062c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fc3e 	bl	8006b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800629e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fcc5 	bl	8006c50 <UART_CheckIdleState>
 80062c6:	4603      	mov	r3, r0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	f040 8082 	bne.w	80063ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_UART_Transmit+0x26>
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e07a      	b.n	80063f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UART_Transmit+0x38>
 8006304:	2302      	movs	r3, #2
 8006306:	e073      	b.n	80063f0 <HAL_UART_Transmit+0x120>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2221      	movs	r2, #33	; 0x21
 800631c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800631e:	f7fb fbf9 	bl	8001b14 <HAL_GetTick>
 8006322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	88fa      	ldrh	r2, [r7, #6]
 8006328:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633c:	d108      	bne.n	8006350 <HAL_UART_Transmit+0x80>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e003      	b.n	8006358 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006360:	e02d      	b.n	80063be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2200      	movs	r2, #0
 800636a:	2180      	movs	r1, #128	; 0x80
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fcb8 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e039      	b.n	80063f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800638e:	b292      	uxth	r2, r2
 8006390:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	3302      	adds	r3, #2
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	e008      	b.n	80063ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	781a      	ldrb	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	b292      	uxth	r2, r2
 80063a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1cb      	bne.n	8006362 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2200      	movs	r2, #0
 80063d2:	2140      	movs	r1, #64	; 0x40
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fc84 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e005      	b.n	80063f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	; 0x28
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800640c:	2b20      	cmp	r3, #32
 800640e:	f040 80bf 	bne.w	8006590 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_UART_Receive+0x26>
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e0b7      	b.n	8006592 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_UART_Receive+0x38>
 800642c:	2302      	movs	r3, #2
 800642e:	e0b0      	b.n	8006592 <HAL_UART_Receive+0x19a>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2222      	movs	r2, #34	; 0x22
 8006444:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800644c:	f7fb fb62 	bl	8001b14 <HAL_GetTick>
 8006450:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	88fa      	ldrh	r2, [r7, #6]
 800645e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646a:	d10e      	bne.n	800648a <HAL_UART_Receive+0x92>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_UART_Receive+0x88>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f240 12ff 	movw	r2, #511	; 0x1ff
 800647a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800647e:	e02d      	b.n	80064dc <HAL_UART_Receive+0xe4>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	22ff      	movs	r2, #255	; 0xff
 8006484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006488:	e028      	b.n	80064dc <HAL_UART_Receive+0xe4>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <HAL_UART_Receive+0xb6>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d104      	bne.n	80064a4 <HAL_UART_Receive+0xac>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064a2:	e01b      	b.n	80064dc <HAL_UART_Receive+0xe4>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	227f      	movs	r2, #127	; 0x7f
 80064a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064ac:	e016      	b.n	80064dc <HAL_UART_Receive+0xe4>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b6:	d10d      	bne.n	80064d4 <HAL_UART_Receive+0xdc>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_UART_Receive+0xd2>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	227f      	movs	r2, #127	; 0x7f
 80064c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064c8:	e008      	b.n	80064dc <HAL_UART_Receive+0xe4>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	223f      	movs	r2, #63	; 0x3f
 80064ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064d2:	e003      	b.n	80064dc <HAL_UART_Receive+0xe4>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ec:	d108      	bne.n	8006500 <HAL_UART_Receive+0x108>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d104      	bne.n	8006500 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e003      	b.n	8006508 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006510:	e033      	b.n	800657a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2200      	movs	r2, #0
 800651a:	2120      	movs	r1, #32
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fbe0 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e032      	b.n	8006592 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10c      	bne.n	800654c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006538:	b29a      	uxth	r2, r3
 800653a:	8a7b      	ldrh	r3, [r7, #18]
 800653c:	4013      	ands	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	3302      	adds	r3, #2
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e00d      	b.n	8006568 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006552:	b29b      	uxth	r3, r3
 8006554:	b2da      	uxtb	r2, r3
 8006556:	8a7b      	ldrh	r3, [r7, #18]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4013      	ands	r3, r2
 800655c:	b2da      	uxtb	r2, r3
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3301      	adds	r3, #1
 8006566:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1c5      	bne.n	8006512 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	e000      	b.n	8006592 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006590:	2302      	movs	r3, #2
  }
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800659c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a0:	b08a      	sub	sp, #40	; 0x28
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4ba4      	ldr	r3, [pc, #656]	; (800685c <UART_SetConfig+0x2c0>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a99      	ldr	r2, [pc, #612]	; (8006860 <UART_SetConfig+0x2c4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006604:	4313      	orrs	r3, r2
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006618:	430a      	orrs	r2, r1
 800661a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a90      	ldr	r2, [pc, #576]	; (8006864 <UART_SetConfig+0x2c8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d126      	bne.n	8006674 <UART_SetConfig+0xd8>
 8006626:	4b90      	ldr	r3, [pc, #576]	; (8006868 <UART_SetConfig+0x2cc>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b03      	cmp	r3, #3
 8006632:	d81b      	bhi.n	800666c <UART_SetConfig+0xd0>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0xa0>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	0800664d 	.word	0x0800664d
 8006640:	0800665d 	.word	0x0800665d
 8006644:	08006655 	.word	0x08006655
 8006648:	08006665 	.word	0x08006665
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006652:	e116      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006654:	2302      	movs	r3, #2
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665a:	e112      	b.n	8006882 <UART_SetConfig+0x2e6>
 800665c:	2304      	movs	r3, #4
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006662:	e10e      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006664:	2308      	movs	r3, #8
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666a:	e10a      	b.n	8006882 <UART_SetConfig+0x2e6>
 800666c:	2310      	movs	r3, #16
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006672:	e106      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a7c      	ldr	r2, [pc, #496]	; (800686c <UART_SetConfig+0x2d0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d138      	bne.n	80066f0 <UART_SetConfig+0x154>
 800667e:	4b7a      	ldr	r3, [pc, #488]	; (8006868 <UART_SetConfig+0x2cc>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d82d      	bhi.n	80066e8 <UART_SetConfig+0x14c>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0xf8>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066c9 	.word	0x080066c9
 8006698:	080066e9 	.word	0x080066e9
 800669c:	080066e9 	.word	0x080066e9
 80066a0:	080066e9 	.word	0x080066e9
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	080066e9 	.word	0x080066e9
 80066ac:	080066e9 	.word	0x080066e9
 80066b0:	080066e9 	.word	0x080066e9
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	080066e9 	.word	0x080066e9
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e0d8      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066d0:	2302      	movs	r3, #2
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d6:	e0d4      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066d8:	2304      	movs	r3, #4
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066de:	e0d0      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e6:	e0cc      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ee:	e0c8      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5e      	ldr	r2, [pc, #376]	; (8006870 <UART_SetConfig+0x2d4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d125      	bne.n	8006746 <UART_SetConfig+0x1aa>
 80066fa:	4b5b      	ldr	r3, [pc, #364]	; (8006868 <UART_SetConfig+0x2cc>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006704:	2b30      	cmp	r3, #48	; 0x30
 8006706:	d016      	beq.n	8006736 <UART_SetConfig+0x19a>
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d818      	bhi.n	800673e <UART_SetConfig+0x1a2>
 800670c:	2b20      	cmp	r3, #32
 800670e:	d00a      	beq.n	8006726 <UART_SetConfig+0x18a>
 8006710:	2b20      	cmp	r3, #32
 8006712:	d814      	bhi.n	800673e <UART_SetConfig+0x1a2>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <UART_SetConfig+0x182>
 8006718:	2b10      	cmp	r3, #16
 800671a:	d008      	beq.n	800672e <UART_SetConfig+0x192>
 800671c:	e00f      	b.n	800673e <UART_SetConfig+0x1a2>
 800671e:	2300      	movs	r3, #0
 8006720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006724:	e0ad      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006726:	2302      	movs	r3, #2
 8006728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672c:	e0a9      	b.n	8006882 <UART_SetConfig+0x2e6>
 800672e:	2304      	movs	r3, #4
 8006730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006734:	e0a5      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006736:	2308      	movs	r3, #8
 8006738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673c:	e0a1      	b.n	8006882 <UART_SetConfig+0x2e6>
 800673e:	2310      	movs	r3, #16
 8006740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006744:	e09d      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a4a      	ldr	r2, [pc, #296]	; (8006874 <UART_SetConfig+0x2d8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d125      	bne.n	800679c <UART_SetConfig+0x200>
 8006750:	4b45      	ldr	r3, [pc, #276]	; (8006868 <UART_SetConfig+0x2cc>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800675a:	2bc0      	cmp	r3, #192	; 0xc0
 800675c:	d016      	beq.n	800678c <UART_SetConfig+0x1f0>
 800675e:	2bc0      	cmp	r3, #192	; 0xc0
 8006760:	d818      	bhi.n	8006794 <UART_SetConfig+0x1f8>
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d00a      	beq.n	800677c <UART_SetConfig+0x1e0>
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d814      	bhi.n	8006794 <UART_SetConfig+0x1f8>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <UART_SetConfig+0x1d8>
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d008      	beq.n	8006784 <UART_SetConfig+0x1e8>
 8006772:	e00f      	b.n	8006794 <UART_SetConfig+0x1f8>
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677a:	e082      	b.n	8006882 <UART_SetConfig+0x2e6>
 800677c:	2302      	movs	r3, #2
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006782:	e07e      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006784:	2304      	movs	r3, #4
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678a:	e07a      	b.n	8006882 <UART_SetConfig+0x2e6>
 800678c:	2308      	movs	r3, #8
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006792:	e076      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006794:	2310      	movs	r3, #16
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679a:	e072      	b.n	8006882 <UART_SetConfig+0x2e6>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a35      	ldr	r2, [pc, #212]	; (8006878 <UART_SetConfig+0x2dc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d12a      	bne.n	80067fc <UART_SetConfig+0x260>
 80067a6:	4b30      	ldr	r3, [pc, #192]	; (8006868 <UART_SetConfig+0x2cc>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b4:	d01a      	beq.n	80067ec <UART_SetConfig+0x250>
 80067b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ba:	d81b      	bhi.n	80067f4 <UART_SetConfig+0x258>
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c0:	d00c      	beq.n	80067dc <UART_SetConfig+0x240>
 80067c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c6:	d815      	bhi.n	80067f4 <UART_SetConfig+0x258>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <UART_SetConfig+0x238>
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d0:	d008      	beq.n	80067e4 <UART_SetConfig+0x248>
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x258>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e052      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e04e      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e04a      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e046      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e042      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <UART_SetConfig+0x2c4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d13a      	bne.n	800687c <UART_SetConfig+0x2e0>
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <UART_SetConfig+0x2cc>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006814:	d01a      	beq.n	800684c <UART_SetConfig+0x2b0>
 8006816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800681a:	d81b      	bhi.n	8006854 <UART_SetConfig+0x2b8>
 800681c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006820:	d00c      	beq.n	800683c <UART_SetConfig+0x2a0>
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d815      	bhi.n	8006854 <UART_SetConfig+0x2b8>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <UART_SetConfig+0x298>
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x2a8>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x2b8>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e022      	b.n	8006882 <UART_SetConfig+0x2e6>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e01e      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e01a      	b.n	8006882 <UART_SetConfig+0x2e6>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e016      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	e012      	b.n	8006882 <UART_SetConfig+0x2e6>
 800685c:	efff69f3 	.word	0xefff69f3
 8006860:	40008000 	.word	0x40008000
 8006864:	40013800 	.word	0x40013800
 8006868:	40021000 	.word	0x40021000
 800686c:	40004400 	.word	0x40004400
 8006870:	40004800 	.word	0x40004800
 8006874:	40004c00 	.word	0x40004c00
 8006878:	40005000 	.word	0x40005000
 800687c:	2310      	movs	r3, #16
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a9f      	ldr	r2, [pc, #636]	; (8006b04 <UART_SetConfig+0x568>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d17a      	bne.n	8006982 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800688c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006890:	2b08      	cmp	r3, #8
 8006892:	d824      	bhi.n	80068de <UART_SetConfig+0x342>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0x300>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068df 	.word	0x080068df
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068df 	.word	0x080068df
 80068ac:	080068cf 	.word	0x080068cf
 80068b0:	080068df 	.word	0x080068df
 80068b4:	080068df 	.word	0x080068df
 80068b8:	080068df 	.word	0x080068df
 80068bc:	080068d7 	.word	0x080068d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fd fd8c 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 80068c4:	61f8      	str	r0, [r7, #28]
        break;
 80068c6:	e010      	b.n	80068ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c8:	4b8f      	ldr	r3, [pc, #572]	; (8006b08 <UART_SetConfig+0x56c>)
 80068ca:	61fb      	str	r3, [r7, #28]
        break;
 80068cc:	e00d      	b.n	80068ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ce:	f7fd fced 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 80068d2:	61f8      	str	r0, [r7, #28]
        break;
 80068d4:	e009      	b.n	80068ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068da:	61fb      	str	r3, [r7, #28]
        break;
 80068dc:	e005      	b.n	80068ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80fb 	beq.w	8006ae8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	4413      	add	r3, r2
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d305      	bcc.n	800690e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	429a      	cmp	r2, r3
 800690c:	d903      	bls.n	8006916 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006914:	e0e8      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2200      	movs	r2, #0
 800691a:	461c      	mov	r4, r3
 800691c:	4615      	mov	r5, r2
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	022b      	lsls	r3, r5, #8
 8006928:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800692c:	0222      	lsls	r2, r4, #8
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	6849      	ldr	r1, [r1, #4]
 8006932:	0849      	lsrs	r1, r1, #1
 8006934:	2000      	movs	r0, #0
 8006936:	4688      	mov	r8, r1
 8006938:	4681      	mov	r9, r0
 800693a:	eb12 0a08 	adds.w	sl, r2, r8
 800693e:	eb43 0b09 	adc.w	fp, r3, r9
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006950:	4650      	mov	r0, sl
 8006952:	4659      	mov	r1, fp
 8006954:	f7f9 fca4 	bl	80002a0 <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4613      	mov	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006966:	d308      	bcc.n	800697a <UART_SetConfig+0x3de>
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800696e:	d204      	bcs.n	800697a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	60da      	str	r2, [r3, #12]
 8006978:	e0b6      	b.n	8006ae8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006980:	e0b2      	b.n	8006ae8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698a:	d15e      	bne.n	8006a4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800698c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006990:	2b08      	cmp	r3, #8
 8006992:	d828      	bhi.n	80069e6 <UART_SetConfig+0x44a>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0x400>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069c9 	.word	0x080069c9
 80069a4:	080069d1 	.word	0x080069d1
 80069a8:	080069e7 	.word	0x080069e7
 80069ac:	080069d7 	.word	0x080069d7
 80069b0:	080069e7 	.word	0x080069e7
 80069b4:	080069e7 	.word	0x080069e7
 80069b8:	080069e7 	.word	0x080069e7
 80069bc:	080069df 	.word	0x080069df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c0:	f7fd fd0c 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 80069c4:	61f8      	str	r0, [r7, #28]
        break;
 80069c6:	e014      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c8:	f7fd fd1e 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 80069cc:	61f8      	str	r0, [r7, #28]
        break;
 80069ce:	e010      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069d0:	4b4d      	ldr	r3, [pc, #308]	; (8006b08 <UART_SetConfig+0x56c>)
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e00d      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069d6:	f7fd fc69 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 80069da:	61f8      	str	r0, [r7, #28]
        break;
 80069dc:	e009      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e2:	61fb      	str	r3, [r7, #28]
        break;
 80069e4:	e005      	b.n	80069f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d077      	beq.n	8006ae8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	005a      	lsls	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	441a      	add	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d916      	bls.n	8006a42 <UART_SetConfig+0x4a6>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1a:	d212      	bcs.n	8006a42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f023 030f 	bic.w	r3, r3, #15
 8006a24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	8afb      	ldrh	r3, [r7, #22]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	8afa      	ldrh	r2, [r7, #22]
 8006a3e:	60da      	str	r2, [r3, #12]
 8006a40:	e052      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a48:	e04e      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d827      	bhi.n	8006aa2 <UART_SetConfig+0x506>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <UART_SetConfig+0x4bc>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006aa3 	.word	0x08006aa3
 8006a68:	08006a93 	.word	0x08006a93
 8006a6c:	08006aa3 	.word	0x08006aa3
 8006a70:	08006aa3 	.word	0x08006aa3
 8006a74:	08006aa3 	.word	0x08006aa3
 8006a78:	08006a9b 	.word	0x08006a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fd fcae 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8006a80:	61f8      	str	r0, [r7, #28]
        break;
 8006a82:	e014      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a84:	f7fd fcc0 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8006a88:	61f8      	str	r0, [r7, #28]
        break;
 8006a8a:	e010      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a8c:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <UART_SetConfig+0x56c>)
 8006a8e:	61fb      	str	r3, [r7, #28]
        break;
 8006a90:	e00d      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fd fc0b 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8006a96:	61f8      	str	r0, [r7, #28]
        break;
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	61fb      	str	r3, [r7, #28]
        break;
 8006aa0:	e005      	b.n	8006aae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006aac:	bf00      	nop
    }

    if (pclk != 0U)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d019      	beq.n	8006ae8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	085a      	lsrs	r2, r3, #1
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	441a      	add	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b0f      	cmp	r3, #15
 8006acc:	d909      	bls.n	8006ae2 <UART_SetConfig+0x546>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	d205      	bcs.n	8006ae2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60da      	str	r2, [r3, #12]
 8006ae0:	e002      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006af4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b02:	bf00      	nop
 8006b04:	40008000 	.word	0x40008000
 8006b08:	00f42400 	.word	0x00f42400

08006b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01a      	beq.n	8006c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c0a:	d10a      	bne.n	8006c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c60:	f7fa ff58 	bl	8001b14 <HAL_GetTick>
 8006c64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d10e      	bne.n	8006c92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f82d 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e023      	b.n	8006cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d10e      	bne.n	8006cbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f817 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e00d      	b.n	8006cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b09c      	sub	sp, #112	; 0x70
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf2:	e0a5      	b.n	8006e40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	f000 80a1 	beq.w	8006e40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfe:	f7fa ff09 	bl	8001b14 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d302      	bcc.n	8006d14 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d13e      	bne.n	8006d92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d28:	667b      	str	r3, [r7, #100]	; 0x64
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e6      	bne.n	8006d14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3308      	adds	r3, #8
 8006d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d66:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1e5      	bne.n	8006d46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e067      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d04f      	beq.n	8006e40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dae:	d147      	bne.n	8006e40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006db8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e6      	bne.n	8006dba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e0c:	623a      	str	r2, [r7, #32]
 8006e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	69f9      	ldr	r1, [r7, #28]
 8006e12:	6a3a      	ldr	r2, [r7, #32]
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e010      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69da      	ldr	r2, [r3, #28]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	bf0c      	ite	eq
 8006e50:	2301      	moveq	r3, #1
 8006e52:	2300      	movne	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	f43f af4a 	beq.w	8006cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3770      	adds	r7, #112	; 0x70
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <atoi>:
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f000 b9c9 	b.w	8007204 <strtol>
	...

08006e74 <__errno>:
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <__errno+0x8>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	2000000c 	.word	0x2000000c

08006e80 <__libc_init_array>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	4d0d      	ldr	r5, [pc, #52]	; (8006eb8 <__libc_init_array+0x38>)
 8006e84:	4c0d      	ldr	r4, [pc, #52]	; (8006ebc <__libc_init_array+0x3c>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	d109      	bne.n	8006ea4 <__libc_init_array+0x24>
 8006e90:	4d0b      	ldr	r5, [pc, #44]	; (8006ec0 <__libc_init_array+0x40>)
 8006e92:	4c0c      	ldr	r4, [pc, #48]	; (8006ec4 <__libc_init_array+0x44>)
 8006e94:	f001 fd42 	bl	800891c <_init>
 8006e98:	1b64      	subs	r4, r4, r5
 8006e9a:	10a4      	asrs	r4, r4, #2
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	d105      	bne.n	8006eae <__libc_init_array+0x2e>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea8:	4798      	blx	r3
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7ee      	b.n	8006e8c <__libc_init_array+0xc>
 8006eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb2:	4798      	blx	r3
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7f2      	b.n	8006e9e <__libc_init_array+0x1e>
 8006eb8:	08008cb8 	.word	0x08008cb8
 8006ebc:	08008cb8 	.word	0x08008cb8
 8006ec0:	08008cb8 	.word	0x08008cb8
 8006ec4:	08008cbc 	.word	0x08008cbc

08006ec8 <memset>:
 8006ec8:	4402      	add	r2, r0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d100      	bne.n	8006ed2 <memset+0xa>
 8006ed0:	4770      	bx	lr
 8006ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed6:	e7f9      	b.n	8006ecc <memset+0x4>

08006ed8 <iprintf>:
 8006ed8:	b40f      	push	{r0, r1, r2, r3}
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <iprintf+0x2c>)
 8006edc:	b513      	push	{r0, r1, r4, lr}
 8006ede:	681c      	ldr	r4, [r3, #0]
 8006ee0:	b124      	cbz	r4, 8006eec <iprintf+0x14>
 8006ee2:	69a3      	ldr	r3, [r4, #24]
 8006ee4:	b913      	cbnz	r3, 8006eec <iprintf+0x14>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 fb92 	bl	8007610 <__sinit>
 8006eec:	ab05      	add	r3, sp, #20
 8006eee:	9a04      	ldr	r2, [sp, #16]
 8006ef0:	68a1      	ldr	r1, [r4, #8]
 8006ef2:	9301      	str	r3, [sp, #4]
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 ff7f 	bl	8007df8 <_vfiprintf_r>
 8006efa:	b002      	add	sp, #8
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	b004      	add	sp, #16
 8006f02:	4770      	bx	lr
 8006f04:	2000000c 	.word	0x2000000c

08006f08 <_puts_r>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	b118      	cbz	r0, 8006f18 <_puts_r+0x10>
 8006f10:	6983      	ldr	r3, [r0, #24]
 8006f12:	b90b      	cbnz	r3, 8006f18 <_puts_r+0x10>
 8006f14:	f000 fb7c 	bl	8007610 <__sinit>
 8006f18:	69ab      	ldr	r3, [r5, #24]
 8006f1a:	68ac      	ldr	r4, [r5, #8]
 8006f1c:	b913      	cbnz	r3, 8006f24 <_puts_r+0x1c>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 fb76 	bl	8007610 <__sinit>
 8006f24:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <_puts_r+0xd0>)
 8006f26:	429c      	cmp	r4, r3
 8006f28:	d120      	bne.n	8006f6c <_puts_r+0x64>
 8006f2a:	686c      	ldr	r4, [r5, #4]
 8006f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f2e:	07db      	lsls	r3, r3, #31
 8006f30:	d405      	bmi.n	8006f3e <_puts_r+0x36>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	0598      	lsls	r0, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_puts_r+0x36>
 8006f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3a:	f000 fc07 	bl	800774c <__retarget_lock_acquire_recursive>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	0719      	lsls	r1, r3, #28
 8006f42:	d51d      	bpl.n	8006f80 <_puts_r+0x78>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b1db      	cbz	r3, 8006f80 <_puts_r+0x78>
 8006f48:	3e01      	subs	r6, #1
 8006f4a:	68a3      	ldr	r3, [r4, #8]
 8006f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60a3      	str	r3, [r4, #8]
 8006f54:	bb39      	cbnz	r1, 8006fa6 <_puts_r+0x9e>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da38      	bge.n	8006fcc <_puts_r+0xc4>
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	210a      	movs	r1, #10
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f95a 	bl	8007218 <__swbuf_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d011      	beq.n	8006f8c <_puts_r+0x84>
 8006f68:	250a      	movs	r5, #10
 8006f6a:	e011      	b.n	8006f90 <_puts_r+0x88>
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <_puts_r+0xd4>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d101      	bne.n	8006f76 <_puts_r+0x6e>
 8006f72:	68ac      	ldr	r4, [r5, #8]
 8006f74:	e7da      	b.n	8006f2c <_puts_r+0x24>
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <_puts_r+0xd8>)
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	bf08      	it	eq
 8006f7c:	68ec      	ldreq	r4, [r5, #12]
 8006f7e:	e7d5      	b.n	8006f2c <_puts_r+0x24>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f9ac 	bl	80072e0 <__swsetup_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d0dd      	beq.n	8006f48 <_puts_r+0x40>
 8006f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_puts_r+0x9a>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	059b      	lsls	r3, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_puts_r+0x9a>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9e:	f000 fbd6 	bl	800774e <__retarget_lock_release_recursive>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da04      	bge.n	8006fb4 <_puts_r+0xac>
 8006faa:	69a2      	ldr	r2, [r4, #24]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	dc06      	bgt.n	8006fbe <_puts_r+0xb6>
 8006fb0:	290a      	cmp	r1, #10
 8006fb2:	d004      	beq.n	8006fbe <_puts_r+0xb6>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	6022      	str	r2, [r4, #0]
 8006fba:	7019      	strb	r1, [r3, #0]
 8006fbc:	e7c5      	b.n	8006f4a <_puts_r+0x42>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f929 	bl	8007218 <__swbuf_r>
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d1bf      	bne.n	8006f4a <_puts_r+0x42>
 8006fca:	e7df      	b.n	8006f8c <_puts_r+0x84>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	250a      	movs	r5, #10
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	6022      	str	r2, [r4, #0]
 8006fd4:	701d      	strb	r5, [r3, #0]
 8006fd6:	e7db      	b.n	8006f90 <_puts_r+0x88>
 8006fd8:	08008c20 	.word	0x08008c20
 8006fdc:	08008c40 	.word	0x08008c40
 8006fe0:	08008c00 	.word	0x08008c00

08006fe4 <puts>:
 8006fe4:	4b02      	ldr	r3, [pc, #8]	; (8006ff0 <puts+0xc>)
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f7ff bf8d 	b.w	8006f08 <_puts_r>
 8006fee:	bf00      	nop
 8006ff0:	2000000c 	.word	0x2000000c

08006ff4 <siscanf>:
 8006ff4:	b40e      	push	{r1, r2, r3}
 8006ff6:	b510      	push	{r4, lr}
 8006ff8:	b09f      	sub	sp, #124	; 0x7c
 8006ffa:	ac21      	add	r4, sp, #132	; 0x84
 8006ffc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007000:	f854 2b04 	ldr.w	r2, [r4], #4
 8007004:	9201      	str	r2, [sp, #4]
 8007006:	f8ad 101c 	strh.w	r1, [sp, #28]
 800700a:	9004      	str	r0, [sp, #16]
 800700c:	9008      	str	r0, [sp, #32]
 800700e:	f7f9 f8e9 	bl	80001e4 <strlen>
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <siscanf+0x50>)
 8007014:	9005      	str	r0, [sp, #20]
 8007016:	9009      	str	r0, [sp, #36]	; 0x24
 8007018:	930d      	str	r3, [sp, #52]	; 0x34
 800701a:	480b      	ldr	r0, [pc, #44]	; (8007048 <siscanf+0x54>)
 800701c:	9a01      	ldr	r2, [sp, #4]
 800701e:	6800      	ldr	r0, [r0, #0]
 8007020:	9403      	str	r4, [sp, #12]
 8007022:	2300      	movs	r3, #0
 8007024:	9311      	str	r3, [sp, #68]	; 0x44
 8007026:	9316      	str	r3, [sp, #88]	; 0x58
 8007028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800702c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007030:	a904      	add	r1, sp, #16
 8007032:	4623      	mov	r3, r4
 8007034:	f000 fd3e 	bl	8007ab4 <__ssvfiscanf_r>
 8007038:	b01f      	add	sp, #124	; 0x7c
 800703a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703e:	b003      	add	sp, #12
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	0800706f 	.word	0x0800706f
 8007048:	2000000c 	.word	0x2000000c

0800704c <__sread>:
 800704c:	b510      	push	{r4, lr}
 800704e:	460c      	mov	r4, r1
 8007050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007054:	f001 fae6 	bl	8008624 <_read_r>
 8007058:	2800      	cmp	r0, #0
 800705a:	bfab      	itete	ge
 800705c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800705e:	89a3      	ldrhlt	r3, [r4, #12]
 8007060:	181b      	addge	r3, r3, r0
 8007062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007066:	bfac      	ite	ge
 8007068:	6563      	strge	r3, [r4, #84]	; 0x54
 800706a:	81a3      	strhlt	r3, [r4, #12]
 800706c:	bd10      	pop	{r4, pc}

0800706e <__seofread>:
 800706e:	2000      	movs	r0, #0
 8007070:	4770      	bx	lr

08007072 <__swrite>:
 8007072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	461f      	mov	r7, r3
 8007078:	898b      	ldrh	r3, [r1, #12]
 800707a:	05db      	lsls	r3, r3, #23
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4616      	mov	r6, r2
 8007082:	d505      	bpl.n	8007090 <__swrite+0x1e>
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2302      	movs	r3, #2
 800708a:	2200      	movs	r2, #0
 800708c:	f000 fb60 	bl	8007750 <_lseek_r>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	f000 b909 	b.w	80072bc <_write_r>

080070aa <__sseek>:
 80070aa:	b510      	push	{r4, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 fb4d 	bl	8007750 <_lseek_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	bf15      	itete	ne
 80070bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070c6:	81a3      	strheq	r3, [r4, #12]
 80070c8:	bf18      	it	ne
 80070ca:	81a3      	strhne	r3, [r4, #12]
 80070cc:	bd10      	pop	{r4, pc}

080070ce <__sclose>:
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 b973 	b.w	80073bc <_close_r>

080070d6 <strncpy>:
 80070d6:	b510      	push	{r4, lr}
 80070d8:	3901      	subs	r1, #1
 80070da:	4603      	mov	r3, r0
 80070dc:	b132      	cbz	r2, 80070ec <strncpy+0x16>
 80070de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070e2:	f803 4b01 	strb.w	r4, [r3], #1
 80070e6:	3a01      	subs	r2, #1
 80070e8:	2c00      	cmp	r4, #0
 80070ea:	d1f7      	bne.n	80070dc <strncpy+0x6>
 80070ec:	441a      	add	r2, r3
 80070ee:	2100      	movs	r1, #0
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d100      	bne.n	80070f6 <strncpy+0x20>
 80070f4:	bd10      	pop	{r4, pc}
 80070f6:	f803 1b01 	strb.w	r1, [r3], #1
 80070fa:	e7f9      	b.n	80070f0 <strncpy+0x1a>

080070fc <_strtol_l.constprop.0>:
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007102:	d001      	beq.n	8007108 <_strtol_l.constprop.0+0xc>
 8007104:	2b24      	cmp	r3, #36	; 0x24
 8007106:	d906      	bls.n	8007116 <_strtol_l.constprop.0+0x1a>
 8007108:	f7ff feb4 	bl	8006e74 <__errno>
 800710c:	2316      	movs	r3, #22
 800710e:	6003      	str	r3, [r0, #0]
 8007110:	2000      	movs	r0, #0
 8007112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007116:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80071fc <_strtol_l.constprop.0+0x100>
 800711a:	460d      	mov	r5, r1
 800711c:	462e      	mov	r6, r5
 800711e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007122:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007126:	f017 0708 	ands.w	r7, r7, #8
 800712a:	d1f7      	bne.n	800711c <_strtol_l.constprop.0+0x20>
 800712c:	2c2d      	cmp	r4, #45	; 0x2d
 800712e:	d132      	bne.n	8007196 <_strtol_l.constprop.0+0x9a>
 8007130:	782c      	ldrb	r4, [r5, #0]
 8007132:	2701      	movs	r7, #1
 8007134:	1cb5      	adds	r5, r6, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d05b      	beq.n	80071f2 <_strtol_l.constprop.0+0xf6>
 800713a:	2b10      	cmp	r3, #16
 800713c:	d109      	bne.n	8007152 <_strtol_l.constprop.0+0x56>
 800713e:	2c30      	cmp	r4, #48	; 0x30
 8007140:	d107      	bne.n	8007152 <_strtol_l.constprop.0+0x56>
 8007142:	782c      	ldrb	r4, [r5, #0]
 8007144:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007148:	2c58      	cmp	r4, #88	; 0x58
 800714a:	d14d      	bne.n	80071e8 <_strtol_l.constprop.0+0xec>
 800714c:	786c      	ldrb	r4, [r5, #1]
 800714e:	2310      	movs	r3, #16
 8007150:	3502      	adds	r5, #2
 8007152:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007156:	f108 38ff 	add.w	r8, r8, #4294967295
 800715a:	f04f 0c00 	mov.w	ip, #0
 800715e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007162:	4666      	mov	r6, ip
 8007164:	fb03 8a19 	mls	sl, r3, r9, r8
 8007168:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800716c:	f1be 0f09 	cmp.w	lr, #9
 8007170:	d816      	bhi.n	80071a0 <_strtol_l.constprop.0+0xa4>
 8007172:	4674      	mov	r4, lr
 8007174:	42a3      	cmp	r3, r4
 8007176:	dd24      	ble.n	80071c2 <_strtol_l.constprop.0+0xc6>
 8007178:	f1bc 0f00 	cmp.w	ip, #0
 800717c:	db1e      	blt.n	80071bc <_strtol_l.constprop.0+0xc0>
 800717e:	45b1      	cmp	r9, r6
 8007180:	d31c      	bcc.n	80071bc <_strtol_l.constprop.0+0xc0>
 8007182:	d101      	bne.n	8007188 <_strtol_l.constprop.0+0x8c>
 8007184:	45a2      	cmp	sl, r4
 8007186:	db19      	blt.n	80071bc <_strtol_l.constprop.0+0xc0>
 8007188:	fb06 4603 	mla	r6, r6, r3, r4
 800718c:	f04f 0c01 	mov.w	ip, #1
 8007190:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007194:	e7e8      	b.n	8007168 <_strtol_l.constprop.0+0x6c>
 8007196:	2c2b      	cmp	r4, #43	; 0x2b
 8007198:	bf04      	itt	eq
 800719a:	782c      	ldrbeq	r4, [r5, #0]
 800719c:	1cb5      	addeq	r5, r6, #2
 800719e:	e7ca      	b.n	8007136 <_strtol_l.constprop.0+0x3a>
 80071a0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80071a4:	f1be 0f19 	cmp.w	lr, #25
 80071a8:	d801      	bhi.n	80071ae <_strtol_l.constprop.0+0xb2>
 80071aa:	3c37      	subs	r4, #55	; 0x37
 80071ac:	e7e2      	b.n	8007174 <_strtol_l.constprop.0+0x78>
 80071ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80071b2:	f1be 0f19 	cmp.w	lr, #25
 80071b6:	d804      	bhi.n	80071c2 <_strtol_l.constprop.0+0xc6>
 80071b8:	3c57      	subs	r4, #87	; 0x57
 80071ba:	e7db      	b.n	8007174 <_strtol_l.constprop.0+0x78>
 80071bc:	f04f 3cff 	mov.w	ip, #4294967295
 80071c0:	e7e6      	b.n	8007190 <_strtol_l.constprop.0+0x94>
 80071c2:	f1bc 0f00 	cmp.w	ip, #0
 80071c6:	da05      	bge.n	80071d4 <_strtol_l.constprop.0+0xd8>
 80071c8:	2322      	movs	r3, #34	; 0x22
 80071ca:	6003      	str	r3, [r0, #0]
 80071cc:	4646      	mov	r6, r8
 80071ce:	b942      	cbnz	r2, 80071e2 <_strtol_l.constprop.0+0xe6>
 80071d0:	4630      	mov	r0, r6
 80071d2:	e79e      	b.n	8007112 <_strtol_l.constprop.0+0x16>
 80071d4:	b107      	cbz	r7, 80071d8 <_strtol_l.constprop.0+0xdc>
 80071d6:	4276      	negs	r6, r6
 80071d8:	2a00      	cmp	r2, #0
 80071da:	d0f9      	beq.n	80071d0 <_strtol_l.constprop.0+0xd4>
 80071dc:	f1bc 0f00 	cmp.w	ip, #0
 80071e0:	d000      	beq.n	80071e4 <_strtol_l.constprop.0+0xe8>
 80071e2:	1e69      	subs	r1, r5, #1
 80071e4:	6011      	str	r1, [r2, #0]
 80071e6:	e7f3      	b.n	80071d0 <_strtol_l.constprop.0+0xd4>
 80071e8:	2430      	movs	r4, #48	; 0x30
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1b1      	bne.n	8007152 <_strtol_l.constprop.0+0x56>
 80071ee:	2308      	movs	r3, #8
 80071f0:	e7af      	b.n	8007152 <_strtol_l.constprop.0+0x56>
 80071f2:	2c30      	cmp	r4, #48	; 0x30
 80071f4:	d0a5      	beq.n	8007142 <_strtol_l.constprop.0+0x46>
 80071f6:	230a      	movs	r3, #10
 80071f8:	e7ab      	b.n	8007152 <_strtol_l.constprop.0+0x56>
 80071fa:	bf00      	nop
 80071fc:	08008afd 	.word	0x08008afd

08007200 <_strtol_r>:
 8007200:	f7ff bf7c 	b.w	80070fc <_strtol_l.constprop.0>

08007204 <strtol>:
 8007204:	4613      	mov	r3, r2
 8007206:	460a      	mov	r2, r1
 8007208:	4601      	mov	r1, r0
 800720a:	4802      	ldr	r0, [pc, #8]	; (8007214 <strtol+0x10>)
 800720c:	6800      	ldr	r0, [r0, #0]
 800720e:	f7ff bf75 	b.w	80070fc <_strtol_l.constprop.0>
 8007212:	bf00      	nop
 8007214:	2000000c 	.word	0x2000000c

08007218 <__swbuf_r>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	460e      	mov	r6, r1
 800721c:	4614      	mov	r4, r2
 800721e:	4605      	mov	r5, r0
 8007220:	b118      	cbz	r0, 800722a <__swbuf_r+0x12>
 8007222:	6983      	ldr	r3, [r0, #24]
 8007224:	b90b      	cbnz	r3, 800722a <__swbuf_r+0x12>
 8007226:	f000 f9f3 	bl	8007610 <__sinit>
 800722a:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <__swbuf_r+0x98>)
 800722c:	429c      	cmp	r4, r3
 800722e:	d12b      	bne.n	8007288 <__swbuf_r+0x70>
 8007230:	686c      	ldr	r4, [r5, #4]
 8007232:	69a3      	ldr	r3, [r4, #24]
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	071a      	lsls	r2, r3, #28
 800723a:	d52f      	bpl.n	800729c <__swbuf_r+0x84>
 800723c:	6923      	ldr	r3, [r4, #16]
 800723e:	b36b      	cbz	r3, 800729c <__swbuf_r+0x84>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	6820      	ldr	r0, [r4, #0]
 8007244:	1ac0      	subs	r0, r0, r3
 8007246:	6963      	ldr	r3, [r4, #20]
 8007248:	b2f6      	uxtb	r6, r6
 800724a:	4283      	cmp	r3, r0
 800724c:	4637      	mov	r7, r6
 800724e:	dc04      	bgt.n	800725a <__swbuf_r+0x42>
 8007250:	4621      	mov	r1, r4
 8007252:	4628      	mov	r0, r5
 8007254:	f000 f948 	bl	80074e8 <_fflush_r>
 8007258:	bb30      	cbnz	r0, 80072a8 <__swbuf_r+0x90>
 800725a:	68a3      	ldr	r3, [r4, #8]
 800725c:	3b01      	subs	r3, #1
 800725e:	60a3      	str	r3, [r4, #8]
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	6022      	str	r2, [r4, #0]
 8007266:	701e      	strb	r6, [r3, #0]
 8007268:	6963      	ldr	r3, [r4, #20]
 800726a:	3001      	adds	r0, #1
 800726c:	4283      	cmp	r3, r0
 800726e:	d004      	beq.n	800727a <__swbuf_r+0x62>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	07db      	lsls	r3, r3, #31
 8007274:	d506      	bpl.n	8007284 <__swbuf_r+0x6c>
 8007276:	2e0a      	cmp	r6, #10
 8007278:	d104      	bne.n	8007284 <__swbuf_r+0x6c>
 800727a:	4621      	mov	r1, r4
 800727c:	4628      	mov	r0, r5
 800727e:	f000 f933 	bl	80074e8 <_fflush_r>
 8007282:	b988      	cbnz	r0, 80072a8 <__swbuf_r+0x90>
 8007284:	4638      	mov	r0, r7
 8007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <__swbuf_r+0x9c>)
 800728a:	429c      	cmp	r4, r3
 800728c:	d101      	bne.n	8007292 <__swbuf_r+0x7a>
 800728e:	68ac      	ldr	r4, [r5, #8]
 8007290:	e7cf      	b.n	8007232 <__swbuf_r+0x1a>
 8007292:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <__swbuf_r+0xa0>)
 8007294:	429c      	cmp	r4, r3
 8007296:	bf08      	it	eq
 8007298:	68ec      	ldreq	r4, [r5, #12]
 800729a:	e7ca      	b.n	8007232 <__swbuf_r+0x1a>
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f81e 	bl	80072e0 <__swsetup_r>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d0cb      	beq.n	8007240 <__swbuf_r+0x28>
 80072a8:	f04f 37ff 	mov.w	r7, #4294967295
 80072ac:	e7ea      	b.n	8007284 <__swbuf_r+0x6c>
 80072ae:	bf00      	nop
 80072b0:	08008c20 	.word	0x08008c20
 80072b4:	08008c40 	.word	0x08008c40
 80072b8:	08008c00 	.word	0x08008c00

080072bc <_write_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_write_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7fa faef 	bl	80018ae <_write>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_write_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_write_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	2000042c 	.word	0x2000042c

080072e0 <__swsetup_r>:
 80072e0:	4b32      	ldr	r3, [pc, #200]	; (80073ac <__swsetup_r+0xcc>)
 80072e2:	b570      	push	{r4, r5, r6, lr}
 80072e4:	681d      	ldr	r5, [r3, #0]
 80072e6:	4606      	mov	r6, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	b125      	cbz	r5, 80072f6 <__swsetup_r+0x16>
 80072ec:	69ab      	ldr	r3, [r5, #24]
 80072ee:	b913      	cbnz	r3, 80072f6 <__swsetup_r+0x16>
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f98d 	bl	8007610 <__sinit>
 80072f6:	4b2e      	ldr	r3, [pc, #184]	; (80073b0 <__swsetup_r+0xd0>)
 80072f8:	429c      	cmp	r4, r3
 80072fa:	d10f      	bne.n	800731c <__swsetup_r+0x3c>
 80072fc:	686c      	ldr	r4, [r5, #4]
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007304:	0719      	lsls	r1, r3, #28
 8007306:	d42c      	bmi.n	8007362 <__swsetup_r+0x82>
 8007308:	06dd      	lsls	r5, r3, #27
 800730a:	d411      	bmi.n	8007330 <__swsetup_r+0x50>
 800730c:	2309      	movs	r3, #9
 800730e:	6033      	str	r3, [r6, #0]
 8007310:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	f04f 30ff 	mov.w	r0, #4294967295
 800731a:	e03e      	b.n	800739a <__swsetup_r+0xba>
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <__swsetup_r+0xd4>)
 800731e:	429c      	cmp	r4, r3
 8007320:	d101      	bne.n	8007326 <__swsetup_r+0x46>
 8007322:	68ac      	ldr	r4, [r5, #8]
 8007324:	e7eb      	b.n	80072fe <__swsetup_r+0x1e>
 8007326:	4b24      	ldr	r3, [pc, #144]	; (80073b8 <__swsetup_r+0xd8>)
 8007328:	429c      	cmp	r4, r3
 800732a:	bf08      	it	eq
 800732c:	68ec      	ldreq	r4, [r5, #12]
 800732e:	e7e6      	b.n	80072fe <__swsetup_r+0x1e>
 8007330:	0758      	lsls	r0, r3, #29
 8007332:	d512      	bpl.n	800735a <__swsetup_r+0x7a>
 8007334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007336:	b141      	cbz	r1, 800734a <__swsetup_r+0x6a>
 8007338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800733c:	4299      	cmp	r1, r3
 800733e:	d002      	beq.n	8007346 <__swsetup_r+0x66>
 8007340:	4630      	mov	r0, r6
 8007342:	f000 fa7d 	bl	8007840 <_free_r>
 8007346:	2300      	movs	r3, #0
 8007348:	6363      	str	r3, [r4, #52]	; 0x34
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007350:	81a3      	strh	r3, [r4, #12]
 8007352:	2300      	movs	r3, #0
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f043 0308 	orr.w	r3, r3, #8
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	b94b      	cbnz	r3, 800737a <__swsetup_r+0x9a>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800736c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007370:	d003      	beq.n	800737a <__swsetup_r+0x9a>
 8007372:	4621      	mov	r1, r4
 8007374:	4630      	mov	r0, r6
 8007376:	f000 fa23 	bl	80077c0 <__smakebuf_r>
 800737a:	89a0      	ldrh	r0, [r4, #12]
 800737c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007380:	f010 0301 	ands.w	r3, r0, #1
 8007384:	d00a      	beq.n	800739c <__swsetup_r+0xbc>
 8007386:	2300      	movs	r3, #0
 8007388:	60a3      	str	r3, [r4, #8]
 800738a:	6963      	ldr	r3, [r4, #20]
 800738c:	425b      	negs	r3, r3
 800738e:	61a3      	str	r3, [r4, #24]
 8007390:	6923      	ldr	r3, [r4, #16]
 8007392:	b943      	cbnz	r3, 80073a6 <__swsetup_r+0xc6>
 8007394:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007398:	d1ba      	bne.n	8007310 <__swsetup_r+0x30>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	0781      	lsls	r1, r0, #30
 800739e:	bf58      	it	pl
 80073a0:	6963      	ldrpl	r3, [r4, #20]
 80073a2:	60a3      	str	r3, [r4, #8]
 80073a4:	e7f4      	b.n	8007390 <__swsetup_r+0xb0>
 80073a6:	2000      	movs	r0, #0
 80073a8:	e7f7      	b.n	800739a <__swsetup_r+0xba>
 80073aa:	bf00      	nop
 80073ac:	2000000c 	.word	0x2000000c
 80073b0:	08008c20 	.word	0x08008c20
 80073b4:	08008c40 	.word	0x08008c40
 80073b8:	08008c00 	.word	0x08008c00

080073bc <_close_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_close_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa fa8d 	bl	80018e6 <_close>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_close_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_close_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	2000042c 	.word	0x2000042c

080073dc <__sflush_r>:
 80073dc:	898a      	ldrh	r2, [r1, #12]
 80073de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	4605      	mov	r5, r0
 80073e4:	0710      	lsls	r0, r2, #28
 80073e6:	460c      	mov	r4, r1
 80073e8:	d458      	bmi.n	800749c <__sflush_r+0xc0>
 80073ea:	684b      	ldr	r3, [r1, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dc05      	bgt.n	80073fc <__sflush_r+0x20>
 80073f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dc02      	bgt.n	80073fc <__sflush_r+0x20>
 80073f6:	2000      	movs	r0, #0
 80073f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073fe:	2e00      	cmp	r6, #0
 8007400:	d0f9      	beq.n	80073f6 <__sflush_r+0x1a>
 8007402:	2300      	movs	r3, #0
 8007404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007408:	682f      	ldr	r7, [r5, #0]
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	d032      	beq.n	8007474 <__sflush_r+0x98>
 800740e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	075a      	lsls	r2, r3, #29
 8007414:	d505      	bpl.n	8007422 <__sflush_r+0x46>
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	1ac0      	subs	r0, r0, r3
 800741a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800741c:	b10b      	cbz	r3, 8007422 <__sflush_r+0x46>
 800741e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007420:	1ac0      	subs	r0, r0, r3
 8007422:	2300      	movs	r3, #0
 8007424:	4602      	mov	r2, r0
 8007426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007428:	6a21      	ldr	r1, [r4, #32]
 800742a:	4628      	mov	r0, r5
 800742c:	47b0      	blx	r6
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	d106      	bne.n	8007442 <__sflush_r+0x66>
 8007434:	6829      	ldr	r1, [r5, #0]
 8007436:	291d      	cmp	r1, #29
 8007438:	d82c      	bhi.n	8007494 <__sflush_r+0xb8>
 800743a:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <__sflush_r+0x108>)
 800743c:	40ca      	lsrs	r2, r1
 800743e:	07d6      	lsls	r6, r2, #31
 8007440:	d528      	bpl.n	8007494 <__sflush_r+0xb8>
 8007442:	2200      	movs	r2, #0
 8007444:	6062      	str	r2, [r4, #4]
 8007446:	04d9      	lsls	r1, r3, #19
 8007448:	6922      	ldr	r2, [r4, #16]
 800744a:	6022      	str	r2, [r4, #0]
 800744c:	d504      	bpl.n	8007458 <__sflush_r+0x7c>
 800744e:	1c42      	adds	r2, r0, #1
 8007450:	d101      	bne.n	8007456 <__sflush_r+0x7a>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	b903      	cbnz	r3, 8007458 <__sflush_r+0x7c>
 8007456:	6560      	str	r0, [r4, #84]	; 0x54
 8007458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800745a:	602f      	str	r7, [r5, #0]
 800745c:	2900      	cmp	r1, #0
 800745e:	d0ca      	beq.n	80073f6 <__sflush_r+0x1a>
 8007460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007464:	4299      	cmp	r1, r3
 8007466:	d002      	beq.n	800746e <__sflush_r+0x92>
 8007468:	4628      	mov	r0, r5
 800746a:	f000 f9e9 	bl	8007840 <_free_r>
 800746e:	2000      	movs	r0, #0
 8007470:	6360      	str	r0, [r4, #52]	; 0x34
 8007472:	e7c1      	b.n	80073f8 <__sflush_r+0x1c>
 8007474:	6a21      	ldr	r1, [r4, #32]
 8007476:	2301      	movs	r3, #1
 8007478:	4628      	mov	r0, r5
 800747a:	47b0      	blx	r6
 800747c:	1c41      	adds	r1, r0, #1
 800747e:	d1c7      	bne.n	8007410 <__sflush_r+0x34>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0c4      	beq.n	8007410 <__sflush_r+0x34>
 8007486:	2b1d      	cmp	r3, #29
 8007488:	d001      	beq.n	800748e <__sflush_r+0xb2>
 800748a:	2b16      	cmp	r3, #22
 800748c:	d101      	bne.n	8007492 <__sflush_r+0xb6>
 800748e:	602f      	str	r7, [r5, #0]
 8007490:	e7b1      	b.n	80073f6 <__sflush_r+0x1a>
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007498:	81a3      	strh	r3, [r4, #12]
 800749a:	e7ad      	b.n	80073f8 <__sflush_r+0x1c>
 800749c:	690f      	ldr	r7, [r1, #16]
 800749e:	2f00      	cmp	r7, #0
 80074a0:	d0a9      	beq.n	80073f6 <__sflush_r+0x1a>
 80074a2:	0793      	lsls	r3, r2, #30
 80074a4:	680e      	ldr	r6, [r1, #0]
 80074a6:	bf08      	it	eq
 80074a8:	694b      	ldreq	r3, [r1, #20]
 80074aa:	600f      	str	r7, [r1, #0]
 80074ac:	bf18      	it	ne
 80074ae:	2300      	movne	r3, #0
 80074b0:	eba6 0807 	sub.w	r8, r6, r7
 80074b4:	608b      	str	r3, [r1, #8]
 80074b6:	f1b8 0f00 	cmp.w	r8, #0
 80074ba:	dd9c      	ble.n	80073f6 <__sflush_r+0x1a>
 80074bc:	6a21      	ldr	r1, [r4, #32]
 80074be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074c0:	4643      	mov	r3, r8
 80074c2:	463a      	mov	r2, r7
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b0      	blx	r6
 80074c8:	2800      	cmp	r0, #0
 80074ca:	dc06      	bgt.n	80074da <__sflush_r+0xfe>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	e78e      	b.n	80073f8 <__sflush_r+0x1c>
 80074da:	4407      	add	r7, r0
 80074dc:	eba8 0800 	sub.w	r8, r8, r0
 80074e0:	e7e9      	b.n	80074b6 <__sflush_r+0xda>
 80074e2:	bf00      	nop
 80074e4:	20400001 	.word	0x20400001

080074e8 <_fflush_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	690b      	ldr	r3, [r1, #16]
 80074ec:	4605      	mov	r5, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	b913      	cbnz	r3, 80074f8 <_fflush_r+0x10>
 80074f2:	2500      	movs	r5, #0
 80074f4:	4628      	mov	r0, r5
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	b118      	cbz	r0, 8007502 <_fflush_r+0x1a>
 80074fa:	6983      	ldr	r3, [r0, #24]
 80074fc:	b90b      	cbnz	r3, 8007502 <_fflush_r+0x1a>
 80074fe:	f000 f887 	bl	8007610 <__sinit>
 8007502:	4b14      	ldr	r3, [pc, #80]	; (8007554 <_fflush_r+0x6c>)
 8007504:	429c      	cmp	r4, r3
 8007506:	d11b      	bne.n	8007540 <_fflush_r+0x58>
 8007508:	686c      	ldr	r4, [r5, #4]
 800750a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0ef      	beq.n	80074f2 <_fflush_r+0xa>
 8007512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007514:	07d0      	lsls	r0, r2, #31
 8007516:	d404      	bmi.n	8007522 <_fflush_r+0x3a>
 8007518:	0599      	lsls	r1, r3, #22
 800751a:	d402      	bmi.n	8007522 <_fflush_r+0x3a>
 800751c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800751e:	f000 f915 	bl	800774c <__retarget_lock_acquire_recursive>
 8007522:	4628      	mov	r0, r5
 8007524:	4621      	mov	r1, r4
 8007526:	f7ff ff59 	bl	80073dc <__sflush_r>
 800752a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800752c:	07da      	lsls	r2, r3, #31
 800752e:	4605      	mov	r5, r0
 8007530:	d4e0      	bmi.n	80074f4 <_fflush_r+0xc>
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	059b      	lsls	r3, r3, #22
 8007536:	d4dd      	bmi.n	80074f4 <_fflush_r+0xc>
 8007538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753a:	f000 f908 	bl	800774e <__retarget_lock_release_recursive>
 800753e:	e7d9      	b.n	80074f4 <_fflush_r+0xc>
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <_fflush_r+0x70>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <_fflush_r+0x62>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7df      	b.n	800750a <_fflush_r+0x22>
 800754a:	4b04      	ldr	r3, [pc, #16]	; (800755c <_fflush_r+0x74>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7da      	b.n	800750a <_fflush_r+0x22>
 8007554:	08008c20 	.word	0x08008c20
 8007558:	08008c40 	.word	0x08008c40
 800755c:	08008c00 	.word	0x08008c00

08007560 <std>:
 8007560:	2300      	movs	r3, #0
 8007562:	b510      	push	{r4, lr}
 8007564:	4604      	mov	r4, r0
 8007566:	e9c0 3300 	strd	r3, r3, [r0]
 800756a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800756e:	6083      	str	r3, [r0, #8]
 8007570:	8181      	strh	r1, [r0, #12]
 8007572:	6643      	str	r3, [r0, #100]	; 0x64
 8007574:	81c2      	strh	r2, [r0, #14]
 8007576:	6183      	str	r3, [r0, #24]
 8007578:	4619      	mov	r1, r3
 800757a:	2208      	movs	r2, #8
 800757c:	305c      	adds	r0, #92	; 0x5c
 800757e:	f7ff fca3 	bl	8006ec8 <memset>
 8007582:	4b05      	ldr	r3, [pc, #20]	; (8007598 <std+0x38>)
 8007584:	6263      	str	r3, [r4, #36]	; 0x24
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <std+0x3c>)
 8007588:	62a3      	str	r3, [r4, #40]	; 0x28
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <std+0x40>)
 800758c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <std+0x44>)
 8007590:	6224      	str	r4, [r4, #32]
 8007592:	6323      	str	r3, [r4, #48]	; 0x30
 8007594:	bd10      	pop	{r4, pc}
 8007596:	bf00      	nop
 8007598:	0800704d 	.word	0x0800704d
 800759c:	08007073 	.word	0x08007073
 80075a0:	080070ab 	.word	0x080070ab
 80075a4:	080070cf 	.word	0x080070cf

080075a8 <_cleanup_r>:
 80075a8:	4901      	ldr	r1, [pc, #4]	; (80075b0 <_cleanup_r+0x8>)
 80075aa:	f000 b8af 	b.w	800770c <_fwalk_reent>
 80075ae:	bf00      	nop
 80075b0:	080074e9 	.word	0x080074e9

080075b4 <__sfmoreglue>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	2268      	movs	r2, #104	; 0x68
 80075b8:	1e4d      	subs	r5, r1, #1
 80075ba:	4355      	muls	r5, r2
 80075bc:	460e      	mov	r6, r1
 80075be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075c2:	f000 f9a9 	bl	8007918 <_malloc_r>
 80075c6:	4604      	mov	r4, r0
 80075c8:	b140      	cbz	r0, 80075dc <__sfmoreglue+0x28>
 80075ca:	2100      	movs	r1, #0
 80075cc:	e9c0 1600 	strd	r1, r6, [r0]
 80075d0:	300c      	adds	r0, #12
 80075d2:	60a0      	str	r0, [r4, #8]
 80075d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075d8:	f7ff fc76 	bl	8006ec8 <memset>
 80075dc:	4620      	mov	r0, r4
 80075de:	bd70      	pop	{r4, r5, r6, pc}

080075e0 <__sfp_lock_acquire>:
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <__sfp_lock_acquire+0x8>)
 80075e2:	f000 b8b3 	b.w	800774c <__retarget_lock_acquire_recursive>
 80075e6:	bf00      	nop
 80075e8:	20000421 	.word	0x20000421

080075ec <__sfp_lock_release>:
 80075ec:	4801      	ldr	r0, [pc, #4]	; (80075f4 <__sfp_lock_release+0x8>)
 80075ee:	f000 b8ae 	b.w	800774e <__retarget_lock_release_recursive>
 80075f2:	bf00      	nop
 80075f4:	20000421 	.word	0x20000421

080075f8 <__sinit_lock_acquire>:
 80075f8:	4801      	ldr	r0, [pc, #4]	; (8007600 <__sinit_lock_acquire+0x8>)
 80075fa:	f000 b8a7 	b.w	800774c <__retarget_lock_acquire_recursive>
 80075fe:	bf00      	nop
 8007600:	20000422 	.word	0x20000422

08007604 <__sinit_lock_release>:
 8007604:	4801      	ldr	r0, [pc, #4]	; (800760c <__sinit_lock_release+0x8>)
 8007606:	f000 b8a2 	b.w	800774e <__retarget_lock_release_recursive>
 800760a:	bf00      	nop
 800760c:	20000422 	.word	0x20000422

08007610 <__sinit>:
 8007610:	b510      	push	{r4, lr}
 8007612:	4604      	mov	r4, r0
 8007614:	f7ff fff0 	bl	80075f8 <__sinit_lock_acquire>
 8007618:	69a3      	ldr	r3, [r4, #24]
 800761a:	b11b      	cbz	r3, 8007624 <__sinit+0x14>
 800761c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007620:	f7ff bff0 	b.w	8007604 <__sinit_lock_release>
 8007624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007628:	6523      	str	r3, [r4, #80]	; 0x50
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <__sinit+0x68>)
 800762c:	4a13      	ldr	r2, [pc, #76]	; (800767c <__sinit+0x6c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	62a2      	str	r2, [r4, #40]	; 0x28
 8007632:	42a3      	cmp	r3, r4
 8007634:	bf04      	itt	eq
 8007636:	2301      	moveq	r3, #1
 8007638:	61a3      	streq	r3, [r4, #24]
 800763a:	4620      	mov	r0, r4
 800763c:	f000 f820 	bl	8007680 <__sfp>
 8007640:	6060      	str	r0, [r4, #4]
 8007642:	4620      	mov	r0, r4
 8007644:	f000 f81c 	bl	8007680 <__sfp>
 8007648:	60a0      	str	r0, [r4, #8]
 800764a:	4620      	mov	r0, r4
 800764c:	f000 f818 	bl	8007680 <__sfp>
 8007650:	2200      	movs	r2, #0
 8007652:	60e0      	str	r0, [r4, #12]
 8007654:	2104      	movs	r1, #4
 8007656:	6860      	ldr	r0, [r4, #4]
 8007658:	f7ff ff82 	bl	8007560 <std>
 800765c:	68a0      	ldr	r0, [r4, #8]
 800765e:	2201      	movs	r2, #1
 8007660:	2109      	movs	r1, #9
 8007662:	f7ff ff7d 	bl	8007560 <std>
 8007666:	68e0      	ldr	r0, [r4, #12]
 8007668:	2202      	movs	r2, #2
 800766a:	2112      	movs	r1, #18
 800766c:	f7ff ff78 	bl	8007560 <std>
 8007670:	2301      	movs	r3, #1
 8007672:	61a3      	str	r3, [r4, #24]
 8007674:	e7d2      	b.n	800761c <__sinit+0xc>
 8007676:	bf00      	nop
 8007678:	08008af8 	.word	0x08008af8
 800767c:	080075a9 	.word	0x080075a9

08007680 <__sfp>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	4607      	mov	r7, r0
 8007684:	f7ff ffac 	bl	80075e0 <__sfp_lock_acquire>
 8007688:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <__sfp+0x84>)
 800768a:	681e      	ldr	r6, [r3, #0]
 800768c:	69b3      	ldr	r3, [r6, #24]
 800768e:	b913      	cbnz	r3, 8007696 <__sfp+0x16>
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff ffbd 	bl	8007610 <__sinit>
 8007696:	3648      	adds	r6, #72	; 0x48
 8007698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800769c:	3b01      	subs	r3, #1
 800769e:	d503      	bpl.n	80076a8 <__sfp+0x28>
 80076a0:	6833      	ldr	r3, [r6, #0]
 80076a2:	b30b      	cbz	r3, 80076e8 <__sfp+0x68>
 80076a4:	6836      	ldr	r6, [r6, #0]
 80076a6:	e7f7      	b.n	8007698 <__sfp+0x18>
 80076a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076ac:	b9d5      	cbnz	r5, 80076e4 <__sfp+0x64>
 80076ae:	4b16      	ldr	r3, [pc, #88]	; (8007708 <__sfp+0x88>)
 80076b0:	60e3      	str	r3, [r4, #12]
 80076b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076b6:	6665      	str	r5, [r4, #100]	; 0x64
 80076b8:	f000 f847 	bl	800774a <__retarget_lock_init_recursive>
 80076bc:	f7ff ff96 	bl	80075ec <__sfp_lock_release>
 80076c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076c8:	6025      	str	r5, [r4, #0]
 80076ca:	61a5      	str	r5, [r4, #24]
 80076cc:	2208      	movs	r2, #8
 80076ce:	4629      	mov	r1, r5
 80076d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076d4:	f7ff fbf8 	bl	8006ec8 <memset>
 80076d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076e0:	4620      	mov	r0, r4
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e4:	3468      	adds	r4, #104	; 0x68
 80076e6:	e7d9      	b.n	800769c <__sfp+0x1c>
 80076e8:	2104      	movs	r1, #4
 80076ea:	4638      	mov	r0, r7
 80076ec:	f7ff ff62 	bl	80075b4 <__sfmoreglue>
 80076f0:	4604      	mov	r4, r0
 80076f2:	6030      	str	r0, [r6, #0]
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d1d5      	bne.n	80076a4 <__sfp+0x24>
 80076f8:	f7ff ff78 	bl	80075ec <__sfp_lock_release>
 80076fc:	230c      	movs	r3, #12
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	e7ee      	b.n	80076e0 <__sfp+0x60>
 8007702:	bf00      	nop
 8007704:	08008af8 	.word	0x08008af8
 8007708:	ffff0001 	.word	0xffff0001

0800770c <_fwalk_reent>:
 800770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	4606      	mov	r6, r0
 8007712:	4688      	mov	r8, r1
 8007714:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007718:	2700      	movs	r7, #0
 800771a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800771e:	f1b9 0901 	subs.w	r9, r9, #1
 8007722:	d505      	bpl.n	8007730 <_fwalk_reent+0x24>
 8007724:	6824      	ldr	r4, [r4, #0]
 8007726:	2c00      	cmp	r4, #0
 8007728:	d1f7      	bne.n	800771a <_fwalk_reent+0xe>
 800772a:	4638      	mov	r0, r7
 800772c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007730:	89ab      	ldrh	r3, [r5, #12]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d907      	bls.n	8007746 <_fwalk_reent+0x3a>
 8007736:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800773a:	3301      	adds	r3, #1
 800773c:	d003      	beq.n	8007746 <_fwalk_reent+0x3a>
 800773e:	4629      	mov	r1, r5
 8007740:	4630      	mov	r0, r6
 8007742:	47c0      	blx	r8
 8007744:	4307      	orrs	r7, r0
 8007746:	3568      	adds	r5, #104	; 0x68
 8007748:	e7e9      	b.n	800771e <_fwalk_reent+0x12>

0800774a <__retarget_lock_init_recursive>:
 800774a:	4770      	bx	lr

0800774c <__retarget_lock_acquire_recursive>:
 800774c:	4770      	bx	lr

0800774e <__retarget_lock_release_recursive>:
 800774e:	4770      	bx	lr

08007750 <_lseek_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d07      	ldr	r5, [pc, #28]	; (8007770 <_lseek_r+0x20>)
 8007754:	4604      	mov	r4, r0
 8007756:	4608      	mov	r0, r1
 8007758:	4611      	mov	r1, r2
 800775a:	2200      	movs	r2, #0
 800775c:	602a      	str	r2, [r5, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	f7fa f8e8 	bl	8001934 <_lseek>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_lseek_r+0x1e>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_lseek_r+0x1e>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	2000042c 	.word	0x2000042c

08007774 <__swhatbuf_r>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	460e      	mov	r6, r1
 8007778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777c:	2900      	cmp	r1, #0
 800777e:	b096      	sub	sp, #88	; 0x58
 8007780:	4614      	mov	r4, r2
 8007782:	461d      	mov	r5, r3
 8007784:	da08      	bge.n	8007798 <__swhatbuf_r+0x24>
 8007786:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	061a      	lsls	r2, r3, #24
 8007790:	d410      	bmi.n	80077b4 <__swhatbuf_r+0x40>
 8007792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007796:	e00e      	b.n	80077b6 <__swhatbuf_r+0x42>
 8007798:	466a      	mov	r2, sp
 800779a:	f001 f84b 	bl	8008834 <_fstat_r>
 800779e:	2800      	cmp	r0, #0
 80077a0:	dbf1      	blt.n	8007786 <__swhatbuf_r+0x12>
 80077a2:	9a01      	ldr	r2, [sp, #4]
 80077a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ac:	425a      	negs	r2, r3
 80077ae:	415a      	adcs	r2, r3
 80077b0:	602a      	str	r2, [r5, #0]
 80077b2:	e7ee      	b.n	8007792 <__swhatbuf_r+0x1e>
 80077b4:	2340      	movs	r3, #64	; 0x40
 80077b6:	2000      	movs	r0, #0
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	b016      	add	sp, #88	; 0x58
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080077c0 <__smakebuf_r>:
 80077c0:	898b      	ldrh	r3, [r1, #12]
 80077c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077c4:	079d      	lsls	r5, r3, #30
 80077c6:	4606      	mov	r6, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	d507      	bpl.n	80077dc <__smakebuf_r+0x1c>
 80077cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	2301      	movs	r3, #1
 80077d6:	6163      	str	r3, [r4, #20]
 80077d8:	b002      	add	sp, #8
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	ab01      	add	r3, sp, #4
 80077de:	466a      	mov	r2, sp
 80077e0:	f7ff ffc8 	bl	8007774 <__swhatbuf_r>
 80077e4:	9900      	ldr	r1, [sp, #0]
 80077e6:	4605      	mov	r5, r0
 80077e8:	4630      	mov	r0, r6
 80077ea:	f000 f895 	bl	8007918 <_malloc_r>
 80077ee:	b948      	cbnz	r0, 8007804 <__smakebuf_r+0x44>
 80077f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d4ef      	bmi.n	80077d8 <__smakebuf_r+0x18>
 80077f8:	f023 0303 	bic.w	r3, r3, #3
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e7e3      	b.n	80077cc <__smakebuf_r+0xc>
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <__smakebuf_r+0x7c>)
 8007806:	62b3      	str	r3, [r6, #40]	; 0x28
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	6020      	str	r0, [r4, #0]
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	6163      	str	r3, [r4, #20]
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	6120      	str	r0, [r4, #16]
 800781a:	b15b      	cbz	r3, 8007834 <__smakebuf_r+0x74>
 800781c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007820:	4630      	mov	r0, r6
 8007822:	f001 f819 	bl	8008858 <_isatty_r>
 8007826:	b128      	cbz	r0, 8007834 <__smakebuf_r+0x74>
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	89a0      	ldrh	r0, [r4, #12]
 8007836:	4305      	orrs	r5, r0
 8007838:	81a5      	strh	r5, [r4, #12]
 800783a:	e7cd      	b.n	80077d8 <__smakebuf_r+0x18>
 800783c:	080075a9 	.word	0x080075a9

08007840 <_free_r>:
 8007840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007842:	2900      	cmp	r1, #0
 8007844:	d044      	beq.n	80078d0 <_free_r+0x90>
 8007846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f1a1 0404 	sub.w	r4, r1, #4
 8007852:	bfb8      	it	lt
 8007854:	18e4      	addlt	r4, r4, r3
 8007856:	f001 f81d 	bl	8008894 <__malloc_lock>
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <_free_r+0x94>)
 800785c:	9801      	ldr	r0, [sp, #4]
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	b933      	cbnz	r3, 8007870 <_free_r+0x30>
 8007862:	6063      	str	r3, [r4, #4]
 8007864:	6014      	str	r4, [r2, #0]
 8007866:	b003      	add	sp, #12
 8007868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800786c:	f001 b818 	b.w	80088a0 <__malloc_unlock>
 8007870:	42a3      	cmp	r3, r4
 8007872:	d908      	bls.n	8007886 <_free_r+0x46>
 8007874:	6825      	ldr	r5, [r4, #0]
 8007876:	1961      	adds	r1, r4, r5
 8007878:	428b      	cmp	r3, r1
 800787a:	bf01      	itttt	eq
 800787c:	6819      	ldreq	r1, [r3, #0]
 800787e:	685b      	ldreq	r3, [r3, #4]
 8007880:	1949      	addeq	r1, r1, r5
 8007882:	6021      	streq	r1, [r4, #0]
 8007884:	e7ed      	b.n	8007862 <_free_r+0x22>
 8007886:	461a      	mov	r2, r3
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	b10b      	cbz	r3, 8007890 <_free_r+0x50>
 800788c:	42a3      	cmp	r3, r4
 800788e:	d9fa      	bls.n	8007886 <_free_r+0x46>
 8007890:	6811      	ldr	r1, [r2, #0]
 8007892:	1855      	adds	r5, r2, r1
 8007894:	42a5      	cmp	r5, r4
 8007896:	d10b      	bne.n	80078b0 <_free_r+0x70>
 8007898:	6824      	ldr	r4, [r4, #0]
 800789a:	4421      	add	r1, r4
 800789c:	1854      	adds	r4, r2, r1
 800789e:	42a3      	cmp	r3, r4
 80078a0:	6011      	str	r1, [r2, #0]
 80078a2:	d1e0      	bne.n	8007866 <_free_r+0x26>
 80078a4:	681c      	ldr	r4, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	6053      	str	r3, [r2, #4]
 80078aa:	4421      	add	r1, r4
 80078ac:	6011      	str	r1, [r2, #0]
 80078ae:	e7da      	b.n	8007866 <_free_r+0x26>
 80078b0:	d902      	bls.n	80078b8 <_free_r+0x78>
 80078b2:	230c      	movs	r3, #12
 80078b4:	6003      	str	r3, [r0, #0]
 80078b6:	e7d6      	b.n	8007866 <_free_r+0x26>
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	1961      	adds	r1, r4, r5
 80078bc:	428b      	cmp	r3, r1
 80078be:	bf04      	itt	eq
 80078c0:	6819      	ldreq	r1, [r3, #0]
 80078c2:	685b      	ldreq	r3, [r3, #4]
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	bf04      	itt	eq
 80078c8:	1949      	addeq	r1, r1, r5
 80078ca:	6021      	streq	r1, [r4, #0]
 80078cc:	6054      	str	r4, [r2, #4]
 80078ce:	e7ca      	b.n	8007866 <_free_r+0x26>
 80078d0:	b003      	add	sp, #12
 80078d2:	bd30      	pop	{r4, r5, pc}
 80078d4:	20000424 	.word	0x20000424

080078d8 <sbrk_aligned>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4e0e      	ldr	r6, [pc, #56]	; (8007914 <sbrk_aligned+0x3c>)
 80078dc:	460c      	mov	r4, r1
 80078de:	6831      	ldr	r1, [r6, #0]
 80078e0:	4605      	mov	r5, r0
 80078e2:	b911      	cbnz	r1, 80078ea <sbrk_aligned+0x12>
 80078e4:	f000 feb0 	bl	8008648 <_sbrk_r>
 80078e8:	6030      	str	r0, [r6, #0]
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 feab 	bl	8008648 <_sbrk_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d00a      	beq.n	800790c <sbrk_aligned+0x34>
 80078f6:	1cc4      	adds	r4, r0, #3
 80078f8:	f024 0403 	bic.w	r4, r4, #3
 80078fc:	42a0      	cmp	r0, r4
 80078fe:	d007      	beq.n	8007910 <sbrk_aligned+0x38>
 8007900:	1a21      	subs	r1, r4, r0
 8007902:	4628      	mov	r0, r5
 8007904:	f000 fea0 	bl	8008648 <_sbrk_r>
 8007908:	3001      	adds	r0, #1
 800790a:	d101      	bne.n	8007910 <sbrk_aligned+0x38>
 800790c:	f04f 34ff 	mov.w	r4, #4294967295
 8007910:	4620      	mov	r0, r4
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	20000428 	.word	0x20000428

08007918 <_malloc_r>:
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	1ccd      	adds	r5, r1, #3
 800791e:	f025 0503 	bic.w	r5, r5, #3
 8007922:	3508      	adds	r5, #8
 8007924:	2d0c      	cmp	r5, #12
 8007926:	bf38      	it	cc
 8007928:	250c      	movcc	r5, #12
 800792a:	2d00      	cmp	r5, #0
 800792c:	4607      	mov	r7, r0
 800792e:	db01      	blt.n	8007934 <_malloc_r+0x1c>
 8007930:	42a9      	cmp	r1, r5
 8007932:	d905      	bls.n	8007940 <_malloc_r+0x28>
 8007934:	230c      	movs	r3, #12
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	2600      	movs	r6, #0
 800793a:	4630      	mov	r0, r6
 800793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007940:	4e2e      	ldr	r6, [pc, #184]	; (80079fc <_malloc_r+0xe4>)
 8007942:	f000 ffa7 	bl	8008894 <__malloc_lock>
 8007946:	6833      	ldr	r3, [r6, #0]
 8007948:	461c      	mov	r4, r3
 800794a:	bb34      	cbnz	r4, 800799a <_malloc_r+0x82>
 800794c:	4629      	mov	r1, r5
 800794e:	4638      	mov	r0, r7
 8007950:	f7ff ffc2 	bl	80078d8 <sbrk_aligned>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	4604      	mov	r4, r0
 8007958:	d14d      	bne.n	80079f6 <_malloc_r+0xde>
 800795a:	6834      	ldr	r4, [r6, #0]
 800795c:	4626      	mov	r6, r4
 800795e:	2e00      	cmp	r6, #0
 8007960:	d140      	bne.n	80079e4 <_malloc_r+0xcc>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	4631      	mov	r1, r6
 8007966:	4638      	mov	r0, r7
 8007968:	eb04 0803 	add.w	r8, r4, r3
 800796c:	f000 fe6c 	bl	8008648 <_sbrk_r>
 8007970:	4580      	cmp	r8, r0
 8007972:	d13a      	bne.n	80079ea <_malloc_r+0xd2>
 8007974:	6821      	ldr	r1, [r4, #0]
 8007976:	3503      	adds	r5, #3
 8007978:	1a6d      	subs	r5, r5, r1
 800797a:	f025 0503 	bic.w	r5, r5, #3
 800797e:	3508      	adds	r5, #8
 8007980:	2d0c      	cmp	r5, #12
 8007982:	bf38      	it	cc
 8007984:	250c      	movcc	r5, #12
 8007986:	4629      	mov	r1, r5
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff ffa5 	bl	80078d8 <sbrk_aligned>
 800798e:	3001      	adds	r0, #1
 8007990:	d02b      	beq.n	80079ea <_malloc_r+0xd2>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	442b      	add	r3, r5
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	e00e      	b.n	80079b8 <_malloc_r+0xa0>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	1b52      	subs	r2, r2, r5
 800799e:	d41e      	bmi.n	80079de <_malloc_r+0xc6>
 80079a0:	2a0b      	cmp	r2, #11
 80079a2:	d916      	bls.n	80079d2 <_malloc_r+0xba>
 80079a4:	1961      	adds	r1, r4, r5
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	6025      	str	r5, [r4, #0]
 80079aa:	bf18      	it	ne
 80079ac:	6059      	strne	r1, [r3, #4]
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	bf08      	it	eq
 80079b2:	6031      	streq	r1, [r6, #0]
 80079b4:	5162      	str	r2, [r4, r5]
 80079b6:	604b      	str	r3, [r1, #4]
 80079b8:	4638      	mov	r0, r7
 80079ba:	f104 060b 	add.w	r6, r4, #11
 80079be:	f000 ff6f 	bl	80088a0 <__malloc_unlock>
 80079c2:	f026 0607 	bic.w	r6, r6, #7
 80079c6:	1d23      	adds	r3, r4, #4
 80079c8:	1af2      	subs	r2, r6, r3
 80079ca:	d0b6      	beq.n	800793a <_malloc_r+0x22>
 80079cc:	1b9b      	subs	r3, r3, r6
 80079ce:	50a3      	str	r3, [r4, r2]
 80079d0:	e7b3      	b.n	800793a <_malloc_r+0x22>
 80079d2:	6862      	ldr	r2, [r4, #4]
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	bf0c      	ite	eq
 80079d8:	6032      	streq	r2, [r6, #0]
 80079da:	605a      	strne	r2, [r3, #4]
 80079dc:	e7ec      	b.n	80079b8 <_malloc_r+0xa0>
 80079de:	4623      	mov	r3, r4
 80079e0:	6864      	ldr	r4, [r4, #4]
 80079e2:	e7b2      	b.n	800794a <_malloc_r+0x32>
 80079e4:	4634      	mov	r4, r6
 80079e6:	6876      	ldr	r6, [r6, #4]
 80079e8:	e7b9      	b.n	800795e <_malloc_r+0x46>
 80079ea:	230c      	movs	r3, #12
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	4638      	mov	r0, r7
 80079f0:	f000 ff56 	bl	80088a0 <__malloc_unlock>
 80079f4:	e7a1      	b.n	800793a <_malloc_r+0x22>
 80079f6:	6025      	str	r5, [r4, #0]
 80079f8:	e7de      	b.n	80079b8 <_malloc_r+0xa0>
 80079fa:	bf00      	nop
 80079fc:	20000424 	.word	0x20000424

08007a00 <_sungetc_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	1c4b      	adds	r3, r1, #1
 8007a04:	4614      	mov	r4, r2
 8007a06:	d103      	bne.n	8007a10 <_sungetc_r+0x10>
 8007a08:	f04f 35ff 	mov.w	r5, #4294967295
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	8993      	ldrh	r3, [r2, #12]
 8007a12:	f023 0320 	bic.w	r3, r3, #32
 8007a16:	8193      	strh	r3, [r2, #12]
 8007a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a1a:	6852      	ldr	r2, [r2, #4]
 8007a1c:	b2cd      	uxtb	r5, r1
 8007a1e:	b18b      	cbz	r3, 8007a44 <_sungetc_r+0x44>
 8007a20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a22:	4293      	cmp	r3, r2
 8007a24:	dd08      	ble.n	8007a38 <_sungetc_r+0x38>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	1e5a      	subs	r2, r3, #1
 8007a2a:	6022      	str	r2, [r4, #0]
 8007a2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007a30:	6863      	ldr	r3, [r4, #4]
 8007a32:	3301      	adds	r3, #1
 8007a34:	6063      	str	r3, [r4, #4]
 8007a36:	e7e9      	b.n	8007a0c <_sungetc_r+0xc>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	f000 fec1 	bl	80087c0 <__submore>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d0f1      	beq.n	8007a26 <_sungetc_r+0x26>
 8007a42:	e7e1      	b.n	8007a08 <_sungetc_r+0x8>
 8007a44:	6921      	ldr	r1, [r4, #16]
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	b151      	cbz	r1, 8007a60 <_sungetc_r+0x60>
 8007a4a:	4299      	cmp	r1, r3
 8007a4c:	d208      	bcs.n	8007a60 <_sungetc_r+0x60>
 8007a4e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007a52:	42a9      	cmp	r1, r5
 8007a54:	d104      	bne.n	8007a60 <_sungetc_r+0x60>
 8007a56:	3b01      	subs	r3, #1
 8007a58:	3201      	adds	r2, #1
 8007a5a:	6023      	str	r3, [r4, #0]
 8007a5c:	6062      	str	r2, [r4, #4]
 8007a5e:	e7d5      	b.n	8007a0c <_sungetc_r+0xc>
 8007a60:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a68:	6363      	str	r3, [r4, #52]	; 0x34
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007a6e:	4623      	mov	r3, r4
 8007a70:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	2301      	movs	r3, #1
 8007a78:	e7dc      	b.n	8007a34 <_sungetc_r+0x34>

08007a7a <__ssrefill_r>:
 8007a7a:	b510      	push	{r4, lr}
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007a80:	b169      	cbz	r1, 8007a9e <__ssrefill_r+0x24>
 8007a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a86:	4299      	cmp	r1, r3
 8007a88:	d001      	beq.n	8007a8e <__ssrefill_r+0x14>
 8007a8a:	f7ff fed9 	bl	8007840 <_free_r>
 8007a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a90:	6063      	str	r3, [r4, #4]
 8007a92:	2000      	movs	r0, #0
 8007a94:	6360      	str	r0, [r4, #52]	; 0x34
 8007a96:	b113      	cbz	r3, 8007a9e <__ssrefill_r+0x24>
 8007a98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6063      	str	r3, [r4, #4]
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	f043 0320 	orr.w	r3, r3, #32
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab2:	e7f3      	b.n	8007a9c <__ssrefill_r+0x22>

08007ab4 <__ssvfiscanf_r>:
 8007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007abe:	2100      	movs	r1, #0
 8007ac0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007ac4:	49a6      	ldr	r1, [pc, #664]	; (8007d60 <__ssvfiscanf_r+0x2ac>)
 8007ac6:	91a0      	str	r1, [sp, #640]	; 0x280
 8007ac8:	f10d 0804 	add.w	r8, sp, #4
 8007acc:	49a5      	ldr	r1, [pc, #660]	; (8007d64 <__ssvfiscanf_r+0x2b0>)
 8007ace:	4fa6      	ldr	r7, [pc, #664]	; (8007d68 <__ssvfiscanf_r+0x2b4>)
 8007ad0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007d6c <__ssvfiscanf_r+0x2b8>
 8007ad4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007ad8:	4606      	mov	r6, r0
 8007ada:	91a1      	str	r1, [sp, #644]	; 0x284
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	7813      	ldrb	r3, [r2, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 815a 	beq.w	8007d9a <__ssvfiscanf_r+0x2e6>
 8007ae6:	5dd9      	ldrb	r1, [r3, r7]
 8007ae8:	f011 0108 	ands.w	r1, r1, #8
 8007aec:	f102 0501 	add.w	r5, r2, #1
 8007af0:	d019      	beq.n	8007b26 <__ssvfiscanf_r+0x72>
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd0f      	ble.n	8007b18 <__ssvfiscanf_r+0x64>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	5cba      	ldrb	r2, [r7, r2]
 8007afe:	0712      	lsls	r2, r2, #28
 8007b00:	d401      	bmi.n	8007b06 <__ssvfiscanf_r+0x52>
 8007b02:	462a      	mov	r2, r5
 8007b04:	e7eb      	b.n	8007ade <__ssvfiscanf_r+0x2a>
 8007b06:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b08:	3201      	adds	r2, #1
 8007b0a:	9245      	str	r2, [sp, #276]	; 0x114
 8007b0c:	6862      	ldr	r2, [r4, #4]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	3a01      	subs	r2, #1
 8007b12:	6062      	str	r2, [r4, #4]
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	e7ec      	b.n	8007af2 <__ssvfiscanf_r+0x3e>
 8007b18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	4798      	blx	r3
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d0e9      	beq.n	8007af8 <__ssvfiscanf_r+0x44>
 8007b24:	e7ed      	b.n	8007b02 <__ssvfiscanf_r+0x4e>
 8007b26:	2b25      	cmp	r3, #37	; 0x25
 8007b28:	d012      	beq.n	8007b50 <__ssvfiscanf_r+0x9c>
 8007b2a:	469a      	mov	sl, r3
 8007b2c:	6863      	ldr	r3, [r4, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f340 8091 	ble.w	8007c56 <__ssvfiscanf_r+0x1a2>
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	7813      	ldrb	r3, [r2, #0]
 8007b38:	4553      	cmp	r3, sl
 8007b3a:	f040 812e 	bne.w	8007d9a <__ssvfiscanf_r+0x2e6>
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	6063      	str	r3, [r4, #4]
 8007b44:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007b46:	3201      	adds	r2, #1
 8007b48:	3301      	adds	r3, #1
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	9345      	str	r3, [sp, #276]	; 0x114
 8007b4e:	e7d8      	b.n	8007b02 <__ssvfiscanf_r+0x4e>
 8007b50:	9141      	str	r1, [sp, #260]	; 0x104
 8007b52:	9143      	str	r1, [sp, #268]	; 0x10c
 8007b54:	7853      	ldrb	r3, [r2, #1]
 8007b56:	2b2a      	cmp	r3, #42	; 0x2a
 8007b58:	bf02      	ittt	eq
 8007b5a:	2310      	moveq	r3, #16
 8007b5c:	1c95      	addeq	r5, r2, #2
 8007b5e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007b60:	220a      	movs	r2, #10
 8007b62:	46aa      	mov	sl, r5
 8007b64:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007b68:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007b6c:	2b09      	cmp	r3, #9
 8007b6e:	d91d      	bls.n	8007bac <__ssvfiscanf_r+0xf8>
 8007b70:	487e      	ldr	r0, [pc, #504]	; (8007d6c <__ssvfiscanf_r+0x2b8>)
 8007b72:	2203      	movs	r2, #3
 8007b74:	f7f8 fb44 	bl	8000200 <memchr>
 8007b78:	b140      	cbz	r0, 8007b8c <__ssvfiscanf_r+0xd8>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	eba0 0009 	sub.w	r0, r0, r9
 8007b80:	fa03 f000 	lsl.w	r0, r3, r0
 8007b84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b86:	4318      	orrs	r0, r3
 8007b88:	9041      	str	r0, [sp, #260]	; 0x104
 8007b8a:	4655      	mov	r5, sl
 8007b8c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b90:	2b78      	cmp	r3, #120	; 0x78
 8007b92:	d806      	bhi.n	8007ba2 <__ssvfiscanf_r+0xee>
 8007b94:	2b57      	cmp	r3, #87	; 0x57
 8007b96:	d810      	bhi.n	8007bba <__ssvfiscanf_r+0x106>
 8007b98:	2b25      	cmp	r3, #37	; 0x25
 8007b9a:	d0c6      	beq.n	8007b2a <__ssvfiscanf_r+0x76>
 8007b9c:	d856      	bhi.n	8007c4c <__ssvfiscanf_r+0x198>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d064      	beq.n	8007c6c <__ssvfiscanf_r+0x1b8>
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	9347      	str	r3, [sp, #284]	; 0x11c
 8007ba6:	230a      	movs	r3, #10
 8007ba8:	9342      	str	r3, [sp, #264]	; 0x108
 8007baa:	e071      	b.n	8007c90 <__ssvfiscanf_r+0x1dc>
 8007bac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007bae:	fb02 1103 	mla	r1, r2, r3, r1
 8007bb2:	3930      	subs	r1, #48	; 0x30
 8007bb4:	9143      	str	r1, [sp, #268]	; 0x10c
 8007bb6:	4655      	mov	r5, sl
 8007bb8:	e7d3      	b.n	8007b62 <__ssvfiscanf_r+0xae>
 8007bba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007bbe:	2a20      	cmp	r2, #32
 8007bc0:	d8ef      	bhi.n	8007ba2 <__ssvfiscanf_r+0xee>
 8007bc2:	a101      	add	r1, pc, #4	; (adr r1, 8007bc8 <__ssvfiscanf_r+0x114>)
 8007bc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007bc8:	08007c7b 	.word	0x08007c7b
 8007bcc:	08007ba3 	.word	0x08007ba3
 8007bd0:	08007ba3 	.word	0x08007ba3
 8007bd4:	08007cd9 	.word	0x08007cd9
 8007bd8:	08007ba3 	.word	0x08007ba3
 8007bdc:	08007ba3 	.word	0x08007ba3
 8007be0:	08007ba3 	.word	0x08007ba3
 8007be4:	08007ba3 	.word	0x08007ba3
 8007be8:	08007ba3 	.word	0x08007ba3
 8007bec:	08007ba3 	.word	0x08007ba3
 8007bf0:	08007ba3 	.word	0x08007ba3
 8007bf4:	08007cef 	.word	0x08007cef
 8007bf8:	08007cc5 	.word	0x08007cc5
 8007bfc:	08007c53 	.word	0x08007c53
 8007c00:	08007c53 	.word	0x08007c53
 8007c04:	08007c53 	.word	0x08007c53
 8007c08:	08007ba3 	.word	0x08007ba3
 8007c0c:	08007cc9 	.word	0x08007cc9
 8007c10:	08007ba3 	.word	0x08007ba3
 8007c14:	08007ba3 	.word	0x08007ba3
 8007c18:	08007ba3 	.word	0x08007ba3
 8007c1c:	08007ba3 	.word	0x08007ba3
 8007c20:	08007cff 	.word	0x08007cff
 8007c24:	08007cd1 	.word	0x08007cd1
 8007c28:	08007c73 	.word	0x08007c73
 8007c2c:	08007ba3 	.word	0x08007ba3
 8007c30:	08007ba3 	.word	0x08007ba3
 8007c34:	08007cfb 	.word	0x08007cfb
 8007c38:	08007ba3 	.word	0x08007ba3
 8007c3c:	08007cc5 	.word	0x08007cc5
 8007c40:	08007ba3 	.word	0x08007ba3
 8007c44:	08007ba3 	.word	0x08007ba3
 8007c48:	08007c7b 	.word	0x08007c7b
 8007c4c:	3b45      	subs	r3, #69	; 0x45
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d8a7      	bhi.n	8007ba2 <__ssvfiscanf_r+0xee>
 8007c52:	2305      	movs	r3, #5
 8007c54:	e01b      	b.n	8007c8e <__ssvfiscanf_r+0x1da>
 8007c56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4798      	blx	r3
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f43f af68 	beq.w	8007b34 <__ssvfiscanf_r+0x80>
 8007c64:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f040 808d 	bne.w	8007d86 <__ssvfiscanf_r+0x2d2>
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	e08f      	b.n	8007d92 <__ssvfiscanf_r+0x2de>
 8007c72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007c74:	f042 0220 	orr.w	r2, r2, #32
 8007c78:	9241      	str	r2, [sp, #260]	; 0x104
 8007c7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c80:	9241      	str	r2, [sp, #260]	; 0x104
 8007c82:	2210      	movs	r2, #16
 8007c84:	2b6f      	cmp	r3, #111	; 0x6f
 8007c86:	9242      	str	r2, [sp, #264]	; 0x108
 8007c88:	bf34      	ite	cc
 8007c8a:	2303      	movcc	r3, #3
 8007c8c:	2304      	movcs	r3, #4
 8007c8e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd42      	ble.n	8007d1c <__ssvfiscanf_r+0x268>
 8007c96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007c98:	0659      	lsls	r1, r3, #25
 8007c9a:	d404      	bmi.n	8007ca6 <__ssvfiscanf_r+0x1f2>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	5cba      	ldrb	r2, [r7, r2]
 8007ca2:	0712      	lsls	r2, r2, #28
 8007ca4:	d441      	bmi.n	8007d2a <__ssvfiscanf_r+0x276>
 8007ca6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	dc50      	bgt.n	8007d4e <__ssvfiscanf_r+0x29a>
 8007cac:	466b      	mov	r3, sp
 8007cae:	4622      	mov	r2, r4
 8007cb0:	a941      	add	r1, sp, #260	; 0x104
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f000 fb64 	bl	8008380 <_scanf_chars>
 8007cb8:	2801      	cmp	r0, #1
 8007cba:	d06e      	beq.n	8007d9a <__ssvfiscanf_r+0x2e6>
 8007cbc:	2802      	cmp	r0, #2
 8007cbe:	f47f af20 	bne.w	8007b02 <__ssvfiscanf_r+0x4e>
 8007cc2:	e7cf      	b.n	8007c64 <__ssvfiscanf_r+0x1b0>
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	e7dd      	b.n	8007c84 <__ssvfiscanf_r+0x1d0>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9342      	str	r3, [sp, #264]	; 0x108
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e7de      	b.n	8007c8e <__ssvfiscanf_r+0x1da>
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	9342      	str	r3, [sp, #264]	; 0x108
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	e7da      	b.n	8007c8e <__ssvfiscanf_r+0x1da>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f000 fcc4 	bl	8008668 <__sccl>
 8007ce0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce6:	9341      	str	r3, [sp, #260]	; 0x104
 8007ce8:	4605      	mov	r5, r0
 8007cea:	2301      	movs	r3, #1
 8007cec:	e7cf      	b.n	8007c8e <__ssvfiscanf_r+0x1da>
 8007cee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf4:	9341      	str	r3, [sp, #260]	; 0x104
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e7c9      	b.n	8007c8e <__ssvfiscanf_r+0x1da>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e7c7      	b.n	8007c8e <__ssvfiscanf_r+0x1da>
 8007cfe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007d00:	06c3      	lsls	r3, r0, #27
 8007d02:	f53f aefe 	bmi.w	8007b02 <__ssvfiscanf_r+0x4e>
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d0a:	1d19      	adds	r1, r3, #4
 8007d0c:	9100      	str	r1, [sp, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f010 0f01 	tst.w	r0, #1
 8007d14:	bf14      	ite	ne
 8007d16:	801a      	strhne	r2, [r3, #0]
 8007d18:	601a      	streq	r2, [r3, #0]
 8007d1a:	e6f2      	b.n	8007b02 <__ssvfiscanf_r+0x4e>
 8007d1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4630      	mov	r0, r6
 8007d22:	4798      	blx	r3
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d0b6      	beq.n	8007c96 <__ssvfiscanf_r+0x1e2>
 8007d28:	e79c      	b.n	8007c64 <__ssvfiscanf_r+0x1b0>
 8007d2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d2c:	3201      	adds	r2, #1
 8007d2e:	9245      	str	r2, [sp, #276]	; 0x114
 8007d30:	6862      	ldr	r2, [r4, #4]
 8007d32:	3a01      	subs	r2, #1
 8007d34:	2a00      	cmp	r2, #0
 8007d36:	6062      	str	r2, [r4, #4]
 8007d38:	dd02      	ble.n	8007d40 <__ssvfiscanf_r+0x28c>
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	e7ad      	b.n	8007c9c <__ssvfiscanf_r+0x1e8>
 8007d40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d42:	4621      	mov	r1, r4
 8007d44:	4630      	mov	r0, r6
 8007d46:	4798      	blx	r3
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d0a7      	beq.n	8007c9c <__ssvfiscanf_r+0x1e8>
 8007d4c:	e78a      	b.n	8007c64 <__ssvfiscanf_r+0x1b0>
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	dc0e      	bgt.n	8007d70 <__ssvfiscanf_r+0x2bc>
 8007d52:	466b      	mov	r3, sp
 8007d54:	4622      	mov	r2, r4
 8007d56:	a941      	add	r1, sp, #260	; 0x104
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f000 fb6b 	bl	8008434 <_scanf_i>
 8007d5e:	e7ab      	b.n	8007cb8 <__ssvfiscanf_r+0x204>
 8007d60:	08007a01 	.word	0x08007a01
 8007d64:	08007a7b 	.word	0x08007a7b
 8007d68:	08008afd 	.word	0x08008afd
 8007d6c:	08008c60 	.word	0x08008c60
 8007d70:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <__ssvfiscanf_r+0x2ec>)
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f43f aec5 	beq.w	8007b02 <__ssvfiscanf_r+0x4e>
 8007d78:	466b      	mov	r3, sp
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	a941      	add	r1, sp, #260	; 0x104
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f3af 8000 	nop.w
 8007d84:	e798      	b.n	8007cb8 <__ssvfiscanf_r+0x204>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d8c:	bf18      	it	ne
 8007d8e:	f04f 30ff 	movne.w	r0, #4294967295
 8007d92:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007d9c:	e7f9      	b.n	8007d92 <__ssvfiscanf_r+0x2de>
 8007d9e:	bf00      	nop
 8007da0:	00000000 	.word	0x00000000

08007da4 <__sfputc_r>:
 8007da4:	6893      	ldr	r3, [r2, #8]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	b410      	push	{r4}
 8007dac:	6093      	str	r3, [r2, #8]
 8007dae:	da08      	bge.n	8007dc2 <__sfputc_r+0x1e>
 8007db0:	6994      	ldr	r4, [r2, #24]
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	db01      	blt.n	8007dba <__sfputc_r+0x16>
 8007db6:	290a      	cmp	r1, #10
 8007db8:	d103      	bne.n	8007dc2 <__sfputc_r+0x1e>
 8007dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dbe:	f7ff ba2b 	b.w	8007218 <__swbuf_r>
 8007dc2:	6813      	ldr	r3, [r2, #0]
 8007dc4:	1c58      	adds	r0, r3, #1
 8007dc6:	6010      	str	r0, [r2, #0]
 8007dc8:	7019      	strb	r1, [r3, #0]
 8007dca:	4608      	mov	r0, r1
 8007dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <__sfputs_r>:
 8007dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	460f      	mov	r7, r1
 8007dd8:	4614      	mov	r4, r2
 8007dda:	18d5      	adds	r5, r2, r3
 8007ddc:	42ac      	cmp	r4, r5
 8007dde:	d101      	bne.n	8007de4 <__sfputs_r+0x12>
 8007de0:	2000      	movs	r0, #0
 8007de2:	e007      	b.n	8007df4 <__sfputs_r+0x22>
 8007de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de8:	463a      	mov	r2, r7
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7ff ffda 	bl	8007da4 <__sfputc_r>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d1f3      	bne.n	8007ddc <__sfputs_r+0xa>
 8007df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007df8 <_vfiprintf_r>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	b09d      	sub	sp, #116	; 0x74
 8007e00:	4614      	mov	r4, r2
 8007e02:	4698      	mov	r8, r3
 8007e04:	4606      	mov	r6, r0
 8007e06:	b118      	cbz	r0, 8007e10 <_vfiprintf_r+0x18>
 8007e08:	6983      	ldr	r3, [r0, #24]
 8007e0a:	b90b      	cbnz	r3, 8007e10 <_vfiprintf_r+0x18>
 8007e0c:	f7ff fc00 	bl	8007610 <__sinit>
 8007e10:	4b89      	ldr	r3, [pc, #548]	; (8008038 <_vfiprintf_r+0x240>)
 8007e12:	429d      	cmp	r5, r3
 8007e14:	d11b      	bne.n	8007e4e <_vfiprintf_r+0x56>
 8007e16:	6875      	ldr	r5, [r6, #4]
 8007e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e1a:	07d9      	lsls	r1, r3, #31
 8007e1c:	d405      	bmi.n	8007e2a <_vfiprintf_r+0x32>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	059a      	lsls	r2, r3, #22
 8007e22:	d402      	bmi.n	8007e2a <_vfiprintf_r+0x32>
 8007e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e26:	f7ff fc91 	bl	800774c <__retarget_lock_acquire_recursive>
 8007e2a:	89ab      	ldrh	r3, [r5, #12]
 8007e2c:	071b      	lsls	r3, r3, #28
 8007e2e:	d501      	bpl.n	8007e34 <_vfiprintf_r+0x3c>
 8007e30:	692b      	ldr	r3, [r5, #16]
 8007e32:	b9eb      	cbnz	r3, 8007e70 <_vfiprintf_r+0x78>
 8007e34:	4629      	mov	r1, r5
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff fa52 	bl	80072e0 <__swsetup_r>
 8007e3c:	b1c0      	cbz	r0, 8007e70 <_vfiprintf_r+0x78>
 8007e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e40:	07dc      	lsls	r4, r3, #31
 8007e42:	d50e      	bpl.n	8007e62 <_vfiprintf_r+0x6a>
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	b01d      	add	sp, #116	; 0x74
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	4b7b      	ldr	r3, [pc, #492]	; (800803c <_vfiprintf_r+0x244>)
 8007e50:	429d      	cmp	r5, r3
 8007e52:	d101      	bne.n	8007e58 <_vfiprintf_r+0x60>
 8007e54:	68b5      	ldr	r5, [r6, #8]
 8007e56:	e7df      	b.n	8007e18 <_vfiprintf_r+0x20>
 8007e58:	4b79      	ldr	r3, [pc, #484]	; (8008040 <_vfiprintf_r+0x248>)
 8007e5a:	429d      	cmp	r5, r3
 8007e5c:	bf08      	it	eq
 8007e5e:	68f5      	ldreq	r5, [r6, #12]
 8007e60:	e7da      	b.n	8007e18 <_vfiprintf_r+0x20>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	0598      	lsls	r0, r3, #22
 8007e66:	d4ed      	bmi.n	8007e44 <_vfiprintf_r+0x4c>
 8007e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e6a:	f7ff fc70 	bl	800774e <__retarget_lock_release_recursive>
 8007e6e:	e7e9      	b.n	8007e44 <_vfiprintf_r+0x4c>
 8007e70:	2300      	movs	r3, #0
 8007e72:	9309      	str	r3, [sp, #36]	; 0x24
 8007e74:	2320      	movs	r3, #32
 8007e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e7e:	2330      	movs	r3, #48	; 0x30
 8007e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008044 <_vfiprintf_r+0x24c>
 8007e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e88:	f04f 0901 	mov.w	r9, #1
 8007e8c:	4623      	mov	r3, r4
 8007e8e:	469a      	mov	sl, r3
 8007e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e94:	b10a      	cbz	r2, 8007e9a <_vfiprintf_r+0xa2>
 8007e96:	2a25      	cmp	r2, #37	; 0x25
 8007e98:	d1f9      	bne.n	8007e8e <_vfiprintf_r+0x96>
 8007e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e9e:	d00b      	beq.n	8007eb8 <_vfiprintf_r+0xc0>
 8007ea0:	465b      	mov	r3, fp
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f7ff ff93 	bl	8007dd2 <__sfputs_r>
 8007eac:	3001      	adds	r0, #1
 8007eae:	f000 80aa 	beq.w	8008006 <_vfiprintf_r+0x20e>
 8007eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb4:	445a      	add	r2, fp
 8007eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8007eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80a2 	beq.w	8008006 <_vfiprintf_r+0x20e>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ecc:	f10a 0a01 	add.w	sl, sl, #1
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	9307      	str	r3, [sp, #28]
 8007ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8007eda:	4654      	mov	r4, sl
 8007edc:	2205      	movs	r2, #5
 8007ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee2:	4858      	ldr	r0, [pc, #352]	; (8008044 <_vfiprintf_r+0x24c>)
 8007ee4:	f7f8 f98c 	bl	8000200 <memchr>
 8007ee8:	9a04      	ldr	r2, [sp, #16]
 8007eea:	b9d8      	cbnz	r0, 8007f24 <_vfiprintf_r+0x12c>
 8007eec:	06d1      	lsls	r1, r2, #27
 8007eee:	bf44      	itt	mi
 8007ef0:	2320      	movmi	r3, #32
 8007ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef6:	0713      	lsls	r3, r2, #28
 8007ef8:	bf44      	itt	mi
 8007efa:	232b      	movmi	r3, #43	; 0x2b
 8007efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f00:	f89a 3000 	ldrb.w	r3, [sl]
 8007f04:	2b2a      	cmp	r3, #42	; 0x2a
 8007f06:	d015      	beq.n	8007f34 <_vfiprintf_r+0x13c>
 8007f08:	9a07      	ldr	r2, [sp, #28]
 8007f0a:	4654      	mov	r4, sl
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f04f 0c0a 	mov.w	ip, #10
 8007f12:	4621      	mov	r1, r4
 8007f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f18:	3b30      	subs	r3, #48	; 0x30
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	d94e      	bls.n	8007fbc <_vfiprintf_r+0x1c4>
 8007f1e:	b1b0      	cbz	r0, 8007f4e <_vfiprintf_r+0x156>
 8007f20:	9207      	str	r2, [sp, #28]
 8007f22:	e014      	b.n	8007f4e <_vfiprintf_r+0x156>
 8007f24:	eba0 0308 	sub.w	r3, r0, r8
 8007f28:	fa09 f303 	lsl.w	r3, r9, r3
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	46a2      	mov	sl, r4
 8007f32:	e7d2      	b.n	8007eda <_vfiprintf_r+0xe2>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	1d19      	adds	r1, r3, #4
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	9103      	str	r1, [sp, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bfbb      	ittet	lt
 8007f40:	425b      	neglt	r3, r3
 8007f42:	f042 0202 	orrlt.w	r2, r2, #2
 8007f46:	9307      	strge	r3, [sp, #28]
 8007f48:	9307      	strlt	r3, [sp, #28]
 8007f4a:	bfb8      	it	lt
 8007f4c:	9204      	strlt	r2, [sp, #16]
 8007f4e:	7823      	ldrb	r3, [r4, #0]
 8007f50:	2b2e      	cmp	r3, #46	; 0x2e
 8007f52:	d10c      	bne.n	8007f6e <_vfiprintf_r+0x176>
 8007f54:	7863      	ldrb	r3, [r4, #1]
 8007f56:	2b2a      	cmp	r3, #42	; 0x2a
 8007f58:	d135      	bne.n	8007fc6 <_vfiprintf_r+0x1ce>
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	1d1a      	adds	r2, r3, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	9203      	str	r2, [sp, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bfb8      	it	lt
 8007f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f6a:	3402      	adds	r4, #2
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008054 <_vfiprintf_r+0x25c>
 8007f72:	7821      	ldrb	r1, [r4, #0]
 8007f74:	2203      	movs	r2, #3
 8007f76:	4650      	mov	r0, sl
 8007f78:	f7f8 f942 	bl	8000200 <memchr>
 8007f7c:	b140      	cbz	r0, 8007f90 <_vfiprintf_r+0x198>
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	eba0 000a 	sub.w	r0, r0, sl
 8007f84:	fa03 f000 	lsl.w	r0, r3, r0
 8007f88:	9b04      	ldr	r3, [sp, #16]
 8007f8a:	4303      	orrs	r3, r0
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f94:	482c      	ldr	r0, [pc, #176]	; (8008048 <_vfiprintf_r+0x250>)
 8007f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	f7f8 f930 	bl	8000200 <memchr>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d03f      	beq.n	8008024 <_vfiprintf_r+0x22c>
 8007fa4:	4b29      	ldr	r3, [pc, #164]	; (800804c <_vfiprintf_r+0x254>)
 8007fa6:	bb1b      	cbnz	r3, 8007ff0 <_vfiprintf_r+0x1f8>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	3307      	adds	r3, #7
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	443b      	add	r3, r7
 8007fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fba:	e767      	b.n	8007e8c <_vfiprintf_r+0x94>
 8007fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	e7a5      	b.n	8007f12 <_vfiprintf_r+0x11a>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	3401      	adds	r4, #1
 8007fca:	9305      	str	r3, [sp, #20]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f04f 0c0a 	mov.w	ip, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd8:	3a30      	subs	r2, #48	; 0x30
 8007fda:	2a09      	cmp	r2, #9
 8007fdc:	d903      	bls.n	8007fe6 <_vfiprintf_r+0x1ee>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c5      	beq.n	8007f6e <_vfiprintf_r+0x176>
 8007fe2:	9105      	str	r1, [sp, #20]
 8007fe4:	e7c3      	b.n	8007f6e <_vfiprintf_r+0x176>
 8007fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fea:	4604      	mov	r4, r0
 8007fec:	2301      	movs	r3, #1
 8007fee:	e7f0      	b.n	8007fd2 <_vfiprintf_r+0x1da>
 8007ff0:	ab03      	add	r3, sp, #12
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4b16      	ldr	r3, [pc, #88]	; (8008050 <_vfiprintf_r+0x258>)
 8007ff8:	a904      	add	r1, sp, #16
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f3af 8000 	nop.w
 8008000:	4607      	mov	r7, r0
 8008002:	1c78      	adds	r0, r7, #1
 8008004:	d1d6      	bne.n	8007fb4 <_vfiprintf_r+0x1bc>
 8008006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008008:	07d9      	lsls	r1, r3, #31
 800800a:	d405      	bmi.n	8008018 <_vfiprintf_r+0x220>
 800800c:	89ab      	ldrh	r3, [r5, #12]
 800800e:	059a      	lsls	r2, r3, #22
 8008010:	d402      	bmi.n	8008018 <_vfiprintf_r+0x220>
 8008012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008014:	f7ff fb9b 	bl	800774e <__retarget_lock_release_recursive>
 8008018:	89ab      	ldrh	r3, [r5, #12]
 800801a:	065b      	lsls	r3, r3, #25
 800801c:	f53f af12 	bmi.w	8007e44 <_vfiprintf_r+0x4c>
 8008020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008022:	e711      	b.n	8007e48 <_vfiprintf_r+0x50>
 8008024:	ab03      	add	r3, sp, #12
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	462a      	mov	r2, r5
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <_vfiprintf_r+0x258>)
 800802c:	a904      	add	r1, sp, #16
 800802e:	4630      	mov	r0, r6
 8008030:	f000 f880 	bl	8008134 <_printf_i>
 8008034:	e7e4      	b.n	8008000 <_vfiprintf_r+0x208>
 8008036:	bf00      	nop
 8008038:	08008c20 	.word	0x08008c20
 800803c:	08008c40 	.word	0x08008c40
 8008040:	08008c00 	.word	0x08008c00
 8008044:	08008c64 	.word	0x08008c64
 8008048:	08008c6a 	.word	0x08008c6a
 800804c:	00000000 	.word	0x00000000
 8008050:	08007dd3 	.word	0x08007dd3
 8008054:	08008c60 	.word	0x08008c60

08008058 <_printf_common>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	4616      	mov	r6, r2
 800805e:	4699      	mov	r9, r3
 8008060:	688a      	ldr	r2, [r1, #8]
 8008062:	690b      	ldr	r3, [r1, #16]
 8008064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008068:	4293      	cmp	r3, r2
 800806a:	bfb8      	it	lt
 800806c:	4613      	movlt	r3, r2
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008074:	4607      	mov	r7, r0
 8008076:	460c      	mov	r4, r1
 8008078:	b10a      	cbz	r2, 800807e <_printf_common+0x26>
 800807a:	3301      	adds	r3, #1
 800807c:	6033      	str	r3, [r6, #0]
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	0699      	lsls	r1, r3, #26
 8008082:	bf42      	ittt	mi
 8008084:	6833      	ldrmi	r3, [r6, #0]
 8008086:	3302      	addmi	r3, #2
 8008088:	6033      	strmi	r3, [r6, #0]
 800808a:	6825      	ldr	r5, [r4, #0]
 800808c:	f015 0506 	ands.w	r5, r5, #6
 8008090:	d106      	bne.n	80080a0 <_printf_common+0x48>
 8008092:	f104 0a19 	add.w	sl, r4, #25
 8008096:	68e3      	ldr	r3, [r4, #12]
 8008098:	6832      	ldr	r2, [r6, #0]
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	42ab      	cmp	r3, r5
 800809e:	dc26      	bgt.n	80080ee <_printf_common+0x96>
 80080a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080a4:	1e13      	subs	r3, r2, #0
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	bf18      	it	ne
 80080aa:	2301      	movne	r3, #1
 80080ac:	0692      	lsls	r2, r2, #26
 80080ae:	d42b      	bmi.n	8008108 <_printf_common+0xb0>
 80080b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080b4:	4649      	mov	r1, r9
 80080b6:	4638      	mov	r0, r7
 80080b8:	47c0      	blx	r8
 80080ba:	3001      	adds	r0, #1
 80080bc:	d01e      	beq.n	80080fc <_printf_common+0xa4>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	68e5      	ldr	r5, [r4, #12]
 80080c2:	6832      	ldr	r2, [r6, #0]
 80080c4:	f003 0306 	and.w	r3, r3, #6
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	bf08      	it	eq
 80080cc:	1aad      	subeq	r5, r5, r2
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	6922      	ldr	r2, [r4, #16]
 80080d2:	bf0c      	ite	eq
 80080d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080d8:	2500      	movne	r5, #0
 80080da:	4293      	cmp	r3, r2
 80080dc:	bfc4      	itt	gt
 80080de:	1a9b      	subgt	r3, r3, r2
 80080e0:	18ed      	addgt	r5, r5, r3
 80080e2:	2600      	movs	r6, #0
 80080e4:	341a      	adds	r4, #26
 80080e6:	42b5      	cmp	r5, r6
 80080e8:	d11a      	bne.n	8008120 <_printf_common+0xc8>
 80080ea:	2000      	movs	r0, #0
 80080ec:	e008      	b.n	8008100 <_printf_common+0xa8>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4652      	mov	r2, sl
 80080f2:	4649      	mov	r1, r9
 80080f4:	4638      	mov	r0, r7
 80080f6:	47c0      	blx	r8
 80080f8:	3001      	adds	r0, #1
 80080fa:	d103      	bne.n	8008104 <_printf_common+0xac>
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008104:	3501      	adds	r5, #1
 8008106:	e7c6      	b.n	8008096 <_printf_common+0x3e>
 8008108:	18e1      	adds	r1, r4, r3
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	2030      	movs	r0, #48	; 0x30
 800810e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008112:	4422      	add	r2, r4
 8008114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800811c:	3302      	adds	r3, #2
 800811e:	e7c7      	b.n	80080b0 <_printf_common+0x58>
 8008120:	2301      	movs	r3, #1
 8008122:	4622      	mov	r2, r4
 8008124:	4649      	mov	r1, r9
 8008126:	4638      	mov	r0, r7
 8008128:	47c0      	blx	r8
 800812a:	3001      	adds	r0, #1
 800812c:	d0e6      	beq.n	80080fc <_printf_common+0xa4>
 800812e:	3601      	adds	r6, #1
 8008130:	e7d9      	b.n	80080e6 <_printf_common+0x8e>
	...

08008134 <_printf_i>:
 8008134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	7e0f      	ldrb	r7, [r1, #24]
 800813a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800813c:	2f78      	cmp	r7, #120	; 0x78
 800813e:	4691      	mov	r9, r2
 8008140:	4680      	mov	r8, r0
 8008142:	460c      	mov	r4, r1
 8008144:	469a      	mov	sl, r3
 8008146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800814a:	d807      	bhi.n	800815c <_printf_i+0x28>
 800814c:	2f62      	cmp	r7, #98	; 0x62
 800814e:	d80a      	bhi.n	8008166 <_printf_i+0x32>
 8008150:	2f00      	cmp	r7, #0
 8008152:	f000 80d8 	beq.w	8008306 <_printf_i+0x1d2>
 8008156:	2f58      	cmp	r7, #88	; 0x58
 8008158:	f000 80a3 	beq.w	80082a2 <_printf_i+0x16e>
 800815c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008164:	e03a      	b.n	80081dc <_printf_i+0xa8>
 8008166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800816a:	2b15      	cmp	r3, #21
 800816c:	d8f6      	bhi.n	800815c <_printf_i+0x28>
 800816e:	a101      	add	r1, pc, #4	; (adr r1, 8008174 <_printf_i+0x40>)
 8008170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008174:	080081cd 	.word	0x080081cd
 8008178:	080081e1 	.word	0x080081e1
 800817c:	0800815d 	.word	0x0800815d
 8008180:	0800815d 	.word	0x0800815d
 8008184:	0800815d 	.word	0x0800815d
 8008188:	0800815d 	.word	0x0800815d
 800818c:	080081e1 	.word	0x080081e1
 8008190:	0800815d 	.word	0x0800815d
 8008194:	0800815d 	.word	0x0800815d
 8008198:	0800815d 	.word	0x0800815d
 800819c:	0800815d 	.word	0x0800815d
 80081a0:	080082ed 	.word	0x080082ed
 80081a4:	08008211 	.word	0x08008211
 80081a8:	080082cf 	.word	0x080082cf
 80081ac:	0800815d 	.word	0x0800815d
 80081b0:	0800815d 	.word	0x0800815d
 80081b4:	0800830f 	.word	0x0800830f
 80081b8:	0800815d 	.word	0x0800815d
 80081bc:	08008211 	.word	0x08008211
 80081c0:	0800815d 	.word	0x0800815d
 80081c4:	0800815d 	.word	0x0800815d
 80081c8:	080082d7 	.word	0x080082d7
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	1d1a      	adds	r2, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	602a      	str	r2, [r5, #0]
 80081d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081dc:	2301      	movs	r3, #1
 80081de:	e0a3      	b.n	8008328 <_printf_i+0x1f4>
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	6829      	ldr	r1, [r5, #0]
 80081e4:	0606      	lsls	r6, r0, #24
 80081e6:	f101 0304 	add.w	r3, r1, #4
 80081ea:	d50a      	bpl.n	8008202 <_printf_i+0xce>
 80081ec:	680e      	ldr	r6, [r1, #0]
 80081ee:	602b      	str	r3, [r5, #0]
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	da03      	bge.n	80081fc <_printf_i+0xc8>
 80081f4:	232d      	movs	r3, #45	; 0x2d
 80081f6:	4276      	negs	r6, r6
 80081f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081fc:	485e      	ldr	r0, [pc, #376]	; (8008378 <_printf_i+0x244>)
 80081fe:	230a      	movs	r3, #10
 8008200:	e019      	b.n	8008236 <_printf_i+0x102>
 8008202:	680e      	ldr	r6, [r1, #0]
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f010 0f40 	tst.w	r0, #64	; 0x40
 800820a:	bf18      	it	ne
 800820c:	b236      	sxthne	r6, r6
 800820e:	e7ef      	b.n	80081f0 <_printf_i+0xbc>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	6820      	ldr	r0, [r4, #0]
 8008214:	1d19      	adds	r1, r3, #4
 8008216:	6029      	str	r1, [r5, #0]
 8008218:	0601      	lsls	r1, r0, #24
 800821a:	d501      	bpl.n	8008220 <_printf_i+0xec>
 800821c:	681e      	ldr	r6, [r3, #0]
 800821e:	e002      	b.n	8008226 <_printf_i+0xf2>
 8008220:	0646      	lsls	r6, r0, #25
 8008222:	d5fb      	bpl.n	800821c <_printf_i+0xe8>
 8008224:	881e      	ldrh	r6, [r3, #0]
 8008226:	4854      	ldr	r0, [pc, #336]	; (8008378 <_printf_i+0x244>)
 8008228:	2f6f      	cmp	r7, #111	; 0x6f
 800822a:	bf0c      	ite	eq
 800822c:	2308      	moveq	r3, #8
 800822e:	230a      	movne	r3, #10
 8008230:	2100      	movs	r1, #0
 8008232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008236:	6865      	ldr	r5, [r4, #4]
 8008238:	60a5      	str	r5, [r4, #8]
 800823a:	2d00      	cmp	r5, #0
 800823c:	bfa2      	ittt	ge
 800823e:	6821      	ldrge	r1, [r4, #0]
 8008240:	f021 0104 	bicge.w	r1, r1, #4
 8008244:	6021      	strge	r1, [r4, #0]
 8008246:	b90e      	cbnz	r6, 800824c <_printf_i+0x118>
 8008248:	2d00      	cmp	r5, #0
 800824a:	d04d      	beq.n	80082e8 <_printf_i+0x1b4>
 800824c:	4615      	mov	r5, r2
 800824e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008252:	fb03 6711 	mls	r7, r3, r1, r6
 8008256:	5dc7      	ldrb	r7, [r0, r7]
 8008258:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800825c:	4637      	mov	r7, r6
 800825e:	42bb      	cmp	r3, r7
 8008260:	460e      	mov	r6, r1
 8008262:	d9f4      	bls.n	800824e <_printf_i+0x11a>
 8008264:	2b08      	cmp	r3, #8
 8008266:	d10b      	bne.n	8008280 <_printf_i+0x14c>
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	07de      	lsls	r6, r3, #31
 800826c:	d508      	bpl.n	8008280 <_printf_i+0x14c>
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	6861      	ldr	r1, [r4, #4]
 8008272:	4299      	cmp	r1, r3
 8008274:	bfde      	ittt	le
 8008276:	2330      	movle	r3, #48	; 0x30
 8008278:	f805 3c01 	strble.w	r3, [r5, #-1]
 800827c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008280:	1b52      	subs	r2, r2, r5
 8008282:	6122      	str	r2, [r4, #16]
 8008284:	f8cd a000 	str.w	sl, [sp]
 8008288:	464b      	mov	r3, r9
 800828a:	aa03      	add	r2, sp, #12
 800828c:	4621      	mov	r1, r4
 800828e:	4640      	mov	r0, r8
 8008290:	f7ff fee2 	bl	8008058 <_printf_common>
 8008294:	3001      	adds	r0, #1
 8008296:	d14c      	bne.n	8008332 <_printf_i+0x1fe>
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	b004      	add	sp, #16
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	4835      	ldr	r0, [pc, #212]	; (8008378 <_printf_i+0x244>)
 80082a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082a8:	6829      	ldr	r1, [r5, #0]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80082b0:	6029      	str	r1, [r5, #0]
 80082b2:	061d      	lsls	r5, r3, #24
 80082b4:	d514      	bpl.n	80082e0 <_printf_i+0x1ac>
 80082b6:	07df      	lsls	r7, r3, #31
 80082b8:	bf44      	itt	mi
 80082ba:	f043 0320 	orrmi.w	r3, r3, #32
 80082be:	6023      	strmi	r3, [r4, #0]
 80082c0:	b91e      	cbnz	r6, 80082ca <_printf_i+0x196>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f023 0320 	bic.w	r3, r3, #32
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	2310      	movs	r3, #16
 80082cc:	e7b0      	b.n	8008230 <_printf_i+0xfc>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	f043 0320 	orr.w	r3, r3, #32
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	2378      	movs	r3, #120	; 0x78
 80082d8:	4828      	ldr	r0, [pc, #160]	; (800837c <_printf_i+0x248>)
 80082da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082de:	e7e3      	b.n	80082a8 <_printf_i+0x174>
 80082e0:	0659      	lsls	r1, r3, #25
 80082e2:	bf48      	it	mi
 80082e4:	b2b6      	uxthmi	r6, r6
 80082e6:	e7e6      	b.n	80082b6 <_printf_i+0x182>
 80082e8:	4615      	mov	r5, r2
 80082ea:	e7bb      	b.n	8008264 <_printf_i+0x130>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	6826      	ldr	r6, [r4, #0]
 80082f0:	6961      	ldr	r1, [r4, #20]
 80082f2:	1d18      	adds	r0, r3, #4
 80082f4:	6028      	str	r0, [r5, #0]
 80082f6:	0635      	lsls	r5, r6, #24
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	d501      	bpl.n	8008300 <_printf_i+0x1cc>
 80082fc:	6019      	str	r1, [r3, #0]
 80082fe:	e002      	b.n	8008306 <_printf_i+0x1d2>
 8008300:	0670      	lsls	r0, r6, #25
 8008302:	d5fb      	bpl.n	80082fc <_printf_i+0x1c8>
 8008304:	8019      	strh	r1, [r3, #0]
 8008306:	2300      	movs	r3, #0
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	4615      	mov	r5, r2
 800830c:	e7ba      	b.n	8008284 <_printf_i+0x150>
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	1d1a      	adds	r2, r3, #4
 8008312:	602a      	str	r2, [r5, #0]
 8008314:	681d      	ldr	r5, [r3, #0]
 8008316:	6862      	ldr	r2, [r4, #4]
 8008318:	2100      	movs	r1, #0
 800831a:	4628      	mov	r0, r5
 800831c:	f7f7 ff70 	bl	8000200 <memchr>
 8008320:	b108      	cbz	r0, 8008326 <_printf_i+0x1f2>
 8008322:	1b40      	subs	r0, r0, r5
 8008324:	6060      	str	r0, [r4, #4]
 8008326:	6863      	ldr	r3, [r4, #4]
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	2300      	movs	r3, #0
 800832c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008330:	e7a8      	b.n	8008284 <_printf_i+0x150>
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	462a      	mov	r2, r5
 8008336:	4649      	mov	r1, r9
 8008338:	4640      	mov	r0, r8
 800833a:	47d0      	blx	sl
 800833c:	3001      	adds	r0, #1
 800833e:	d0ab      	beq.n	8008298 <_printf_i+0x164>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	079b      	lsls	r3, r3, #30
 8008344:	d413      	bmi.n	800836e <_printf_i+0x23a>
 8008346:	68e0      	ldr	r0, [r4, #12]
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	4298      	cmp	r0, r3
 800834c:	bfb8      	it	lt
 800834e:	4618      	movlt	r0, r3
 8008350:	e7a4      	b.n	800829c <_printf_i+0x168>
 8008352:	2301      	movs	r3, #1
 8008354:	4632      	mov	r2, r6
 8008356:	4649      	mov	r1, r9
 8008358:	4640      	mov	r0, r8
 800835a:	47d0      	blx	sl
 800835c:	3001      	adds	r0, #1
 800835e:	d09b      	beq.n	8008298 <_printf_i+0x164>
 8008360:	3501      	adds	r5, #1
 8008362:	68e3      	ldr	r3, [r4, #12]
 8008364:	9903      	ldr	r1, [sp, #12]
 8008366:	1a5b      	subs	r3, r3, r1
 8008368:	42ab      	cmp	r3, r5
 800836a:	dcf2      	bgt.n	8008352 <_printf_i+0x21e>
 800836c:	e7eb      	b.n	8008346 <_printf_i+0x212>
 800836e:	2500      	movs	r5, #0
 8008370:	f104 0619 	add.w	r6, r4, #25
 8008374:	e7f5      	b.n	8008362 <_printf_i+0x22e>
 8008376:	bf00      	nop
 8008378:	08008c71 	.word	0x08008c71
 800837c:	08008c82 	.word	0x08008c82

08008380 <_scanf_chars>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4615      	mov	r5, r2
 8008386:	688a      	ldr	r2, [r1, #8]
 8008388:	4680      	mov	r8, r0
 800838a:	460c      	mov	r4, r1
 800838c:	b932      	cbnz	r2, 800839c <_scanf_chars+0x1c>
 800838e:	698a      	ldr	r2, [r1, #24]
 8008390:	2a00      	cmp	r2, #0
 8008392:	bf0c      	ite	eq
 8008394:	2201      	moveq	r2, #1
 8008396:	f04f 32ff 	movne.w	r2, #4294967295
 800839a:	608a      	str	r2, [r1, #8]
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008430 <_scanf_chars+0xb0>
 80083a2:	06d1      	lsls	r1, r2, #27
 80083a4:	bf5f      	itttt	pl
 80083a6:	681a      	ldrpl	r2, [r3, #0]
 80083a8:	1d11      	addpl	r1, r2, #4
 80083aa:	6019      	strpl	r1, [r3, #0]
 80083ac:	6816      	ldrpl	r6, [r2, #0]
 80083ae:	2700      	movs	r7, #0
 80083b0:	69a0      	ldr	r0, [r4, #24]
 80083b2:	b188      	cbz	r0, 80083d8 <_scanf_chars+0x58>
 80083b4:	2801      	cmp	r0, #1
 80083b6:	d107      	bne.n	80083c8 <_scanf_chars+0x48>
 80083b8:	682a      	ldr	r2, [r5, #0]
 80083ba:	7811      	ldrb	r1, [r2, #0]
 80083bc:	6962      	ldr	r2, [r4, #20]
 80083be:	5c52      	ldrb	r2, [r2, r1]
 80083c0:	b952      	cbnz	r2, 80083d8 <_scanf_chars+0x58>
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	d031      	beq.n	800842a <_scanf_chars+0xaa>
 80083c6:	e022      	b.n	800840e <_scanf_chars+0x8e>
 80083c8:	2802      	cmp	r0, #2
 80083ca:	d120      	bne.n	800840e <_scanf_chars+0x8e>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80083d4:	071b      	lsls	r3, r3, #28
 80083d6:	d41a      	bmi.n	800840e <_scanf_chars+0x8e>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	06da      	lsls	r2, r3, #27
 80083dc:	bf5e      	ittt	pl
 80083de:	682b      	ldrpl	r3, [r5, #0]
 80083e0:	781b      	ldrbpl	r3, [r3, #0]
 80083e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80083e6:	682a      	ldr	r2, [r5, #0]
 80083e8:	686b      	ldr	r3, [r5, #4]
 80083ea:	3201      	adds	r2, #1
 80083ec:	602a      	str	r2, [r5, #0]
 80083ee:	68a2      	ldr	r2, [r4, #8]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	3a01      	subs	r2, #1
 80083f4:	606b      	str	r3, [r5, #4]
 80083f6:	3701      	adds	r7, #1
 80083f8:	60a2      	str	r2, [r4, #8]
 80083fa:	b142      	cbz	r2, 800840e <_scanf_chars+0x8e>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dcd7      	bgt.n	80083b0 <_scanf_chars+0x30>
 8008400:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008404:	4629      	mov	r1, r5
 8008406:	4640      	mov	r0, r8
 8008408:	4798      	blx	r3
 800840a:	2800      	cmp	r0, #0
 800840c:	d0d0      	beq.n	80083b0 <_scanf_chars+0x30>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	f013 0310 	ands.w	r3, r3, #16
 8008414:	d105      	bne.n	8008422 <_scanf_chars+0xa2>
 8008416:	68e2      	ldr	r2, [r4, #12]
 8008418:	3201      	adds	r2, #1
 800841a:	60e2      	str	r2, [r4, #12]
 800841c:	69a2      	ldr	r2, [r4, #24]
 800841e:	b102      	cbz	r2, 8008422 <_scanf_chars+0xa2>
 8008420:	7033      	strb	r3, [r6, #0]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	443b      	add	r3, r7
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	2000      	movs	r0, #0
 800842a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842e:	bf00      	nop
 8008430:	08008afd 	.word	0x08008afd

08008434 <_scanf_i>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	4698      	mov	r8, r3
 800843a:	4b76      	ldr	r3, [pc, #472]	; (8008614 <_scanf_i+0x1e0>)
 800843c:	460c      	mov	r4, r1
 800843e:	4682      	mov	sl, r0
 8008440:	4616      	mov	r6, r2
 8008442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008446:	b087      	sub	sp, #28
 8008448:	ab03      	add	r3, sp, #12
 800844a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800844e:	4b72      	ldr	r3, [pc, #456]	; (8008618 <_scanf_i+0x1e4>)
 8008450:	69a1      	ldr	r1, [r4, #24]
 8008452:	4a72      	ldr	r2, [pc, #456]	; (800861c <_scanf_i+0x1e8>)
 8008454:	2903      	cmp	r1, #3
 8008456:	bf18      	it	ne
 8008458:	461a      	movne	r2, r3
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	9201      	str	r2, [sp, #4]
 800845e:	1e5a      	subs	r2, r3, #1
 8008460:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008464:	bf88      	it	hi
 8008466:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800846a:	4627      	mov	r7, r4
 800846c:	bf82      	ittt	hi
 800846e:	eb03 0905 	addhi.w	r9, r3, r5
 8008472:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008476:	60a3      	strhi	r3, [r4, #8]
 8008478:	f857 3b1c 	ldr.w	r3, [r7], #28
 800847c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008480:	bf98      	it	ls
 8008482:	f04f 0900 	movls.w	r9, #0
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	463d      	mov	r5, r7
 800848a:	f04f 0b00 	mov.w	fp, #0
 800848e:	6831      	ldr	r1, [r6, #0]
 8008490:	ab03      	add	r3, sp, #12
 8008492:	7809      	ldrb	r1, [r1, #0]
 8008494:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008498:	2202      	movs	r2, #2
 800849a:	f7f7 feb1 	bl	8000200 <memchr>
 800849e:	b328      	cbz	r0, 80084ec <_scanf_i+0xb8>
 80084a0:	f1bb 0f01 	cmp.w	fp, #1
 80084a4:	d159      	bne.n	800855a <_scanf_i+0x126>
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	b92a      	cbnz	r2, 80084b6 <_scanf_i+0x82>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	2308      	movs	r3, #8
 80084ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084b2:	6063      	str	r3, [r4, #4]
 80084b4:	6022      	str	r2, [r4, #0]
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80084bc:	6022      	str	r2, [r4, #0]
 80084be:	68a2      	ldr	r2, [r4, #8]
 80084c0:	1e51      	subs	r1, r2, #1
 80084c2:	60a1      	str	r1, [r4, #8]
 80084c4:	b192      	cbz	r2, 80084ec <_scanf_i+0xb8>
 80084c6:	6832      	ldr	r2, [r6, #0]
 80084c8:	1c51      	adds	r1, r2, #1
 80084ca:	6031      	str	r1, [r6, #0]
 80084cc:	7812      	ldrb	r2, [r2, #0]
 80084ce:	f805 2b01 	strb.w	r2, [r5], #1
 80084d2:	6872      	ldr	r2, [r6, #4]
 80084d4:	3a01      	subs	r2, #1
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	6072      	str	r2, [r6, #4]
 80084da:	dc07      	bgt.n	80084ec <_scanf_i+0xb8>
 80084dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80084e0:	4631      	mov	r1, r6
 80084e2:	4650      	mov	r0, sl
 80084e4:	4790      	blx	r2
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f040 8085 	bne.w	80085f6 <_scanf_i+0x1c2>
 80084ec:	f10b 0b01 	add.w	fp, fp, #1
 80084f0:	f1bb 0f03 	cmp.w	fp, #3
 80084f4:	d1cb      	bne.n	800848e <_scanf_i+0x5a>
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	b90b      	cbnz	r3, 80084fe <_scanf_i+0xca>
 80084fa:	230a      	movs	r3, #10
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	6863      	ldr	r3, [r4, #4]
 8008500:	4947      	ldr	r1, [pc, #284]	; (8008620 <_scanf_i+0x1ec>)
 8008502:	6960      	ldr	r0, [r4, #20]
 8008504:	1ac9      	subs	r1, r1, r3
 8008506:	f000 f8af 	bl	8008668 <__sccl>
 800850a:	f04f 0b00 	mov.w	fp, #0
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d03d      	beq.n	8008592 <_scanf_i+0x15e>
 8008516:	6831      	ldr	r1, [r6, #0]
 8008518:	6960      	ldr	r0, [r4, #20]
 800851a:	f891 c000 	ldrb.w	ip, [r1]
 800851e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008522:	2800      	cmp	r0, #0
 8008524:	d035      	beq.n	8008592 <_scanf_i+0x15e>
 8008526:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800852a:	d124      	bne.n	8008576 <_scanf_i+0x142>
 800852c:	0510      	lsls	r0, r2, #20
 800852e:	d522      	bpl.n	8008576 <_scanf_i+0x142>
 8008530:	f10b 0b01 	add.w	fp, fp, #1
 8008534:	f1b9 0f00 	cmp.w	r9, #0
 8008538:	d003      	beq.n	8008542 <_scanf_i+0x10e>
 800853a:	3301      	adds	r3, #1
 800853c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	6873      	ldr	r3, [r6, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	6073      	str	r3, [r6, #4]
 800854a:	dd1b      	ble.n	8008584 <_scanf_i+0x150>
 800854c:	6833      	ldr	r3, [r6, #0]
 800854e:	3301      	adds	r3, #1
 8008550:	6033      	str	r3, [r6, #0]
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	3b01      	subs	r3, #1
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	e7d9      	b.n	800850e <_scanf_i+0xda>
 800855a:	f1bb 0f02 	cmp.w	fp, #2
 800855e:	d1ae      	bne.n	80084be <_scanf_i+0x8a>
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008566:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800856a:	d1bf      	bne.n	80084ec <_scanf_i+0xb8>
 800856c:	2310      	movs	r3, #16
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008574:	e7a2      	b.n	80084bc <_scanf_i+0x88>
 8008576:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	780b      	ldrb	r3, [r1, #0]
 800857e:	f805 3b01 	strb.w	r3, [r5], #1
 8008582:	e7de      	b.n	8008542 <_scanf_i+0x10e>
 8008584:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008588:	4631      	mov	r1, r6
 800858a:	4650      	mov	r0, sl
 800858c:	4798      	blx	r3
 800858e:	2800      	cmp	r0, #0
 8008590:	d0df      	beq.n	8008552 <_scanf_i+0x11e>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	05db      	lsls	r3, r3, #23
 8008596:	d50d      	bpl.n	80085b4 <_scanf_i+0x180>
 8008598:	42bd      	cmp	r5, r7
 800859a:	d909      	bls.n	80085b0 <_scanf_i+0x17c>
 800859c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80085a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085a4:	4632      	mov	r2, r6
 80085a6:	4650      	mov	r0, sl
 80085a8:	4798      	blx	r3
 80085aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80085ae:	464d      	mov	r5, r9
 80085b0:	42bd      	cmp	r5, r7
 80085b2:	d02d      	beq.n	8008610 <_scanf_i+0x1dc>
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	f012 0210 	ands.w	r2, r2, #16
 80085ba:	d113      	bne.n	80085e4 <_scanf_i+0x1b0>
 80085bc:	702a      	strb	r2, [r5, #0]
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	9e01      	ldr	r6, [sp, #4]
 80085c2:	4639      	mov	r1, r7
 80085c4:	4650      	mov	r0, sl
 80085c6:	47b0      	blx	r6
 80085c8:	6821      	ldr	r1, [r4, #0]
 80085ca:	f8d8 3000 	ldr.w	r3, [r8]
 80085ce:	f011 0f20 	tst.w	r1, #32
 80085d2:	d013      	beq.n	80085fc <_scanf_i+0x1c8>
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	f8c8 2000 	str.w	r2, [r8]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6018      	str	r0, [r3, #0]
 80085de:	68e3      	ldr	r3, [r4, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60e3      	str	r3, [r4, #12]
 80085e4:	1bed      	subs	r5, r5, r7
 80085e6:	44ab      	add	fp, r5
 80085e8:	6925      	ldr	r5, [r4, #16]
 80085ea:	445d      	add	r5, fp
 80085ec:	6125      	str	r5, [r4, #16]
 80085ee:	2000      	movs	r0, #0
 80085f0:	b007      	add	sp, #28
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	f04f 0b00 	mov.w	fp, #0
 80085fa:	e7ca      	b.n	8008592 <_scanf_i+0x15e>
 80085fc:	1d1a      	adds	r2, r3, #4
 80085fe:	f8c8 2000 	str.w	r2, [r8]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f011 0f01 	tst.w	r1, #1
 8008608:	bf14      	ite	ne
 800860a:	8018      	strhne	r0, [r3, #0]
 800860c:	6018      	streq	r0, [r3, #0]
 800860e:	e7e6      	b.n	80085de <_scanf_i+0x1aa>
 8008610:	2001      	movs	r0, #1
 8008612:	e7ed      	b.n	80085f0 <_scanf_i+0x1bc>
 8008614:	08008a3c 	.word	0x08008a3c
 8008618:	080087bd 	.word	0x080087bd
 800861c:	08007201 	.word	0x08007201
 8008620:	08008cac 	.word	0x08008cac

08008624 <_read_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d07      	ldr	r5, [pc, #28]	; (8008644 <_read_r+0x20>)
 8008628:	4604      	mov	r4, r0
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	2200      	movs	r2, #0
 8008630:	602a      	str	r2, [r5, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	f7f9 f91e 	bl	8001874 <_read>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_read_r+0x1e>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_read_r+0x1e>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	2000042c 	.word	0x2000042c

08008648 <_sbrk_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d06      	ldr	r5, [pc, #24]	; (8008664 <_sbrk_r+0x1c>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7f9 f97c 	bl	8001950 <_sbrk>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_sbrk_r+0x1a>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_sbrk_r+0x1a>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	2000042c 	.word	0x2000042c

08008668 <__sccl>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	780b      	ldrb	r3, [r1, #0]
 800866c:	4604      	mov	r4, r0
 800866e:	2b5e      	cmp	r3, #94	; 0x5e
 8008670:	bf0b      	itete	eq
 8008672:	784b      	ldrbeq	r3, [r1, #1]
 8008674:	1c48      	addne	r0, r1, #1
 8008676:	1c88      	addeq	r0, r1, #2
 8008678:	2200      	movne	r2, #0
 800867a:	bf08      	it	eq
 800867c:	2201      	moveq	r2, #1
 800867e:	1e61      	subs	r1, r4, #1
 8008680:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008684:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008688:	42a9      	cmp	r1, r5
 800868a:	d1fb      	bne.n	8008684 <__sccl+0x1c>
 800868c:	b90b      	cbnz	r3, 8008692 <__sccl+0x2a>
 800868e:	3801      	subs	r0, #1
 8008690:	bd70      	pop	{r4, r5, r6, pc}
 8008692:	f082 0201 	eor.w	r2, r2, #1
 8008696:	54e2      	strb	r2, [r4, r3]
 8008698:	4605      	mov	r5, r0
 800869a:	4628      	mov	r0, r5
 800869c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80086a0:	292d      	cmp	r1, #45	; 0x2d
 80086a2:	d006      	beq.n	80086b2 <__sccl+0x4a>
 80086a4:	295d      	cmp	r1, #93	; 0x5d
 80086a6:	d0f3      	beq.n	8008690 <__sccl+0x28>
 80086a8:	b909      	cbnz	r1, 80086ae <__sccl+0x46>
 80086aa:	4628      	mov	r0, r5
 80086ac:	e7f0      	b.n	8008690 <__sccl+0x28>
 80086ae:	460b      	mov	r3, r1
 80086b0:	e7f1      	b.n	8008696 <__sccl+0x2e>
 80086b2:	786e      	ldrb	r6, [r5, #1]
 80086b4:	2e5d      	cmp	r6, #93	; 0x5d
 80086b6:	d0fa      	beq.n	80086ae <__sccl+0x46>
 80086b8:	42b3      	cmp	r3, r6
 80086ba:	dcf8      	bgt.n	80086ae <__sccl+0x46>
 80086bc:	3502      	adds	r5, #2
 80086be:	4619      	mov	r1, r3
 80086c0:	3101      	adds	r1, #1
 80086c2:	428e      	cmp	r6, r1
 80086c4:	5462      	strb	r2, [r4, r1]
 80086c6:	dcfb      	bgt.n	80086c0 <__sccl+0x58>
 80086c8:	1af1      	subs	r1, r6, r3
 80086ca:	3901      	subs	r1, #1
 80086cc:	1c58      	adds	r0, r3, #1
 80086ce:	42b3      	cmp	r3, r6
 80086d0:	bfa8      	it	ge
 80086d2:	2100      	movge	r1, #0
 80086d4:	1843      	adds	r3, r0, r1
 80086d6:	e7e0      	b.n	800869a <__sccl+0x32>

080086d8 <_strtoul_l.constprop.0>:
 80086d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086dc:	4f36      	ldr	r7, [pc, #216]	; (80087b8 <_strtoul_l.constprop.0+0xe0>)
 80086de:	4686      	mov	lr, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	4628      	mov	r0, r5
 80086e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086e8:	5de6      	ldrb	r6, [r4, r7]
 80086ea:	f016 0608 	ands.w	r6, r6, #8
 80086ee:	d1f8      	bne.n	80086e2 <_strtoul_l.constprop.0+0xa>
 80086f0:	2c2d      	cmp	r4, #45	; 0x2d
 80086f2:	d12f      	bne.n	8008754 <_strtoul_l.constprop.0+0x7c>
 80086f4:	782c      	ldrb	r4, [r5, #0]
 80086f6:	2601      	movs	r6, #1
 80086f8:	1c85      	adds	r5, r0, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d057      	beq.n	80087ae <_strtoul_l.constprop.0+0xd6>
 80086fe:	2b10      	cmp	r3, #16
 8008700:	d109      	bne.n	8008716 <_strtoul_l.constprop.0+0x3e>
 8008702:	2c30      	cmp	r4, #48	; 0x30
 8008704:	d107      	bne.n	8008716 <_strtoul_l.constprop.0+0x3e>
 8008706:	7828      	ldrb	r0, [r5, #0]
 8008708:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800870c:	2858      	cmp	r0, #88	; 0x58
 800870e:	d149      	bne.n	80087a4 <_strtoul_l.constprop.0+0xcc>
 8008710:	786c      	ldrb	r4, [r5, #1]
 8008712:	2310      	movs	r3, #16
 8008714:	3502      	adds	r5, #2
 8008716:	f04f 38ff 	mov.w	r8, #4294967295
 800871a:	2700      	movs	r7, #0
 800871c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008720:	fb03 f908 	mul.w	r9, r3, r8
 8008724:	ea6f 0909 	mvn.w	r9, r9
 8008728:	4638      	mov	r0, r7
 800872a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800872e:	f1bc 0f09 	cmp.w	ip, #9
 8008732:	d814      	bhi.n	800875e <_strtoul_l.constprop.0+0x86>
 8008734:	4664      	mov	r4, ip
 8008736:	42a3      	cmp	r3, r4
 8008738:	dd22      	ble.n	8008780 <_strtoul_l.constprop.0+0xa8>
 800873a:	2f00      	cmp	r7, #0
 800873c:	db1d      	blt.n	800877a <_strtoul_l.constprop.0+0xa2>
 800873e:	4580      	cmp	r8, r0
 8008740:	d31b      	bcc.n	800877a <_strtoul_l.constprop.0+0xa2>
 8008742:	d101      	bne.n	8008748 <_strtoul_l.constprop.0+0x70>
 8008744:	45a1      	cmp	r9, r4
 8008746:	db18      	blt.n	800877a <_strtoul_l.constprop.0+0xa2>
 8008748:	fb00 4003 	mla	r0, r0, r3, r4
 800874c:	2701      	movs	r7, #1
 800874e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008752:	e7ea      	b.n	800872a <_strtoul_l.constprop.0+0x52>
 8008754:	2c2b      	cmp	r4, #43	; 0x2b
 8008756:	bf04      	itt	eq
 8008758:	782c      	ldrbeq	r4, [r5, #0]
 800875a:	1c85      	addeq	r5, r0, #2
 800875c:	e7cd      	b.n	80086fa <_strtoul_l.constprop.0+0x22>
 800875e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008762:	f1bc 0f19 	cmp.w	ip, #25
 8008766:	d801      	bhi.n	800876c <_strtoul_l.constprop.0+0x94>
 8008768:	3c37      	subs	r4, #55	; 0x37
 800876a:	e7e4      	b.n	8008736 <_strtoul_l.constprop.0+0x5e>
 800876c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008770:	f1bc 0f19 	cmp.w	ip, #25
 8008774:	d804      	bhi.n	8008780 <_strtoul_l.constprop.0+0xa8>
 8008776:	3c57      	subs	r4, #87	; 0x57
 8008778:	e7dd      	b.n	8008736 <_strtoul_l.constprop.0+0x5e>
 800877a:	f04f 37ff 	mov.w	r7, #4294967295
 800877e:	e7e6      	b.n	800874e <_strtoul_l.constprop.0+0x76>
 8008780:	2f00      	cmp	r7, #0
 8008782:	da07      	bge.n	8008794 <_strtoul_l.constprop.0+0xbc>
 8008784:	2322      	movs	r3, #34	; 0x22
 8008786:	f8ce 3000 	str.w	r3, [lr]
 800878a:	f04f 30ff 	mov.w	r0, #4294967295
 800878e:	b932      	cbnz	r2, 800879e <_strtoul_l.constprop.0+0xc6>
 8008790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008794:	b106      	cbz	r6, 8008798 <_strtoul_l.constprop.0+0xc0>
 8008796:	4240      	negs	r0, r0
 8008798:	2a00      	cmp	r2, #0
 800879a:	d0f9      	beq.n	8008790 <_strtoul_l.constprop.0+0xb8>
 800879c:	b107      	cbz	r7, 80087a0 <_strtoul_l.constprop.0+0xc8>
 800879e:	1e69      	subs	r1, r5, #1
 80087a0:	6011      	str	r1, [r2, #0]
 80087a2:	e7f5      	b.n	8008790 <_strtoul_l.constprop.0+0xb8>
 80087a4:	2430      	movs	r4, #48	; 0x30
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1b5      	bne.n	8008716 <_strtoul_l.constprop.0+0x3e>
 80087aa:	2308      	movs	r3, #8
 80087ac:	e7b3      	b.n	8008716 <_strtoul_l.constprop.0+0x3e>
 80087ae:	2c30      	cmp	r4, #48	; 0x30
 80087b0:	d0a9      	beq.n	8008706 <_strtoul_l.constprop.0+0x2e>
 80087b2:	230a      	movs	r3, #10
 80087b4:	e7af      	b.n	8008716 <_strtoul_l.constprop.0+0x3e>
 80087b6:	bf00      	nop
 80087b8:	08008afd 	.word	0x08008afd

080087bc <_strtoul_r>:
 80087bc:	f7ff bf8c 	b.w	80086d8 <_strtoul_l.constprop.0>

080087c0 <__submore>:
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	460c      	mov	r4, r1
 80087c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80087c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087cc:	4299      	cmp	r1, r3
 80087ce:	d11d      	bne.n	800880c <__submore+0x4c>
 80087d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087d4:	f7ff f8a0 	bl	8007918 <_malloc_r>
 80087d8:	b918      	cbnz	r0, 80087e2 <__submore+0x22>
 80087da:	f04f 30ff 	mov.w	r0, #4294967295
 80087de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80087e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80087ec:	6360      	str	r0, [r4, #52]	; 0x34
 80087ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80087f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80087fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008802:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008806:	6020      	str	r0, [r4, #0]
 8008808:	2000      	movs	r0, #0
 800880a:	e7e8      	b.n	80087de <__submore+0x1e>
 800880c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800880e:	0077      	lsls	r7, r6, #1
 8008810:	463a      	mov	r2, r7
 8008812:	f000 f84b 	bl	80088ac <_realloc_r>
 8008816:	4605      	mov	r5, r0
 8008818:	2800      	cmp	r0, #0
 800881a:	d0de      	beq.n	80087da <__submore+0x1a>
 800881c:	eb00 0806 	add.w	r8, r0, r6
 8008820:	4601      	mov	r1, r0
 8008822:	4632      	mov	r2, r6
 8008824:	4640      	mov	r0, r8
 8008826:	f000 f827 	bl	8008878 <memcpy>
 800882a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800882e:	f8c4 8000 	str.w	r8, [r4]
 8008832:	e7e9      	b.n	8008808 <__submore+0x48>

08008834 <_fstat_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	; (8008854 <_fstat_r+0x20>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	f7f9 f85c 	bl	80018fe <_fstat>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d102      	bne.n	8008850 <_fstat_r+0x1c>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b103      	cbz	r3, 8008850 <_fstat_r+0x1c>
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	2000042c 	.word	0x2000042c

08008858 <_isatty_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d06      	ldr	r5, [pc, #24]	; (8008874 <_isatty_r+0x1c>)
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	f7f9 f85b 	bl	800191e <_isatty>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_isatty_r+0x1a>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_isatty_r+0x1a>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	2000042c 	.word	0x2000042c

08008878 <memcpy>:
 8008878:	440a      	add	r2, r1
 800887a:	4291      	cmp	r1, r2
 800887c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008880:	d100      	bne.n	8008884 <memcpy+0xc>
 8008882:	4770      	bx	lr
 8008884:	b510      	push	{r4, lr}
 8008886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800888e:	4291      	cmp	r1, r2
 8008890:	d1f9      	bne.n	8008886 <memcpy+0xe>
 8008892:	bd10      	pop	{r4, pc}

08008894 <__malloc_lock>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__malloc_lock+0x8>)
 8008896:	f7fe bf59 	b.w	800774c <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000420 	.word	0x20000420

080088a0 <__malloc_unlock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__malloc_unlock+0x8>)
 80088a2:	f7fe bf54 	b.w	800774e <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000420 	.word	0x20000420

080088ac <_realloc_r>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	4680      	mov	r8, r0
 80088b2:	4614      	mov	r4, r2
 80088b4:	460e      	mov	r6, r1
 80088b6:	b921      	cbnz	r1, 80088c2 <_realloc_r+0x16>
 80088b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	4611      	mov	r1, r2
 80088be:	f7ff b82b 	b.w	8007918 <_malloc_r>
 80088c2:	b92a      	cbnz	r2, 80088d0 <_realloc_r+0x24>
 80088c4:	f7fe ffbc 	bl	8007840 <_free_r>
 80088c8:	4625      	mov	r5, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	f000 f81b 	bl	800890a <_malloc_usable_size_r>
 80088d4:	4284      	cmp	r4, r0
 80088d6:	4607      	mov	r7, r0
 80088d8:	d802      	bhi.n	80088e0 <_realloc_r+0x34>
 80088da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088de:	d812      	bhi.n	8008906 <_realloc_r+0x5a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7ff f818 	bl	8007918 <_malloc_r>
 80088e8:	4605      	mov	r5, r0
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d0ed      	beq.n	80088ca <_realloc_r+0x1e>
 80088ee:	42bc      	cmp	r4, r7
 80088f0:	4622      	mov	r2, r4
 80088f2:	4631      	mov	r1, r6
 80088f4:	bf28      	it	cs
 80088f6:	463a      	movcs	r2, r7
 80088f8:	f7ff ffbe 	bl	8008878 <memcpy>
 80088fc:	4631      	mov	r1, r6
 80088fe:	4640      	mov	r0, r8
 8008900:	f7fe ff9e 	bl	8007840 <_free_r>
 8008904:	e7e1      	b.n	80088ca <_realloc_r+0x1e>
 8008906:	4635      	mov	r5, r6
 8008908:	e7df      	b.n	80088ca <_realloc_r+0x1e>

0800890a <_malloc_usable_size_r>:
 800890a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800890e:	1f18      	subs	r0, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfbc      	itt	lt
 8008914:	580b      	ldrlt	r3, [r1, r0]
 8008916:	18c0      	addlt	r0, r0, r3
 8008918:	4770      	bx	lr
	...

0800891c <_init>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr

08008928 <_fini>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr
